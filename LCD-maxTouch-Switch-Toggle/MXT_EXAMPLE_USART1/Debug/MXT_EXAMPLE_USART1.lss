
MXT_EXAMPLE_USART1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009c74  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00409c74  00409c74  00019c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000af0  20400000  00409c7c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000004e8  20400af0  0040a76c  00020af0  2**2
                  ALLOC
  4 .stack        00002000  20400fd8  0040ac54  00020af0  2**0
                  ALLOC
  5 .heap         00000200  20402fd8  0040cc54  00020af0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020af0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020b1e  2**0
                  CONTENTS, READONLY
  8 .debug_info   00020d12  00000000  00000000  00020b77  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004638  00000000  00000000  00041889  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000987d  00000000  00000000  00045ec1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000ed0  00000000  00000000  0004f73e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001040  00000000  00000000  0005060e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00023d97  00000000  00000000  0005164e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001183e  00000000  00000000  000753e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000958cf  00000000  00000000  00086c23  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000036a4  00000000  00000000  0011c4f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	d8 2f 40 20 7d 1f 40 00 7b 1f 40 00 7b 1f 40 00     ./@ }.@.{.@.{.@.
  400010:	7b 1f 40 00 7b 1f 40 00 7b 1f 40 00 00 00 00 00     {.@.{.@.{.@.....
	...
  40002c:	7b 1f 40 00 7b 1f 40 00 00 00 00 00 7b 1f 40 00     {.@.{.@.....{.@.
  40003c:	7b 1f 40 00 7b 1f 40 00 7b 1f 40 00 7b 1f 40 00     {.@.{.@.{.@.{.@.
  40004c:	11 24 40 00 7b 1f 40 00 7b 1f 40 00 7b 1f 40 00     .$@.{.@.{.@.{.@.
  40005c:	7b 1f 40 00 7b 1f 40 00 00 00 00 00 75 16 40 00     {.@.{.@.....u.@.
  40006c:	89 16 40 00 9d 16 40 00 7b 1f 40 00 7b 1f 40 00     ..@...@.{.@.{.@.
  40007c:	7b 1f 40 00 b1 16 40 00 c5 16 40 00 7b 1f 40 00     {.@...@...@.{.@.
  40008c:	7b 1f 40 00 7b 1f 40 00 7b 1f 40 00 7b 1f 40 00     {.@.{.@.{.@.{.@.
  40009c:	7b 1f 40 00 7b 1f 40 00 7b 1f 40 00 7b 1f 40 00     {.@.{.@.{.@.{.@.
  4000ac:	7b 1f 40 00 7b 1f 40 00 7b 1f 40 00 7b 1f 40 00     {.@.{.@.{.@.{.@.
  4000bc:	7b 1f 40 00 7b 1f 40 00 7b 1f 40 00 7b 1f 40 00     {.@.{.@.{.@.{.@.
  4000cc:	7b 1f 40 00 7b 1f 40 00 7b 1f 40 00 7b 1f 40 00     {.@.{.@.{.@.{.@.
  4000dc:	7b 1f 40 00 7b 1f 40 00 7b 1f 40 00 7b 1f 40 00     {.@.{.@.{.@.{.@.
  4000ec:	7b 1f 40 00 7b 1f 40 00 7b 1f 40 00 7b 1f 40 00     {.@.{.@.{.@.{.@.
  4000fc:	7b 1f 40 00 7b 1f 40 00 7b 1f 40 00 7b 1f 40 00     {.@.{.@.{.@.{.@.
  40010c:	7b 1f 40 00 7b 1f 40 00 00 00 00 00 00 00 00 00     {.@.{.@.........
  40011c:	00 00 00 00 7b 1f 40 00 7b 1f 40 00 7b 1f 40 00     ....{.@.{.@.{.@.
  40012c:	7b 1f 40 00 7b 1f 40 00 7b 1f 40 00 7b 1f 40 00     {.@.{.@.{.@.{.@.
  40013c:	7b 1f 40 00 7b 1f 40 00 7b 1f 40 00 7b 1f 40 00     {.@.{.@.{.@.{.@.
  40014c:	7b 1f 40 00 7b 1f 40 00 7b 1f 40 00 7b 1f 40 00     {.@.{.@.{.@.{.@.
  40015c:	7b 1f 40 00 7b 1f 40 00 7b 1f 40 00                 {.@.{.@.{.@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400af0 	.word	0x20400af0
  400184:	00000000 	.word	0x00000000
  400188:	00409c7c 	.word	0x00409c7c

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00409c7c 	.word	0x00409c7c
  4001c8:	20400af4 	.word	0x20400af4
  4001cc:	00409c7c 	.word	0x00409c7c
  4001d0:	00000000 	.word	0x00000000

004001d4 <mxt_init_device>:
 * \param chgpin IOPORT pin instance attached to the maXTouch device's /CHG pin
 * \return Operation result status code
 */
status_code_t mxt_init_device(struct mxt_device *device,
		twihs_master_t interface, uint8_t chip_adr, uint32_t chgpin)
{
  4001d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4001d6:	b087      	sub	sp, #28
  4001d8:	4604      	mov	r4, r0
  4001da:	460e      	mov	r6, r1
  4001dc:	4617      	mov	r7, r2
	int8_t status;

	/* Set TWI interface, TWI address and CHG-pin of the maXTouch device. */
	device->interface = interface;
  4001de:	6081      	str	r1, [r0, #8]
	device->mxt_chip_adr = chip_adr;
  4001e0:	7302      	strb	r2, [r0, #12]
	device->chgpin = chgpin;
  4001e2:	6183      	str	r3, [r0, #24]
	device->handler = NULL;
  4001e4:	2500      	movs	r5, #0
  4001e6:	6105      	str	r5, [r0, #16]
			malloc(sizeof(struct mxt_info_object));
  4001e8:	2007      	movs	r0, #7
  4001ea:	4b9d      	ldr	r3, [pc, #628]	; (400460 <mxt_init_device+0x28c>)
  4001ec:	4798      	blx	r3
	device->info_object = (struct mxt_info_object *)
  4001ee:	6020      	str	r0, [r4, #0]
	twihs_package_t packet = {
  4001f0:	9501      	str	r5, [sp, #4]
  4001f2:	9505      	str	r5, [sp, #20]
  4001f4:	2302      	movs	r3, #2
  4001f6:	9302      	str	r3, [sp, #8]
  4001f8:	9003      	str	r0, [sp, #12]
  4001fa:	2307      	movs	r3, #7
  4001fc:	9304      	str	r3, [sp, #16]
  4001fe:	f88d 7014 	strb.w	r7, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  400202:	a901      	add	r1, sp, #4
  400204:	4630      	mov	r0, r6
  400206:	4b97      	ldr	r3, [pc, #604]	; (400464 <mxt_init_device+0x290>)
  400208:	4798      	blx	r3
  40020a:	1b40      	subs	r0, r0, r5
  40020c:	bf18      	it	ne
  40020e:	2001      	movne	r0, #1
  400210:	4240      	negs	r0, r0
	if ((status = mxt_read_id_block(device)) != STATUS_OK) {
  400212:	b108      	cbz	r0, 400218 <mxt_init_device+0x44>
	}

	device->multitouch_report_offset = status;

	return STATUS_OK;
}
  400214:	b007      	add	sp, #28
  400216:	bdf0      	pop	{r4, r5, r6, r7, pc}
			malloc(device->info_object->obj_count *
  400218:	6825      	ldr	r5, [r4, #0]
  40021a:	79a8      	ldrb	r0, [r5, #6]
  40021c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  400220:	0040      	lsls	r0, r0, #1
  400222:	4b8f      	ldr	r3, [pc, #572]	; (400460 <mxt_init_device+0x28c>)
  400224:	4798      	blx	r3
	device->object_list = (struct mxt_object *)
  400226:	6060      	str	r0, [r4, #4]
	twihs_package_t packet = {
  400228:	2300      	movs	r3, #0
  40022a:	9301      	str	r3, [sp, #4]
  40022c:	9304      	str	r3, [sp, #16]
  40022e:	9305      	str	r3, [sp, #20]
  400230:	2307      	movs	r3, #7
  400232:	f88d 3004 	strb.w	r3, [sp, #4]
  400236:	2302      	movs	r3, #2
  400238:	9302      	str	r3, [sp, #8]
  40023a:	9003      	str	r0, [sp, #12]
		.length       = device->info_object->obj_count *
  40023c:	79ab      	ldrb	r3, [r5, #6]
  40023e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  400242:	005b      	lsls	r3, r3, #1
	twihs_package_t packet = {
  400244:	9304      	str	r3, [sp, #16]
  400246:	7b23      	ldrb	r3, [r4, #12]
  400248:	f88d 3014 	strb.w	r3, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  40024c:	a901      	add	r1, sp, #4
  40024e:	68a0      	ldr	r0, [r4, #8]
  400250:	4b84      	ldr	r3, [pc, #528]	; (400464 <mxt_init_device+0x290>)
  400252:	4798      	blx	r3
  400254:	3000      	adds	r0, #0
  400256:	bf18      	it	ne
  400258:	2001      	movne	r0, #1
  40025a:	4240      	negs	r0, r0
	if (status != STATUS_OK) {
  40025c:	2800      	cmp	r0, #0
  40025e:	d1d9      	bne.n	400214 <mxt_init_device+0x40>
	uint8_t *id_pointer = (uint8_t *)device->info_object;
  400260:	6827      	ldr	r7, [r4, #0]
	uint8_t *objects_pointer = (uint8_t *)device->object_list;
  400262:	6860      	ldr	r0, [r4, #4]
			(device->info_object->obj_count *
  400264:	79bb      	ldrb	r3, [r7, #6]
  400266:	eb03 0643 	add.w	r6, r3, r3, lsl #1
  40026a:	0076      	lsls	r6, r6, #1
	crc_area_size = MXT_ID_BLOCK_SIZE +
  40026c:	3607      	adds	r6, #7
  40026e:	b2b6      	uxth	r6, r6
  400270:	463a      	mov	r2, r7
  400272:	3706      	adds	r7, #6
	uint32_t crc_tmp = 0;
  400274:	2100      	movs	r1, #0
		result ^= crcpoly;
  400276:	f8df c1f0 	ldr.w	ip, [pc, #496]	; 400468 <mxt_init_device+0x294>
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  40027a:	f892 e001 	ldrb.w	lr, [r2, #1]
  40027e:	7815      	ldrb	r5, [r2, #0]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  400280:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
  400284:	ea85 0141 	eor.w	r1, r5, r1, lsl #1
	if (result & 0x1000000) {
  400288:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
		result ^= crcpoly;
  40028c:	bf18      	it	ne
  40028e:	ea81 010c 	eorne.w	r1, r1, ip
  400292:	3202      	adds	r2, #2
	for (i = 0; i < MXT_ID_BLOCK_SIZE - 1; i += 2) {
  400294:	42ba      	cmp	r2, r7
  400296:	d1f0      	bne.n	40027a <mxt_init_device+0xa6>
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  400298:	7802      	ldrb	r2, [r0, #0]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  40029a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  40029e:	ea83 0241 	eor.w	r2, r3, r1, lsl #1
	if (result & 0x1000000) {
  4002a2:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
  4002a6:	d003      	beq.n	4002b0 <mxt_init_device+0xdc>
		result ^= crcpoly;
  4002a8:	f482 0200 	eor.w	r2, r2, #8388608	; 0x800000
  4002ac:	f082 021b 	eor.w	r2, r2, #27
	for (i = 1; i < (crc_area_size - MXT_ID_BLOCK_SIZE - 1); i += 2) {
  4002b0:	f1a6 0708 	sub.w	r7, r6, #8
  4002b4:	2f01      	cmp	r7, #1
  4002b6:	dd12      	ble.n	4002de <mxt_init_device+0x10a>
  4002b8:	2301      	movs	r3, #1
		result ^= crcpoly;
  4002ba:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 400468 <mxt_init_device+0x294>
		crc_tmp = mxt_crc_24(crc_tmp, objects_pointer[i],
  4002be:	18c1      	adds	r1, r0, r3
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  4002c0:	784d      	ldrb	r5, [r1, #1]
  4002c2:	5cc1      	ldrb	r1, [r0, r3]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  4002c4:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  4002c8:	ea81 0242 	eor.w	r2, r1, r2, lsl #1
	if (result & 0x1000000) {
  4002cc:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		result ^= crcpoly;
  4002d0:	bf18      	it	ne
  4002d2:	ea82 020e 	eorne.w	r2, r2, lr
	for (i = 1; i < (crc_area_size - MXT_ID_BLOCK_SIZE - 1); i += 2) {
  4002d6:	3302      	adds	r3, #2
  4002d8:	b29b      	uxth	r3, r3
  4002da:	42bb      	cmp	r3, r7
  4002dc:	dbef      	blt.n	4002be <mxt_init_device+0xea>
	crc_tmp = mxt_crc_24(crc_tmp,
  4002de:	4430      	add	r0, r6
	result = ((crc << 1u) ^ (uint32_t)data_word);
  4002e0:	f810 3c08 	ldrb.w	r3, [r0, #-8]
  4002e4:	ea83 0242 	eor.w	r2, r3, r2, lsl #1
	if (result & 0x1000000) {
  4002e8:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
  4002ec:	d003      	beq.n	4002f6 <mxt_init_device+0x122>
		result ^= crcpoly;
  4002ee:	f482 0200 	eor.w	r2, r2, #8388608	; 0x800000
  4002f2:	f082 021b 	eor.w	r2, r2, #27
	*crc = (crc_tmp & 0x00FFFFFF);
  4002f6:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	twihs_package_t packet = {
  4002fa:	2300      	movs	r3, #0
  4002fc:	9301      	str	r3, [sp, #4]
  4002fe:	9305      	str	r3, [sp, #20]
  400300:	f88d 6004 	strb.w	r6, [sp, #4]
  400304:	0a36      	lsrs	r6, r6, #8
  400306:	f88d 6005 	strb.w	r6, [sp, #5]
  40030a:	2302      	movs	r3, #2
  40030c:	9302      	str	r3, [sp, #8]
  40030e:	f8cd d00c 	str.w	sp, [sp, #12]
  400312:	2303      	movs	r3, #3
  400314:	9304      	str	r3, [sp, #16]
  400316:	7b23      	ldrb	r3, [r4, #12]
  400318:	f88d 3014 	strb.w	r3, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  40031c:	a901      	add	r1, sp, #4
  40031e:	68a0      	ldr	r0, [r4, #8]
  400320:	4b50      	ldr	r3, [pc, #320]	; (400464 <mxt_init_device+0x290>)
  400322:	4798      	blx	r3
  400324:	b328      	cbz	r0, 400372 <mxt_init_device+0x19e>
		return ERR_IO_ERROR;
  400326:	f04f 33ff 	mov.w	r3, #4294967295
	if (crc_calculated != crc_read) {
  40032a:	42ab      	cmp	r3, r5
  40032c:	f040 808b 	bne.w	400446 <mxt_init_device+0x272>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  400330:	6825      	ldr	r5, [r4, #0]
  400332:	79a8      	ldrb	r0, [r5, #6]
  400334:	b198      	cbz	r0, 40035e <mxt_init_device+0x18a>
  400336:	2300      	movs	r3, #0
  400338:	3301      	adds	r3, #1
  40033a:	b2da      	uxtb	r2, r3
  40033c:	4290      	cmp	r0, r2
  40033e:	d8fb      	bhi.n	400338 <mxt_init_device+0x164>
		tot_report_ids += (device->object_list[i].num_report_ids);
  400340:	6862      	ldr	r2, [r4, #4]
  400342:	1e43      	subs	r3, r0, #1
  400344:	b2db      	uxtb	r3, r3
  400346:	3301      	adds	r3, #1
  400348:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40034c:	eb02 0143 	add.w	r1, r2, r3, lsl #1
  400350:	2000      	movs	r0, #0
  400352:	7953      	ldrb	r3, [r2, #5]
  400354:	4418      	add	r0, r3
  400356:	b2c0      	uxtb	r0, r0
  400358:	3206      	adds	r2, #6
	for (i = 0; i < device->info_object->obj_count; ++i) {
  40035a:	4291      	cmp	r1, r2
  40035c:	d1f9      	bne.n	400352 <mxt_init_device+0x17e>
			malloc(sizeof(struct mxt_report_id_map) *
  40035e:	0040      	lsls	r0, r0, #1
  400360:	4b3f      	ldr	r3, [pc, #252]	; (400460 <mxt_init_device+0x28c>)
  400362:	4798      	blx	r3
	device->report_id_map = (struct mxt_report_id_map *)
  400364:	6160      	str	r0, [r4, #20]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  400366:	79ab      	ldrb	r3, [r5, #6]
  400368:	b173      	cbz	r3, 400388 <mxt_init_device+0x1b4>
  40036a:	2700      	movs	r7, #0
  40036c:	2601      	movs	r6, #1
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  40036e:	46be      	mov	lr, r7
  400370:	e037      	b.n	4003e2 <mxt_init_device+0x20e>
		return ((uint32_t)crc[2] << 16) | ((uint16_t)crc[1] << 8) | crc[0];
  400372:	f89d 2002 	ldrb.w	r2, [sp, #2]
  400376:	f89d 3000 	ldrb.w	r3, [sp]
  40037a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40037e:	f89d 2001 	ldrb.w	r2, [sp, #1]
  400382:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400386:	e7d0      	b.n	40032a <mxt_init_device+0x156>
		return ERR_BAD_DATA;
  400388:	f06f 0003 	mvn.w	r0, #3
  40038c:	e742      	b.n	400214 <mxt_init_device+0x40>
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  40038e:	3001      	adds	r0, #1
  400390:	b2c0      	uxtb	r0, r0
  400392:	6862      	ldr	r2, [r4, #4]
  400394:	1953      	adds	r3, r2, r5
  400396:	7919      	ldrb	r1, [r3, #4]
  400398:	4281      	cmp	r1, r0
  40039a:	d31c      	bcc.n	4003d6 <mxt_init_device+0x202>
			if (device->object_list[i].num_report_ids != 0) {
  40039c:	795b      	ldrb	r3, [r3, #5]
  40039e:	2b00      	cmp	r3, #0
  4003a0:	d0f5      	beq.n	40038e <mxt_init_device+0x1ba>
				for (k = 0; k < device->object_list[i].num_report_ids; ++k) {
  4003a2:	6862      	ldr	r2, [r4, #4]
  4003a4:	442a      	add	r2, r5
  4003a6:	7953      	ldrb	r3, [r2, #5]
  4003a8:	2b00      	cmp	r3, #0
  4003aa:	d0f0      	beq.n	40038e <mxt_init_device+0x1ba>
  4003ac:	4633      	mov	r3, r6
							device->object_list[i].type;
  4003ae:	7811      	ldrb	r1, [r2, #0]
					device->report_id_map[id_index].object_type =
  4003b0:	6962      	ldr	r2, [r4, #20]
  4003b2:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
					device->report_id_map[id_index].instance = j;
  4003b6:	6962      	ldr	r2, [r4, #20]
  4003b8:	eb02 0243 	add.w	r2, r2, r3, lsl #1
  4003bc:	7050      	strb	r0, [r2, #1]
					id_index++;
  4003be:	3301      	adds	r3, #1
  4003c0:	b2db      	uxtb	r3, r3
				for (k = 0; k < device->object_list[i].num_report_ids; ++k) {
  4003c2:	6862      	ldr	r2, [r4, #4]
  4003c4:	442a      	add	r2, r5
  4003c6:	1b99      	subs	r1, r3, r6
  4003c8:	f892 c005 	ldrb.w	ip, [r2, #5]
  4003cc:	b2c9      	uxtb	r1, r1
  4003ce:	458c      	cmp	ip, r1
  4003d0:	d8ed      	bhi.n	4003ae <mxt_init_device+0x1da>
					id_index++;
  4003d2:	461e      	mov	r6, r3
  4003d4:	e7db      	b.n	40038e <mxt_init_device+0x1ba>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4003d6:	3701      	adds	r7, #1
  4003d8:	b2ff      	uxtb	r7, r7
  4003da:	6823      	ldr	r3, [r4, #0]
  4003dc:	799b      	ldrb	r3, [r3, #6]
  4003de:	429f      	cmp	r7, r3
  4003e0:	d207      	bcs.n	4003f2 <mxt_init_device+0x21e>
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  4003e2:	eb07 0347 	add.w	r3, r7, r7, lsl #1
  4003e6:	005a      	lsls	r2, r3, #1
  4003e8:	4615      	mov	r5, r2
  4003ea:	6863      	ldr	r3, [r4, #4]
  4003ec:	4413      	add	r3, r2
  4003ee:	4670      	mov	r0, lr
  4003f0:	e7d4      	b.n	40039c <mxt_init_device+0x1c8>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4003f2:	b35b      	cbz	r3, 40044c <mxt_init_device+0x278>
  4003f4:	4610      	mov	r0, r2
  4003f6:	3b01      	subs	r3, #1
  4003f8:	b2db      	uxtb	r3, r3
  4003fa:	3301      	adds	r3, #1
  4003fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  400400:	eb02 0243 	add.w	r2, r2, r3, lsl #1
  400404:	2100      	movs	r1, #0
		tot_report_ids += (device->object_list[i].num_report_ids);
  400406:	7943      	ldrb	r3, [r0, #5]
  400408:	4419      	add	r1, r3
  40040a:	b2c9      	uxtb	r1, r1
  40040c:	3006      	adds	r0, #6
	for (i = 0; i < device->info_object->obj_count; ++i) {
  40040e:	4282      	cmp	r2, r0
  400410:	d1f9      	bne.n	400406 <mxt_init_device+0x232>
	for (i = 0; i < tot_rpt_id; ++i) {
  400412:	b1f1      	cbz	r1, 400452 <mxt_init_device+0x27e>
		if (device->report_id_map[i].object_type == object_type) {
  400414:	6962      	ldr	r2, [r4, #20]
  400416:	7813      	ldrb	r3, [r2, #0]
  400418:	2b09      	cmp	r3, #9
  40041a:	d00f      	beq.n	40043c <mxt_init_device+0x268>
  40041c:	2300      	movs	r3, #0
	for (i = 0; i < tot_rpt_id; ++i) {
  40041e:	3301      	adds	r3, #1
  400420:	b2db      	uxtb	r3, r3
  400422:	428b      	cmp	r3, r1
  400424:	d00c      	beq.n	400440 <mxt_init_device+0x26c>
		if (device->report_id_map[i].object_type == object_type) {
  400426:	f812 0f02 	ldrb.w	r0, [r2, #2]!
  40042a:	2809      	cmp	r0, #9
  40042c:	d1f7      	bne.n	40041e <mxt_init_device+0x24a>
			return i;
  40042e:	b25b      	sxtb	r3, r3
	if (status == -1) {
  400430:	f1b3 3fff 	cmp.w	r3, #4294967295
  400434:	d010      	beq.n	400458 <mxt_init_device+0x284>
	device->multitouch_report_offset = status;
  400436:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
  400438:	2000      	movs	r0, #0
  40043a:	e6eb      	b.n	400214 <mxt_init_device+0x40>
		if (device->report_id_map[i].object_type == object_type) {
  40043c:	2300      	movs	r3, #0
  40043e:	e7f6      	b.n	40042e <mxt_init_device+0x25a>
		return ERR_BAD_DATA;
  400440:	f06f 0003 	mvn.w	r0, #3
  400444:	e6e6      	b.n	400214 <mxt_init_device+0x40>
		return ERR_BAD_DATA;
  400446:	f06f 0003 	mvn.w	r0, #3
  40044a:	e6e3      	b.n	400214 <mxt_init_device+0x40>
		return ERR_BAD_DATA;
  40044c:	f06f 0003 	mvn.w	r0, #3
  400450:	e6e0      	b.n	400214 <mxt_init_device+0x40>
  400452:	f06f 0003 	mvn.w	r0, #3
  400456:	e6dd      	b.n	400214 <mxt_init_device+0x40>
  400458:	f06f 0003 	mvn.w	r0, #3
  40045c:	e6da      	b.n	400214 <mxt_init_device+0x40>
  40045e:	bf00      	nop
  400460:	00402c81 	.word	0x00402c81
  400464:	00401cf9 	.word	0x00401cf9
  400468:	0080001b 	.word	0x0080001b

0040046c <mxt_get_object_address>:
uint16_t mxt_get_object_address(struct mxt_device *device, uint8_t object_id,
		uint8_t instance)
{
	uint8_t i;

	for (i = 0; i < device->info_object->obj_count; i++) {
  40046c:	6803      	ldr	r3, [r0, #0]
  40046e:	799a      	ldrb	r2, [r3, #6]
  400470:	b1d2      	cbz	r2, 4004a8 <mxt_get_object_address+0x3c>
{
  400472:	b410      	push	{r4}
		if (object_id == device->object_list[i].type) {
  400474:	6844      	ldr	r4, [r0, #4]
  400476:	7823      	ldrb	r3, [r4, #0]
  400478:	428b      	cmp	r3, r1
  40047a:	d00e      	beq.n	40049a <mxt_get_object_address+0x2e>
  40047c:	1da3      	adds	r3, r4, #6
  40047e:	3a01      	subs	r2, #1
  400480:	b2d2      	uxtb	r2, r2
  400482:	3201      	adds	r2, #1
  400484:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  400488:	eb04 0242 	add.w	r2, r4, r2, lsl #1
	for (i = 0; i < device->info_object->obj_count; i++) {
  40048c:	4293      	cmp	r3, r2
  40048e:	d009      	beq.n	4004a4 <mxt_get_object_address+0x38>
		if (object_id == device->object_list[i].type) {
  400490:	461c      	mov	r4, r3
  400492:	f813 0b06 	ldrb.w	r0, [r3], #6
  400496:	4288      	cmp	r0, r1
  400498:	d1f8      	bne.n	40048c <mxt_get_object_address+0x20>
			return device->object_list[i].start_address;
  40049a:	f8b4 0001 	ldrh.w	r0, [r4, #1]
		}
	}

	return 0;
}
  40049e:	f85d 4b04 	ldr.w	r4, [sp], #4
  4004a2:	4770      	bx	lr
	return 0;
  4004a4:	2000      	movs	r0, #0
  4004a6:	e7fa      	b.n	40049e <mxt_get_object_address+0x32>
  4004a8:	2000      	movs	r0, #0
  4004aa:	4770      	bx	lr

004004ac <mxt_write_config_object>:
 * \param *obj_data Pointer to memory buffer containing object data
 * \result Operation result status code
 */
status_code_t mxt_write_config_object(struct mxt_device *device,
		mxt_memory_adr memory_adr, void *obj_data)
{
  4004ac:	b530      	push	{r4, r5, lr}
  4004ae:	b087      	sub	sp, #28
	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  4004b0:	2300      	movs	r3, #0
  4004b2:	9301      	str	r3, [sp, #4]
  4004b4:	9304      	str	r3, [sp, #16]
  4004b6:	9305      	str	r3, [sp, #20]
  4004b8:	f88d 1004 	strb.w	r1, [sp, #4]
  4004bc:	0a0b      	lsrs	r3, r1, #8
  4004be:	f88d 3005 	strb.w	r3, [sp, #5]
  4004c2:	2302      	movs	r3, #2
  4004c4:	9302      	str	r3, [sp, #8]
  4004c6:	9203      	str	r2, [sp, #12]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4004c8:	6803      	ldr	r3, [r0, #0]
  4004ca:	799a      	ldrb	r2, [r3, #6]
  4004cc:	b1ba      	cbz	r2, 4004fe <mxt_write_config_object+0x52>
		if (device->object_list[i].start_address == mem_adr) {
  4004ce:	6844      	ldr	r4, [r0, #4]
  4004d0:	f8b4 3001 	ldrh.w	r3, [r4, #1]
  4004d4:	428b      	cmp	r3, r1
  4004d6:	d00f      	beq.n	4004f8 <mxt_write_config_object+0x4c>
  4004d8:	1da3      	adds	r3, r4, #6
  4004da:	3a01      	subs	r2, #1
  4004dc:	b2d2      	uxtb	r2, r2
  4004de:	3201      	adds	r2, #1
  4004e0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  4004e4:	eb04 0242 	add.w	r2, r4, r2, lsl #1
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4004e8:	4293      	cmp	r3, r2
  4004ea:	d016      	beq.n	40051a <mxt_write_config_object+0x6e>
		if (device->object_list[i].start_address == mem_adr) {
  4004ec:	461c      	mov	r4, r3
  4004ee:	3306      	adds	r3, #6
  4004f0:	f8b4 5001 	ldrh.w	r5, [r4, #1]
  4004f4:	428d      	cmp	r5, r1
  4004f6:	d1f7      	bne.n	4004e8 <mxt_write_config_object+0x3c>
			return (device->object_list[i].size + 1);
  4004f8:	78e2      	ldrb	r2, [r4, #3]
  4004fa:	3201      	adds	r2, #1
  4004fc:	b2d2      	uxtb	r2, r2
		.addr[0]      = memory_adr,
		.addr[1]      = memory_adr >> 8,
		.addr_length  = sizeof(mxt_memory_adr),
		.chip         = device->mxt_chip_adr,
		.buffer       = obj_data,
		.length       = mxt_get_object_size(device, memory_adr)
  4004fe:	9204      	str	r2, [sp, #16]
	twihs_package_t packet = {
  400500:	7b03      	ldrb	r3, [r0, #12]
  400502:	f88d 3014 	strb.w	r3, [sp, #20]
	};

	if (twihs_master_write(device->interface, &packet) != STATUS_OK) {
  400506:	a901      	add	r1, sp, #4
  400508:	6880      	ldr	r0, [r0, #8]
  40050a:	4b05      	ldr	r3, [pc, #20]	; (400520 <mxt_write_config_object+0x74>)
  40050c:	4798      	blx	r3
  40050e:	3000      	adds	r0, #0
  400510:	bf18      	it	ne
  400512:	2001      	movne	r0, #1
		return ERR_IO_ERROR;
	} else {
		return STATUS_OK;
	}

}
  400514:	4240      	negs	r0, r0
  400516:	b007      	add	sp, #28
  400518:	bd30      	pop	{r4, r5, pc}
	return 0;
  40051a:	2200      	movs	r2, #0
  40051c:	e7ef      	b.n	4004fe <mxt_write_config_object+0x52>
  40051e:	bf00      	nop
  400520:	00401da5 	.word	0x00401da5

00400524 <mxt_write_config_reg>:
 * \param value Value to be written to register
 * \result Operation result status code
 */
status_code_t mxt_write_config_reg(struct mxt_device *device,
		mxt_memory_adr memory_adr, uint8_t value)
{
  400524:	b500      	push	{lr}
  400526:	b089      	sub	sp, #36	; 0x24
  400528:	f88d 2007 	strb.w	r2, [sp, #7]
	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  40052c:	2300      	movs	r3, #0
  40052e:	9303      	str	r3, [sp, #12]
  400530:	9307      	str	r3, [sp, #28]
  400532:	f88d 100c 	strb.w	r1, [sp, #12]
  400536:	0a09      	lsrs	r1, r1, #8
  400538:	f88d 100d 	strb.w	r1, [sp, #13]
  40053c:	2302      	movs	r3, #2
  40053e:	9304      	str	r3, [sp, #16]
  400540:	f10d 0307 	add.w	r3, sp, #7
  400544:	9305      	str	r3, [sp, #20]
  400546:	2301      	movs	r3, #1
  400548:	9306      	str	r3, [sp, #24]
  40054a:	7b03      	ldrb	r3, [r0, #12]
  40054c:	f88d 301c 	strb.w	r3, [sp, #28]
		.chip         = device->mxt_chip_adr,
		.buffer       = &value,
		.length       = sizeof(value)
	};

	if (twihs_master_write(device->interface, &packet) != STATUS_OK) {
  400550:	a903      	add	r1, sp, #12
  400552:	6880      	ldr	r0, [r0, #8]
  400554:	4b04      	ldr	r3, [pc, #16]	; (400568 <mxt_write_config_reg+0x44>)
  400556:	4798      	blx	r3
  400558:	3000      	adds	r0, #0
  40055a:	bf18      	it	ne
  40055c:	2001      	movne	r0, #1
		return ERR_IO_ERROR;
	} else {
		return STATUS_OK;
	}
}
  40055e:	4240      	negs	r0, r0
  400560:	b009      	add	sp, #36	; 0x24
  400562:	f85d fb04 	ldr.w	pc, [sp], #4
  400566:	bf00      	nop
  400568:	00401da5 	.word	0x00401da5

0040056c <mxt_is_message_pending>:
 * \param *device Pointer to mxt_device instance
 * \return Return /CHG pin status
 */
bool mxt_is_message_pending(struct mxt_device *device)
{
	if (ioport_get_pin_level(device->chgpin) == false) {
  40056c:	6982      	ldr	r2, [r0, #24]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40056e:	4b07      	ldr	r3, [pc, #28]	; (40058c <mxt_is_message_pending+0x20>)
  400570:	eb03 1352 	add.w	r3, r3, r2, lsr #5
  400574:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  400576:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
	return 1U << (pin & 0x1F);
  400578:	f002 021f 	and.w	r2, r2, #31
  40057c:	2301      	movs	r3, #1
  40057e:	fa03 f202 	lsl.w	r2, r3, r2
  400582:	420a      	tst	r2, r1
		return true;
	} else {
		return false;
	}
}
  400584:	bf0c      	ite	eq
  400586:	4618      	moveq	r0, r3
  400588:	2000      	movne	r0, #0
  40058a:	4770      	bx	lr
  40058c:	00200707 	.word	0x00200707

00400590 <mxt_read_message>:
 * \param *message Pointer to mxt_message instance
 * \return Operation result status code
 */
status_code_t mxt_read_message(struct mxt_device *device,
		struct mxt_conf_messageprocessor_t5 *message)
{
  400590:	b530      	push	{r4, r5, lr}
  400592:	b087      	sub	sp, #28
  400594:	4604      	mov	r4, r0
  400596:	460d      	mov	r5, r1
	uint16_t obj_adr = mxt_get_object_address(device,
  400598:	2200      	movs	r2, #0
  40059a:	2105      	movs	r1, #5
  40059c:	4b0d      	ldr	r3, [pc, #52]	; (4005d4 <mxt_read_message+0x44>)
  40059e:	4798      	blx	r3
			MXT_GEN_MESSAGEPROCESSOR_T5, 0);

	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  4005a0:	2300      	movs	r3, #0
  4005a2:	9301      	str	r3, [sp, #4]
  4005a4:	9305      	str	r3, [sp, #20]
  4005a6:	f88d 0004 	strb.w	r0, [sp, #4]
  4005aa:	0a00      	lsrs	r0, r0, #8
  4005ac:	f88d 0005 	strb.w	r0, [sp, #5]
  4005b0:	2302      	movs	r3, #2
  4005b2:	9302      	str	r3, [sp, #8]
  4005b4:	9503      	str	r5, [sp, #12]
  4005b6:	2309      	movs	r3, #9
  4005b8:	9304      	str	r3, [sp, #16]
  4005ba:	7b23      	ldrb	r3, [r4, #12]
  4005bc:	f88d 3014 	strb.w	r3, [sp, #20]
		.buffer       = message,
		.length       = MXT_TWI_MSG_SIZE_T5
	};

	/* Read information from the slave */
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  4005c0:	a901      	add	r1, sp, #4
  4005c2:	68a0      	ldr	r0, [r4, #8]
  4005c4:	4b04      	ldr	r3, [pc, #16]	; (4005d8 <mxt_read_message+0x48>)
  4005c6:	4798      	blx	r3
  4005c8:	3000      	adds	r0, #0
  4005ca:	bf18      	it	ne
  4005cc:	2001      	movne	r0, #1
		return mxt_validate_message(&packet);
#else
		return STATUS_OK;
#endif
	}
}
  4005ce:	4240      	negs	r0, r0
  4005d0:	b007      	add	sp, #28
  4005d2:	bd30      	pop	{r4, r5, pc}
  4005d4:	0040046d 	.word	0x0040046d
  4005d8:	00401cf9 	.word	0x00401cf9

004005dc <mxt_read_touch_event>:
 * \param *touch_event Pointer to mxt_touch_event instance
 * \return Operation result status code
 */
status_code_t mxt_read_touch_event(struct mxt_device *device,
		struct mxt_touch_event *touch_event)
{
  4005dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4005de:	b085      	sub	sp, #20
  4005e0:	4604      	mov	r4, r0
  4005e2:	460e      	mov	r6, r1
	uint8_t obj_type, status;
	struct mxt_conf_messageprocessor_t5 message;

	while (mxt_is_message_pending(device)) {
  4005e4:	4d17      	ldr	r5, [pc, #92]	; (400644 <mxt_read_touch_event+0x68>)
		if((status = mxt_read_message(device, &message)) != STATUS_OK) {
  4005e6:	4f18      	ldr	r7, [pc, #96]	; (400648 <mxt_read_touch_event+0x6c>)
	while (mxt_is_message_pending(device)) {
  4005e8:	4620      	mov	r0, r4
  4005ea:	47a8      	blx	r5
  4005ec:	b328      	cbz	r0, 40063a <mxt_read_touch_event+0x5e>
		if((status = mxt_read_message(device, &message)) != STATUS_OK) {
  4005ee:	a901      	add	r1, sp, #4
  4005f0:	4620      	mov	r0, r4
  4005f2:	47b8      	blx	r7
  4005f4:	4603      	mov	r3, r0
  4005f6:	bb10      	cbnz	r0, 40063e <mxt_read_touch_event+0x62>
 * \return Operation
 */
enum mxt_object_type mxt_get_object_type(struct mxt_device *device,
		struct mxt_conf_messageprocessor_t5 *message)
{
	return (enum mxt_object_type)(device->report_id_map[message->reportid].object_type);
  4005f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
  4005fc:	6962      	ldr	r2, [r4, #20]
		if (obj_type == MXT_TOUCH_MULTITOUCHSCREEN_T9) {
  4005fe:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
  400602:	2a09      	cmp	r2, #9
  400604:	d1f0      	bne.n	4005e8 <mxt_read_touch_event+0xc>
			touch_event->id = (message.reportid -
  400606:	7f22      	ldrb	r2, [r4, #28]
  400608:	1a9b      	subs	r3, r3, r2
  40060a:	7033      	strb	r3, [r6, #0]
			touch_event->status = message.message[0];
  40060c:	f89d 3005 	ldrb.w	r3, [sp, #5]
  400610:	7073      	strb	r3, [r6, #1]
					((message.message[3] & 0xf0) >> 4);
  400612:	f89d 3008 	ldrb.w	r3, [sp, #8]
			touch_event->x = (message.message[1] << 4) |
  400616:	f89d 1006 	ldrb.w	r1, [sp, #6]
					((message.message[3] & 0xf0) >> 4);
  40061a:	091a      	lsrs	r2, r3, #4
			touch_event->x = (message.message[1] << 4) |
  40061c:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
  400620:	8072      	strh	r2, [r6, #2]
			touch_event->y = (message.message[2] << 4) |
  400622:	f89d 2007 	ldrb.w	r2, [sp, #7]
					(message.message[3] & 0x0f);
  400626:	f003 030f 	and.w	r3, r3, #15
			touch_event->y = (message.message[2] << 4) |
  40062a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  40062e:	80b3      	strh	r3, [r6, #4]
			touch_event->size = message.message[4];
  400630:	f89d 3009 	ldrb.w	r3, [sp, #9]
  400634:	71b3      	strb	r3, [r6, #6]
			return STATUS_OK;
  400636:	2300      	movs	r3, #0
  400638:	e001      	b.n	40063e <mxt_read_touch_event+0x62>
	return ERR_BAD_DATA;
  40063a:	f06f 0303 	mvn.w	r3, #3
}
  40063e:	4618      	mov	r0, r3
  400640:	b005      	add	sp, #20
  400642:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400644:	0040056d 	.word	0x0040056d
  400648:	00400591 	.word	0x00400591

0040064c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40064c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40064e:	4810      	ldr	r0, [pc, #64]	; (400690 <sysclk_init+0x44>)
  400650:	4b10      	ldr	r3, [pc, #64]	; (400694 <sysclk_init+0x48>)
  400652:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400654:	213e      	movs	r1, #62	; 0x3e
  400656:	2000      	movs	r0, #0
  400658:	4b0f      	ldr	r3, [pc, #60]	; (400698 <sysclk_init+0x4c>)
  40065a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40065c:	4c0f      	ldr	r4, [pc, #60]	; (40069c <sysclk_init+0x50>)
  40065e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400660:	2800      	cmp	r0, #0
  400662:	d0fc      	beq.n	40065e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400664:	4b0e      	ldr	r3, [pc, #56]	; (4006a0 <sysclk_init+0x54>)
  400666:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400668:	4a0e      	ldr	r2, [pc, #56]	; (4006a4 <sysclk_init+0x58>)
  40066a:	4b0f      	ldr	r3, [pc, #60]	; (4006a8 <sysclk_init+0x5c>)
  40066c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  40066e:	4c0f      	ldr	r4, [pc, #60]	; (4006ac <sysclk_init+0x60>)
  400670:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400672:	2800      	cmp	r0, #0
  400674:	d0fc      	beq.n	400670 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400676:	2002      	movs	r0, #2
  400678:	4b0d      	ldr	r3, [pc, #52]	; (4006b0 <sysclk_init+0x64>)
  40067a:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40067c:	2000      	movs	r0, #0
  40067e:	4b0d      	ldr	r3, [pc, #52]	; (4006b4 <sysclk_init+0x68>)
  400680:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400682:	4b0d      	ldr	r3, [pc, #52]	; (4006b8 <sysclk_init+0x6c>)
  400684:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400686:	480d      	ldr	r0, [pc, #52]	; (4006bc <sysclk_init+0x70>)
  400688:	4b02      	ldr	r3, [pc, #8]	; (400694 <sysclk_init+0x48>)
  40068a:	4798      	blx	r3
  40068c:	bd10      	pop	{r4, pc}
  40068e:	bf00      	nop
  400690:	07270e00 	.word	0x07270e00
  400694:	00402151 	.word	0x00402151
  400698:	00401775 	.word	0x00401775
  40069c:	004017c9 	.word	0x004017c9
  4006a0:	004017d9 	.word	0x004017d9
  4006a4:	20183f01 	.word	0x20183f01
  4006a8:	400e0600 	.word	0x400e0600
  4006ac:	004017e9 	.word	0x004017e9
  4006b0:	004016d9 	.word	0x004016d9
  4006b4:	00401711 	.word	0x00401711
  4006b8:	00402045 	.word	0x00402045
  4006bc:	11e1a300 	.word	0x11e1a300

004006c0 <usart_serial_write_packet>:
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
	while (len) {
  4006c0:	2a00      	cmp	r2, #0
  4006c2:	d054      	beq.n	40076e <usart_serial_write_packet+0xae>
{
  4006c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4006c8:	4692      	mov	sl, r2
  4006ca:	4606      	mov	r6, r0
  4006cc:	460f      	mov	r7, r1
  4006ce:	448a      	add	sl, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4006d0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 40078c <usart_serial_write_packet+0xcc>
		while (uart_write((Uart*)p_usart, c)!=0);
  4006d4:	4d27      	ldr	r5, [pc, #156]	; (400774 <usart_serial_write_packet+0xb4>)
		return 1;
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4006d6:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 400790 <usart_serial_write_packet+0xd0>
  4006da:	e006      	b.n	4006ea <usart_serial_write_packet+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  4006dc:	4621      	mov	r1, r4
  4006de:	4640      	mov	r0, r8
  4006e0:	47a8      	blx	r5
  4006e2:	2800      	cmp	r0, #0
  4006e4:	d1fa      	bne.n	4006dc <usart_serial_write_packet+0x1c>
	while (len) {
  4006e6:	45ba      	cmp	sl, r7
  4006e8:	d03e      	beq.n	400768 <usart_serial_write_packet+0xa8>
		usart_serial_putchar(usart, *data);
  4006ea:	f817 4b01 	ldrb.w	r4, [r7], #1
	if (UART0 == (Uart*)p_usart) {
  4006ee:	4546      	cmp	r6, r8
  4006f0:	d0f4      	beq.n	4006dc <usart_serial_write_packet+0x1c>
	if (UART1 == (Uart*)p_usart) {
  4006f2:	454e      	cmp	r6, r9
  4006f4:	d016      	beq.n	400724 <usart_serial_write_packet+0x64>
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4006f6:	4b20      	ldr	r3, [pc, #128]	; (400778 <usart_serial_write_packet+0xb8>)
  4006f8:	429e      	cmp	r6, r3
  4006fa:	d019      	beq.n	400730 <usart_serial_write_packet+0x70>
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4006fc:	4b1f      	ldr	r3, [pc, #124]	; (40077c <usart_serial_write_packet+0xbc>)
  4006fe:	429e      	cmp	r6, r3
  400700:	d01c      	beq.n	40073c <usart_serial_write_packet+0x7c>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400702:	4b1f      	ldr	r3, [pc, #124]	; (400780 <usart_serial_write_packet+0xc0>)
  400704:	429e      	cmp	r6, r3
  400706:	d01f      	beq.n	400748 <usart_serial_write_packet+0x88>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400708:	4b1e      	ldr	r3, [pc, #120]	; (400784 <usart_serial_write_packet+0xc4>)
  40070a:	429e      	cmp	r6, r3
  40070c:	d024      	beq.n	400758 <usart_serial_write_packet+0x98>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  40070e:	4b1e      	ldr	r3, [pc, #120]	; (400788 <usart_serial_write_packet+0xc8>)
  400710:	429e      	cmp	r6, r3
  400712:	d1e8      	bne.n	4006e6 <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  400714:	f8df b07c 	ldr.w	fp, [pc, #124]	; 400794 <usart_serial_write_packet+0xd4>
  400718:	4621      	mov	r1, r4
  40071a:	481b      	ldr	r0, [pc, #108]	; (400788 <usart_serial_write_packet+0xc8>)
  40071c:	47d8      	blx	fp
  40071e:	2800      	cmp	r0, #0
  400720:	d1fa      	bne.n	400718 <usart_serial_write_packet+0x58>
  400722:	e7e0      	b.n	4006e6 <usart_serial_write_packet+0x26>
		while (uart_write((Uart*)p_usart, c)!=0);
  400724:	4621      	mov	r1, r4
  400726:	4648      	mov	r0, r9
  400728:	47a8      	blx	r5
  40072a:	2800      	cmp	r0, #0
  40072c:	d1fa      	bne.n	400724 <usart_serial_write_packet+0x64>
  40072e:	e7da      	b.n	4006e6 <usart_serial_write_packet+0x26>
		while (uart_write((Uart*)p_usart, c)!=0);
  400730:	4621      	mov	r1, r4
  400732:	4811      	ldr	r0, [pc, #68]	; (400778 <usart_serial_write_packet+0xb8>)
  400734:	47a8      	blx	r5
  400736:	2800      	cmp	r0, #0
  400738:	d1fa      	bne.n	400730 <usart_serial_write_packet+0x70>
  40073a:	e7d4      	b.n	4006e6 <usart_serial_write_packet+0x26>
		while (uart_write((Uart*)p_usart, c)!=0);
  40073c:	4621      	mov	r1, r4
  40073e:	480f      	ldr	r0, [pc, #60]	; (40077c <usart_serial_write_packet+0xbc>)
  400740:	47a8      	blx	r5
  400742:	2800      	cmp	r0, #0
  400744:	d1fa      	bne.n	40073c <usart_serial_write_packet+0x7c>
  400746:	e7ce      	b.n	4006e6 <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  400748:	f8df b048 	ldr.w	fp, [pc, #72]	; 400794 <usart_serial_write_packet+0xd4>
  40074c:	4621      	mov	r1, r4
  40074e:	480c      	ldr	r0, [pc, #48]	; (400780 <usart_serial_write_packet+0xc0>)
  400750:	47d8      	blx	fp
  400752:	2800      	cmp	r0, #0
  400754:	d1fa      	bne.n	40074c <usart_serial_write_packet+0x8c>
  400756:	e7c6      	b.n	4006e6 <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  400758:	f8df b038 	ldr.w	fp, [pc, #56]	; 400794 <usart_serial_write_packet+0xd4>
  40075c:	4621      	mov	r1, r4
  40075e:	4809      	ldr	r0, [pc, #36]	; (400784 <usart_serial_write_packet+0xc4>)
  400760:	47d8      	blx	fp
  400762:	2800      	cmp	r0, #0
  400764:	d1fa      	bne.n	40075c <usart_serial_write_packet+0x9c>
  400766:	e7be      	b.n	4006e6 <usart_serial_write_packet+0x26>
		len--;
		data++;
	}
	return STATUS_OK;
}
  400768:	2000      	movs	r0, #0
  40076a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40076e:	2000      	movs	r0, #0
  400770:	4770      	bx	lr
  400772:	bf00      	nop
  400774:	00401e45 	.word	0x00401e45
  400778:	400e1a00 	.word	0x400e1a00
  40077c:	400e1c00 	.word	0x400e1c00
  400780:	40024000 	.word	0x40024000
  400784:	40028000 	.word	0x40028000
  400788:	4002c000 	.word	0x4002c000
  40078c:	400e0800 	.word	0x400e0800
  400790:	400e0a00 	.word	0x400e0a00
  400794:	00401f4d 	.word	0x00401f4d

00400798 <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
  400798:	b510      	push	{r4, lr}
  40079a:	4604      	mov	r4, r0
#if SAMG55
	flexcom_enable(BOARD_FLEXCOM_SPI);
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
#else
	spi_enable_clock(p_spi);
  40079c:	4b10      	ldr	r3, [pc, #64]	; (4007e0 <spi_master_init+0x48>)
  40079e:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
  4007a0:	2380      	movs	r3, #128	; 0x80
  4007a2:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  4007a4:	6863      	ldr	r3, [r4, #4]
  4007a6:	f043 0301 	orr.w	r3, r3, #1
  4007aa:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  4007ac:	6863      	ldr	r3, [r4, #4]
  4007ae:	f043 0310 	orr.w	r3, r3, #16
  4007b2:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  4007b4:	6863      	ldr	r3, [r4, #4]
  4007b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4007ba:	6063      	str	r3, [r4, #4]
#endif
	spi_reset(p_spi);
	spi_set_master_mode(p_spi);
	spi_disable_mode_fault_detect(p_spi);
	spi_disable_loopback(p_spi);
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
  4007bc:	2100      	movs	r1, #0
  4007be:	4620      	mov	r0, r4
  4007c0:	4b08      	ldr	r3, [pc, #32]	; (4007e4 <spi_master_init+0x4c>)
  4007c2:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  4007c4:	6863      	ldr	r3, [r4, #4]
  4007c6:	f023 0302 	bic.w	r3, r3, #2
  4007ca:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
  4007cc:	6863      	ldr	r3, [r4, #4]
  4007ce:	f023 0304 	bic.w	r3, r3, #4
  4007d2:	6063      	str	r3, [r4, #4]
	spi_set_fixed_peripheral_select(p_spi);
	spi_disable_peripheral_select_decode(p_spi);
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
  4007d4:	2100      	movs	r1, #0
  4007d6:	4620      	mov	r0, r4
  4007d8:	4b03      	ldr	r3, [pc, #12]	; (4007e8 <spi_master_init+0x50>)
  4007da:	4798      	blx	r3
  4007dc:	bd10      	pop	{r4, pc}
  4007de:	bf00      	nop
  4007e0:	00401a99 	.word	0x00401a99
  4007e4:	00401ac5 	.word	0x00401ac5
  4007e8:	00401adb 	.word	0x00401adb

004007ec <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
  4007ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4007f0:	4604      	mov	r4, r0
  4007f2:	460d      	mov	r5, r1
  4007f4:	4616      	mov	r6, r2
#if (SAM4L)
    int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_pba_hz());
#else
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_peripheral_hz());
  4007f6:	4915      	ldr	r1, [pc, #84]	; (40084c <spi_master_setup_device+0x60>)
  4007f8:	4618      	mov	r0, r3
  4007fa:	4b15      	ldr	r3, [pc, #84]	; (400850 <spi_master_setup_device+0x64>)
  4007fc:	4798      	blx	r3
  4007fe:	4607      	mov	r7, r0
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
  400800:	2300      	movs	r3, #0
  400802:	461a      	mov	r2, r3
  400804:	6829      	ldr	r1, [r5, #0]
  400806:	4620      	mov	r0, r4
  400808:	f8df 805c 	ldr.w	r8, [pc, #92]	; 400868 <spi_master_setup_device+0x7c>
  40080c:	47c0      	blx	r8
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
  40080e:	2208      	movs	r2, #8
  400810:	6829      	ldr	r1, [r5, #0]
  400812:	4620      	mov	r0, r4
  400814:	4b0f      	ldr	r3, [pc, #60]	; (400854 <spi_master_setup_device+0x68>)
  400816:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
  400818:	b2fa      	uxtb	r2, r7
  40081a:	6829      	ldr	r1, [r5, #0]
  40081c:	4620      	mov	r0, r4
  40081e:	4b0e      	ldr	r3, [pc, #56]	; (400858 <spi_master_setup_device+0x6c>)
  400820:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
  400822:	2208      	movs	r2, #8
  400824:	6829      	ldr	r1, [r5, #0]
  400826:	4620      	mov	r0, r4
  400828:	4b0c      	ldr	r3, [pc, #48]	; (40085c <spi_master_setup_device+0x70>)
  40082a:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
  40082c:	0872      	lsrs	r2, r6, #1
  40082e:	6829      	ldr	r1, [r5, #0]
  400830:	4620      	mov	r0, r4
  400832:	4b0b      	ldr	r3, [pc, #44]	; (400860 <spi_master_setup_device+0x74>)
  400834:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
  400836:	f086 0201 	eor.w	r2, r6, #1
  40083a:	f002 0201 	and.w	r2, r2, #1
  40083e:	6829      	ldr	r1, [r5, #0]
  400840:	4620      	mov	r0, r4
  400842:	4b08      	ldr	r3, [pc, #32]	; (400864 <spi_master_setup_device+0x78>)
  400844:	4798      	blx	r3
  400846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40084a:	bf00      	nop
  40084c:	08f0d180 	.word	0x08f0d180
  400850:	00401bb7 	.word	0x00401bb7
  400854:	00401ba3 	.word	0x00401ba3
  400858:	00401bcd 	.word	0x00401bcd
  40085c:	00401b5d 	.word	0x00401b5d
  400860:	00401b21 	.word	0x00401b21
  400864:	00401b3f 	.word	0x00401b3f
  400868:	00401bf5 	.word	0x00401bf5

0040086c <spi_select_device>:
 * \param p_spi   Base address of the SPI instance.
 * \param device  SPI device.
 *
 */
void spi_select_device(Spi *p_spi, struct spi_device *device)
{
  40086c:	b508      	push	{r3, lr}
	if (p_spi->SPI_MR & SPI_MR_PCSDEC) {
  40086e:	6843      	ldr	r3, [r0, #4]
	if (spi_get_peripheral_select_decode_setting(p_spi)) {
  400870:	f013 0f04 	tst.w	r3, #4
  400874:	d006      	beq.n	400884 <spi_select_device+0x18>
		if (device->id < MAX_NUM_WITH_DECODER) {
  400876:	6809      	ldr	r1, [r1, #0]
  400878:	290f      	cmp	r1, #15
  40087a:	d900      	bls.n	40087e <spi_select_device+0x12>
  40087c:	bd08      	pop	{r3, pc}
			spi_set_peripheral_chip_select_value(p_spi, device->id);
  40087e:	4b06      	ldr	r3, [pc, #24]	; (400898 <spi_select_device+0x2c>)
  400880:	4798      	blx	r3
  400882:	bd08      	pop	{r3, pc}
		}
	} else {
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
  400884:	6809      	ldr	r1, [r1, #0]
  400886:	2903      	cmp	r1, #3
  400888:	d8f8      	bhi.n	40087c <spi_select_device+0x10>
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
  40088a:	2301      	movs	r3, #1
  40088c:	fa03 f101 	lsl.w	r1, r3, r1
  400890:	43c9      	mvns	r1, r1
  400892:	4b01      	ldr	r3, [pc, #4]	; (400898 <spi_select_device+0x2c>)
  400894:	4798      	blx	r3
		}
	}
}
  400896:	e7f1      	b.n	40087c <spi_select_device+0x10>
  400898:	00401ac5 	.word	0x00401ac5

0040089c <spi_write_packet>:
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t i = 0;
	uint8_t val;

	while (len) {
  40089c:	b11a      	cbz	r2, 4008a6 <spi_write_packet+0xa>
{
  40089e:	b410      	push	{r4}
  4008a0:	460c      	mov	r4, r1
  4008a2:	4411      	add	r1, r2
  4008a4:	e006      	b.n	4008b4 <spi_write_packet+0x18>
		spi_write_single(p_spi, val);
		i++;
		len--;
	}

	return STATUS_OK;
  4008a6:	2000      	movs	r0, #0
  4008a8:	4770      	bx	lr
		val = data[i];
  4008aa:	f814 3b01 	ldrb.w	r3, [r4], #1
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4008ae:	60c3      	str	r3, [r0, #12]
	while (len) {
  4008b0:	42a1      	cmp	r1, r4
  4008b2:	d00c      	beq.n	4008ce <spi_write_packet+0x32>
{
  4008b4:	f643 2399 	movw	r3, #15001	; 0x3a99
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_ready(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
  4008b8:	6902      	ldr	r2, [r0, #16]
		while (!spi_is_tx_ready(p_spi)) {
  4008ba:	f012 0f02 	tst.w	r2, #2
  4008be:	d1f4      	bne.n	4008aa <spi_write_packet+0xe>
			if (!timeout--) {
  4008c0:	3b01      	subs	r3, #1
  4008c2:	d1f9      	bne.n	4008b8 <spi_write_packet+0x1c>
				return ERR_TIMEOUT;
  4008c4:	f06f 0002 	mvn.w	r0, #2
}
  4008c8:	f85d 4b04 	ldr.w	r4, [sp], #4
  4008cc:	4770      	bx	lr
	return STATUS_OK;
  4008ce:	2000      	movs	r0, #0
  4008d0:	e7fa      	b.n	4008c8 <spi_write_packet+0x2c>

004008d2 <spi_read_packet>:
{
	uint32_t timeout = SPI_TIMEOUT;
	uint8_t val;
	uint32_t i = 0;

	while (len) {
  4008d2:	b13a      	cbz	r2, 4008e4 <spi_read_packet+0x12>
{
  4008d4:	b470      	push	{r4, r5, r6}
  4008d6:	4615      	mov	r5, r2
  4008d8:	460c      	mov	r4, r1
  4008da:	440d      	add	r5, r1
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4008dc:	26ff      	movs	r6, #255	; 0xff
 *
 * \return 1 if the SPI Receiver is ready, otherwise 0.
 */
static inline uint32_t spi_is_rx_ready(Spi *p_spi)
{
	if ((p_spi->SPI_SR & (SPI_SR_RDRF | SPI_SR_TXEMPTY))
  4008de:	f240 2101 	movw	r1, #513	; 0x201
  4008e2:	e012      	b.n	40090a <spi_read_packet+0x38>
		data[i] = val;
		i++;
		len--;
	}

	return STATUS_OK;
  4008e4:	2000      	movs	r0, #0
  4008e6:	4770      	bx	lr
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4008e8:	60c6      	str	r6, [r0, #12]
		while (!spi_is_rx_ready(p_spi)) {
  4008ea:	f643 2399 	movw	r3, #15001	; 0x3a99
	if ((p_spi->SPI_SR & (SPI_SR_RDRF | SPI_SR_TXEMPTY))
  4008ee:	6902      	ldr	r2, [r0, #16]
  4008f0:	ea31 0202 	bics.w	r2, r1, r2
  4008f4:	d004      	beq.n	400900 <spi_read_packet+0x2e>
			if (!timeout--) {
  4008f6:	3b01      	subs	r3, #1
  4008f8:	d1f9      	bne.n	4008ee <spi_read_packet+0x1c>
				return ERR_TIMEOUT;
  4008fa:	f06f 0002 	mvn.w	r0, #2
  4008fe:	e00e      	b.n	40091e <spi_read_packet+0x4c>
	return (p_spi->SPI_RDR & SPI_RDR_RD_Msk);
  400900:	6883      	ldr	r3, [r0, #8]
 * \param data      Data to read.
 *
 */
static inline void spi_read_single(Spi *p_spi, uint8_t *data)
{
	*data = (uint8_t)spi_get(p_spi);
  400902:	f804 3b01 	strb.w	r3, [r4], #1
	while (len) {
  400906:	42a5      	cmp	r5, r4
  400908:	d00b      	beq.n	400922 <spi_read_packet+0x50>
{
  40090a:	f643 2399 	movw	r3, #15001	; 0x3a99
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
  40090e:	6902      	ldr	r2, [r0, #16]
		while (!spi_is_tx_ready(p_spi)) {
  400910:	f012 0f02 	tst.w	r2, #2
  400914:	d1e8      	bne.n	4008e8 <spi_read_packet+0x16>
			if (!timeout--) {
  400916:	3b01      	subs	r3, #1
  400918:	d1f9      	bne.n	40090e <spi_read_packet+0x3c>
				return ERR_TIMEOUT;
  40091a:	f06f 0002 	mvn.w	r0, #2
}
  40091e:	bc70      	pop	{r4, r5, r6}
  400920:	4770      	bx	lr
	return STATUS_OK;
  400922:	2000      	movs	r0, #0
  400924:	e7fb      	b.n	40091e <spi_read_packet+0x4c>
	...

00400928 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  40092c:	b980      	cbnz	r0, 400950 <_read+0x28>
  40092e:	460c      	mov	r4, r1
  400930:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400932:	2a00      	cmp	r2, #0
  400934:	dd0f      	ble.n	400956 <_read+0x2e>
  400936:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400938:	4e08      	ldr	r6, [pc, #32]	; (40095c <_read+0x34>)
  40093a:	4d09      	ldr	r5, [pc, #36]	; (400960 <_read+0x38>)
  40093c:	6830      	ldr	r0, [r6, #0]
  40093e:	4621      	mov	r1, r4
  400940:	682b      	ldr	r3, [r5, #0]
  400942:	4798      	blx	r3
		ptr++;
  400944:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400946:	42bc      	cmp	r4, r7
  400948:	d1f8      	bne.n	40093c <_read+0x14>
		nChars++;
	}
	return nChars;
}
  40094a:	4640      	mov	r0, r8
  40094c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400950:	f04f 38ff 	mov.w	r8, #4294967295
  400954:	e7f9      	b.n	40094a <_read+0x22>
	for (; len > 0; --len) {
  400956:	4680      	mov	r8, r0
  400958:	e7f7      	b.n	40094a <_read+0x22>
  40095a:	bf00      	nop
  40095c:	20400f8c 	.word	0x20400f8c
  400960:	20400f84 	.word	0x20400f84

00400964 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400964:	3801      	subs	r0, #1
  400966:	2802      	cmp	r0, #2
  400968:	d815      	bhi.n	400996 <_write+0x32>
{
  40096a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40096e:	460e      	mov	r6, r1
  400970:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400972:	b19a      	cbz	r2, 40099c <_write+0x38>
  400974:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400976:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4009b0 <_write+0x4c>
  40097a:	4f0c      	ldr	r7, [pc, #48]	; (4009ac <_write+0x48>)
  40097c:	f8d8 0000 	ldr.w	r0, [r8]
  400980:	f815 1b01 	ldrb.w	r1, [r5], #1
  400984:	683b      	ldr	r3, [r7, #0]
  400986:	4798      	blx	r3
  400988:	2800      	cmp	r0, #0
  40098a:	db0a      	blt.n	4009a2 <_write+0x3e>
  40098c:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  40098e:	3c01      	subs	r4, #1
  400990:	d1f4      	bne.n	40097c <_write+0x18>
  400992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400996:	f04f 30ff 	mov.w	r0, #4294967295
  40099a:	4770      	bx	lr
	for (; len != 0; --len) {
  40099c:	4610      	mov	r0, r2
  40099e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  4009a2:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4009a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4009aa:	bf00      	nop
  4009ac:	20400f88 	.word	0x20400f88
  4009b0:	20400f8c 	.word	0x20400f8c

004009b4 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  4009b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4009b8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4009bc:	4b9e      	ldr	r3, [pc, #632]	; (400c38 <board_init+0x284>)
  4009be:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4009c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4009c4:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4009c8:	4b9c      	ldr	r3, [pc, #624]	; (400c3c <board_init+0x288>)
  4009ca:	2200      	movs	r2, #0
  4009cc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  4009d0:	695a      	ldr	r2, [r3, #20]
  4009d2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4009d6:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  4009d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4009dc:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  4009e0:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  4009e4:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4009e8:	f007 0007 	and.w	r0, r7, #7
  4009ec:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  4009ee:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4009f2:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  4009f6:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  4009fa:	f3bf 8f4f 	dsb	sy
  4009fe:	f04f 34ff 	mov.w	r4, #4294967295
  400a02:	fa04 fc00 	lsl.w	ip, r4, r0
  400a06:	fa06 f000 	lsl.w	r0, r6, r0
  400a0a:	fa04 f40e 	lsl.w	r4, r4, lr
  400a0e:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400a12:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  400a14:	463a      	mov	r2, r7
  400a16:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400a18:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400a1c:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400a20:	3a01      	subs	r2, #1
  400a22:	4423      	add	r3, r4
  400a24:	f1b2 3fff 	cmp.w	r2, #4294967295
  400a28:	d1f6      	bne.n	400a18 <board_init+0x64>
        } while(sets--);
  400a2a:	3e01      	subs	r6, #1
  400a2c:	4460      	add	r0, ip
  400a2e:	f1b6 3fff 	cmp.w	r6, #4294967295
  400a32:	d1ef      	bne.n	400a14 <board_init+0x60>
  400a34:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400a38:	4b80      	ldr	r3, [pc, #512]	; (400c3c <board_init+0x288>)
  400a3a:	695a      	ldr	r2, [r3, #20]
  400a3c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400a40:	615a      	str	r2, [r3, #20]
  400a42:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400a46:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400a4a:	4a7d      	ldr	r2, [pc, #500]	; (400c40 <board_init+0x28c>)
  400a4c:	497d      	ldr	r1, [pc, #500]	; (400c44 <board_init+0x290>)
  400a4e:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400a50:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400a54:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400a56:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400a5a:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400a5e:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400a62:	f022 0201 	bic.w	r2, r2, #1
  400a66:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400a6a:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400a6e:	f022 0201 	bic.w	r2, r2, #1
  400a72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400a76:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400a7a:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400a7e:	200a      	movs	r0, #10
  400a80:	4c71      	ldr	r4, [pc, #452]	; (400c48 <board_init+0x294>)
  400a82:	47a0      	blx	r4
  400a84:	200b      	movs	r0, #11
  400a86:	47a0      	blx	r4
  400a88:	200c      	movs	r0, #12
  400a8a:	47a0      	blx	r4
  400a8c:	2010      	movs	r0, #16
  400a8e:	47a0      	blx	r4
  400a90:	2011      	movs	r0, #17
  400a92:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400a94:	4e6d      	ldr	r6, [pc, #436]	; (400c4c <board_init+0x298>)
  400a96:	f44f 7880 	mov.w	r8, #256	; 0x100
  400a9a:	f8c6 8010 	str.w	r8, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400a9e:	f8c6 80a0 	str.w	r8, [r6, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400aa2:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400aa6:	4c6a      	ldr	r4, [pc, #424]	; (400c50 <board_init+0x29c>)
  400aa8:	f44f 6500 	mov.w	r5, #2048	; 0x800
  400aac:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400aae:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  400ab2:	6665      	str	r5, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400ab4:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400ab8:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFER = mask;
  400aba:	6225      	str	r5, [r4, #32]
		base->PIO_IFSCER = mask;
  400abc:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400ac0:	6f23      	ldr	r3, [r4, #112]	; 0x70
  400ac2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  400ac6:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400ac8:	6f63      	ldr	r3, [r4, #116]	; 0x74
  400aca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  400ace:	6763      	str	r3, [r4, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400ad0:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400ad4:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400ad8:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
		base->PIO_PUDR = mask;
  400adc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  400ae0:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400ae2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400ae6:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  400ae8:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400aea:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400aee:	6f22      	ldr	r2, [r4, #112]	; 0x70
  400af0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400af4:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400af6:	6f62      	ldr	r2, [r4, #116]	; 0x74
  400af8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400afc:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400afe:	6063      	str	r3, [r4, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400b00:	4a54      	ldr	r2, [pc, #336]	; (400c54 <board_init+0x2a0>)
  400b02:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400b06:	f043 0310 	orr.w	r3, r3, #16
  400b0a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  400b0e:	f502 22b2 	add.w	r2, r2, #364544	; 0x59000
  400b12:	2310      	movs	r3, #16
  400b14:	6613      	str	r3, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400b16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  400b1a:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  400b1c:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400b1e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400b22:	6f11      	ldr	r1, [r2, #112]	; 0x70
  400b24:	4319      	orrs	r1, r3
  400b26:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400b28:	6f51      	ldr	r1, [r2, #116]	; 0x74
  400b2a:	4319      	orrs	r1, r3
  400b2c:	6751      	str	r1, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400b2e:	6053      	str	r3, [r2, #4]
		base->PIO_PUDR = mask;
  400b30:	2208      	movs	r2, #8
  400b32:	6622      	str	r2, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400b34:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400b38:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  400b3a:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400b3c:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400b40:	6f21      	ldr	r1, [r4, #112]	; 0x70
  400b42:	f021 0108 	bic.w	r1, r1, #8
  400b46:	6721      	str	r1, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400b48:	6f61      	ldr	r1, [r4, #116]	; 0x74
  400b4a:	f021 0108 	bic.w	r1, r1, #8
  400b4e:	6761      	str	r1, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400b50:	6062      	str	r2, [r4, #4]
		base->PIO_PUDR = mask;
  400b52:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400b54:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400b58:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  400b5a:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400b5c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400b60:	6f22      	ldr	r2, [r4, #112]	; 0x70
  400b62:	f022 0210 	bic.w	r2, r2, #16
  400b66:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400b68:	6f62      	ldr	r2, [r4, #116]	; 0x74
  400b6a:	f022 0210 	bic.w	r2, r2, #16
  400b6e:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400b70:	6063      	str	r3, [r4, #4]
	ioport_set_pin_mode(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on EBI*/
	pio_configure(PIN_EBI_RESET_PIO, PIN_EBI_RESET_TYPE, PIN_EBI_RESET_MASK, PIN_EBI_RESET_ATTRI);
  400b72:	2300      	movs	r3, #0
  400b74:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400b78:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400b7c:	4630      	mov	r0, r6
  400b7e:	4f36      	ldr	r7, [pc, #216]	; (400c58 <board_init+0x2a4>)
  400b80:	47b8      	blx	r7
	pio_configure(PIN_EBI_CDS_PIO, PIN_EBI_CDS_TYPE, PIN_EBI_CDS_MASK, PIN_EBI_CDS_ATTRI);
  400b82:	2300      	movs	r3, #0
  400b84:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400b88:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400b8c:	4630      	mov	r0, r6
  400b8e:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAL_PIO, PIN_EBI_DATAL_TYPE, PIN_EBI_DATAL_MASK, PIN_EBI_DATAL_ATTRI);
  400b90:	2301      	movs	r3, #1
  400b92:	22ff      	movs	r2, #255	; 0xff
  400b94:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400b98:	4630      	mov	r0, r6
  400b9a:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_0_PIO, PIN_EBI_DATAH_0_TYPE, PIN_EBI_DATAH_0_MASK, PIN_EBI_DATAH_0_ATTRI);
  400b9c:	2301      	movs	r3, #1
  400b9e:	223f      	movs	r2, #63	; 0x3f
  400ba0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400ba4:	482d      	ldr	r0, [pc, #180]	; (400c5c <board_init+0x2a8>)
  400ba6:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_1_PIO, PIN_EBI_DATAH_1_TYPE, PIN_EBI_DATAH_1_MASK, PIN_EBI_DATAH_1_ATTRI);
  400ba8:	2301      	movs	r3, #1
  400baa:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  400bae:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400bb2:	4620      	mov	r0, r4
  400bb4:	47b8      	blx	r7
	pio_configure(PIN_EBI_NWE_PIO, PIN_EBI_NWE_TYPE, PIN_EBI_NWE_MASK, PIN_EBI_NWE_ATTRI);
  400bb6:	2301      	movs	r3, #1
  400bb8:	4642      	mov	r2, r8
  400bba:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400bbe:	4630      	mov	r0, r6
  400bc0:	47b8      	blx	r7
	pio_configure(PIN_EBI_NRD_PIO, PIN_EBI_NRD_TYPE, PIN_EBI_NRD_MASK, PIN_EBI_NRD_ATTRI);
  400bc2:	2301      	movs	r3, #1
  400bc4:	462a      	mov	r2, r5
  400bc6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400bca:	4630      	mov	r0, r6
  400bcc:	47b8      	blx	r7
	pio_configure(PIN_EBI_CS_PIO, PIN_EBI_CS_TYPE, PIN_EBI_CS_MASK, PIN_EBI_CS_ATTRI);
  400bce:	2301      	movs	r3, #1
  400bd0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400bd4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400bd8:	4821      	ldr	r0, [pc, #132]	; (400c60 <board_init+0x2ac>)
  400bda:	47b8      	blx	r7
	pio_configure(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_TYPE, PIN_EBI_BACKLIGHT_MASK, PIN_EBI_BACKLIGHT_ATTRI);
  400bdc:	2300      	movs	r3, #0
  400bde:	f44f 7200 	mov.w	r2, #512	; 0x200
  400be2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400be6:	4630      	mov	r0, r6
  400be8:	47b8      	blx	r7
	pio_set(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_MASK);
  400bea:	f44f 7100 	mov.w	r1, #512	; 0x200
  400bee:	4630      	mov	r0, r6
  400bf0:	4b1c      	ldr	r3, [pc, #112]	; (400c64 <board_init+0x2b0>)
  400bf2:	4798      	blx	r3
	MATRIX->CCFG_SMCNFCS = CCFG_SMCNFCS_SDRAMEN;
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on SPI*/
	pio_configure_pin(LCD_SPI_MISO_PIO, LCD_SPI_MISO_FLAGS);
  400bf4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400bf8:	2074      	movs	r0, #116	; 0x74
  400bfa:	4c1b      	ldr	r4, [pc, #108]	; (400c68 <board_init+0x2b4>)
  400bfc:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_MOSI_PIO, LCD_SPI_MOSI_FLAGS);
  400bfe:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400c02:	2075      	movs	r0, #117	; 0x75
  400c04:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_SPCK_PIO, LCD_SPI_SPCK_FLAGS);
  400c06:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400c0a:	2076      	movs	r0, #118	; 0x76
  400c0c:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_NPCS_PIO, LCD_SPI_NPCS_FLAGS);
  400c0e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400c12:	207b      	movs	r0, #123	; 0x7b
  400c14:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_RESET_PIO, LCD_SPI_RESET_FLAGS);
  400c16:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400c1a:	2018      	movs	r0, #24
  400c1c:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
  400c1e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400c22:	2006      	movs	r0, #6
  400c24:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
  400c26:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400c2a:	2053      	movs	r0, #83	; 0x53
  400c2c:	47a0      	blx	r4
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);
  400c2e:	2053      	movs	r0, #83	; 0x53
  400c30:	4b0e      	ldr	r3, [pc, #56]	; (400c6c <board_init+0x2b8>)
  400c32:	4798      	blx	r3
  400c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400c38:	400e1850 	.word	0x400e1850
  400c3c:	e000ed00 	.word	0xe000ed00
  400c40:	400e0c00 	.word	0x400e0c00
  400c44:	5a00080c 	.word	0x5a00080c
  400c48:	004017f9 	.word	0x004017f9
  400c4c:	400e1200 	.word	0x400e1200
  400c50:	400e0e00 	.word	0x400e0e00
  400c54:	40088000 	.word	0x40088000
  400c58:	00401425 	.word	0x00401425
  400c5c:	400e1600 	.word	0x400e1600
  400c60:	400e1400 	.word	0x400e1400
  400c64:	00401331 	.word	0x00401331
  400c68:	004014f5 	.word	0x004014f5
  400c6c:	004014bd 	.word	0x004014bd

00400c70 <ili9488_check_box_coordinates>:
 * \param p_ul_x2 X coordinate of lower-right corner on LCD.
 * \param p_ul_y2 Y coordinate of lower-right corner on LCD.
 */
static void ili9488_check_box_coordinates(uint32_t *p_ul_x1, uint32_t *p_ul_y1,
		uint32_t *p_ul_x2, uint32_t *p_ul_y2)
{
  400c70:	b430      	push	{r4, r5}
	uint32_t dw;

	if (*p_ul_x1 >= ILI9488_LCD_WIDTH) {
  400c72:	6804      	ldr	r4, [r0, #0]
  400c74:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
  400c78:	d302      	bcc.n	400c80 <ili9488_check_box_coordinates+0x10>
		*p_ul_x1 = ILI9488_LCD_WIDTH - 1;
  400c7a:	f240 143f 	movw	r4, #319	; 0x13f
  400c7e:	6004      	str	r4, [r0, #0]
	}

	if (*p_ul_x2 >= ILI9488_LCD_WIDTH) {
  400c80:	6814      	ldr	r4, [r2, #0]
  400c82:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
  400c86:	d302      	bcc.n	400c8e <ili9488_check_box_coordinates+0x1e>
		*p_ul_x2 = ILI9488_LCD_WIDTH - 1;
  400c88:	f240 143f 	movw	r4, #319	; 0x13f
  400c8c:	6014      	str	r4, [r2, #0]
	}

	if (*p_ul_y1 >= ILI9488_LCD_HEIGHT) {
  400c8e:	680c      	ldr	r4, [r1, #0]
  400c90:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
  400c94:	d302      	bcc.n	400c9c <ili9488_check_box_coordinates+0x2c>
		*p_ul_y1 = ILI9488_LCD_HEIGHT - 1;
  400c96:	f240 14df 	movw	r4, #479	; 0x1df
  400c9a:	600c      	str	r4, [r1, #0]
	}

	if (*p_ul_y2 >= ILI9488_LCD_HEIGHT) {
  400c9c:	681c      	ldr	r4, [r3, #0]
  400c9e:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
  400ca2:	d302      	bcc.n	400caa <ili9488_check_box_coordinates+0x3a>
		*p_ul_y2 = ILI9488_LCD_HEIGHT - 1;
  400ca4:	f240 14df 	movw	r4, #479	; 0x1df
  400ca8:	601c      	str	r4, [r3, #0]
	}

	if (*p_ul_x1 > *p_ul_x2) {
  400caa:	6804      	ldr	r4, [r0, #0]
  400cac:	6815      	ldr	r5, [r2, #0]
  400cae:	42ac      	cmp	r4, r5
  400cb0:	d901      	bls.n	400cb6 <ili9488_check_box_coordinates+0x46>
		dw = *p_ul_x1;
		*p_ul_x1 = *p_ul_x2;
  400cb2:	6005      	str	r5, [r0, #0]
		*p_ul_x2 = dw;
  400cb4:	6014      	str	r4, [r2, #0]
	}

	if (*p_ul_y1 > *p_ul_y2) {
  400cb6:	680a      	ldr	r2, [r1, #0]
  400cb8:	6818      	ldr	r0, [r3, #0]
  400cba:	4282      	cmp	r2, r0
  400cbc:	d901      	bls.n	400cc2 <ili9488_check_box_coordinates+0x52>
		dw = *p_ul_y1;
		*p_ul_y1 = *p_ul_y2;
  400cbe:	6008      	str	r0, [r1, #0]
		*p_ul_y2 = dw;
  400cc0:	601a      	str	r2, [r3, #0]
	}
}
  400cc2:	bc30      	pop	{r4, r5}
  400cc4:	4770      	bx	lr
	...

00400cc8 <ili9488_write_ram_prepare>:
{
  400cc8:	b510      	push	{r4, lr}
  400cca:	b082      	sub	sp, #8
	pio_set_pin_low(LCD_SPI_CDS_PIO);
  400ccc:	2006      	movs	r0, #6
  400cce:	4b0a      	ldr	r3, [pc, #40]	; (400cf8 <ili9488_write_ram_prepare+0x30>)
  400cd0:	4798      	blx	r3
	spi_write(BOARD_ILI9488_SPI, ILI9488_CMD_MEMORY_WRITE, BOARD_ILI9488_SPI_NPCS, 0);
  400cd2:	2300      	movs	r3, #0
  400cd4:	2203      	movs	r2, #3
  400cd6:	212c      	movs	r1, #44	; 0x2c
  400cd8:	4808      	ldr	r0, [pc, #32]	; (400cfc <ili9488_write_ram_prepare+0x34>)
  400cda:	4c09      	ldr	r4, [pc, #36]	; (400d00 <ili9488_write_ram_prepare+0x38>)
  400cdc:	47a0      	blx	r4
	for(i = 0; i < 0xFF; i++);
  400cde:	2300      	movs	r3, #0
  400ce0:	9301      	str	r3, [sp, #4]
  400ce2:	9b01      	ldr	r3, [sp, #4]
  400ce4:	2bfe      	cmp	r3, #254	; 0xfe
  400ce6:	d805      	bhi.n	400cf4 <ili9488_write_ram_prepare+0x2c>
  400ce8:	9b01      	ldr	r3, [sp, #4]
  400cea:	3301      	adds	r3, #1
  400cec:	9301      	str	r3, [sp, #4]
  400cee:	9b01      	ldr	r3, [sp, #4]
  400cf0:	2bfe      	cmp	r3, #254	; 0xfe
  400cf2:	d9f9      	bls.n	400ce8 <ili9488_write_ram_prepare+0x20>
}
  400cf4:	b002      	add	sp, #8
  400cf6:	bd10      	pop	{r4, pc}
  400cf8:	004014d9 	.word	0x004014d9
  400cfc:	40008000 	.word	0x40008000
  400d00:	00401aed 	.word	0x00401aed

00400d04 <ili9488_write_register>:
{
  400d04:	b570      	push	{r4, r5, r6, lr}
  400d06:	b082      	sub	sp, #8
  400d08:	4605      	mov	r5, r0
  400d0a:	460e      	mov	r6, r1
  400d0c:	4614      	mov	r4, r2
	pio_set_pin_low(LCD_SPI_CDS_PIO);
  400d0e:	2006      	movs	r0, #6
  400d10:	4b14      	ldr	r3, [pc, #80]	; (400d64 <ili9488_write_register+0x60>)
  400d12:	4798      	blx	r3
	spi_write(BOARD_ILI9488_SPI, uc_reg, BOARD_ILI9488_SPI_NPCS, 0);
  400d14:	2300      	movs	r3, #0
  400d16:	2203      	movs	r2, #3
  400d18:	4629      	mov	r1, r5
  400d1a:	4813      	ldr	r0, [pc, #76]	; (400d68 <ili9488_write_register+0x64>)
  400d1c:	4d13      	ldr	r5, [pc, #76]	; (400d6c <ili9488_write_register+0x68>)
  400d1e:	47a8      	blx	r5
	for(i = 0; i < 0xFF; i++);
  400d20:	2300      	movs	r3, #0
  400d22:	9301      	str	r3, [sp, #4]
  400d24:	9b01      	ldr	r3, [sp, #4]
  400d26:	2bfe      	cmp	r3, #254	; 0xfe
  400d28:	d805      	bhi.n	400d36 <ili9488_write_register+0x32>
  400d2a:	9b01      	ldr	r3, [sp, #4]
  400d2c:	3301      	adds	r3, #1
  400d2e:	9301      	str	r3, [sp, #4]
  400d30:	9b01      	ldr	r3, [sp, #4]
  400d32:	2bfe      	cmp	r3, #254	; 0xfe
  400d34:	d9f9      	bls.n	400d2a <ili9488_write_register+0x26>
	if(size > 0) {
  400d36:	b90c      	cbnz	r4, 400d3c <ili9488_write_register+0x38>
}
  400d38:	b002      	add	sp, #8
  400d3a:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_pin_high(LCD_SPI_CDS_PIO);
  400d3c:	2006      	movs	r0, #6
  400d3e:	4b0c      	ldr	r3, [pc, #48]	; (400d70 <ili9488_write_register+0x6c>)
  400d40:	4798      	blx	r3
		spi_write_packet(BOARD_ILI9488_SPI, us_data, size);
  400d42:	4622      	mov	r2, r4
  400d44:	4631      	mov	r1, r6
  400d46:	4808      	ldr	r0, [pc, #32]	; (400d68 <ili9488_write_register+0x64>)
  400d48:	4b0a      	ldr	r3, [pc, #40]	; (400d74 <ili9488_write_register+0x70>)
  400d4a:	4798      	blx	r3
		for(i = 0; i < 0x5F; i++);
  400d4c:	2300      	movs	r3, #0
  400d4e:	9301      	str	r3, [sp, #4]
  400d50:	9b01      	ldr	r3, [sp, #4]
  400d52:	2b5e      	cmp	r3, #94	; 0x5e
  400d54:	d8f0      	bhi.n	400d38 <ili9488_write_register+0x34>
  400d56:	9b01      	ldr	r3, [sp, #4]
  400d58:	3301      	adds	r3, #1
  400d5a:	9301      	str	r3, [sp, #4]
  400d5c:	9b01      	ldr	r3, [sp, #4]
  400d5e:	2b5e      	cmp	r3, #94	; 0x5e
  400d60:	d9f9      	bls.n	400d56 <ili9488_write_register+0x52>
  400d62:	e7e9      	b.n	400d38 <ili9488_write_register+0x34>
  400d64:	004014d9 	.word	0x004014d9
  400d68:	40008000 	.word	0x40008000
  400d6c:	00401aed 	.word	0x00401aed
  400d70:	004014bd 	.word	0x004014bd
  400d74:	0040089d 	.word	0x0040089d

00400d78 <ili9488_write_ram_buffer>:
{
  400d78:	b530      	push	{r4, r5, lr}
  400d7a:	b083      	sub	sp, #12
  400d7c:	4604      	mov	r4, r0
  400d7e:	460d      	mov	r5, r1
	pio_set_pin_high(LCD_SPI_CDS_PIO);
  400d80:	2006      	movs	r0, #6
  400d82:	4b0a      	ldr	r3, [pc, #40]	; (400dac <ili9488_write_ram_buffer+0x34>)
  400d84:	4798      	blx	r3
	spi_write_packet(BOARD_ILI9488_SPI, p_ul_buf, ul_size);
  400d86:	462a      	mov	r2, r5
  400d88:	4621      	mov	r1, r4
  400d8a:	4809      	ldr	r0, [pc, #36]	; (400db0 <ili9488_write_ram_buffer+0x38>)
  400d8c:	4b09      	ldr	r3, [pc, #36]	; (400db4 <ili9488_write_ram_buffer+0x3c>)
  400d8e:	4798      	blx	r3
	for(i = 0; i < 0xFF; i++);
  400d90:	2300      	movs	r3, #0
  400d92:	9301      	str	r3, [sp, #4]
  400d94:	9b01      	ldr	r3, [sp, #4]
  400d96:	2bfe      	cmp	r3, #254	; 0xfe
  400d98:	d805      	bhi.n	400da6 <ili9488_write_ram_buffer+0x2e>
  400d9a:	9b01      	ldr	r3, [sp, #4]
  400d9c:	3301      	adds	r3, #1
  400d9e:	9301      	str	r3, [sp, #4]
  400da0:	9b01      	ldr	r3, [sp, #4]
  400da2:	2bfe      	cmp	r3, #254	; 0xfe
  400da4:	d9f9      	bls.n	400d9a <ili9488_write_ram_buffer+0x22>
}
  400da6:	b003      	add	sp, #12
  400da8:	bd30      	pop	{r4, r5, pc}
  400daa:	bf00      	nop
  400dac:	004014bd 	.word	0x004014bd
  400db0:	40008000 	.word	0x40008000
  400db4:	0040089d 	.word	0x0040089d

00400db8 <ili9488_delay>:
	for(i = 0; i < ul_ms; i++) {
  400db8:	4601      	mov	r1, r0
  400dba:	b130      	cbz	r0, 400dca <ili9488_delay+0x12>
  400dbc:	4a03      	ldr	r2, [pc, #12]	; (400dcc <ili9488_delay+0x14>)
{
  400dbe:	4b04      	ldr	r3, [pc, #16]	; (400dd0 <ili9488_delay+0x18>)
		for(i = 0; i < 100000; i++) {
  400dc0:	3b01      	subs	r3, #1
  400dc2:	d1fd      	bne.n	400dc0 <ili9488_delay+0x8>
	for(i = 0; i < ul_ms; i++) {
  400dc4:	4291      	cmp	r1, r2
  400dc6:	d8fa      	bhi.n	400dbe <ili9488_delay+0x6>
  400dc8:	4770      	bx	lr
  400dca:	4770      	bx	lr
  400dcc:	000186a1 	.word	0x000186a1
  400dd0:	000186a0 	.word	0x000186a0

00400dd4 <ili9488_set_display_direction>:
 * \brief ILI9488 configure landscape.
 *
 * \Param LandscaprMode Landscape Mode.
 */
void ili9488_set_display_direction(enum ili9488_display_direction direction )
{
  400dd4:	b500      	push	{lr}
  400dd6:	b083      	sub	sp, #12
	ili9488_color_t value;
	if(direction) {
  400dd8:	b958      	cbnz	r0, 400df2 <ili9488_set_display_direction+0x1e>
		value = 0xE8;
	} else {
		value = 0x48;
  400dda:	2348      	movs	r3, #72	; 0x48
  400ddc:	f88d 3007 	strb.w	r3, [sp, #7]
	}
	ili9488_write_register(ILI9488_CMD_MEMORY_ACCESS_CONTROL, &value, 1);
  400de0:	2201      	movs	r2, #1
  400de2:	f10d 0107 	add.w	r1, sp, #7
  400de6:	2036      	movs	r0, #54	; 0x36
  400de8:	4b04      	ldr	r3, [pc, #16]	; (400dfc <ili9488_set_display_direction+0x28>)
  400dea:	4798      	blx	r3
}
  400dec:	b003      	add	sp, #12
  400dee:	f85d fb04 	ldr.w	pc, [sp], #4
		value = 0xE8;
  400df2:	23e8      	movs	r3, #232	; 0xe8
  400df4:	f88d 3007 	strb.w	r3, [sp, #7]
  400df8:	e7f2      	b.n	400de0 <ili9488_set_display_direction+0xc>
  400dfa:	bf00      	nop
  400dfc:	00400d05 	.word	0x00400d05

00400e00 <ili9488_set_window>:
 * \Param y start position.
 * \Param width  Width of window.
 * \Param height Height of window.
 */
void ili9488_set_window(uint16_t x, uint16_t y, uint16_t width, uint16_t height )
{
  400e00:	b510      	push	{r4, lr}
  400e02:	b084      	sub	sp, #16
	uint32_t cnt = 0;
	ili9488_color_t buf[4];

	cnt = sizeof(buf)/sizeof(ili9488_color_t);

	col_start  =  x ;
  400e04:	f8ad 000e 	strh.w	r0, [sp, #14]
	col_end    =  width + x - 1;
  400e08:	3a01      	subs	r2, #1
  400e0a:	4402      	add	r2, r0
  400e0c:	f8ad 200c 	strh.w	r2, [sp, #12]

	row_start = y ;
  400e10:	f8ad 100a 	strh.w	r1, [sp, #10]
	row_end   = height + y - 1;
  400e14:	3b01      	subs	r3, #1
  400e16:	4419      	add	r1, r3
  400e18:	f8ad 1008 	strh.w	r1, [sp, #8]

	buf[0] = get_8b_to_16b(col_start);
  400e1c:	0a03      	lsrs	r3, r0, #8
  400e1e:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = get_0b_to_8b(col_start);
  400e22:	f88d 0005 	strb.w	r0, [sp, #5]
	buf[2] = get_8b_to_16b(col_end);
  400e26:	f3c2 2307 	ubfx	r3, r2, #8, #8
  400e2a:	f88d 3006 	strb.w	r3, [sp, #6]
	buf[3] = get_0b_to_8b(col_end);
  400e2e:	f88d 2007 	strb.w	r2, [sp, #7]
	ili9488_write_register(ILI9488_CMD_COLUMN_ADDRESS_SET, buf, cnt);
  400e32:	2204      	movs	r2, #4
  400e34:	eb0d 0102 	add.w	r1, sp, r2
  400e38:	202a      	movs	r0, #42	; 0x2a
  400e3a:	4c10      	ldr	r4, [pc, #64]	; (400e7c <ili9488_set_window+0x7c>)
  400e3c:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  400e3e:	2200      	movs	r2, #0
  400e40:	4611      	mov	r1, r2
  400e42:	4610      	mov	r0, r2
  400e44:	47a0      	blx	r4

	/* Set Horizontal Address End Position */
	buf[0] = get_8b_to_16b(row_start);
  400e46:	f89d 300b 	ldrb.w	r3, [sp, #11]
  400e4a:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = get_0b_to_8b(row_start);
  400e4e:	f89d 300a 	ldrb.w	r3, [sp, #10]
  400e52:	f88d 3005 	strb.w	r3, [sp, #5]
	buf[2] = get_8b_to_16b(row_end);
  400e56:	f89d 3009 	ldrb.w	r3, [sp, #9]
  400e5a:	f88d 3006 	strb.w	r3, [sp, #6]
	buf[3] = get_0b_to_8b(row_end);
  400e5e:	f89d 3008 	ldrb.w	r3, [sp, #8]
  400e62:	f88d 3007 	strb.w	r3, [sp, #7]
	ili9488_write_register(ILI9488_CMD_PAGE_ADDRESS_SET, buf, cnt);
  400e66:	2204      	movs	r2, #4
  400e68:	eb0d 0102 	add.w	r1, sp, r2
  400e6c:	202b      	movs	r0, #43	; 0x2b
  400e6e:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  400e70:	2200      	movs	r2, #0
  400e72:	4611      	mov	r1, r2
  400e74:	4610      	mov	r0, r2
  400e76:	47a0      	blx	r4
}
  400e78:	b004      	add	sp, #16
  400e7a:	bd10      	pop	{r4, pc}
  400e7c:	00400d05 	.word	0x00400d05

00400e80 <ili9488_display_on>:

/**
 * \brief Turn on the LCD.
 */
void ili9488_display_on(void)
{
  400e80:	b508      	push	{r3, lr}
	ili9488_write_register(ILI9488_CMD_DISPLAY_ON, 0, 0);
  400e82:	2200      	movs	r2, #0
  400e84:	4611      	mov	r1, r2
  400e86:	2029      	movs	r0, #41	; 0x29
  400e88:	4b01      	ldr	r3, [pc, #4]	; (400e90 <ili9488_display_on+0x10>)
  400e8a:	4798      	blx	r3
  400e8c:	bd08      	pop	{r3, pc}
  400e8e:	bf00      	nop
  400e90:	00400d05 	.word	0x00400d05

00400e94 <ili9488_set_foreground_color>:
 * \brief Set foreground color.
 *
 * \param ul_color foreground color.
 */
void ili9488_set_foreground_color(uint32_t ul_color)
{
  400e94:	b410      	push	{r4}
		g_ul_pixel_cache[i] = ul_color;
	}
#endif
#ifdef ILI9488_SPIMODE
	for (i = 0; i < LCD_DATA_CACHE_SIZE * LCD_DATA_COLOR_UNIT; ) {
		g_ul_pixel_cache[i++] = ul_color>>16;
  400e96:	f3c0 4407 	ubfx	r4, r0, #16, #8
		g_ul_pixel_cache[i++] = ul_color>>8;
  400e9a:	f3c0 2107 	ubfx	r1, r0, #8, #8
  400e9e:	4b06      	ldr	r3, [pc, #24]	; (400eb8 <ili9488_set_foreground_color+0x24>)
  400ea0:	f503 7270 	add.w	r2, r3, #960	; 0x3c0
		g_ul_pixel_cache[i++] = ul_color>>16;
  400ea4:	701c      	strb	r4, [r3, #0]
		g_ul_pixel_cache[i++] = ul_color>>8;
  400ea6:	7059      	strb	r1, [r3, #1]
		g_ul_pixel_cache[i++] = ul_color&0xFF;
  400ea8:	7098      	strb	r0, [r3, #2]
  400eaa:	3303      	adds	r3, #3
	for (i = 0; i < LCD_DATA_CACHE_SIZE * LCD_DATA_COLOR_UNIT; ) {
  400eac:	4293      	cmp	r3, r2
  400eae:	d1f9      	bne.n	400ea4 <ili9488_set_foreground_color+0x10>
	}
#endif
}
  400eb0:	f85d 4b04 	ldr.w	r4, [sp], #4
  400eb4:	4770      	bx	lr
  400eb6:	bf00      	nop
  400eb8:	20400b0c 	.word	0x20400b0c

00400ebc <ili9488_set_cursor_position>:
 *
 * \param x X coordinate of upper-left corner on LCD.
 * \param y Y coordinate of upper-left corner on LCD.
 */
void ili9488_set_cursor_position(uint16_t x, uint16_t y)
{
  400ebc:	b510      	push	{r4, lr}
  400ebe:	b084      	sub	sp, #16
  400ec0:	f8ad 0006 	strh.w	r0, [sp, #6]
  400ec4:	f8ad 1004 	strh.w	r1, [sp, #4]
	uint32_t cnt = 0;

	ili9488_color_t buf[4];
	cnt = sizeof(buf)/sizeof(ili9488_color_t);

	buf[0] = get_8b_to_16b(x);
  400ec8:	0a03      	lsrs	r3, r0, #8
  400eca:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[1] = get_0b_to_8b(x);
  400ece:	b2c0      	uxtb	r0, r0
  400ed0:	f88d 000d 	strb.w	r0, [sp, #13]
	buf[2] = get_8b_to_16b(x);
  400ed4:	f88d 300e 	strb.w	r3, [sp, #14]
	buf[3] = get_0b_to_8b(x);
  400ed8:	f88d 000f 	strb.w	r0, [sp, #15]
	ili9488_write_register(ILI9488_CMD_COLUMN_ADDRESS_SET, buf, cnt);
  400edc:	2204      	movs	r2, #4
  400ede:	a903      	add	r1, sp, #12
  400ee0:	202a      	movs	r0, #42	; 0x2a
  400ee2:	4c0e      	ldr	r4, [pc, #56]	; (400f1c <ili9488_set_cursor_position+0x60>)
  400ee4:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  400ee6:	2200      	movs	r2, #0
  400ee8:	4611      	mov	r1, r2
  400eea:	4610      	mov	r0, r2
  400eec:	47a0      	blx	r4


	/* Set Horizontal Address End Position */
	buf[0] = get_8b_to_16b(y);
  400eee:	f89d 2005 	ldrb.w	r2, [sp, #5]
  400ef2:	f88d 200c 	strb.w	r2, [sp, #12]
	buf[1] = get_0b_to_8b(y);
  400ef6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  400efa:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[2] = get_8b_to_16b(y);
  400efe:	f88d 200e 	strb.w	r2, [sp, #14]
	buf[3] = get_0b_to_8b(y);
  400f02:	f88d 300f 	strb.w	r3, [sp, #15]
	ili9488_write_register(ILI9488_CMD_PAGE_ADDRESS_SET, buf, cnt);
  400f06:	2204      	movs	r2, #4
  400f08:	a903      	add	r1, sp, #12
  400f0a:	202b      	movs	r0, #43	; 0x2b
  400f0c:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  400f0e:	2200      	movs	r2, #0
  400f10:	4611      	mov	r1, r2
  400f12:	4610      	mov	r0, r2
  400f14:	47a0      	blx	r4
}
  400f16:	b004      	add	sp, #16
  400f18:	bd10      	pop	{r4, pc}
  400f1a:	bf00      	nop
  400f1c:	00400d05 	.word	0x00400d05

00400f20 <ili9488_init>:
{
  400f20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400f24:	b087      	sub	sp, #28
  400f26:	4681      	mov	r9, r0
	struct spi_device ILI9488_SPI_DEVICE = {
  400f28:	2703      	movs	r7, #3
  400f2a:	ae06      	add	r6, sp, #24
  400f2c:	f846 7d08 	str.w	r7, [r6, #-8]!
	spi_master_init(BOARD_ILI9488_SPI);
  400f30:	4d5d      	ldr	r5, [pc, #372]	; (4010a8 <ili9488_init+0x188>)
  400f32:	4628      	mov	r0, r5
  400f34:	4b5d      	ldr	r3, [pc, #372]	; (4010ac <ili9488_init+0x18c>)
  400f36:	4798      	blx	r3
	spi_master_setup_device(BOARD_ILI9488_SPI, &ILI9488_SPI_DEVICE, SPI_MODE_3, ILI9488_SPI_BAUDRATE, 0);
  400f38:	2400      	movs	r4, #0
  400f3a:	9400      	str	r4, [sp, #0]
  400f3c:	4b5c      	ldr	r3, [pc, #368]	; (4010b0 <ili9488_init+0x190>)
  400f3e:	463a      	mov	r2, r7
  400f40:	4631      	mov	r1, r6
  400f42:	4628      	mov	r0, r5
  400f44:	f8df 8198 	ldr.w	r8, [pc, #408]	; 4010e0 <ili9488_init+0x1c0>
  400f48:	47c0      	blx	r8
	spi_configure_cs_behavior(BOARD_ILI9488_SPI, BOARD_ILI9488_SPI_NPCS, SPI_CS_RISE_NO_TX);
  400f4a:	4622      	mov	r2, r4
  400f4c:	4639      	mov	r1, r7
  400f4e:	4628      	mov	r0, r5
  400f50:	4b58      	ldr	r3, [pc, #352]	; (4010b4 <ili9488_init+0x194>)
  400f52:	4798      	blx	r3
	spi_select_device(BOARD_ILI9488_SPI, &ILI9488_SPI_DEVICE);
  400f54:	4631      	mov	r1, r6
  400f56:	4628      	mov	r0, r5
  400f58:	4b57      	ldr	r3, [pc, #348]	; (4010b8 <ili9488_init+0x198>)
  400f5a:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400f5c:	2001      	movs	r0, #1
  400f5e:	6028      	str	r0, [r5, #0]
 * \param p_spi Pointer to an SPI instance.
 * \param ul_sources Interrupts to be enabled.
 */
static inline void spi_enable_interrupt(Spi *p_spi, uint32_t ul_sources)
{
	p_spi->SPI_IER = ul_sources;
  400f60:	6168      	str	r0, [r5, #20]
	ili9488_write_register(ILI9488_CMD_SOFTWARE_RESET, 0x0000, 0);
  400f62:	4622      	mov	r2, r4
  400f64:	4621      	mov	r1, r4
  400f66:	4e55      	ldr	r6, [pc, #340]	; (4010bc <ili9488_init+0x19c>)
  400f68:	47b0      	blx	r6
	ili9488_delay(200);
  400f6a:	20c8      	movs	r0, #200	; 0xc8
  400f6c:	4d54      	ldr	r5, [pc, #336]	; (4010c0 <ili9488_init+0x1a0>)
  400f6e:	47a8      	blx	r5
	ili9488_write_register(ILI9488_CMD_SLEEP_OUT, 0x0000, 0);
  400f70:	4622      	mov	r2, r4
  400f72:	4621      	mov	r1, r4
  400f74:	2011      	movs	r0, #17
  400f76:	47b0      	blx	r6
	ili9488_delay(200);
  400f78:	20c8      	movs	r0, #200	; 0xc8
  400f7a:	47a8      	blx	r5
	reg = 0x81;
  400f7c:	2381      	movs	r3, #129	; 0x81
  400f7e:	f88d 300a 	strb.w	r3, [sp, #10]
	param = 0x0;
  400f82:	f88d 400b 	strb.w	r4, [sp, #11]
  400f86:	2610      	movs	r6, #16
		ili9488_write_register(ILI9488_CMD_SPI_READ_SETTINGS, &reg, 1);
  400f88:	f04f 0801 	mov.w	r8, #1
  400f8c:	4f4b      	ldr	r7, [pc, #300]	; (4010bc <ili9488_init+0x19c>)
		for(j = 0; j < 0xFF; j++);
  400f8e:	4625      	mov	r5, r4
		ili9488_write_register(ILI9488_CMD_SPI_READ_SETTINGS, &reg, 1);
  400f90:	4642      	mov	r2, r8
  400f92:	f10d 010a 	add.w	r1, sp, #10
  400f96:	20fb      	movs	r0, #251	; 0xfb
  400f98:	47b8      	blx	r7
		reg++;
  400f9a:	f89d 300a 	ldrb.w	r3, [sp, #10]
  400f9e:	3301      	adds	r3, #1
  400fa0:	f88d 300a 	strb.w	r3, [sp, #10]
		for(j = 0; j < 0xFF; j++);
  400fa4:	9503      	str	r5, [sp, #12]
  400fa6:	9b03      	ldr	r3, [sp, #12]
  400fa8:	2bfe      	cmp	r3, #254	; 0xfe
  400faa:	d805      	bhi.n	400fb8 <ili9488_init+0x98>
  400fac:	9b03      	ldr	r3, [sp, #12]
  400fae:	3301      	adds	r3, #1
  400fb0:	9303      	str	r3, [sp, #12]
  400fb2:	9b03      	ldr	r3, [sp, #12]
  400fb4:	2bfe      	cmp	r3, #254	; 0xfe
  400fb6:	d9f9      	bls.n	400fac <ili9488_init+0x8c>
		ili9488_write_register(ILI9488_CMD_READ_ID4, 0, 0);
  400fb8:	462a      	mov	r2, r5
  400fba:	4629      	mov	r1, r5
  400fbc:	20d3      	movs	r0, #211	; 0xd3
  400fbe:	47b8      	blx	r7
			pio_set_pin_high(LCD_SPI_CDS_PIO);
  400fc0:	2006      	movs	r0, #6
  400fc2:	4b40      	ldr	r3, [pc, #256]	; (4010c4 <ili9488_init+0x1a4>)
  400fc4:	4798      	blx	r3
			spi_read_packet(BOARD_ILI9488_SPI, &chipidBuf, 1);
  400fc6:	4642      	mov	r2, r8
  400fc8:	f10d 0109 	add.w	r1, sp, #9
  400fcc:	4836      	ldr	r0, [pc, #216]	; (4010a8 <ili9488_init+0x188>)
  400fce:	4b3e      	ldr	r3, [pc, #248]	; (4010c8 <ili9488_init+0x1a8>)
  400fd0:	4798      	blx	r3
			for(j = 0; j < 0xFF; j++);
  400fd2:	9503      	str	r5, [sp, #12]
  400fd4:	9b03      	ldr	r3, [sp, #12]
  400fd6:	2bfe      	cmp	r3, #254	; 0xfe
  400fd8:	d805      	bhi.n	400fe6 <ili9488_init+0xc6>
  400fda:	9b03      	ldr	r3, [sp, #12]
  400fdc:	3301      	adds	r3, #1
  400fde:	9303      	str	r3, [sp, #12]
  400fe0:	9b03      	ldr	r3, [sp, #12]
  400fe2:	2bfe      	cmp	r3, #254	; 0xfe
  400fe4:	d9f9      	bls.n	400fda <ili9488_init+0xba>
		chipid |= (chipidBuf & 0xFF) << ((i - 1) << 3);
  400fe6:	f89d 3009 	ldrb.w	r3, [sp, #9]
  400fea:	40b3      	lsls	r3, r6
  400fec:	431c      	orrs	r4, r3
		ili9488_write_register(ILI9488_CMD_SPI_READ_SETTINGS, &param, 1);
  400fee:	4642      	mov	r2, r8
  400ff0:	f10d 010b 	add.w	r1, sp, #11
  400ff4:	20fb      	movs	r0, #251	; 0xfb
  400ff6:	47b8      	blx	r7
		for(j = 0; j < 0xFFF; j++);
  400ff8:	9503      	str	r5, [sp, #12]
  400ffa:	9a03      	ldr	r2, [sp, #12]
  400ffc:	f640 73fe 	movw	r3, #4094	; 0xffe
  401000:	429a      	cmp	r2, r3
  401002:	d806      	bhi.n	401012 <ili9488_init+0xf2>
  401004:	461a      	mov	r2, r3
  401006:	9b03      	ldr	r3, [sp, #12]
  401008:	3301      	adds	r3, #1
  40100a:	9303      	str	r3, [sp, #12]
  40100c:	9b03      	ldr	r3, [sp, #12]
  40100e:	4293      	cmp	r3, r2
  401010:	d9f9      	bls.n	401006 <ili9488_init+0xe6>
  401012:	3e08      	subs	r6, #8
	for (i = 3; i > 0; i--) {
  401014:	f116 0f08 	cmn.w	r6, #8
  401018:	d1ba      	bne.n	400f90 <ili9488_init+0x70>
	if (chipid != ILI9488_DEVICE_CODE) {
  40101a:	f249 4388 	movw	r3, #38024	; 0x9488
  40101e:	429c      	cmp	r4, r3
  401020:	d003      	beq.n	40102a <ili9488_init+0x10a>
		return 1;
  401022:	2001      	movs	r0, #1
}
  401024:	b007      	add	sp, #28
  401026:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	param = 0x48;
  40102a:	ad06      	add	r5, sp, #24
  40102c:	2348      	movs	r3, #72	; 0x48
  40102e:	f805 3d01 	strb.w	r3, [r5, #-1]!
	ili9488_write_register(ILI9488_CMD_MEMORY_ACCESS_CONTROL, &param, 1);
  401032:	2201      	movs	r2, #1
  401034:	4629      	mov	r1, r5
  401036:	2036      	movs	r0, #54	; 0x36
  401038:	4e20      	ldr	r6, [pc, #128]	; (4010bc <ili9488_init+0x19c>)
  40103a:	47b0      	blx	r6
	ili9488_delay(100);
  40103c:	2064      	movs	r0, #100	; 0x64
  40103e:	4c20      	ldr	r4, [pc, #128]	; (4010c0 <ili9488_init+0x1a0>)
  401040:	47a0      	blx	r4
	param = 0x04;
  401042:	2304      	movs	r3, #4
  401044:	f88d 3017 	strb.w	r3, [sp, #23]
	ili9488_write_register(ILI9488_CMD_CABC_CONTROL_9, &param, 1);
  401048:	2201      	movs	r2, #1
  40104a:	4629      	mov	r1, r5
  40104c:	20cf      	movs	r0, #207	; 0xcf
  40104e:	47b0      	blx	r6
	ili9488_delay(100);
  401050:	2064      	movs	r0, #100	; 0x64
  401052:	47a0      	blx	r4
	param = 0x06;
  401054:	2306      	movs	r3, #6
  401056:	f88d 3017 	strb.w	r3, [sp, #23]
	ili9488_write_register(ILI9488_CMD_COLMOD_PIXEL_FORMAT_SET, &param, 1);
  40105a:	2201      	movs	r2, #1
  40105c:	4629      	mov	r1, r5
  40105e:	203a      	movs	r0, #58	; 0x3a
  401060:	47b0      	blx	r6
	ili9488_delay(100);
  401062:	2064      	movs	r0, #100	; 0x64
  401064:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NORMAL_DISP_MODE_ON, 0, 0);
  401066:	2200      	movs	r2, #0
  401068:	4611      	mov	r1, r2
  40106a:	2013      	movs	r0, #19
  40106c:	47b0      	blx	r6
	ili9488_delay(100);
  40106e:	2064      	movs	r0, #100	; 0x64
  401070:	47a0      	blx	r4
	ili9488_display_on();
  401072:	4b16      	ldr	r3, [pc, #88]	; (4010cc <ili9488_init+0x1ac>)
  401074:	4798      	blx	r3
	ili9488_delay(100);
  401076:	2064      	movs	r0, #100	; 0x64
  401078:	47a0      	blx	r4
	ili9488_set_display_direction(LANDSCAPE);
  40107a:	2000      	movs	r0, #0
  40107c:	4b14      	ldr	r3, [pc, #80]	; (4010d0 <ili9488_init+0x1b0>)
  40107e:	4798      	blx	r3
	ili9488_delay(100);
  401080:	2064      	movs	r0, #100	; 0x64
  401082:	47a0      	blx	r4
	ili9488_set_window(0, 0,p_opt->ul_width,p_opt->ul_height);
  401084:	f8b9 3004 	ldrh.w	r3, [r9, #4]
  401088:	f8b9 2000 	ldrh.w	r2, [r9]
  40108c:	2100      	movs	r1, #0
  40108e:	4608      	mov	r0, r1
  401090:	4c10      	ldr	r4, [pc, #64]	; (4010d4 <ili9488_init+0x1b4>)
  401092:	47a0      	blx	r4
	ili9488_set_foreground_color(p_opt->foreground_color);
  401094:	f8d9 0008 	ldr.w	r0, [r9, #8]
  401098:	4b0f      	ldr	r3, [pc, #60]	; (4010d8 <ili9488_init+0x1b8>)
  40109a:	4798      	blx	r3
	ili9488_set_cursor_position(0, 0);
  40109c:	2100      	movs	r1, #0
  40109e:	4608      	mov	r0, r1
  4010a0:	4b0e      	ldr	r3, [pc, #56]	; (4010dc <ili9488_init+0x1bc>)
  4010a2:	4798      	blx	r3
	return 0;
  4010a4:	2000      	movs	r0, #0
  4010a6:	e7bd      	b.n	401024 <ili9488_init+0x104>
  4010a8:	40008000 	.word	0x40008000
  4010ac:	00400799 	.word	0x00400799
  4010b0:	01312d00 	.word	0x01312d00
  4010b4:	00401b5d 	.word	0x00401b5d
  4010b8:	0040086d 	.word	0x0040086d
  4010bc:	00400d05 	.word	0x00400d05
  4010c0:	00400db9 	.word	0x00400db9
  4010c4:	004014bd 	.word	0x004014bd
  4010c8:	004008d3 	.word	0x004008d3
  4010cc:	00400e81 	.word	0x00400e81
  4010d0:	00400dd5 	.word	0x00400dd5
  4010d4:	00400e01 	.word	0x00400e01
  4010d8:	00400e95 	.word	0x00400e95
  4010dc:	00400ebd 	.word	0x00400ebd
  4010e0:	004007ed 	.word	0x004007ed

004010e4 <ili9488_draw_pixel>:
 *
 * \return 0 if succeeds, otherwise fails.
 */
uint32_t ili9488_draw_pixel(uint32_t ul_x, uint32_t ul_y)
{
	if ((ul_x >= ILI9488_LCD_WIDTH) || (ul_y >= ILI9488_LCD_HEIGHT)) {
  4010e4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4010e8:	d20f      	bcs.n	40110a <ili9488_draw_pixel+0x26>
  4010ea:	f5b1 7ff0 	cmp.w	r1, #480	; 0x1e0
  4010ee:	d20c      	bcs.n	40110a <ili9488_draw_pixel+0x26>
{
  4010f0:	b508      	push	{r3, lr}
		return 1;
	}

	/* Set cursor */
	ili9488_set_cursor_position(ul_x, ul_y);
  4010f2:	b289      	uxth	r1, r1
  4010f4:	b280      	uxth	r0, r0
  4010f6:	4b06      	ldr	r3, [pc, #24]	; (401110 <ili9488_draw_pixel+0x2c>)
  4010f8:	4798      	blx	r3

	/* Prepare to write in GRAM */
	ili9488_write_ram_prepare();
  4010fa:	4b06      	ldr	r3, [pc, #24]	; (401114 <ili9488_draw_pixel+0x30>)
  4010fc:	4798      	blx	r3
	ili9488_write_ram_buffer(g_ul_pixel_cache, LCD_DATA_COLOR_UNIT);
  4010fe:	2103      	movs	r1, #3
  401100:	4805      	ldr	r0, [pc, #20]	; (401118 <ili9488_draw_pixel+0x34>)
  401102:	4b06      	ldr	r3, [pc, #24]	; (40111c <ili9488_draw_pixel+0x38>)
  401104:	4798      	blx	r3
	return 0;
  401106:	2000      	movs	r0, #0
  401108:	bd08      	pop	{r3, pc}
		return 1;
  40110a:	2001      	movs	r0, #1
  40110c:	4770      	bx	lr
  40110e:	bf00      	nop
  401110:	00400ebd 	.word	0x00400ebd
  401114:	00400cc9 	.word	0x00400cc9
  401118:	20400b0c 	.word	0x20400b0c
  40111c:	00400d79 	.word	0x00400d79

00401120 <ili9488_draw_filled_rectangle>:
 * \param ul_x2 X coordinate of lower-right corner on LCD.
 * \param ul_y2 Y coordinate of lower-right corner on LCD.
 */
void ili9488_draw_filled_rectangle(uint32_t ul_x1, uint32_t ul_y1,
		uint32_t ul_x2, uint32_t ul_y2)
{
  401120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401124:	b084      	sub	sp, #16
  401126:	9003      	str	r0, [sp, #12]
  401128:	9102      	str	r1, [sp, #8]
  40112a:	9201      	str	r2, [sp, #4]
  40112c:	aa04      	add	r2, sp, #16
  40112e:	f842 3d10 	str.w	r3, [r2, #-16]!
	uint32_t size, blocks;

	/* Swap coordinates if necessary */
	ili9488_check_box_coordinates(&ul_x1, &ul_y1, &ul_x2, &ul_y2);
  401132:	4613      	mov	r3, r2
  401134:	aa01      	add	r2, sp, #4
  401136:	a902      	add	r1, sp, #8
  401138:	a803      	add	r0, sp, #12
  40113a:	4c22      	ldr	r4, [pc, #136]	; (4011c4 <ili9488_draw_filled_rectangle+0xa4>)
  40113c:	47a0      	blx	r4

	/* Determine the refresh window area */
	ili9488_set_window(ul_x1, ul_y1, (ul_x2 - ul_x1) + 1, (ul_y2 - ul_y1) + 1);
  40113e:	f8bd 000c 	ldrh.w	r0, [sp, #12]
  401142:	f8bd 1008 	ldrh.w	r1, [sp, #8]
  401146:	9b00      	ldr	r3, [sp, #0]
  401148:	3301      	adds	r3, #1
  40114a:	1a5b      	subs	r3, r3, r1
  40114c:	9a01      	ldr	r2, [sp, #4]
  40114e:	3201      	adds	r2, #1
  401150:	1a12      	subs	r2, r2, r0
  401152:	b29b      	uxth	r3, r3
  401154:	b292      	uxth	r2, r2
  401156:	4c1c      	ldr	r4, [pc, #112]	; (4011c8 <ili9488_draw_filled_rectangle+0xa8>)
  401158:	47a0      	blx	r4

	/* Prepare to write in GRAM */
	ili9488_write_ram_prepare();
  40115a:	4b1c      	ldr	r3, [pc, #112]	; (4011cc <ili9488_draw_filled_rectangle+0xac>)
  40115c:	4798      	blx	r3

	size = (ul_x2 - ul_x1 + 1) * (ul_y2 - ul_y1 + 1);
  40115e:	9903      	ldr	r1, [sp, #12]
  401160:	9d01      	ldr	r5, [sp, #4]
  401162:	1a69      	subs	r1, r5, r1
  401164:	9d00      	ldr	r5, [sp, #0]
  401166:	3501      	adds	r5, #1
  401168:	9b02      	ldr	r3, [sp, #8]
  40116a:	1aed      	subs	r5, r5, r3
  40116c:	fb01 5505 	mla	r5, r1, r5, r5
	/* Send pixels blocks => one SPI IT / block */
	blocks = size / LCD_DATA_CACHE_SIZE;
  401170:	4b17      	ldr	r3, [pc, #92]	; (4011d0 <ili9488_draw_filled_rectangle+0xb0>)
  401172:	fba3 2305 	umull	r2, r3, r3, r5
  401176:	0a1b      	lsrs	r3, r3, #8
	while (blocks--) {
  401178:	b163      	cbz	r3, 401194 <ili9488_draw_filled_rectangle+0x74>
  40117a:	1e5c      	subs	r4, r3, #1
		ili9488_write_ram_buffer(g_ul_pixel_cache, LCD_DATA_CACHE_SIZE * LCD_DATA_COLOR_UNIT);
  40117c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 4011d8 <ili9488_draw_filled_rectangle+0xb8>
  401180:	f44f 7770 	mov.w	r7, #960	; 0x3c0
  401184:	4e13      	ldr	r6, [pc, #76]	; (4011d4 <ili9488_draw_filled_rectangle+0xb4>)
  401186:	4639      	mov	r1, r7
  401188:	4640      	mov	r0, r8
  40118a:	47b0      	blx	r6
	while (blocks--) {
  40118c:	3c01      	subs	r4, #1
  40118e:	f1b4 3fff 	cmp.w	r4, #4294967295
  401192:	d1f8      	bne.n	401186 <ili9488_draw_filled_rectangle+0x66>
	}

	/* Send remaining pixels */
	ili9488_write_ram_buffer(g_ul_pixel_cache, (size % LCD_DATA_CACHE_SIZE) * LCD_DATA_COLOR_UNIT);
  401194:	490e      	ldr	r1, [pc, #56]	; (4011d0 <ili9488_draw_filled_rectangle+0xb0>)
  401196:	fba1 3105 	umull	r3, r1, r1, r5
  40119a:	0a09      	lsrs	r1, r1, #8
  40119c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  4011a0:	eba5 1181 	sub.w	r1, r5, r1, lsl #6
  4011a4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  4011a8:	480b      	ldr	r0, [pc, #44]	; (4011d8 <ili9488_draw_filled_rectangle+0xb8>)
  4011aa:	4b0a      	ldr	r3, [pc, #40]	; (4011d4 <ili9488_draw_filled_rectangle+0xb4>)
  4011ac:	4798      	blx	r3

	/* Reset the refresh window area */
	ili9488_set_window(0, 0, ILI9488_LCD_WIDTH, ILI9488_LCD_HEIGHT);
  4011ae:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  4011b2:	f44f 72a0 	mov.w	r2, #320	; 0x140
  4011b6:	2100      	movs	r1, #0
  4011b8:	4608      	mov	r0, r1
  4011ba:	4c03      	ldr	r4, [pc, #12]	; (4011c8 <ili9488_draw_filled_rectangle+0xa8>)
  4011bc:	47a0      	blx	r4

}
  4011be:	b004      	add	sp, #16
  4011c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4011c4:	00400c71 	.word	0x00400c71
  4011c8:	00400e01 	.word	0x00400e01
  4011cc:	00400cc9 	.word	0x00400cc9
  4011d0:	cccccccd 	.word	0xcccccccd
  4011d4:	00400d79 	.word	0x00400d79
  4011d8:	20400b0c 	.word	0x20400b0c

004011dc <ili9488_draw_filled_circle>:
	signed int d;       /* Decision Variable */
	uint32_t dwCurX;    /* Current X Value */
	uint32_t dwCurY;    /* Current Y Value */
	uint32_t dwXmin, dwYmin;

	if (ul_r == 0) {
  4011dc:	2a00      	cmp	r2, #0
  4011de:	d04a      	beq.n	401276 <ili9488_draw_filled_circle+0x9a>
{
  4011e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4011e4:	4607      	mov	r7, r0
  4011e6:	4688      	mov	r8, r1
  4011e8:	4615      	mov	r5, r2
		return 1;
	}

	d = 3 - (ul_r << 1);
  4011ea:	0056      	lsls	r6, r2, #1
  4011ec:	f1c6 0603 	rsb	r6, r6, #3
	dwCurX = 0;
  4011f0:	2400      	movs	r4, #0
	dwCurY = ul_r;

	while (dwCurX <= dwCurY) {
		dwXmin = (dwCurX > ul_x) ? 0 : ul_x - dwCurX;
		dwYmin = (dwCurY > ul_y) ? 0 : ul_y - dwCurY;
		ili9488_draw_filled_rectangle(dwXmin, dwYmin, ul_x + dwCurX, dwYmin);
  4011f2:	f8df a088 	ldr.w	sl, [pc, #136]	; 40127c <ili9488_draw_filled_circle+0xa0>
  4011f6:	e005      	b.n	401204 <ili9488_draw_filled_circle+0x28>
		dwYmin = (dwCurX > ul_y) ? 0 : ul_y - dwCurX;
		ili9488_draw_filled_rectangle(dwXmin, dwYmin, ul_x + dwCurY, dwYmin);
		ili9488_draw_filled_rectangle(dwXmin, ul_y + dwCurX, ul_x + dwCurY, ul_y + dwCurX);

		if (d < 0) {
			d += (dwCurX << 2) + 6;
  4011f8:	3606      	adds	r6, #6
  4011fa:	eb06 0684 	add.w	r6, r6, r4, lsl #2
		} else {
			d += ((dwCurX - dwCurY) << 2) + 10;
			dwCurY--;
		}

		dwCurX++;
  4011fe:	3401      	adds	r4, #1
	while (dwCurX <= dwCurY) {
  401200:	42a5      	cmp	r5, r4
  401202:	d335      	bcc.n	401270 <ili9488_draw_filled_circle+0x94>
		dwXmin = (dwCurX > ul_x) ? 0 : ul_x - dwCurX;
  401204:	42a7      	cmp	r7, r4
  401206:	bf2c      	ite	cs
  401208:	eba7 0b04 	subcs.w	fp, r7, r4
  40120c:	f04f 0b00 	movcc.w	fp, #0
		dwYmin = (dwCurY > ul_y) ? 0 : ul_y - dwCurY;
  401210:	45a8      	cmp	r8, r5
  401212:	bf2c      	ite	cs
  401214:	eba8 0105 	subcs.w	r1, r8, r5
  401218:	2100      	movcc	r1, #0
		ili9488_draw_filled_rectangle(dwXmin, dwYmin, ul_x + dwCurX, dwYmin);
  40121a:	eb07 0904 	add.w	r9, r7, r4
  40121e:	460b      	mov	r3, r1
  401220:	464a      	mov	r2, r9
  401222:	4658      	mov	r0, fp
  401224:	47d0      	blx	sl
		ili9488_draw_filled_rectangle(dwXmin, ul_y + dwCurY, ul_x + dwCurX, ul_y + dwCurY);
  401226:	eb08 0105 	add.w	r1, r8, r5
  40122a:	460b      	mov	r3, r1
  40122c:	464a      	mov	r2, r9
  40122e:	4658      	mov	r0, fp
  401230:	47d0      	blx	sl
		dwXmin = (dwCurY > ul_x) ? 0 : ul_x - dwCurY;
  401232:	42af      	cmp	r7, r5
  401234:	bf2c      	ite	cs
  401236:	eba7 0b05 	subcs.w	fp, r7, r5
  40123a:	f04f 0b00 	movcc.w	fp, #0
		dwYmin = (dwCurX > ul_y) ? 0 : ul_y - dwCurX;
  40123e:	45a0      	cmp	r8, r4
  401240:	bf2c      	ite	cs
  401242:	eba8 0104 	subcs.w	r1, r8, r4
  401246:	2100      	movcc	r1, #0
		ili9488_draw_filled_rectangle(dwXmin, dwYmin, ul_x + dwCurY, dwYmin);
  401248:	eb07 0905 	add.w	r9, r7, r5
  40124c:	460b      	mov	r3, r1
  40124e:	464a      	mov	r2, r9
  401250:	4658      	mov	r0, fp
  401252:	47d0      	blx	sl
		ili9488_draw_filled_rectangle(dwXmin, ul_y + dwCurX, ul_x + dwCurY, ul_y + dwCurX);
  401254:	eb08 0104 	add.w	r1, r8, r4
  401258:	460b      	mov	r3, r1
  40125a:	464a      	mov	r2, r9
  40125c:	4658      	mov	r0, fp
  40125e:	47d0      	blx	sl
		if (d < 0) {
  401260:	2e00      	cmp	r6, #0
  401262:	dbc9      	blt.n	4011f8 <ili9488_draw_filled_circle+0x1c>
			d += ((dwCurX - dwCurY) << 2) + 10;
  401264:	1b63      	subs	r3, r4, r5
  401266:	360a      	adds	r6, #10
  401268:	eb06 0683 	add.w	r6, r6, r3, lsl #2
			dwCurY--;
  40126c:	3d01      	subs	r5, #1
  40126e:	e7c6      	b.n	4011fe <ili9488_draw_filled_circle+0x22>
	}

	return 0;
  401270:	2000      	movs	r0, #0
  401272:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 1;
  401276:	2001      	movs	r0, #1
  401278:	4770      	bx	lr
  40127a:	bf00      	nop
  40127c:	00401121 	.word	0x00401121

00401280 <ili9488_draw_string>:
 * \param ul_x X coordinate of string top-left corner.
 * \param ul_y Y coordinate of string top-left corner.
 * \param p_str String to display.
 */
void ili9488_draw_string(uint32_t ul_x, uint32_t ul_y, const uint8_t *p_str)
{
  401280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401284:	b085      	sub	sp, #20
  401286:	9003      	str	r0, [sp, #12]
  401288:	9202      	str	r2, [sp, #8]
	uint32_t xorg = ul_x;

	while (*p_str != 0) {
  40128a:	7813      	ldrb	r3, [r2, #0]
  40128c:	2b00      	cmp	r3, #0
  40128e:	d048      	beq.n	401322 <ili9488_draw_string+0xa2>
  401290:	468b      	mov	fp, r1
  401292:	9001      	str	r0, [sp, #4]
				ili9488_draw_pixel(ul_x + col, ul_y + row);
  401294:	f8df 8094 	ldr.w	r8, [pc, #148]	; 40132c <ili9488_draw_string+0xac>
  401298:	e033      	b.n	401302 <ili9488_draw_string+0x82>
		/* If newline, jump to the next line (font height + 2) */
		if (*p_str == '\n') {
			ul_y += gfont.height + 2;
  40129a:	f10b 0b10 	add.w	fp, fp, #16
			ul_x = xorg;
  40129e:	9b03      	ldr	r3, [sp, #12]
  4012a0:	9301      	str	r3, [sp, #4]
  4012a2:	e029      	b.n	4012f8 <ili9488_draw_string+0x78>
  4012a4:	3c01      	subs	r4, #1
		for (row = 0; row < 8; row++) {
  4012a6:	f1b4 3fff 	cmp.w	r4, #4294967295
  4012aa:	d009      	beq.n	4012c0 <ili9488_draw_string+0x40>
			if ((p_uc_charset10x14[offset0] >> (7 - row)) & 0x1) {
  4012ac:	782b      	ldrb	r3, [r5, #0]
  4012ae:	4123      	asrs	r3, r4
  4012b0:	f013 0f01 	tst.w	r3, #1
  4012b4:	d0f6      	beq.n	4012a4 <ili9488_draw_string+0x24>
				ili9488_draw_pixel(ul_x + col, ul_y + row);
  4012b6:	ebaa 0104 	sub.w	r1, sl, r4
  4012ba:	4630      	mov	r0, r6
  4012bc:	47c0      	blx	r8
  4012be:	e7f1      	b.n	4012a4 <ili9488_draw_string+0x24>
		for (row = 0; row < 8; row++) {
  4012c0:	2407      	movs	r4, #7
				ili9488_draw_pixel(ul_x + col, ul_y + row + 8);
  4012c2:	f10b 090f 	add.w	r9, fp, #15
  4012c6:	e002      	b.n	4012ce <ili9488_draw_string+0x4e>
  4012c8:	3c01      	subs	r4, #1
		for (row = 0; row < 6; row++) {
  4012ca:	2c01      	cmp	r4, #1
  4012cc:	d009      	beq.n	4012e2 <ili9488_draw_string+0x62>
			if ((p_uc_charset10x14[offset1] >> (7 - row)) & 0x1) {
  4012ce:	787b      	ldrb	r3, [r7, #1]
  4012d0:	4123      	asrs	r3, r4
  4012d2:	f013 0f01 	tst.w	r3, #1
  4012d6:	d0f7      	beq.n	4012c8 <ili9488_draw_string+0x48>
				ili9488_draw_pixel(ul_x + col, ul_y + row + 8);
  4012d8:	eba9 0104 	sub.w	r1, r9, r4
  4012dc:	4630      	mov	r0, r6
  4012de:	47c0      	blx	r8
  4012e0:	e7f2      	b.n	4012c8 <ili9488_draw_string+0x48>
  4012e2:	3502      	adds	r5, #2
  4012e4:	3601      	adds	r6, #1
	for (col = 0; col < 10; col++) {
  4012e6:	9b00      	ldr	r3, [sp, #0]
  4012e8:	42b3      	cmp	r3, r6
  4012ea:	d002      	beq.n	4012f2 <ili9488_draw_string+0x72>
	offset = ((uint32_t)uc_c - 0x20) * 20;
  4012ec:	2407      	movs	r4, #7
  4012ee:	462f      	mov	r7, r5
  4012f0:	e7dc      	b.n	4012ac <ili9488_draw_string+0x2c>
		} else {
			/* Draw the character and place cursor right after (font width + 2) */
			ili9488_draw_char(ul_x, ul_y, *p_str);
			ul_x += gfont.width + 2;
  4012f2:	9b01      	ldr	r3, [sp, #4]
  4012f4:	330c      	adds	r3, #12
  4012f6:	9301      	str	r3, [sp, #4]
	while (*p_str != 0) {
  4012f8:	9a02      	ldr	r2, [sp, #8]
  4012fa:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  4012fe:	9202      	str	r2, [sp, #8]
  401300:	b17b      	cbz	r3, 401322 <ili9488_draw_string+0xa2>
		if (*p_str == '\n') {
  401302:	2b0a      	cmp	r3, #10
  401304:	d0c9      	beq.n	40129a <ili9488_draw_string+0x1a>
	offset = ((uint32_t)uc_c - 0x20) * 20;
  401306:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40130a:	4d07      	ldr	r5, [pc, #28]	; (401328 <ili9488_draw_string+0xa8>)
  40130c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  401310:	f5a3 7520 	sub.w	r5, r3, #640	; 0x280
  401314:	9e01      	ldr	r6, [sp, #4]
  401316:	4633      	mov	r3, r6
  401318:	330a      	adds	r3, #10
  40131a:	9300      	str	r3, [sp, #0]
				ili9488_draw_pixel(ul_x + col, ul_y + row);
  40131c:	f10b 0a07 	add.w	sl, fp, #7
  401320:	e7e4      	b.n	4012ec <ili9488_draw_string+0x6c>
		}
		p_str++;
	}
}
  401322:	b005      	add	sp, #20
  401324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401328:	0040913c 	.word	0x0040913c
  40132c:	004010e5 	.word	0x004010e5

00401330 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  401330:	6301      	str	r1, [r0, #48]	; 0x30
  401332:	4770      	bx	lr

00401334 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401334:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401336:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40133a:	d03a      	beq.n	4013b2 <pio_set_peripheral+0x7e>
  40133c:	d813      	bhi.n	401366 <pio_set_peripheral+0x32>
  40133e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401342:	d025      	beq.n	401390 <pio_set_peripheral+0x5c>
  401344:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401348:	d10a      	bne.n	401360 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40134a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40134c:	4313      	orrs	r3, r2
  40134e:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401350:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401352:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401354:	400b      	ands	r3, r1
  401356:	ea23 0302 	bic.w	r3, r3, r2
  40135a:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40135c:	6042      	str	r2, [r0, #4]
  40135e:	4770      	bx	lr
	switch (ul_type) {
  401360:	2900      	cmp	r1, #0
  401362:	d1fb      	bne.n	40135c <pio_set_peripheral+0x28>
  401364:	4770      	bx	lr
  401366:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40136a:	d021      	beq.n	4013b0 <pio_set_peripheral+0x7c>
  40136c:	d809      	bhi.n	401382 <pio_set_peripheral+0x4e>
  40136e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401372:	d1f3      	bne.n	40135c <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  401374:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401376:	4313      	orrs	r3, r2
  401378:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40137a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40137c:	4313      	orrs	r3, r2
  40137e:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401380:	e7ec      	b.n	40135c <pio_set_peripheral+0x28>
	switch (ul_type) {
  401382:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401386:	d013      	beq.n	4013b0 <pio_set_peripheral+0x7c>
  401388:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  40138c:	d010      	beq.n	4013b0 <pio_set_peripheral+0x7c>
  40138e:	e7e5      	b.n	40135c <pio_set_peripheral+0x28>
{
  401390:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  401392:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401394:	6f04      	ldr	r4, [r0, #112]	; 0x70
  401396:	43d3      	mvns	r3, r2
  401398:	4021      	ands	r1, r4
  40139a:	461c      	mov	r4, r3
  40139c:	4019      	ands	r1, r3
  40139e:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4013a0:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4013a2:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4013a4:	400b      	ands	r3, r1
  4013a6:	4023      	ands	r3, r4
  4013a8:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4013aa:	6042      	str	r2, [r0, #4]
}
  4013ac:	f85d 4b04 	ldr.w	r4, [sp], #4
  4013b0:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4013b2:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4013b4:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4013b6:	400b      	ands	r3, r1
  4013b8:	ea23 0302 	bic.w	r3, r3, r2
  4013bc:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4013be:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4013c0:	4313      	orrs	r3, r2
  4013c2:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4013c4:	e7ca      	b.n	40135c <pio_set_peripheral+0x28>

004013c6 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4013c6:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4013c8:	f012 0f01 	tst.w	r2, #1
  4013cc:	d10d      	bne.n	4013ea <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  4013ce:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4013d0:	f012 0f0a 	tst.w	r2, #10
  4013d4:	d00b      	beq.n	4013ee <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  4013d6:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  4013d8:	f012 0f02 	tst.w	r2, #2
  4013dc:	d109      	bne.n	4013f2 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  4013de:	f012 0f08 	tst.w	r2, #8
  4013e2:	d008      	beq.n	4013f6 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  4013e4:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  4013e8:	e005      	b.n	4013f6 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  4013ea:	6641      	str	r1, [r0, #100]	; 0x64
  4013ec:	e7f0      	b.n	4013d0 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  4013ee:	6241      	str	r1, [r0, #36]	; 0x24
  4013f0:	e7f2      	b.n	4013d8 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  4013f2:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  4013f6:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4013f8:	6001      	str	r1, [r0, #0]
  4013fa:	4770      	bx	lr

004013fc <pio_set_output>:
{
  4013fc:	b410      	push	{r4}
  4013fe:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  401400:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  401402:	b94c      	cbnz	r4, 401418 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  401404:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  401406:	b14b      	cbz	r3, 40141c <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  401408:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  40140a:	b94a      	cbnz	r2, 401420 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  40140c:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  40140e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  401410:	6001      	str	r1, [r0, #0]
}
  401412:	f85d 4b04 	ldr.w	r4, [sp], #4
  401416:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  401418:	6641      	str	r1, [r0, #100]	; 0x64
  40141a:	e7f4      	b.n	401406 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  40141c:	6541      	str	r1, [r0, #84]	; 0x54
  40141e:	e7f4      	b.n	40140a <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  401420:	6301      	str	r1, [r0, #48]	; 0x30
  401422:	e7f4      	b.n	40140e <pio_set_output+0x12>

00401424 <pio_configure>:
{
  401424:	b570      	push	{r4, r5, r6, lr}
  401426:	b082      	sub	sp, #8
  401428:	4605      	mov	r5, r0
  40142a:	4616      	mov	r6, r2
  40142c:	461c      	mov	r4, r3
	switch (ul_type) {
  40142e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401432:	d014      	beq.n	40145e <pio_configure+0x3a>
  401434:	d90a      	bls.n	40144c <pio_configure+0x28>
  401436:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40143a:	d024      	beq.n	401486 <pio_configure+0x62>
  40143c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401440:	d021      	beq.n	401486 <pio_configure+0x62>
  401442:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401446:	d017      	beq.n	401478 <pio_configure+0x54>
		return 0;
  401448:	2000      	movs	r0, #0
  40144a:	e01a      	b.n	401482 <pio_configure+0x5e>
	switch (ul_type) {
  40144c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401450:	d005      	beq.n	40145e <pio_configure+0x3a>
  401452:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401456:	d002      	beq.n	40145e <pio_configure+0x3a>
  401458:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40145c:	d1f4      	bne.n	401448 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  40145e:	4632      	mov	r2, r6
  401460:	4628      	mov	r0, r5
  401462:	4b11      	ldr	r3, [pc, #68]	; (4014a8 <pio_configure+0x84>)
  401464:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401466:	f014 0f01 	tst.w	r4, #1
  40146a:	d102      	bne.n	401472 <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  40146c:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  40146e:	2001      	movs	r0, #1
  401470:	e007      	b.n	401482 <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  401472:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  401474:	2001      	movs	r0, #1
  401476:	e004      	b.n	401482 <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  401478:	461a      	mov	r2, r3
  40147a:	4631      	mov	r1, r6
  40147c:	4b0b      	ldr	r3, [pc, #44]	; (4014ac <pio_configure+0x88>)
  40147e:	4798      	blx	r3
	return 1;
  401480:	2001      	movs	r0, #1
}
  401482:	b002      	add	sp, #8
  401484:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  401486:	f004 0301 	and.w	r3, r4, #1
  40148a:	9300      	str	r3, [sp, #0]
  40148c:	f3c4 0380 	ubfx	r3, r4, #2, #1
  401490:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401494:	bf14      	ite	ne
  401496:	2200      	movne	r2, #0
  401498:	2201      	moveq	r2, #1
  40149a:	4631      	mov	r1, r6
  40149c:	4628      	mov	r0, r5
  40149e:	4c04      	ldr	r4, [pc, #16]	; (4014b0 <pio_configure+0x8c>)
  4014a0:	47a0      	blx	r4
	return 1;
  4014a2:	2001      	movs	r0, #1
		break;
  4014a4:	e7ed      	b.n	401482 <pio_configure+0x5e>
  4014a6:	bf00      	nop
  4014a8:	00401335 	.word	0x00401335
  4014ac:	004013c7 	.word	0x004013c7
  4014b0:	004013fd 	.word	0x004013fd

004014b4 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4014b4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4014b6:	4770      	bx	lr

004014b8 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4014b8:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4014ba:	4770      	bx	lr

004014bc <pio_set_pin_high>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4014bc:	4b05      	ldr	r3, [pc, #20]	; (4014d4 <pio_set_pin_high+0x18>)
  4014be:	eb03 1350 	add.w	r3, r3, r0, lsr #5
  4014c2:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  4014c4:	f000 001f 	and.w	r0, r0, #31
  4014c8:	2201      	movs	r2, #1
  4014ca:	fa02 f000 	lsl.w	r0, r2, r0
  4014ce:	6318      	str	r0, [r3, #48]	; 0x30
  4014d0:	4770      	bx	lr
  4014d2:	bf00      	nop
  4014d4:	00200707 	.word	0x00200707

004014d8 <pio_set_pin_low>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4014d8:	4b05      	ldr	r3, [pc, #20]	; (4014f0 <pio_set_pin_low+0x18>)
  4014da:	eb03 1350 	add.w	r3, r3, r0, lsr #5
  4014de:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  4014e0:	f000 001f 	and.w	r0, r0, #31
  4014e4:	2201      	movs	r2, #1
  4014e6:	fa02 f000 	lsl.w	r0, r2, r0
  4014ea:	6358      	str	r0, [r3, #52]	; 0x34
  4014ec:	4770      	bx	lr
  4014ee:	bf00      	nop
  4014f0:	00200707 	.word	0x00200707

004014f4 <pio_configure_pin>:
{
  4014f4:	b570      	push	{r4, r5, r6, lr}
  4014f6:	b082      	sub	sp, #8
  4014f8:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4014fa:	4c46      	ldr	r4, [pc, #280]	; (401614 <pio_configure_pin+0x120>)
  4014fc:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  401500:	0264      	lsls	r4, r4, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  401502:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  401506:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40150a:	d059      	beq.n	4015c0 <pio_configure_pin+0xcc>
  40150c:	d80a      	bhi.n	401524 <pio_configure_pin+0x30>
  40150e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401512:	d02f      	beq.n	401574 <pio_configure_pin+0x80>
  401514:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401518:	d03f      	beq.n	40159a <pio_configure_pin+0xa6>
  40151a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40151e:	d016      	beq.n	40154e <pio_configure_pin+0x5a>
		return 0;
  401520:	2000      	movs	r0, #0
  401522:	e012      	b.n	40154a <pio_configure_pin+0x56>
	switch (ul_flags & PIO_TYPE_Msk) {
  401524:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401528:	d05d      	beq.n	4015e6 <pio_configure_pin+0xf2>
  40152a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40152e:	d05a      	beq.n	4015e6 <pio_configure_pin+0xf2>
  401530:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401534:	d1f4      	bne.n	401520 <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  401536:	f000 011f 	and.w	r1, r0, #31
  40153a:	2601      	movs	r6, #1
  40153c:	462a      	mov	r2, r5
  40153e:	fa06 f101 	lsl.w	r1, r6, r1
  401542:	4620      	mov	r0, r4
  401544:	4b34      	ldr	r3, [pc, #208]	; (401618 <pio_configure_pin+0x124>)
  401546:	4798      	blx	r3
	return 1;
  401548:	4630      	mov	r0, r6
}
  40154a:	b002      	add	sp, #8
  40154c:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  40154e:	f000 001f 	and.w	r0, r0, #31
  401552:	2601      	movs	r6, #1
  401554:	4086      	lsls	r6, r0
  401556:	4632      	mov	r2, r6
  401558:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40155c:	4620      	mov	r0, r4
  40155e:	4b2f      	ldr	r3, [pc, #188]	; (40161c <pio_configure_pin+0x128>)
  401560:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401562:	f015 0f01 	tst.w	r5, #1
  401566:	d102      	bne.n	40156e <pio_configure_pin+0x7a>
		p_pio->PIO_PUDR = ul_mask;
  401568:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  40156a:	2001      	movs	r0, #1
  40156c:	e7ed      	b.n	40154a <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  40156e:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  401570:	2001      	movs	r0, #1
  401572:	e7ea      	b.n	40154a <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  401574:	f000 001f 	and.w	r0, r0, #31
  401578:	2601      	movs	r6, #1
  40157a:	4086      	lsls	r6, r0
  40157c:	4632      	mov	r2, r6
  40157e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401582:	4620      	mov	r0, r4
  401584:	4b25      	ldr	r3, [pc, #148]	; (40161c <pio_configure_pin+0x128>)
  401586:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401588:	f015 0f01 	tst.w	r5, #1
  40158c:	d102      	bne.n	401594 <pio_configure_pin+0xa0>
		p_pio->PIO_PUDR = ul_mask;
  40158e:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  401590:	2001      	movs	r0, #1
  401592:	e7da      	b.n	40154a <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  401594:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  401596:	2001      	movs	r0, #1
  401598:	e7d7      	b.n	40154a <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  40159a:	f000 001f 	and.w	r0, r0, #31
  40159e:	2601      	movs	r6, #1
  4015a0:	4086      	lsls	r6, r0
  4015a2:	4632      	mov	r2, r6
  4015a4:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4015a8:	4620      	mov	r0, r4
  4015aa:	4b1c      	ldr	r3, [pc, #112]	; (40161c <pio_configure_pin+0x128>)
  4015ac:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4015ae:	f015 0f01 	tst.w	r5, #1
  4015b2:	d102      	bne.n	4015ba <pio_configure_pin+0xc6>
		p_pio->PIO_PUDR = ul_mask;
  4015b4:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4015b6:	2001      	movs	r0, #1
  4015b8:	e7c7      	b.n	40154a <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4015ba:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4015bc:	2001      	movs	r0, #1
  4015be:	e7c4      	b.n	40154a <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4015c0:	f000 001f 	and.w	r0, r0, #31
  4015c4:	2601      	movs	r6, #1
  4015c6:	4086      	lsls	r6, r0
  4015c8:	4632      	mov	r2, r6
  4015ca:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4015ce:	4620      	mov	r0, r4
  4015d0:	4b12      	ldr	r3, [pc, #72]	; (40161c <pio_configure_pin+0x128>)
  4015d2:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4015d4:	f015 0f01 	tst.w	r5, #1
  4015d8:	d102      	bne.n	4015e0 <pio_configure_pin+0xec>
		p_pio->PIO_PUDR = ul_mask;
  4015da:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4015dc:	2001      	movs	r0, #1
  4015de:	e7b4      	b.n	40154a <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4015e0:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4015e2:	2001      	movs	r0, #1
  4015e4:	e7b1      	b.n	40154a <pio_configure_pin+0x56>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4015e6:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4015ea:	f000 011f 	and.w	r1, r0, #31
  4015ee:	2601      	movs	r6, #1
  4015f0:	ea05 0306 	and.w	r3, r5, r6
  4015f4:	9300      	str	r3, [sp, #0]
  4015f6:	f3c5 0380 	ubfx	r3, r5, #2, #1
  4015fa:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4015fe:	bf14      	ite	ne
  401600:	2200      	movne	r2, #0
  401602:	2201      	moveq	r2, #1
  401604:	fa06 f101 	lsl.w	r1, r6, r1
  401608:	4620      	mov	r0, r4
  40160a:	4c05      	ldr	r4, [pc, #20]	; (401620 <pio_configure_pin+0x12c>)
  40160c:	47a0      	blx	r4
	return 1;
  40160e:	4630      	mov	r0, r6
		break;
  401610:	e79b      	b.n	40154a <pio_configure_pin+0x56>
  401612:	bf00      	nop
  401614:	00200707 	.word	0x00200707
  401618:	004013c7 	.word	0x004013c7
  40161c:	00401335 	.word	0x00401335
  401620:	004013fd 	.word	0x004013fd

00401624 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401628:	4604      	mov	r4, r0
  40162a:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40162c:	4b0e      	ldr	r3, [pc, #56]	; (401668 <pio_handler_process+0x44>)
  40162e:	4798      	blx	r3
  401630:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401632:	4620      	mov	r0, r4
  401634:	4b0d      	ldr	r3, [pc, #52]	; (40166c <pio_handler_process+0x48>)
  401636:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  401638:	4005      	ands	r5, r0
  40163a:	d013      	beq.n	401664 <pio_handler_process+0x40>
  40163c:	4c0c      	ldr	r4, [pc, #48]	; (401670 <pio_handler_process+0x4c>)
  40163e:	f104 0660 	add.w	r6, r4, #96	; 0x60
  401642:	e003      	b.n	40164c <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  401644:	42b4      	cmp	r4, r6
  401646:	d00d      	beq.n	401664 <pio_handler_process+0x40>
  401648:	3410      	adds	r4, #16
		while (status != 0) {
  40164a:	b15d      	cbz	r5, 401664 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  40164c:	6820      	ldr	r0, [r4, #0]
  40164e:	4540      	cmp	r0, r8
  401650:	d1f8      	bne.n	401644 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401652:	6861      	ldr	r1, [r4, #4]
  401654:	4229      	tst	r1, r5
  401656:	d0f5      	beq.n	401644 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401658:	68e3      	ldr	r3, [r4, #12]
  40165a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  40165c:	6863      	ldr	r3, [r4, #4]
  40165e:	ea25 0503 	bic.w	r5, r5, r3
  401662:	e7ef      	b.n	401644 <pio_handler_process+0x20>
  401664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401668:	004014b5 	.word	0x004014b5
  40166c:	004014b9 	.word	0x004014b9
  401670:	20400ecc 	.word	0x20400ecc

00401674 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401674:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  401676:	210a      	movs	r1, #10
  401678:	4801      	ldr	r0, [pc, #4]	; (401680 <PIOA_Handler+0xc>)
  40167a:	4b02      	ldr	r3, [pc, #8]	; (401684 <PIOA_Handler+0x10>)
  40167c:	4798      	blx	r3
  40167e:	bd08      	pop	{r3, pc}
  401680:	400e0e00 	.word	0x400e0e00
  401684:	00401625 	.word	0x00401625

00401688 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401688:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40168a:	210b      	movs	r1, #11
  40168c:	4801      	ldr	r0, [pc, #4]	; (401694 <PIOB_Handler+0xc>)
  40168e:	4b02      	ldr	r3, [pc, #8]	; (401698 <PIOB_Handler+0x10>)
  401690:	4798      	blx	r3
  401692:	bd08      	pop	{r3, pc}
  401694:	400e1000 	.word	0x400e1000
  401698:	00401625 	.word	0x00401625

0040169c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  40169c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40169e:	210c      	movs	r1, #12
  4016a0:	4801      	ldr	r0, [pc, #4]	; (4016a8 <PIOC_Handler+0xc>)
  4016a2:	4b02      	ldr	r3, [pc, #8]	; (4016ac <PIOC_Handler+0x10>)
  4016a4:	4798      	blx	r3
  4016a6:	bd08      	pop	{r3, pc}
  4016a8:	400e1200 	.word	0x400e1200
  4016ac:	00401625 	.word	0x00401625

004016b0 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4016b0:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4016b2:	2110      	movs	r1, #16
  4016b4:	4801      	ldr	r0, [pc, #4]	; (4016bc <PIOD_Handler+0xc>)
  4016b6:	4b02      	ldr	r3, [pc, #8]	; (4016c0 <PIOD_Handler+0x10>)
  4016b8:	4798      	blx	r3
  4016ba:	bd08      	pop	{r3, pc}
  4016bc:	400e1400 	.word	0x400e1400
  4016c0:	00401625 	.word	0x00401625

004016c4 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4016c4:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  4016c6:	2111      	movs	r1, #17
  4016c8:	4801      	ldr	r0, [pc, #4]	; (4016d0 <PIOE_Handler+0xc>)
  4016ca:	4b02      	ldr	r3, [pc, #8]	; (4016d4 <PIOE_Handler+0x10>)
  4016cc:	4798      	blx	r3
  4016ce:	bd08      	pop	{r3, pc}
  4016d0:	400e1600 	.word	0x400e1600
  4016d4:	00401625 	.word	0x00401625

004016d8 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  4016d8:	2803      	cmp	r0, #3
  4016da:	d011      	beq.n	401700 <pmc_mck_set_division+0x28>
  4016dc:	2804      	cmp	r0, #4
  4016de:	d012      	beq.n	401706 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4016e0:	2802      	cmp	r0, #2
  4016e2:	bf0c      	ite	eq
  4016e4:	f44f 7180 	moveq.w	r1, #256	; 0x100
  4016e8:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4016ea:	4a08      	ldr	r2, [pc, #32]	; (40170c <pmc_mck_set_division+0x34>)
  4016ec:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4016ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  4016f2:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  4016f4:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4016f6:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4016f8:	f013 0f08 	tst.w	r3, #8
  4016fc:	d0fb      	beq.n	4016f6 <pmc_mck_set_division+0x1e>
}
  4016fe:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  401700:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  401704:	e7f1      	b.n	4016ea <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  401706:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  40170a:	e7ee      	b.n	4016ea <pmc_mck_set_division+0x12>
  40170c:	400e0600 	.word	0x400e0600

00401710 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401710:	4a17      	ldr	r2, [pc, #92]	; (401770 <pmc_switch_mck_to_pllack+0x60>)
  401712:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401718:	4318      	orrs	r0, r3
  40171a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40171c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40171e:	f013 0f08 	tst.w	r3, #8
  401722:	d10a      	bne.n	40173a <pmc_switch_mck_to_pllack+0x2a>
  401724:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401728:	4911      	ldr	r1, [pc, #68]	; (401770 <pmc_switch_mck_to_pllack+0x60>)
  40172a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40172c:	f012 0f08 	tst.w	r2, #8
  401730:	d103      	bne.n	40173a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401732:	3b01      	subs	r3, #1
  401734:	d1f9      	bne.n	40172a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  401736:	2001      	movs	r0, #1
  401738:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40173a:	4a0d      	ldr	r2, [pc, #52]	; (401770 <pmc_switch_mck_to_pllack+0x60>)
  40173c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40173e:	f023 0303 	bic.w	r3, r3, #3
  401742:	f043 0302 	orr.w	r3, r3, #2
  401746:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401748:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40174a:	f013 0f08 	tst.w	r3, #8
  40174e:	d10a      	bne.n	401766 <pmc_switch_mck_to_pllack+0x56>
  401750:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401754:	4906      	ldr	r1, [pc, #24]	; (401770 <pmc_switch_mck_to_pllack+0x60>)
  401756:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401758:	f012 0f08 	tst.w	r2, #8
  40175c:	d105      	bne.n	40176a <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40175e:	3b01      	subs	r3, #1
  401760:	d1f9      	bne.n	401756 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  401762:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401764:	4770      	bx	lr
	return 0;
  401766:	2000      	movs	r0, #0
  401768:	4770      	bx	lr
  40176a:	2000      	movs	r0, #0
  40176c:	4770      	bx	lr
  40176e:	bf00      	nop
  401770:	400e0600 	.word	0x400e0600

00401774 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401774:	b9a0      	cbnz	r0, 4017a0 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401776:	480e      	ldr	r0, [pc, #56]	; (4017b0 <pmc_switch_mainck_to_xtal+0x3c>)
  401778:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40177a:	0209      	lsls	r1, r1, #8
  40177c:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40177e:	4a0d      	ldr	r2, [pc, #52]	; (4017b4 <pmc_switch_mainck_to_xtal+0x40>)
  401780:	401a      	ands	r2, r3
  401782:	4b0d      	ldr	r3, [pc, #52]	; (4017b8 <pmc_switch_mainck_to_xtal+0x44>)
  401784:	4313      	orrs	r3, r2
  401786:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401788:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40178a:	4602      	mov	r2, r0
  40178c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40178e:	f013 0f01 	tst.w	r3, #1
  401792:	d0fb      	beq.n	40178c <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401794:	4a06      	ldr	r2, [pc, #24]	; (4017b0 <pmc_switch_mainck_to_xtal+0x3c>)
  401796:	6a11      	ldr	r1, [r2, #32]
  401798:	4b08      	ldr	r3, [pc, #32]	; (4017bc <pmc_switch_mainck_to_xtal+0x48>)
  40179a:	430b      	orrs	r3, r1
  40179c:	6213      	str	r3, [r2, #32]
  40179e:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4017a0:	4903      	ldr	r1, [pc, #12]	; (4017b0 <pmc_switch_mainck_to_xtal+0x3c>)
  4017a2:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4017a4:	4a06      	ldr	r2, [pc, #24]	; (4017c0 <pmc_switch_mainck_to_xtal+0x4c>)
  4017a6:	401a      	ands	r2, r3
  4017a8:	4b06      	ldr	r3, [pc, #24]	; (4017c4 <pmc_switch_mainck_to_xtal+0x50>)
  4017aa:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4017ac:	620b      	str	r3, [r1, #32]
  4017ae:	4770      	bx	lr
  4017b0:	400e0600 	.word	0x400e0600
  4017b4:	ffc8fffc 	.word	0xffc8fffc
  4017b8:	00370001 	.word	0x00370001
  4017bc:	01370000 	.word	0x01370000
  4017c0:	fec8fffc 	.word	0xfec8fffc
  4017c4:	01370002 	.word	0x01370002

004017c8 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4017c8:	4b02      	ldr	r3, [pc, #8]	; (4017d4 <pmc_osc_is_ready_mainck+0xc>)
  4017ca:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4017cc:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4017d0:	4770      	bx	lr
  4017d2:	bf00      	nop
  4017d4:	400e0600 	.word	0x400e0600

004017d8 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4017d8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4017dc:	4b01      	ldr	r3, [pc, #4]	; (4017e4 <pmc_disable_pllack+0xc>)
  4017de:	629a      	str	r2, [r3, #40]	; 0x28
  4017e0:	4770      	bx	lr
  4017e2:	bf00      	nop
  4017e4:	400e0600 	.word	0x400e0600

004017e8 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4017e8:	4b02      	ldr	r3, [pc, #8]	; (4017f4 <pmc_is_locked_pllack+0xc>)
  4017ea:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4017ec:	f000 0002 	and.w	r0, r0, #2
  4017f0:	4770      	bx	lr
  4017f2:	bf00      	nop
  4017f4:	400e0600 	.word	0x400e0600

004017f8 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  4017f8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  4017fc:	4b05      	ldr	r3, [pc, #20]	; (401814 <pmc_enable_periph_clk+0x1c>)
  4017fe:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  401802:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  401806:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  40180a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  40180e:	2000      	movs	r0, #0
  401810:	4770      	bx	lr
  401812:	bf00      	nop
  401814:	400e0600 	.word	0x400e0600

00401818 <rtc_set_hour_mode>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
  401818:	b921      	cbnz	r1, 401824 <rtc_set_hour_mode+0xc>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  40181a:	6843      	ldr	r3, [r0, #4]
  40181c:	f023 0301 	bic.w	r3, r3, #1
  401820:	6043      	str	r3, [r0, #4]
  401822:	4770      	bx	lr
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  401824:	6843      	ldr	r3, [r0, #4]
  401826:	f043 0301 	orr.w	r3, r3, #1
  40182a:	6043      	str	r3, [r0, #4]
  40182c:	4770      	bx	lr

0040182e <rtc_enable_interrupt>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
	p_rtc->RTC_IER = ul_sources;
  40182e:	6201      	str	r1, [r0, #32]
  401830:	4770      	bx	lr

00401832 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  401832:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  401834:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  401836:	6884      	ldr	r4, [r0, #8]
  401838:	42a5      	cmp	r5, r4
  40183a:	d003      	beq.n	401844 <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
  40183c:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  40183e:	6884      	ldr	r4, [r0, #8]
  401840:	42ac      	cmp	r4, r5
  401842:	d1fb      	bne.n	40183c <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
  401844:	b161      	cbz	r1, 401860 <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  401846:	f3c4 5001 	ubfx	r0, r4, #20, #2
  40184a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  40184e:	f3c4 4003 	ubfx	r0, r4, #16, #4
  401852:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  401856:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
  40185a:	bf18      	it	ne
  40185c:	300c      	addne	r0, #12
  40185e:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  401860:	b142      	cbz	r2, 401874 <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  401862:	f3c4 3102 	ubfx	r1, r4, #12, #3
  401866:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  40186a:	f3c4 2003 	ubfx	r0, r4, #8, #4
  40186e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  401872:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  401874:	b143      	cbz	r3, 401888 <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  401876:	f3c4 1202 	ubfx	r2, r4, #4, #3
  40187a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40187e:	f004 040f 	and.w	r4, r4, #15
  401882:	eb04 0442 	add.w	r4, r4, r2, lsl #1
  401886:	601c      	str	r4, [r3, #0]
	}
}
  401888:	bc30      	pop	{r4, r5}
  40188a:	4770      	bx	lr

0040188c <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  40188c:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ul_time = 0;

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  40188e:	6844      	ldr	r4, [r0, #4]
		if (ul_hour > 12) {
  401890:	f014 0f01 	tst.w	r4, #1
  401894:	d005      	beq.n	4018a2 <rtc_set_time+0x16>
  401896:	290c      	cmp	r1, #12
  401898:	d903      	bls.n	4018a2 <rtc_set_time+0x16>
			ul_hour -= 12;
  40189a:	390c      	subs	r1, #12
			ul_time |= RTC_TIMR_AMPM;
  40189c:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  4018a0:	e000      	b.n	4018a4 <rtc_set_time+0x18>
	uint32_t ul_time = 0;
  4018a2:	2700      	movs	r7, #0
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  4018a4:	4c1c      	ldr	r4, [pc, #112]	; (401918 <rtc_set_time+0x8c>)
  4018a6:	fba4 5603 	umull	r5, r6, r4, r3
  4018aa:	08f6      	lsrs	r6, r6, #3
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  4018ac:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  4018b0:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
  4018b4:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  4018b8:	fba4 6502 	umull	r6, r5, r4, r2
  4018bc:	08ed      	lsrs	r5, r5, #3
  4018be:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  4018c2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  4018c6:	eba2 0545 	sub.w	r5, r2, r5, lsl #1
  4018ca:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  4018ce:	433b      	orrs	r3, r7
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  4018d0:	fba4 4201 	umull	r4, r2, r4, r1
  4018d4:	08d2      	lsrs	r2, r2, #3
  4018d6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  4018da:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4018de:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  4018e2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

	/* Update time register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  4018e6:	6983      	ldr	r3, [r0, #24]
  4018e8:	f013 0f04 	tst.w	r3, #4
  4018ec:	d0fb      	beq.n	4018e6 <rtc_set_time+0x5a>
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  4018ee:	6803      	ldr	r3, [r0, #0]
  4018f0:	f043 0301 	orr.w	r3, r3, #1
  4018f4:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  4018f6:	6983      	ldr	r3, [r0, #24]
  4018f8:	f013 0f01 	tst.w	r3, #1
  4018fc:	d0fb      	beq.n	4018f6 <rtc_set_time+0x6a>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  4018fe:	2301      	movs	r3, #1
  401900:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_TIMR = ul_time;
  401902:	6081      	str	r1, [r0, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  401904:	6803      	ldr	r3, [r0, #0]
  401906:	f023 0301 	bic.w	r3, r3, #1
  40190a:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  40190c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  40190e:	f000 0001 	and.w	r0, r0, #1
  401912:	bcf0      	pop	{r4, r5, r6, r7}
  401914:	4770      	bx	lr
  401916:	bf00      	nop
  401918:	cccccccd 	.word	0xcccccccd

0040191c <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  40191c:	b470      	push	{r4, r5, r6}

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40191e:	4d2a      	ldr	r5, [pc, #168]	; (4019c8 <rtc_set_date+0xac>)
  401920:	fba5 4603 	umull	r4, r6, r5, r3
  401924:	08f6      	lsrs	r6, r6, #3
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  401926:	9c03      	ldr	r4, [sp, #12]
  401928:	0564      	lsls	r4, r4, #21
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40192a:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  40192e:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  401932:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  401936:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  40193a:	fba5 6402 	umull	r6, r4, r5, r2
  40193e:	08e4      	lsrs	r4, r4, #3
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  401940:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  401944:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  401948:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40194c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  401950:	4b1e      	ldr	r3, [pc, #120]	; (4019cc <rtc_set_date+0xb0>)
  401952:	fba3 4301 	umull	r4, r3, r3, r1
  401956:	099b      	lsrs	r3, r3, #6
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  401958:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  40195c:	4b1c      	ldr	r3, [pc, #112]	; (4019d0 <rtc_set_date+0xb4>)
  40195e:	fba3 4301 	umull	r4, r3, r3, r1
  401962:	095b      	lsrs	r3, r3, #5
  401964:	fba5 6403 	umull	r6, r4, r5, r3
  401968:	08e4      	lsrs	r4, r4, #3
  40196a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40196e:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  401972:	431a      	orrs	r2, r3
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  401974:	fba5 4301 	umull	r4, r3, r5, r1
  401978:	08db      	lsrs	r3, r3, #3
  40197a:	eb03 0483 	add.w	r4, r3, r3, lsl #2
  40197e:	eba1 0144 	sub.w	r1, r1, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  401982:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  401986:	fba5 1503 	umull	r1, r5, r5, r3
  40198a:	08ed      	lsrs	r5, r5, #3
  40198c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  401990:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  401994:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

	/* Update calendar register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  401998:	6983      	ldr	r3, [r0, #24]
  40199a:	f013 0f04 	tst.w	r3, #4
  40199e:	d0fb      	beq.n	401998 <rtc_set_date+0x7c>
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  4019a0:	6803      	ldr	r3, [r0, #0]
  4019a2:	f043 0302 	orr.w	r3, r3, #2
  4019a6:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  4019a8:	6983      	ldr	r3, [r0, #24]
  4019aa:	f013 0f01 	tst.w	r3, #1
  4019ae:	d0fb      	beq.n	4019a8 <rtc_set_date+0x8c>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  4019b0:	2301      	movs	r3, #1
  4019b2:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_CALR = ul_date;
  4019b4:	60c2      	str	r2, [r0, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  4019b6:	6803      	ldr	r3, [r0, #0]
  4019b8:	f023 0302 	bic.w	r3, r3, #2
  4019bc:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  4019be:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4019c0:	f000 0002 	and.w	r0, r0, #2
  4019c4:	bc70      	pop	{r4, r5, r6}
  4019c6:	4770      	bx	lr
  4019c8:	cccccccd 	.word	0xcccccccd
  4019cc:	10624dd3 	.word	0x10624dd3
  4019d0:	51eb851f 	.word	0x51eb851f

004019d4 <rtt_init>:
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
  4019d4:	4b03      	ldr	r3, [pc, #12]	; (4019e4 <rtt_init+0x10>)
  4019d6:	681b      	ldr	r3, [r3, #0]
  4019d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  4019dc:	4319      	orrs	r1, r3
  4019de:	6001      	str	r1, [r0, #0]
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
#endif
	return 0;
}
  4019e0:	2000      	movs	r0, #0
  4019e2:	4770      	bx	lr
  4019e4:	20400f3c 	.word	0x20400f3c

004019e8 <rtt_sel_source>:
 * \param p_rtt Pointer to an RTT instance.
 * \param is_rtc_sel RTC 1Hz Clock Selection.
 */
void rtt_sel_source(Rtt *p_rtt, bool is_rtc_sel)
{
	if(is_rtc_sel) {
  4019e8:	b941      	cbnz	r1, 4019fc <rtt_sel_source+0x14>
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
	} else {
		g_wobits_in_rtt_mr &= ~RTT_MR_RTC1HZ;
  4019ea:	4a09      	ldr	r2, [pc, #36]	; (401a10 <rtt_sel_source+0x28>)
  4019ec:	6813      	ldr	r3, [r2, #0]
  4019ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  4019f2:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  4019f4:	6802      	ldr	r2, [r0, #0]
  4019f6:	4313      	orrs	r3, r2
  4019f8:	6003      	str	r3, [r0, #0]
  4019fa:	4770      	bx	lr
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
  4019fc:	4a04      	ldr	r2, [pc, #16]	; (401a10 <rtt_sel_source+0x28>)
  4019fe:	6813      	ldr	r3, [r2, #0]
  401a00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  401a04:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  401a06:	6802      	ldr	r2, [r0, #0]
  401a08:	4313      	orrs	r3, r2
  401a0a:	6003      	str	r3, [r0, #0]
  401a0c:	4770      	bx	lr
  401a0e:	bf00      	nop
  401a10:	20400f3c 	.word	0x20400f3c

00401a14 <rtt_enable_interrupt>:
 */
void rtt_enable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp;

	temp = p_rtt->RTT_MR;
  401a14:	6802      	ldr	r2, [r0, #0]
	temp |= ul_sources;
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  401a16:	4b03      	ldr	r3, [pc, #12]	; (401a24 <rtt_enable_interrupt+0x10>)
  401a18:	681b      	ldr	r3, [r3, #0]
  401a1a:	4319      	orrs	r1, r3
  401a1c:	4311      	orrs	r1, r2
#endif
	p_rtt->RTT_MR = temp;
  401a1e:	6001      	str	r1, [r0, #0]
  401a20:	4770      	bx	lr
  401a22:	bf00      	nop
  401a24:	20400f3c 	.word	0x20400f3c

00401a28 <rtt_disable_interrupt>:
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp = 0;

	temp = p_rtt->RTT_MR;
  401a28:	6803      	ldr	r3, [r0, #0]
	temp &= (~ul_sources);
  401a2a:	ea23 0101 	bic.w	r1, r3, r1
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  401a2e:	4b02      	ldr	r3, [pc, #8]	; (401a38 <rtt_disable_interrupt+0x10>)
  401a30:	681b      	ldr	r3, [r3, #0]
  401a32:	4319      	orrs	r1, r3
#endif
	p_rtt->RTT_MR = temp;
  401a34:	6001      	str	r1, [r0, #0]
  401a36:	4770      	bx	lr
  401a38:	20400f3c 	.word	0x20400f3c

00401a3c <rtt_read_timer_value>:
 *
 * \return The current Real-time Timer value.
 */
uint32_t rtt_read_timer_value(Rtt *p_rtt)
{
	uint32_t rtt_val = p_rtt->RTT_VR;
  401a3c:	6882      	ldr	r2, [r0, #8]

	while (rtt_val != p_rtt->RTT_VR) {
  401a3e:	6883      	ldr	r3, [r0, #8]
  401a40:	429a      	cmp	r2, r3
  401a42:	d003      	beq.n	401a4c <rtt_read_timer_value+0x10>
		rtt_val = p_rtt->RTT_VR;
  401a44:	6882      	ldr	r2, [r0, #8]
	while (rtt_val != p_rtt->RTT_VR) {
  401a46:	6883      	ldr	r3, [r0, #8]
  401a48:	4293      	cmp	r3, r2
  401a4a:	d1fb      	bne.n	401a44 <rtt_read_timer_value+0x8>
	}

	return rtt_val;
}
  401a4c:	4618      	mov	r0, r3
  401a4e:	4770      	bx	lr

00401a50 <rtt_get_status>:
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
	return p_rtt->RTT_SR;
  401a50:	68c0      	ldr	r0, [r0, #12]
}
  401a52:	4770      	bx	lr

00401a54 <rtt_write_alarm_time>:
 * \param ul_alarm_time Alarm time,Alarm time = ALMV + 1.
 *
 * \retval 0 Configuration is done.
 */
uint32_t rtt_write_alarm_time(Rtt *p_rtt, uint32_t ul_alarm_time)
{
  401a54:	b570      	push	{r4, r5, r6, lr}
  401a56:	4606      	mov	r6, r0
  401a58:	460d      	mov	r5, r1
	uint32_t flag;

	flag = p_rtt->RTT_MR & RTT_MR_ALMIEN;
  401a5a:	6804      	ldr	r4, [r0, #0]
  401a5c:	f404 3480 	and.w	r4, r4, #65536	; 0x10000

	rtt_disable_interrupt(RTT, RTT_MR_ALMIEN);
  401a60:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  401a64:	4809      	ldr	r0, [pc, #36]	; (401a8c <rtt_write_alarm_time+0x38>)
  401a66:	4b0a      	ldr	r3, [pc, #40]	; (401a90 <rtt_write_alarm_time+0x3c>)
  401a68:	4798      	blx	r3

	/**
	 * Alarm time = ALMV + 1,If the incoming parameter 
	 * is 0, the ALMV is set to 0xFFFFFFFF.
	*/
	if(ul_alarm_time == 0) {
  401a6a:	b92d      	cbnz	r5, 401a78 <rtt_write_alarm_time+0x24>
		p_rtt->RTT_AR = 0xFFFFFFFF;
  401a6c:	f04f 33ff 	mov.w	r3, #4294967295
  401a70:	6073      	str	r3, [r6, #4]
	}
	else {
		p_rtt->RTT_AR = ul_alarm_time - 1;
	}

	if (flag) {
  401a72:	b924      	cbnz	r4, 401a7e <rtt_write_alarm_time+0x2a>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
	}

	return 0;
}
  401a74:	2000      	movs	r0, #0
  401a76:	bd70      	pop	{r4, r5, r6, pc}
		p_rtt->RTT_AR = ul_alarm_time - 1;
  401a78:	3d01      	subs	r5, #1
  401a7a:	6075      	str	r5, [r6, #4]
  401a7c:	e7f9      	b.n	401a72 <rtt_write_alarm_time+0x1e>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  401a7e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  401a82:	4802      	ldr	r0, [pc, #8]	; (401a8c <rtt_write_alarm_time+0x38>)
  401a84:	4b03      	ldr	r3, [pc, #12]	; (401a94 <rtt_write_alarm_time+0x40>)
  401a86:	4798      	blx	r3
  401a88:	e7f4      	b.n	401a74 <rtt_write_alarm_time+0x20>
  401a8a:	bf00      	nop
  401a8c:	400e1830 	.word	0x400e1830
  401a90:	00401a29 	.word	0x00401a29
  401a94:	00401a15 	.word	0x00401a15

00401a98 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  401a98:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  401a9a:	4b07      	ldr	r3, [pc, #28]	; (401ab8 <spi_enable_clock+0x20>)
  401a9c:	4298      	cmp	r0, r3
  401a9e:	d003      	beq.n	401aa8 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  401aa0:	4b06      	ldr	r3, [pc, #24]	; (401abc <spi_enable_clock+0x24>)
  401aa2:	4298      	cmp	r0, r3
  401aa4:	d004      	beq.n	401ab0 <spi_enable_clock+0x18>
  401aa6:	bd08      	pop	{r3, pc}
  401aa8:	2015      	movs	r0, #21
  401aaa:	4b05      	ldr	r3, [pc, #20]	; (401ac0 <spi_enable_clock+0x28>)
  401aac:	4798      	blx	r3
  401aae:	bd08      	pop	{r3, pc}
  401ab0:	202a      	movs	r0, #42	; 0x2a
  401ab2:	4b03      	ldr	r3, [pc, #12]	; (401ac0 <spi_enable_clock+0x28>)
  401ab4:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  401ab6:	e7f6      	b.n	401aa6 <spi_enable_clock+0xe>
  401ab8:	40008000 	.word	0x40008000
  401abc:	40058000 	.word	0x40058000
  401ac0:	004017f9 	.word	0x004017f9

00401ac4 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  401ac4:	6843      	ldr	r3, [r0, #4]
  401ac6:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  401aca:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  401acc:	6843      	ldr	r3, [r0, #4]
  401ace:	0409      	lsls	r1, r1, #16
  401ad0:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  401ad4:	4319      	orrs	r1, r3
  401ad6:	6041      	str	r1, [r0, #4]
  401ad8:	4770      	bx	lr

00401ada <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
  401ada:	6843      	ldr	r3, [r0, #4]
  401adc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401ae0:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
  401ae2:	6843      	ldr	r3, [r0, #4]
  401ae4:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
  401ae8:	6041      	str	r1, [r0, #4]
  401aea:	4770      	bx	lr

00401aec <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  401aec:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  401aee:	f643 2499 	movw	r4, #15001	; 0x3a99
  401af2:	6905      	ldr	r5, [r0, #16]
  401af4:	f015 0f02 	tst.w	r5, #2
  401af8:	d103      	bne.n	401b02 <spi_write+0x16>
		if (!timeout--) {
  401afa:	3c01      	subs	r4, #1
  401afc:	d1f9      	bne.n	401af2 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  401afe:	2001      	movs	r0, #1
  401b00:	e00c      	b.n	401b1c <spi_write+0x30>
	if (p_spi->SPI_MR & SPI_MR_PS) {
  401b02:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  401b04:	f014 0f02 	tst.w	r4, #2
  401b08:	d006      	beq.n	401b18 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  401b0a:	0412      	lsls	r2, r2, #16
  401b0c:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  401b10:	4311      	orrs	r1, r2
		if (uc_last) {
  401b12:	b10b      	cbz	r3, 401b18 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  401b14:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  401b18:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  401b1a:	2000      	movs	r0, #0
}
  401b1c:	bc30      	pop	{r4, r5}
  401b1e:	4770      	bx	lr

00401b20 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  401b20:	b932      	cbnz	r2, 401b30 <spi_set_clock_polarity+0x10>
  401b22:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  401b26:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401b28:	f023 0301 	bic.w	r3, r3, #1
  401b2c:	6303      	str	r3, [r0, #48]	; 0x30
  401b2e:	4770      	bx	lr
  401b30:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  401b34:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401b36:	f043 0301 	orr.w	r3, r3, #1
  401b3a:	6303      	str	r3, [r0, #48]	; 0x30
  401b3c:	4770      	bx	lr

00401b3e <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  401b3e:	b932      	cbnz	r2, 401b4e <spi_set_clock_phase+0x10>
  401b40:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  401b44:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401b46:	f023 0302 	bic.w	r3, r3, #2
  401b4a:	6303      	str	r3, [r0, #48]	; 0x30
  401b4c:	4770      	bx	lr
  401b4e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  401b52:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401b54:	f043 0302 	orr.w	r3, r3, #2
  401b58:	6303      	str	r3, [r0, #48]	; 0x30
  401b5a:	4770      	bx	lr

00401b5c <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  401b5c:	2a04      	cmp	r2, #4
  401b5e:	d003      	beq.n	401b68 <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  401b60:	b16a      	cbz	r2, 401b7e <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  401b62:	2a08      	cmp	r2, #8
  401b64:	d016      	beq.n	401b94 <spi_configure_cs_behavior+0x38>
  401b66:	4770      	bx	lr
  401b68:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  401b6c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401b6e:	f023 0308 	bic.w	r3, r3, #8
  401b72:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  401b74:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401b76:	f043 0304 	orr.w	r3, r3, #4
  401b7a:	6303      	str	r3, [r0, #48]	; 0x30
  401b7c:	4770      	bx	lr
  401b7e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  401b82:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401b84:	f023 0308 	bic.w	r3, r3, #8
  401b88:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  401b8a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401b8c:	f023 0304 	bic.w	r3, r3, #4
  401b90:	6303      	str	r3, [r0, #48]	; 0x30
  401b92:	4770      	bx	lr
  401b94:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  401b98:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401b9a:	f043 0308 	orr.w	r3, r3, #8
  401b9e:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  401ba0:	e7e1      	b.n	401b66 <spi_configure_cs_behavior+0xa>

00401ba2 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  401ba2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  401ba6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401ba8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  401bac:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  401bae:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401bb0:	431a      	orrs	r2, r3
  401bb2:	630a      	str	r2, [r1, #48]	; 0x30
  401bb4:	4770      	bx	lr

00401bb6 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  401bb6:	1e43      	subs	r3, r0, #1
  401bb8:	4419      	add	r1, r3
  401bba:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  401bbe:	1e43      	subs	r3, r0, #1
  401bc0:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  401bc2:	bf94      	ite	ls
  401bc4:	b200      	sxthls	r0, r0
		return -1;
  401bc6:	f04f 30ff 	movhi.w	r0, #4294967295
}
  401bca:	4770      	bx	lr

00401bcc <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
  401bcc:	b17a      	cbz	r2, 401bee <spi_set_baudrate_div+0x22>
{
  401bce:	b410      	push	{r4}
  401bd0:	4614      	mov	r4, r2
  401bd2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  401bd6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401bd8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  401bdc:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  401bde:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  401be0:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  401be4:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  401be6:	2000      	movs	r0, #0
}
  401be8:	f85d 4b04 	ldr.w	r4, [sp], #4
  401bec:	4770      	bx	lr
        return -1;
  401bee:	f04f 30ff 	mov.w	r0, #4294967295
  401bf2:	4770      	bx	lr

00401bf4 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  401bf4:	b410      	push	{r4}
  401bf6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  401bfa:	6b08      	ldr	r0, [r1, #48]	; 0x30
  401bfc:	b280      	uxth	r0, r0
  401bfe:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  401c00:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  401c02:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  401c06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  401c0a:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  401c0c:	f85d 4b04 	ldr.w	r4, [sp], #4
  401c10:	4770      	bx	lr
	...

00401c14 <twihs_set_speed>:
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  401c14:	4b28      	ldr	r3, [pc, #160]	; (401cb8 <twihs_set_speed+0xa4>)
  401c16:	4299      	cmp	r1, r3
  401c18:	d84b      	bhi.n	401cb2 <twihs_set_speed+0x9e>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  401c1a:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  401c1e:	4299      	cmp	r1, r3
  401c20:	d92d      	bls.n	401c7e <twihs_set_speed+0x6a>
{
  401c22:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401c24:	4c25      	ldr	r4, [pc, #148]	; (401cbc <twihs_set_speed+0xa8>)
  401c26:	fba4 3402 	umull	r3, r4, r4, r2
  401c2a:	0ba4      	lsrs	r4, r4, #14
  401c2c:	3c03      	subs	r4, #3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401c2e:	4b24      	ldr	r3, [pc, #144]	; (401cc0 <twihs_set_speed+0xac>)
  401c30:	440b      	add	r3, r1
  401c32:	009b      	lsls	r3, r3, #2
  401c34:	fbb2 f2f3 	udiv	r2, r2, r3
  401c38:	3a03      	subs	r2, #3
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401c3a:	2cff      	cmp	r4, #255	; 0xff
  401c3c:	d91d      	bls.n	401c7a <twihs_set_speed+0x66>
  401c3e:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
  401c40:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWIHS_CLK_DIVIDER;
  401c42:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401c44:	2cff      	cmp	r4, #255	; 0xff
  401c46:	d901      	bls.n	401c4c <twihs_set_speed+0x38>
  401c48:	2906      	cmp	r1, #6
  401c4a:	d9f9      	bls.n	401c40 <twihs_set_speed+0x2c>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401c4c:	2aff      	cmp	r2, #255	; 0xff
  401c4e:	d907      	bls.n	401c60 <twihs_set_speed+0x4c>
  401c50:	2906      	cmp	r1, #6
  401c52:	d805      	bhi.n	401c60 <twihs_set_speed+0x4c>
			/* Increase clock divider */
			ckdiv++;
  401c54:	3101      	adds	r1, #1
			/* Divide cldiv value */
			chdiv /= TWIHS_CLK_DIVIDER;
  401c56:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401c58:	2aff      	cmp	r2, #255	; 0xff
  401c5a:	d901      	bls.n	401c60 <twihs_set_speed+0x4c>
  401c5c:	2906      	cmp	r1, #6
  401c5e:	d9f9      	bls.n	401c54 <twihs_set_speed+0x40>
		}

		/* set clock waveform generator register */
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  401c60:	0213      	lsls	r3, r2, #8
  401c62:	b29b      	uxth	r3, r3
				TWIHS_CWGR_CKDIV(ckdiv);
  401c64:	0409      	lsls	r1, r1, #16
  401c66:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  401c6a:	430b      	orrs	r3, r1
  401c6c:	b2e4      	uxtb	r4, r4
  401c6e:	4323      	orrs	r3, r4
		p_twihs->TWIHS_CWGR =
  401c70:	6103      	str	r3, [r0, #16]
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
				TWIHS_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  401c72:	2000      	movs	r0, #0
}
  401c74:	f85d 4b04 	ldr.w	r4, [sp], #4
  401c78:	4770      	bx	lr
	uint32_t ckdiv = 0;
  401c7a:	2100      	movs	r1, #0
  401c7c:	e7e6      	b.n	401c4c <twihs_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401c7e:	0049      	lsls	r1, r1, #1
  401c80:	fbb2 f2f1 	udiv	r2, r2, r1
  401c84:	3a03      	subs	r2, #3
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401c86:	2aff      	cmp	r2, #255	; 0xff
  401c88:	d911      	bls.n	401cae <twihs_set_speed+0x9a>
  401c8a:	2300      	movs	r3, #0
			ckdiv++;
  401c8c:	3301      	adds	r3, #1
			c_lh_div /= TWIHS_CLK_DIVIDER;
  401c8e:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401c90:	2aff      	cmp	r2, #255	; 0xff
  401c92:	d901      	bls.n	401c98 <twihs_set_speed+0x84>
  401c94:	2b06      	cmp	r3, #6
  401c96:	d9f9      	bls.n	401c8c <twihs_set_speed+0x78>
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401c98:	0211      	lsls	r1, r2, #8
  401c9a:	b289      	uxth	r1, r1
				TWIHS_CWGR_CKDIV(ckdiv);
  401c9c:	041b      	lsls	r3, r3, #16
  401c9e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401ca2:	430b      	orrs	r3, r1
  401ca4:	b2d2      	uxtb	r2, r2
  401ca6:	431a      	orrs	r2, r3
		p_twihs->TWIHS_CWGR =
  401ca8:	6102      	str	r2, [r0, #16]
	return PASS;
  401caa:	2000      	movs	r0, #0
  401cac:	4770      	bx	lr
	uint32_t ckdiv = 0;
  401cae:	2300      	movs	r3, #0
  401cb0:	e7f2      	b.n	401c98 <twihs_set_speed+0x84>
		return FAIL;
  401cb2:	2001      	movs	r0, #1
  401cb4:	4770      	bx	lr
  401cb6:	bf00      	nop
  401cb8:	00061a80 	.word	0x00061a80
  401cbc:	057619f1 	.word	0x057619f1
  401cc0:	3ffd1200 	.word	0x3ffd1200

00401cc4 <twihs_master_init>:
{
  401cc4:	b508      	push	{r3, lr}
	p_twihs->TWIHS_IDR = ~0UL;
  401cc6:	f04f 32ff 	mov.w	r2, #4294967295
  401cca:	6282      	str	r2, [r0, #40]	; 0x28
	p_twihs->TWIHS_SR;
  401ccc:	6a02      	ldr	r2, [r0, #32]
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  401cce:	2280      	movs	r2, #128	; 0x80
  401cd0:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_RHR;
  401cd2:	6b02      	ldr	r2, [r0, #48]	; 0x30
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  401cd4:	2208      	movs	r2, #8
  401cd6:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  401cd8:	2220      	movs	r2, #32
  401cda:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  401cdc:	2204      	movs	r2, #4
  401cde:	6002      	str	r2, [r0, #0]
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  401ce0:	680a      	ldr	r2, [r1, #0]
  401ce2:	6849      	ldr	r1, [r1, #4]
  401ce4:	4b03      	ldr	r3, [pc, #12]	; (401cf4 <twihs_master_init+0x30>)
  401ce6:	4798      	blx	r3
}
  401ce8:	2801      	cmp	r0, #1
  401cea:	bf14      	ite	ne
  401cec:	2000      	movne	r0, #0
  401cee:	2001      	moveq	r0, #1
  401cf0:	bd08      	pop	{r3, pc}
  401cf2:	bf00      	nop
  401cf4:	00401c15 	.word	0x00401c15

00401cf8 <twihs_master_read>:
	uint32_t status, cnt = p_packet->length;
  401cf8:	68ca      	ldr	r2, [r1, #12]
	if (cnt == 0) {
  401cfa:	2a00      	cmp	r2, #0
  401cfc:	d04c      	beq.n	401d98 <twihs_master_read+0xa0>
{
  401cfe:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  401d00:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  401d02:	2600      	movs	r6, #0
  401d04:	6046      	str	r6, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  401d06:	684b      	ldr	r3, [r1, #4]
  401d08:	021b      	lsls	r3, r3, #8
  401d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  401d0e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  401d12:	7c0d      	ldrb	r5, [r1, #16]
  401d14:	042d      	lsls	r5, r5, #16
  401d16:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
  401d1a:	432b      	orrs	r3, r5
  401d1c:	6043      	str	r3, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  401d1e:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401d20:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  401d22:	b15d      	cbz	r5, 401d3c <twihs_master_read+0x44>
	val = addr[0];
  401d24:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
  401d26:	2d01      	cmp	r5, #1
  401d28:	dd02      	ble.n	401d30 <twihs_master_read+0x38>
		val |= addr[1];
  401d2a:	784e      	ldrb	r6, [r1, #1]
  401d2c:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
	if (len > 2) {
  401d30:	2d02      	cmp	r5, #2
  401d32:	dd04      	ble.n	401d3e <twihs_master_read+0x46>
		val |= addr[2];
  401d34:	7889      	ldrb	r1, [r1, #2]
  401d36:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  401d3a:	e000      	b.n	401d3e <twihs_master_read+0x46>
		return 0;
  401d3c:	2300      	movs	r3, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401d3e:	60c3      	str	r3, [r0, #12]
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  401d40:	2301      	movs	r3, #1
  401d42:	6003      	str	r3, [r0, #0]
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401d44:	2502      	movs	r5, #2
  401d46:	e012      	b.n	401d6e <twihs_master_read+0x76>
  401d48:	6005      	str	r5, [r0, #0]
		if (!(status & TWIHS_SR_RXRDY)) {
  401d4a:	f013 0f02 	tst.w	r3, #2
  401d4e:	d01b      	beq.n	401d88 <twihs_master_read+0x90>
		*buffer++ = p_twihs->TWIHS_RHR;
  401d50:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401d52:	7023      	strb	r3, [r4, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401d54:	6a03      	ldr	r3, [r0, #32]
  401d56:	f013 0f01 	tst.w	r3, #1
  401d5a:	d0fb      	beq.n	401d54 <twihs_master_read+0x5c>
	p_twihs->TWIHS_SR;
  401d5c:	6a03      	ldr	r3, [r0, #32]
	return TWIHS_SUCCESS;
  401d5e:	2000      	movs	r0, #0
}
  401d60:	bc70      	pop	{r4, r5, r6}
  401d62:	4770      	bx	lr
		*buffer++ = p_twihs->TWIHS_RHR;
  401d64:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401d66:	f804 3b01 	strb.w	r3, [r4], #1
	while (cnt > 0) {
  401d6a:	3a01      	subs	r2, #1
  401d6c:	d0f2      	beq.n	401d54 <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  401d6e:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401d70:	f413 7f80 	tst.w	r3, #256	; 0x100
  401d74:	d114      	bne.n	401da0 <twihs_master_read+0xa8>
  401d76:	f247 5130 	movw	r1, #30000	; 0x7530
		if (cnt == 1) {
  401d7a:	2a01      	cmp	r2, #1
  401d7c:	d0e4      	beq.n	401d48 <twihs_master_read+0x50>
		if (!(status & TWIHS_SR_RXRDY)) {
  401d7e:	f013 0f02 	tst.w	r3, #2
  401d82:	d1ef      	bne.n	401d64 <twihs_master_read+0x6c>
	while (cnt > 0) {
  401d84:	2a00      	cmp	r2, #0
  401d86:	d0e5      	beq.n	401d54 <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  401d88:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401d8a:	f413 7f80 	tst.w	r3, #256	; 0x100
  401d8e:	d105      	bne.n	401d9c <twihs_master_read+0xa4>
		if (!timeout--) {
  401d90:	3901      	subs	r1, #1
  401d92:	d1f2      	bne.n	401d7a <twihs_master_read+0x82>
			return TWIHS_ERROR_TIMEOUT;
  401d94:	2009      	movs	r0, #9
  401d96:	e7e3      	b.n	401d60 <twihs_master_read+0x68>
		return TWIHS_INVALID_ARGUMENT;
  401d98:	2001      	movs	r0, #1
  401d9a:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401d9c:	2005      	movs	r0, #5
  401d9e:	e7df      	b.n	401d60 <twihs_master_read+0x68>
  401da0:	2005      	movs	r0, #5
  401da2:	e7dd      	b.n	401d60 <twihs_master_read+0x68>

00401da4 <twihs_master_write>:
	uint32_t status, cnt = p_packet->length;
  401da4:	68cb      	ldr	r3, [r1, #12]
	if (cnt == 0) {
  401da6:	2b00      	cmp	r3, #0
  401da8:	d043      	beq.n	401e32 <twihs_master_write+0x8e>
{
  401daa:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  401dac:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  401dae:	2600      	movs	r6, #0
  401db0:	6046      	str	r6, [r0, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401db2:	7c0a      	ldrb	r2, [r1, #16]
  401db4:	0412      	lsls	r2, r2, #16
  401db6:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  401dba:	684d      	ldr	r5, [r1, #4]
  401dbc:	022d      	lsls	r5, r5, #8
  401dbe:	f405 7540 	and.w	r5, r5, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401dc2:	432a      	orrs	r2, r5
  401dc4:	6042      	str	r2, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  401dc6:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401dc8:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  401dca:	b15d      	cbz	r5, 401de4 <twihs_master_write+0x40>
	val = addr[0];
  401dcc:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  401dce:	2d01      	cmp	r5, #1
  401dd0:	dd02      	ble.n	401dd8 <twihs_master_write+0x34>
		val |= addr[1];
  401dd2:	784e      	ldrb	r6, [r1, #1]
  401dd4:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
	if (len > 2) {
  401dd8:	2d02      	cmp	r5, #2
  401dda:	dd04      	ble.n	401de6 <twihs_master_write+0x42>
		val |= addr[2];
  401ddc:	7889      	ldrb	r1, [r1, #2]
  401dde:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  401de2:	e000      	b.n	401de6 <twihs_master_write+0x42>
		return 0;
  401de4:	2200      	movs	r2, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401de6:	60c2      	str	r2, [r0, #12]
  401de8:	e004      	b.n	401df4 <twihs_master_write+0x50>
		p_twihs->TWIHS_THR = *buffer++;
  401dea:	f814 2b01 	ldrb.w	r2, [r4], #1
  401dee:	6342      	str	r2, [r0, #52]	; 0x34
	while (cnt > 0) {
  401df0:	3b01      	subs	r3, #1
  401df2:	d00f      	beq.n	401e14 <twihs_master_write+0x70>
		status = p_twihs->TWIHS_SR;
  401df4:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401df6:	f412 7f80 	tst.w	r2, #256	; 0x100
  401dfa:	d11e      	bne.n	401e3a <twihs_master_write+0x96>
		if (!(status & TWIHS_SR_TXRDY)) {
  401dfc:	f012 0f04 	tst.w	r2, #4
  401e00:	d1f3      	bne.n	401dea <twihs_master_write+0x46>
		status = p_twihs->TWIHS_SR;
  401e02:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401e04:	f412 7f80 	tst.w	r2, #256	; 0x100
  401e08:	d115      	bne.n	401e36 <twihs_master_write+0x92>
		if (!(status & TWIHS_SR_TXRDY)) {
  401e0a:	f012 0f04 	tst.w	r2, #4
  401e0e:	d1ec      	bne.n	401dea <twihs_master_write+0x46>
	while (cnt > 0) {
  401e10:	2b00      	cmp	r3, #0
  401e12:	d1f6      	bne.n	401e02 <twihs_master_write+0x5e>
		status = p_twihs->TWIHS_SR;
  401e14:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401e16:	f413 7f80 	tst.w	r3, #256	; 0x100
  401e1a:	d111      	bne.n	401e40 <twihs_master_write+0x9c>
		if (status & TWIHS_SR_TXRDY) {
  401e1c:	f013 0f04 	tst.w	r3, #4
  401e20:	d0f8      	beq.n	401e14 <twihs_master_write+0x70>
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401e22:	2302      	movs	r3, #2
  401e24:	6003      	str	r3, [r0, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401e26:	6a03      	ldr	r3, [r0, #32]
  401e28:	f013 0f01 	tst.w	r3, #1
  401e2c:	d0fb      	beq.n	401e26 <twihs_master_write+0x82>
	return TWIHS_SUCCESS;
  401e2e:	2000      	movs	r0, #0
  401e30:	e004      	b.n	401e3c <twihs_master_write+0x98>
		return TWIHS_INVALID_ARGUMENT;
  401e32:	2001      	movs	r0, #1
  401e34:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401e36:	2005      	movs	r0, #5
  401e38:	e000      	b.n	401e3c <twihs_master_write+0x98>
  401e3a:	2005      	movs	r0, #5
}
  401e3c:	bc70      	pop	{r4, r5, r6}
  401e3e:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401e40:	2005      	movs	r0, #5
  401e42:	e7fb      	b.n	401e3c <twihs_master_write+0x98>

00401e44 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401e44:	6943      	ldr	r3, [r0, #20]
  401e46:	f013 0f02 	tst.w	r3, #2
  401e4a:	d002      	beq.n	401e52 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  401e4c:	61c1      	str	r1, [r0, #28]
	return 0;
  401e4e:	2000      	movs	r0, #0
  401e50:	4770      	bx	lr
		return 1;
  401e52:	2001      	movs	r0, #1
}
  401e54:	4770      	bx	lr

00401e56 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401e56:	6943      	ldr	r3, [r0, #20]
  401e58:	f013 0f01 	tst.w	r3, #1
  401e5c:	d003      	beq.n	401e66 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401e5e:	6983      	ldr	r3, [r0, #24]
  401e60:	700b      	strb	r3, [r1, #0]
	return 0;
  401e62:	2000      	movs	r0, #0
  401e64:	4770      	bx	lr
		return 1;
  401e66:	2001      	movs	r0, #1
}
  401e68:	4770      	bx	lr

00401e6a <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  401e6a:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  401e6c:	010b      	lsls	r3, r1, #4
  401e6e:	4293      	cmp	r3, r2
  401e70:	d914      	bls.n	401e9c <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401e72:	00c9      	lsls	r1, r1, #3
  401e74:	084b      	lsrs	r3, r1, #1
  401e76:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  401e7a:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  401e7e:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401e80:	1e5c      	subs	r4, r3, #1
  401e82:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  401e86:	428c      	cmp	r4, r1
  401e88:	d901      	bls.n	401e8e <usart_set_async_baudrate+0x24>
		return 1;
  401e8a:	2001      	movs	r0, #1
  401e8c:	e017      	b.n	401ebe <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  401e8e:	6841      	ldr	r1, [r0, #4]
  401e90:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  401e94:	6041      	str	r1, [r0, #4]
  401e96:	e00c      	b.n	401eb2 <usart_set_async_baudrate+0x48>
		return 1;
  401e98:	2001      	movs	r0, #1
  401e9a:	e010      	b.n	401ebe <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401e9c:	0859      	lsrs	r1, r3, #1
  401e9e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  401ea2:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  401ea6:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401ea8:	1e5c      	subs	r4, r3, #1
  401eaa:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  401eae:	428c      	cmp	r4, r1
  401eb0:	d8f2      	bhi.n	401e98 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  401eb2:	0412      	lsls	r2, r2, #16
  401eb4:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  401eb8:	431a      	orrs	r2, r3
  401eba:	6202      	str	r2, [r0, #32]

	return 0;
  401ebc:	2000      	movs	r0, #0
}
  401ebe:	f85d 4b04 	ldr.w	r4, [sp], #4
  401ec2:	4770      	bx	lr

00401ec4 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  401ec4:	4b08      	ldr	r3, [pc, #32]	; (401ee8 <usart_reset+0x24>)
  401ec6:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  401eca:	2300      	movs	r3, #0
  401ecc:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  401ece:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  401ed0:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  401ed2:	2388      	movs	r3, #136	; 0x88
  401ed4:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  401ed6:	2324      	movs	r3, #36	; 0x24
  401ed8:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  401eda:	f44f 7380 	mov.w	r3, #256	; 0x100
  401ede:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  401ee0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  401ee4:	6003      	str	r3, [r0, #0]
  401ee6:	4770      	bx	lr
  401ee8:	55534100 	.word	0x55534100

00401eec <usart_init_rs232>:
{
  401eec:	b570      	push	{r4, r5, r6, lr}
  401eee:	4605      	mov	r5, r0
  401ef0:	460c      	mov	r4, r1
  401ef2:	4616      	mov	r6, r2
	usart_reset(p_usart);
  401ef4:	4b0f      	ldr	r3, [pc, #60]	; (401f34 <usart_init_rs232+0x48>)
  401ef6:	4798      	blx	r3
	ul_reg_val = 0;
  401ef8:	2200      	movs	r2, #0
  401efa:	4b0f      	ldr	r3, [pc, #60]	; (401f38 <usart_init_rs232+0x4c>)
  401efc:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401efe:	b1a4      	cbz	r4, 401f2a <usart_init_rs232+0x3e>
  401f00:	4632      	mov	r2, r6
  401f02:	6821      	ldr	r1, [r4, #0]
  401f04:	4628      	mov	r0, r5
  401f06:	4b0d      	ldr	r3, [pc, #52]	; (401f3c <usart_init_rs232+0x50>)
  401f08:	4798      	blx	r3
  401f0a:	4602      	mov	r2, r0
  401f0c:	b978      	cbnz	r0, 401f2e <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401f0e:	6863      	ldr	r3, [r4, #4]
  401f10:	68a1      	ldr	r1, [r4, #8]
  401f12:	430b      	orrs	r3, r1
  401f14:	6921      	ldr	r1, [r4, #16]
  401f16:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401f18:	68e1      	ldr	r1, [r4, #12]
  401f1a:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401f1c:	4906      	ldr	r1, [pc, #24]	; (401f38 <usart_init_rs232+0x4c>)
  401f1e:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  401f20:	6869      	ldr	r1, [r5, #4]
  401f22:	430b      	orrs	r3, r1
  401f24:	606b      	str	r3, [r5, #4]
}
  401f26:	4610      	mov	r0, r2
  401f28:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  401f2a:	2201      	movs	r2, #1
  401f2c:	e7fb      	b.n	401f26 <usart_init_rs232+0x3a>
  401f2e:	2201      	movs	r2, #1
  401f30:	e7f9      	b.n	401f26 <usart_init_rs232+0x3a>
  401f32:	bf00      	nop
  401f34:	00401ec5 	.word	0x00401ec5
  401f38:	20400f40 	.word	0x20400f40
  401f3c:	00401e6b 	.word	0x00401e6b

00401f40 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  401f40:	2340      	movs	r3, #64	; 0x40
  401f42:	6003      	str	r3, [r0, #0]
  401f44:	4770      	bx	lr

00401f46 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  401f46:	2310      	movs	r3, #16
  401f48:	6003      	str	r3, [r0, #0]
  401f4a:	4770      	bx	lr

00401f4c <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401f4c:	6943      	ldr	r3, [r0, #20]
  401f4e:	f013 0f02 	tst.w	r3, #2
  401f52:	d004      	beq.n	401f5e <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  401f54:	f3c1 0108 	ubfx	r1, r1, #0, #9
  401f58:	61c1      	str	r1, [r0, #28]
	return 0;
  401f5a:	2000      	movs	r0, #0
  401f5c:	4770      	bx	lr
		return 1;
  401f5e:	2001      	movs	r0, #1
}
  401f60:	4770      	bx	lr

00401f62 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401f62:	6943      	ldr	r3, [r0, #20]
  401f64:	f013 0f01 	tst.w	r3, #1
  401f68:	d005      	beq.n	401f76 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401f6a:	6983      	ldr	r3, [r0, #24]
  401f6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
  401f70:	600b      	str	r3, [r1, #0]
	return 0;
  401f72:	2000      	movs	r0, #0
  401f74:	4770      	bx	lr
		return 1;
  401f76:	2001      	movs	r0, #1
}
  401f78:	4770      	bx	lr

00401f7a <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401f7a:	e7fe      	b.n	401f7a <Dummy_Handler>

00401f7c <Reset_Handler>:
{
  401f7c:	b500      	push	{lr}
  401f7e:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  401f80:	4b25      	ldr	r3, [pc, #148]	; (402018 <Reset_Handler+0x9c>)
  401f82:	4a26      	ldr	r2, [pc, #152]	; (40201c <Reset_Handler+0xa0>)
  401f84:	429a      	cmp	r2, r3
  401f86:	d010      	beq.n	401faa <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  401f88:	4b25      	ldr	r3, [pc, #148]	; (402020 <Reset_Handler+0xa4>)
  401f8a:	4a23      	ldr	r2, [pc, #140]	; (402018 <Reset_Handler+0x9c>)
  401f8c:	429a      	cmp	r2, r3
  401f8e:	d20c      	bcs.n	401faa <Reset_Handler+0x2e>
  401f90:	3b01      	subs	r3, #1
  401f92:	1a9b      	subs	r3, r3, r2
  401f94:	f023 0303 	bic.w	r3, r3, #3
  401f98:	3304      	adds	r3, #4
  401f9a:	4413      	add	r3, r2
  401f9c:	491f      	ldr	r1, [pc, #124]	; (40201c <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  401f9e:	f851 0b04 	ldr.w	r0, [r1], #4
  401fa2:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  401fa6:	429a      	cmp	r2, r3
  401fa8:	d1f9      	bne.n	401f9e <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  401faa:	4b1e      	ldr	r3, [pc, #120]	; (402024 <Reset_Handler+0xa8>)
  401fac:	4a1e      	ldr	r2, [pc, #120]	; (402028 <Reset_Handler+0xac>)
  401fae:	429a      	cmp	r2, r3
  401fb0:	d20a      	bcs.n	401fc8 <Reset_Handler+0x4c>
  401fb2:	3b01      	subs	r3, #1
  401fb4:	1a9b      	subs	r3, r3, r2
  401fb6:	f023 0303 	bic.w	r3, r3, #3
  401fba:	3304      	adds	r3, #4
  401fbc:	4413      	add	r3, r2
                *pDest++ = 0;
  401fbe:	2100      	movs	r1, #0
  401fc0:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  401fc4:	4293      	cmp	r3, r2
  401fc6:	d1fb      	bne.n	401fc0 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401fc8:	4a18      	ldr	r2, [pc, #96]	; (40202c <Reset_Handler+0xb0>)
  401fca:	4b19      	ldr	r3, [pc, #100]	; (402030 <Reset_Handler+0xb4>)
  401fcc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401fd0:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401fd2:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401fd6:	fab3 f383 	clz	r3, r3
  401fda:	095b      	lsrs	r3, r3, #5
  401fdc:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401fde:	b672      	cpsid	i
  __ASM volatile ("dmb");
  401fe0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401fe4:	2200      	movs	r2, #0
  401fe6:	4b13      	ldr	r3, [pc, #76]	; (402034 <Reset_Handler+0xb8>)
  401fe8:	701a      	strb	r2, [r3, #0]
	return flags;
  401fea:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401fec:	4a12      	ldr	r2, [pc, #72]	; (402038 <Reset_Handler+0xbc>)
  401fee:	6813      	ldr	r3, [r2, #0]
  401ff0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401ff4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  401ff6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401ffa:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401ffe:	b129      	cbz	r1, 40200c <Reset_Handler+0x90>
		cpu_irq_enable();
  402000:	2201      	movs	r2, #1
  402002:	4b0c      	ldr	r3, [pc, #48]	; (402034 <Reset_Handler+0xb8>)
  402004:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  402006:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40200a:	b662      	cpsie	i
        __libc_init_array();
  40200c:	4b0b      	ldr	r3, [pc, #44]	; (40203c <Reset_Handler+0xc0>)
  40200e:	4798      	blx	r3
        main();
  402010:	4b0b      	ldr	r3, [pc, #44]	; (402040 <Reset_Handler+0xc4>)
  402012:	4798      	blx	r3
  402014:	e7fe      	b.n	402014 <Reset_Handler+0x98>
  402016:	bf00      	nop
  402018:	20400000 	.word	0x20400000
  40201c:	00409c7c 	.word	0x00409c7c
  402020:	20400af0 	.word	0x20400af0
  402024:	20400fd8 	.word	0x20400fd8
  402028:	20400af0 	.word	0x20400af0
  40202c:	e000ed00 	.word	0xe000ed00
  402030:	00400000 	.word	0x00400000
  402034:	2040000a 	.word	0x2040000a
  402038:	e000ed88 	.word	0xe000ed88
  40203c:	00402c09 	.word	0x00402c09
  402040:	00402935 	.word	0x00402935

00402044 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  402044:	4b3b      	ldr	r3, [pc, #236]	; (402134 <SystemCoreClockUpdate+0xf0>)
  402046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402048:	f003 0303 	and.w	r3, r3, #3
  40204c:	2b01      	cmp	r3, #1
  40204e:	d01d      	beq.n	40208c <SystemCoreClockUpdate+0x48>
  402050:	b183      	cbz	r3, 402074 <SystemCoreClockUpdate+0x30>
  402052:	2b02      	cmp	r3, #2
  402054:	d036      	beq.n	4020c4 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  402056:	4b37      	ldr	r3, [pc, #220]	; (402134 <SystemCoreClockUpdate+0xf0>)
  402058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40205a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40205e:	2b70      	cmp	r3, #112	; 0x70
  402060:	d05f      	beq.n	402122 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  402062:	4b34      	ldr	r3, [pc, #208]	; (402134 <SystemCoreClockUpdate+0xf0>)
  402064:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402066:	4934      	ldr	r1, [pc, #208]	; (402138 <SystemCoreClockUpdate+0xf4>)
  402068:	f3c2 1202 	ubfx	r2, r2, #4, #3
  40206c:	680b      	ldr	r3, [r1, #0]
  40206e:	40d3      	lsrs	r3, r2
  402070:	600b      	str	r3, [r1, #0]
  402072:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  402074:	4b31      	ldr	r3, [pc, #196]	; (40213c <SystemCoreClockUpdate+0xf8>)
  402076:	695b      	ldr	r3, [r3, #20]
  402078:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40207c:	bf14      	ite	ne
  40207e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  402082:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  402086:	4b2c      	ldr	r3, [pc, #176]	; (402138 <SystemCoreClockUpdate+0xf4>)
  402088:	601a      	str	r2, [r3, #0]
  40208a:	e7e4      	b.n	402056 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40208c:	4b29      	ldr	r3, [pc, #164]	; (402134 <SystemCoreClockUpdate+0xf0>)
  40208e:	6a1b      	ldr	r3, [r3, #32]
  402090:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402094:	d003      	beq.n	40209e <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  402096:	4a2a      	ldr	r2, [pc, #168]	; (402140 <SystemCoreClockUpdate+0xfc>)
  402098:	4b27      	ldr	r3, [pc, #156]	; (402138 <SystemCoreClockUpdate+0xf4>)
  40209a:	601a      	str	r2, [r3, #0]
  40209c:	e7db      	b.n	402056 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40209e:	4a29      	ldr	r2, [pc, #164]	; (402144 <SystemCoreClockUpdate+0x100>)
  4020a0:	4b25      	ldr	r3, [pc, #148]	; (402138 <SystemCoreClockUpdate+0xf4>)
  4020a2:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4020a4:	4b23      	ldr	r3, [pc, #140]	; (402134 <SystemCoreClockUpdate+0xf0>)
  4020a6:	6a1b      	ldr	r3, [r3, #32]
  4020a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4020ac:	2b10      	cmp	r3, #16
  4020ae:	d005      	beq.n	4020bc <SystemCoreClockUpdate+0x78>
  4020b0:	2b20      	cmp	r3, #32
  4020b2:	d1d0      	bne.n	402056 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  4020b4:	4a22      	ldr	r2, [pc, #136]	; (402140 <SystemCoreClockUpdate+0xfc>)
  4020b6:	4b20      	ldr	r3, [pc, #128]	; (402138 <SystemCoreClockUpdate+0xf4>)
  4020b8:	601a      	str	r2, [r3, #0]
          break;
  4020ba:	e7cc      	b.n	402056 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  4020bc:	4a22      	ldr	r2, [pc, #136]	; (402148 <SystemCoreClockUpdate+0x104>)
  4020be:	4b1e      	ldr	r3, [pc, #120]	; (402138 <SystemCoreClockUpdate+0xf4>)
  4020c0:	601a      	str	r2, [r3, #0]
          break;
  4020c2:	e7c8      	b.n	402056 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4020c4:	4b1b      	ldr	r3, [pc, #108]	; (402134 <SystemCoreClockUpdate+0xf0>)
  4020c6:	6a1b      	ldr	r3, [r3, #32]
  4020c8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4020cc:	d016      	beq.n	4020fc <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4020ce:	4a1c      	ldr	r2, [pc, #112]	; (402140 <SystemCoreClockUpdate+0xfc>)
  4020d0:	4b19      	ldr	r3, [pc, #100]	; (402138 <SystemCoreClockUpdate+0xf4>)
  4020d2:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4020d4:	4b17      	ldr	r3, [pc, #92]	; (402134 <SystemCoreClockUpdate+0xf0>)
  4020d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4020d8:	f003 0303 	and.w	r3, r3, #3
  4020dc:	2b02      	cmp	r3, #2
  4020de:	d1ba      	bne.n	402056 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4020e0:	4a14      	ldr	r2, [pc, #80]	; (402134 <SystemCoreClockUpdate+0xf0>)
  4020e2:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4020e4:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4020e6:	4814      	ldr	r0, [pc, #80]	; (402138 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4020e8:	f3c1 410a 	ubfx	r1, r1, #16, #11
  4020ec:	6803      	ldr	r3, [r0, #0]
  4020ee:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4020f2:	b2d2      	uxtb	r2, r2
  4020f4:	fbb3 f3f2 	udiv	r3, r3, r2
  4020f8:	6003      	str	r3, [r0, #0]
  4020fa:	e7ac      	b.n	402056 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4020fc:	4a11      	ldr	r2, [pc, #68]	; (402144 <SystemCoreClockUpdate+0x100>)
  4020fe:	4b0e      	ldr	r3, [pc, #56]	; (402138 <SystemCoreClockUpdate+0xf4>)
  402100:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402102:	4b0c      	ldr	r3, [pc, #48]	; (402134 <SystemCoreClockUpdate+0xf0>)
  402104:	6a1b      	ldr	r3, [r3, #32]
  402106:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40210a:	2b10      	cmp	r3, #16
  40210c:	d005      	beq.n	40211a <SystemCoreClockUpdate+0xd6>
  40210e:	2b20      	cmp	r3, #32
  402110:	d1e0      	bne.n	4020d4 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  402112:	4a0b      	ldr	r2, [pc, #44]	; (402140 <SystemCoreClockUpdate+0xfc>)
  402114:	4b08      	ldr	r3, [pc, #32]	; (402138 <SystemCoreClockUpdate+0xf4>)
  402116:	601a      	str	r2, [r3, #0]
          break;
  402118:	e7dc      	b.n	4020d4 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  40211a:	4a0b      	ldr	r2, [pc, #44]	; (402148 <SystemCoreClockUpdate+0x104>)
  40211c:	4b06      	ldr	r3, [pc, #24]	; (402138 <SystemCoreClockUpdate+0xf4>)
  40211e:	601a      	str	r2, [r3, #0]
          break;
  402120:	e7d8      	b.n	4020d4 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  402122:	4a05      	ldr	r2, [pc, #20]	; (402138 <SystemCoreClockUpdate+0xf4>)
  402124:	6813      	ldr	r3, [r2, #0]
  402126:	4909      	ldr	r1, [pc, #36]	; (40214c <SystemCoreClockUpdate+0x108>)
  402128:	fba1 1303 	umull	r1, r3, r1, r3
  40212c:	085b      	lsrs	r3, r3, #1
  40212e:	6013      	str	r3, [r2, #0]
  402130:	4770      	bx	lr
  402132:	bf00      	nop
  402134:	400e0600 	.word	0x400e0600
  402138:	2040000c 	.word	0x2040000c
  40213c:	400e1810 	.word	0x400e1810
  402140:	00b71b00 	.word	0x00b71b00
  402144:	003d0900 	.word	0x003d0900
  402148:	007a1200 	.word	0x007a1200
  40214c:	aaaaaaab 	.word	0xaaaaaaab

00402150 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  402150:	4b16      	ldr	r3, [pc, #88]	; (4021ac <system_init_flash+0x5c>)
  402152:	4298      	cmp	r0, r3
  402154:	d913      	bls.n	40217e <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  402156:	4b16      	ldr	r3, [pc, #88]	; (4021b0 <system_init_flash+0x60>)
  402158:	4298      	cmp	r0, r3
  40215a:	d915      	bls.n	402188 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  40215c:	4b15      	ldr	r3, [pc, #84]	; (4021b4 <system_init_flash+0x64>)
  40215e:	4298      	cmp	r0, r3
  402160:	d916      	bls.n	402190 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  402162:	4b15      	ldr	r3, [pc, #84]	; (4021b8 <system_init_flash+0x68>)
  402164:	4298      	cmp	r0, r3
  402166:	d917      	bls.n	402198 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  402168:	4b14      	ldr	r3, [pc, #80]	; (4021bc <system_init_flash+0x6c>)
  40216a:	4298      	cmp	r0, r3
  40216c:	d918      	bls.n	4021a0 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  40216e:	4b14      	ldr	r3, [pc, #80]	; (4021c0 <system_init_flash+0x70>)
  402170:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402172:	bf94      	ite	ls
  402174:	4a13      	ldrls	r2, [pc, #76]	; (4021c4 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  402176:	4a14      	ldrhi	r2, [pc, #80]	; (4021c8 <system_init_flash+0x78>)
  402178:	4b14      	ldr	r3, [pc, #80]	; (4021cc <system_init_flash+0x7c>)
  40217a:	601a      	str	r2, [r3, #0]
  40217c:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40217e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402182:	4b12      	ldr	r3, [pc, #72]	; (4021cc <system_init_flash+0x7c>)
  402184:	601a      	str	r2, [r3, #0]
  402186:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402188:	4a11      	ldr	r2, [pc, #68]	; (4021d0 <system_init_flash+0x80>)
  40218a:	4b10      	ldr	r3, [pc, #64]	; (4021cc <system_init_flash+0x7c>)
  40218c:	601a      	str	r2, [r3, #0]
  40218e:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402190:	4a10      	ldr	r2, [pc, #64]	; (4021d4 <system_init_flash+0x84>)
  402192:	4b0e      	ldr	r3, [pc, #56]	; (4021cc <system_init_flash+0x7c>)
  402194:	601a      	str	r2, [r3, #0]
  402196:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402198:	4a0f      	ldr	r2, [pc, #60]	; (4021d8 <system_init_flash+0x88>)
  40219a:	4b0c      	ldr	r3, [pc, #48]	; (4021cc <system_init_flash+0x7c>)
  40219c:	601a      	str	r2, [r3, #0]
  40219e:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4021a0:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4021a4:	4b09      	ldr	r3, [pc, #36]	; (4021cc <system_init_flash+0x7c>)
  4021a6:	601a      	str	r2, [r3, #0]
  4021a8:	4770      	bx	lr
  4021aa:	bf00      	nop
  4021ac:	015ef3bf 	.word	0x015ef3bf
  4021b0:	02bde77f 	.word	0x02bde77f
  4021b4:	041cdb3f 	.word	0x041cdb3f
  4021b8:	057bceff 	.word	0x057bceff
  4021bc:	06dac2bf 	.word	0x06dac2bf
  4021c0:	0839b67f 	.word	0x0839b67f
  4021c4:	04000500 	.word	0x04000500
  4021c8:	04000600 	.word	0x04000600
  4021cc:	400e0c00 	.word	0x400e0c00
  4021d0:	04000100 	.word	0x04000100
  4021d4:	04000200 	.word	0x04000200
  4021d8:	04000300 	.word	0x04000300

004021dc <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4021dc:	4b0a      	ldr	r3, [pc, #40]	; (402208 <_sbrk+0x2c>)
  4021de:	681b      	ldr	r3, [r3, #0]
  4021e0:	b153      	cbz	r3, 4021f8 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  4021e2:	4b09      	ldr	r3, [pc, #36]	; (402208 <_sbrk+0x2c>)
  4021e4:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4021e6:	181a      	adds	r2, r3, r0
  4021e8:	4908      	ldr	r1, [pc, #32]	; (40220c <_sbrk+0x30>)
  4021ea:	4291      	cmp	r1, r2
  4021ec:	db08      	blt.n	402200 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  4021ee:	4610      	mov	r0, r2
  4021f0:	4a05      	ldr	r2, [pc, #20]	; (402208 <_sbrk+0x2c>)
  4021f2:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4021f4:	4618      	mov	r0, r3
  4021f6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  4021f8:	4a05      	ldr	r2, [pc, #20]	; (402210 <_sbrk+0x34>)
  4021fa:	4b03      	ldr	r3, [pc, #12]	; (402208 <_sbrk+0x2c>)
  4021fc:	601a      	str	r2, [r3, #0]
  4021fe:	e7f0      	b.n	4021e2 <_sbrk+0x6>
		return (caddr_t) -1;	
  402200:	f04f 30ff 	mov.w	r0, #4294967295
}
  402204:	4770      	bx	lr
  402206:	bf00      	nop
  402208:	20400f44 	.word	0x20400f44
  40220c:	2045fffc 	.word	0x2045fffc
  402210:	204031d8 	.word	0x204031d8

00402214 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  402214:	f04f 30ff 	mov.w	r0, #4294967295
  402218:	4770      	bx	lr

0040221a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  40221a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40221e:	604b      	str	r3, [r1, #4]

	return 0;
}
  402220:	2000      	movs	r0, #0
  402222:	4770      	bx	lr

00402224 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  402224:	2001      	movs	r0, #1
  402226:	4770      	bx	lr

00402228 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  402228:	2000      	movs	r0, #0
  40222a:	4770      	bx	lr

0040222c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  40222c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40222e:	b083      	sub	sp, #12
  402230:	4605      	mov	r5, r0
  402232:	460c      	mov	r4, r1
	uint32_t val = 0;
  402234:	2300      	movs	r3, #0
  402236:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  402238:	4b2a      	ldr	r3, [pc, #168]	; (4022e4 <usart_serial_getchar+0xb8>)
  40223a:	4298      	cmp	r0, r3
  40223c:	d013      	beq.n	402266 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40223e:	4b2a      	ldr	r3, [pc, #168]	; (4022e8 <usart_serial_getchar+0xbc>)
  402240:	4298      	cmp	r0, r3
  402242:	d018      	beq.n	402276 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  402244:	4b29      	ldr	r3, [pc, #164]	; (4022ec <usart_serial_getchar+0xc0>)
  402246:	4298      	cmp	r0, r3
  402248:	d01d      	beq.n	402286 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  40224a:	4b29      	ldr	r3, [pc, #164]	; (4022f0 <usart_serial_getchar+0xc4>)
  40224c:	429d      	cmp	r5, r3
  40224e:	d022      	beq.n	402296 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  402250:	4b28      	ldr	r3, [pc, #160]	; (4022f4 <usart_serial_getchar+0xc8>)
  402252:	429d      	cmp	r5, r3
  402254:	d027      	beq.n	4022a6 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  402256:	4b28      	ldr	r3, [pc, #160]	; (4022f8 <usart_serial_getchar+0xcc>)
  402258:	429d      	cmp	r5, r3
  40225a:	d02e      	beq.n	4022ba <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  40225c:	4b27      	ldr	r3, [pc, #156]	; (4022fc <usart_serial_getchar+0xd0>)
  40225e:	429d      	cmp	r5, r3
  402260:	d035      	beq.n	4022ce <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  402262:	b003      	add	sp, #12
  402264:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  402266:	461f      	mov	r7, r3
  402268:	4e25      	ldr	r6, [pc, #148]	; (402300 <usart_serial_getchar+0xd4>)
  40226a:	4621      	mov	r1, r4
  40226c:	4638      	mov	r0, r7
  40226e:	47b0      	blx	r6
  402270:	2800      	cmp	r0, #0
  402272:	d1fa      	bne.n	40226a <usart_serial_getchar+0x3e>
  402274:	e7e9      	b.n	40224a <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  402276:	461f      	mov	r7, r3
  402278:	4e21      	ldr	r6, [pc, #132]	; (402300 <usart_serial_getchar+0xd4>)
  40227a:	4621      	mov	r1, r4
  40227c:	4638      	mov	r0, r7
  40227e:	47b0      	blx	r6
  402280:	2800      	cmp	r0, #0
  402282:	d1fa      	bne.n	40227a <usart_serial_getchar+0x4e>
  402284:	e7e4      	b.n	402250 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  402286:	461f      	mov	r7, r3
  402288:	4e1d      	ldr	r6, [pc, #116]	; (402300 <usart_serial_getchar+0xd4>)
  40228a:	4621      	mov	r1, r4
  40228c:	4638      	mov	r0, r7
  40228e:	47b0      	blx	r6
  402290:	2800      	cmp	r0, #0
  402292:	d1fa      	bne.n	40228a <usart_serial_getchar+0x5e>
  402294:	e7df      	b.n	402256 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  402296:	461f      	mov	r7, r3
  402298:	4e19      	ldr	r6, [pc, #100]	; (402300 <usart_serial_getchar+0xd4>)
  40229a:	4621      	mov	r1, r4
  40229c:	4638      	mov	r0, r7
  40229e:	47b0      	blx	r6
  4022a0:	2800      	cmp	r0, #0
  4022a2:	d1fa      	bne.n	40229a <usart_serial_getchar+0x6e>
  4022a4:	e7da      	b.n	40225c <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  4022a6:	461e      	mov	r6, r3
  4022a8:	4d16      	ldr	r5, [pc, #88]	; (402304 <usart_serial_getchar+0xd8>)
  4022aa:	a901      	add	r1, sp, #4
  4022ac:	4630      	mov	r0, r6
  4022ae:	47a8      	blx	r5
  4022b0:	2800      	cmp	r0, #0
  4022b2:	d1fa      	bne.n	4022aa <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  4022b4:	9b01      	ldr	r3, [sp, #4]
  4022b6:	7023      	strb	r3, [r4, #0]
  4022b8:	e7d3      	b.n	402262 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4022ba:	461e      	mov	r6, r3
  4022bc:	4d11      	ldr	r5, [pc, #68]	; (402304 <usart_serial_getchar+0xd8>)
  4022be:	a901      	add	r1, sp, #4
  4022c0:	4630      	mov	r0, r6
  4022c2:	47a8      	blx	r5
  4022c4:	2800      	cmp	r0, #0
  4022c6:	d1fa      	bne.n	4022be <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  4022c8:	9b01      	ldr	r3, [sp, #4]
  4022ca:	7023      	strb	r3, [r4, #0]
  4022cc:	e7c9      	b.n	402262 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4022ce:	461e      	mov	r6, r3
  4022d0:	4d0c      	ldr	r5, [pc, #48]	; (402304 <usart_serial_getchar+0xd8>)
  4022d2:	a901      	add	r1, sp, #4
  4022d4:	4630      	mov	r0, r6
  4022d6:	47a8      	blx	r5
  4022d8:	2800      	cmp	r0, #0
  4022da:	d1fa      	bne.n	4022d2 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  4022dc:	9b01      	ldr	r3, [sp, #4]
  4022de:	7023      	strb	r3, [r4, #0]
}
  4022e0:	e7bf      	b.n	402262 <usart_serial_getchar+0x36>
  4022e2:	bf00      	nop
  4022e4:	400e0800 	.word	0x400e0800
  4022e8:	400e0a00 	.word	0x400e0a00
  4022ec:	400e1a00 	.word	0x400e1a00
  4022f0:	400e1c00 	.word	0x400e1c00
  4022f4:	40024000 	.word	0x40024000
  4022f8:	40028000 	.word	0x40028000
  4022fc:	4002c000 	.word	0x4002c000
  402300:	00401e57 	.word	0x00401e57
  402304:	00401f63 	.word	0x00401f63

00402308 <usart_serial_putchar>:
{
  402308:	b570      	push	{r4, r5, r6, lr}
  40230a:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  40230c:	4b2a      	ldr	r3, [pc, #168]	; (4023b8 <usart_serial_putchar+0xb0>)
  40230e:	4298      	cmp	r0, r3
  402310:	d013      	beq.n	40233a <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  402312:	4b2a      	ldr	r3, [pc, #168]	; (4023bc <usart_serial_putchar+0xb4>)
  402314:	4298      	cmp	r0, r3
  402316:	d019      	beq.n	40234c <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  402318:	4b29      	ldr	r3, [pc, #164]	; (4023c0 <usart_serial_putchar+0xb8>)
  40231a:	4298      	cmp	r0, r3
  40231c:	d01f      	beq.n	40235e <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  40231e:	4b29      	ldr	r3, [pc, #164]	; (4023c4 <usart_serial_putchar+0xbc>)
  402320:	4298      	cmp	r0, r3
  402322:	d025      	beq.n	402370 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  402324:	4b28      	ldr	r3, [pc, #160]	; (4023c8 <usart_serial_putchar+0xc0>)
  402326:	4298      	cmp	r0, r3
  402328:	d02b      	beq.n	402382 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  40232a:	4b28      	ldr	r3, [pc, #160]	; (4023cc <usart_serial_putchar+0xc4>)
  40232c:	4298      	cmp	r0, r3
  40232e:	d031      	beq.n	402394 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  402330:	4b27      	ldr	r3, [pc, #156]	; (4023d0 <usart_serial_putchar+0xc8>)
  402332:	4298      	cmp	r0, r3
  402334:	d037      	beq.n	4023a6 <usart_serial_putchar+0x9e>
	return 0;
  402336:	2000      	movs	r0, #0
}
  402338:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40233a:	461e      	mov	r6, r3
  40233c:	4d25      	ldr	r5, [pc, #148]	; (4023d4 <usart_serial_putchar+0xcc>)
  40233e:	4621      	mov	r1, r4
  402340:	4630      	mov	r0, r6
  402342:	47a8      	blx	r5
  402344:	2800      	cmp	r0, #0
  402346:	d1fa      	bne.n	40233e <usart_serial_putchar+0x36>
		return 1;
  402348:	2001      	movs	r0, #1
  40234a:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40234c:	461e      	mov	r6, r3
  40234e:	4d21      	ldr	r5, [pc, #132]	; (4023d4 <usart_serial_putchar+0xcc>)
  402350:	4621      	mov	r1, r4
  402352:	4630      	mov	r0, r6
  402354:	47a8      	blx	r5
  402356:	2800      	cmp	r0, #0
  402358:	d1fa      	bne.n	402350 <usart_serial_putchar+0x48>
		return 1;
  40235a:	2001      	movs	r0, #1
  40235c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40235e:	461e      	mov	r6, r3
  402360:	4d1c      	ldr	r5, [pc, #112]	; (4023d4 <usart_serial_putchar+0xcc>)
  402362:	4621      	mov	r1, r4
  402364:	4630      	mov	r0, r6
  402366:	47a8      	blx	r5
  402368:	2800      	cmp	r0, #0
  40236a:	d1fa      	bne.n	402362 <usart_serial_putchar+0x5a>
		return 1;
  40236c:	2001      	movs	r0, #1
  40236e:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402370:	461e      	mov	r6, r3
  402372:	4d18      	ldr	r5, [pc, #96]	; (4023d4 <usart_serial_putchar+0xcc>)
  402374:	4621      	mov	r1, r4
  402376:	4630      	mov	r0, r6
  402378:	47a8      	blx	r5
  40237a:	2800      	cmp	r0, #0
  40237c:	d1fa      	bne.n	402374 <usart_serial_putchar+0x6c>
		return 1;
  40237e:	2001      	movs	r0, #1
  402380:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402382:	461e      	mov	r6, r3
  402384:	4d14      	ldr	r5, [pc, #80]	; (4023d8 <usart_serial_putchar+0xd0>)
  402386:	4621      	mov	r1, r4
  402388:	4630      	mov	r0, r6
  40238a:	47a8      	blx	r5
  40238c:	2800      	cmp	r0, #0
  40238e:	d1fa      	bne.n	402386 <usart_serial_putchar+0x7e>
		return 1;
  402390:	2001      	movs	r0, #1
  402392:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402394:	461e      	mov	r6, r3
  402396:	4d10      	ldr	r5, [pc, #64]	; (4023d8 <usart_serial_putchar+0xd0>)
  402398:	4621      	mov	r1, r4
  40239a:	4630      	mov	r0, r6
  40239c:	47a8      	blx	r5
  40239e:	2800      	cmp	r0, #0
  4023a0:	d1fa      	bne.n	402398 <usart_serial_putchar+0x90>
		return 1;
  4023a2:	2001      	movs	r0, #1
  4023a4:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4023a6:	461e      	mov	r6, r3
  4023a8:	4d0b      	ldr	r5, [pc, #44]	; (4023d8 <usart_serial_putchar+0xd0>)
  4023aa:	4621      	mov	r1, r4
  4023ac:	4630      	mov	r0, r6
  4023ae:	47a8      	blx	r5
  4023b0:	2800      	cmp	r0, #0
  4023b2:	d1fa      	bne.n	4023aa <usart_serial_putchar+0xa2>
		return 1;
  4023b4:	2001      	movs	r0, #1
  4023b6:	bd70      	pop	{r4, r5, r6, pc}
  4023b8:	400e0800 	.word	0x400e0800
  4023bc:	400e0a00 	.word	0x400e0a00
  4023c0:	400e1a00 	.word	0x400e1a00
  4023c4:	400e1c00 	.word	0x400e1c00
  4023c8:	40024000 	.word	0x40024000
  4023cc:	40028000 	.word	0x40028000
  4023d0:	4002c000 	.word	0x4002c000
  4023d4:	00401e45 	.word	0x00401e45
  4023d8:	00401f4d 	.word	0x00401f4d

004023dc <initMenuOrder>:
 * Inicializa ordem do menu
 * retorna o primeiro ciclo que
 * deve ser exibido.
 */
t_ciclo *initMenuOrder(){
  c_rapido.previous = &c_enxague;
  4023dc:	4a07      	ldr	r2, [pc, #28]	; (4023fc <initMenuOrder+0x20>)
  4023de:	4b08      	ldr	r3, [pc, #32]	; (402400 <initMenuOrder+0x24>)
  4023e0:	6353      	str	r3, [r2, #52]	; 0x34
  c_rapido.next = &c_diario;
  4023e2:	4808      	ldr	r0, [pc, #32]	; (402404 <initMenuOrder+0x28>)
  4023e4:	6390      	str	r0, [r2, #56]	; 0x38

  c_diario.previous = &c_rapido;
  4023e6:	6342      	str	r2, [r0, #52]	; 0x34
  c_diario.next = &c_pesado;
  4023e8:	4907      	ldr	r1, [pc, #28]	; (402408 <initMenuOrder+0x2c>)
  4023ea:	6381      	str	r1, [r0, #56]	; 0x38

  c_pesado.previous = &c_diario;
  4023ec:	6348      	str	r0, [r1, #52]	; 0x34
  c_pesado.next = &c_enxague;
  4023ee:	638b      	str	r3, [r1, #56]	; 0x38

  c_enxague.previous = &c_pesado;
  4023f0:	6359      	str	r1, [r3, #52]	; 0x34
  c_enxague.next = &c_centrifuga;
  4023f2:	4906      	ldr	r1, [pc, #24]	; (40240c <initMenuOrder+0x30>)
  4023f4:	6399      	str	r1, [r3, #56]	; 0x38

  c_centrifuga.previous = &c_enxague;
  4023f6:	634b      	str	r3, [r1, #52]	; 0x34
  c_centrifuga.next = &c_rapido;
  4023f8:	638a      	str	r2, [r1, #56]	; 0x38

  return(&c_diario);
}
  4023fa:	4770      	bx	lr
  4023fc:	20400100 	.word	0x20400100
  402400:	20400088 	.word	0x20400088
  402404:	2040004c 	.word	0x2040004c
  402408:	204000c4 	.word	0x204000c4
  40240c:	20400010 	.word	0x20400010

00402410 <RTT_Handler>:
volatile Bool start = false;
volatile Bool locked = false;
volatile Bool selection = true;

static void RTT_init(uint16_t pllPreScale, uint32_t IrqNPulses);
void RTT_Handler(void){
  402410:	b508      	push	{r3, lr}
	uint32_t ul_status;

	/* Get RTT status */
	ul_status = rtt_get_status(RTT);
  402412:	4805      	ldr	r0, [pc, #20]	; (402428 <RTT_Handler+0x18>)
  402414:	4b05      	ldr	r3, [pc, #20]	; (40242c <RTT_Handler+0x1c>)
  402416:	4798      	blx	r3

	/* IRQ due to Time has changed */
	if ((ul_status & RTT_SR_RTTINC) == RTT_SR_RTTINC) {  }

	/* IRQ due to Alarm */
	if ((ul_status & RTT_SR_ALMS) == RTT_SR_ALMS) {
  402418:	f010 0f01 	tst.w	r0, #1
  40241c:	d002      	beq.n	402424 <RTT_Handler+0x14>
		f_rtt_alarme = true;                  // flag RTT alarme
  40241e:	2201      	movs	r2, #1
  402420:	4b03      	ldr	r3, [pc, #12]	; (402430 <RTT_Handler+0x20>)
  402422:	701a      	strb	r2, [r3, #0]
  402424:	bd08      	pop	{r3, pc}
  402426:	bf00      	nop
  402428:	400e1830 	.word	0x400e1830
  40242c:	00401a51 	.word	0x00401a51
  402430:	20400f4c 	.word	0x20400f4c

00402434 <RTC_init>:
	 * value to the calibrate register */
	mxt_write_config_reg(device, mxt_get_object_address(device,
			MXT_GEN_COMMANDPROCESSOR_T6, 0)
			+ MXT_GEN_COMMANDPROCESSOR_CALIBRATE, 0x01);
}
void RTC_init(){
  402434:	b530      	push	{r4, r5, lr}
  402436:	b083      	sub	sp, #12
	/* Configura o PMC */
	pmc_enable_periph_clk(ID_RTC);
  402438:	2002      	movs	r0, #2
  40243a:	4b13      	ldr	r3, [pc, #76]	; (402488 <RTC_init+0x54>)
  40243c:	4798      	blx	r3

	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
  40243e:	4c13      	ldr	r4, [pc, #76]	; (40248c <RTC_init+0x58>)
  402440:	2100      	movs	r1, #0
  402442:	4620      	mov	r0, r4
  402444:	4b12      	ldr	r3, [pc, #72]	; (402490 <RTC_init+0x5c>)
  402446:	4798      	blx	r3

	/* Configura data e hora manualmente */
	rtc_set_date(RTC, YEAR, MONTH, DAY, WEEK);
  402448:	230c      	movs	r3, #12
  40244a:	9300      	str	r3, [sp, #0]
  40244c:	2313      	movs	r3, #19
  40244e:	2203      	movs	r2, #3
  402450:	f240 71e3 	movw	r1, #2019	; 0x7e3
  402454:	4620      	mov	r0, r4
  402456:	4d0f      	ldr	r5, [pc, #60]	; (402494 <RTC_init+0x60>)
  402458:	47a8      	blx	r5
	rtc_set_time(RTC, HOUR, MINUTE, SECOND);
  40245a:	2300      	movs	r3, #0
  40245c:	461a      	mov	r2, r3
  40245e:	4619      	mov	r1, r3
  402460:	4620      	mov	r0, r4
  402462:	4d0d      	ldr	r5, [pc, #52]	; (402498 <RTC_init+0x64>)
  402464:	47a8      	blx	r5
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  402466:	4b0d      	ldr	r3, [pc, #52]	; (40249c <RTC_init+0x68>)
  402468:	2204      	movs	r2, #4
  40246a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40246e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402472:	2100      	movs	r1, #0
  402474:	f883 1302 	strb.w	r1, [r3, #770]	; 0x302
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402478:	601a      	str	r2, [r3, #0]
	NVIC_ClearPendingIRQ(RTC_IRQn);
	NVIC_SetPriority(RTC_IRQn, 0);
	NVIC_EnableIRQ(RTC_IRQn);

	/* Ativa interrupcao via alarme */
	rtc_enable_interrupt(RTC,  RTC_IER_ALREN);
  40247a:	2102      	movs	r1, #2
  40247c:	4620      	mov	r0, r4
  40247e:	4b08      	ldr	r3, [pc, #32]	; (4024a0 <RTC_init+0x6c>)
  402480:	4798      	blx	r3

}
  402482:	b003      	add	sp, #12
  402484:	bd30      	pop	{r4, r5, pc}
  402486:	bf00      	nop
  402488:	004017f9 	.word	0x004017f9
  40248c:	400e1860 	.word	0x400e1860
  402490:	00401819 	.word	0x00401819
  402494:	0040191d 	.word	0x0040191d
  402498:	0040188d 	.word	0x0040188d
  40249c:	e000e100 	.word	0xe000e100
  4024a0:	0040182f 	.word	0x0040182f

004024a4 <clear_LCD>:
void clear_LCD(int a, int b){
  4024a4:	b570      	push	{r4, r5, r6, lr}
  4024a6:	4604      	mov	r4, r0
  4024a8:	460d      	mov	r5, r1
	if (locked){
  4024aa:	4b0e      	ldr	r3, [pc, #56]	; (4024e4 <clear_LCD+0x40>)
  4024ac:	781b      	ldrb	r3, [r3, #0]
  4024ae:	b963      	cbnz	r3, 4024ca <clear_LCD+0x26>
		ili9488_set_foreground_color(COLOR_CONVERT(COLOR_BLACK));
		ili9488_draw_filled_rectangle(0, a, ILI9488_LCD_WIDTH-1, b);
		ili9488_set_foreground_color(COLOR_CONVERT(COLOR_WHITE));
	}
	else{
		ili9488_set_foreground_color(COLOR_CONVERT(COLOR_WHITE));
  4024b0:	480d      	ldr	r0, [pc, #52]	; (4024e8 <clear_LCD+0x44>)
  4024b2:	4e0e      	ldr	r6, [pc, #56]	; (4024ec <clear_LCD+0x48>)
  4024b4:	47b0      	blx	r6
		ili9488_draw_filled_rectangle(0, a, ILI9488_LCD_WIDTH-1, b);
  4024b6:	462b      	mov	r3, r5
  4024b8:	f240 123f 	movw	r2, #319	; 0x13f
  4024bc:	4621      	mov	r1, r4
  4024be:	2000      	movs	r0, #0
  4024c0:	4c0b      	ldr	r4, [pc, #44]	; (4024f0 <clear_LCD+0x4c>)
  4024c2:	47a0      	blx	r4
		ili9488_set_foreground_color(COLOR_CONVERT(COLOR_BLACK));
  4024c4:	2000      	movs	r0, #0
  4024c6:	47b0      	blx	r6
  4024c8:	bd70      	pop	{r4, r5, r6, pc}
		ili9488_set_foreground_color(COLOR_CONVERT(COLOR_BLACK));
  4024ca:	2000      	movs	r0, #0
  4024cc:	4e07      	ldr	r6, [pc, #28]	; (4024ec <clear_LCD+0x48>)
  4024ce:	47b0      	blx	r6
		ili9488_draw_filled_rectangle(0, a, ILI9488_LCD_WIDTH-1, b);
  4024d0:	462b      	mov	r3, r5
  4024d2:	f240 123f 	movw	r2, #319	; 0x13f
  4024d6:	4621      	mov	r1, r4
  4024d8:	2000      	movs	r0, #0
  4024da:	4c05      	ldr	r4, [pc, #20]	; (4024f0 <clear_LCD+0x4c>)
  4024dc:	47a0      	blx	r4
		ili9488_set_foreground_color(COLOR_CONVERT(COLOR_WHITE));
  4024de:	4802      	ldr	r0, [pc, #8]	; (4024e8 <clear_LCD+0x44>)
  4024e0:	47b0      	blx	r6
  4024e2:	bd70      	pop	{r4, r5, r6, pc}
  4024e4:	20400f4d 	.word	0x20400f4d
  4024e8:	00fcfcfc 	.word	0x00fcfcfc
  4024ec:	00400e95 	.word	0x00400e95
  4024f0:	00401121 	.word	0x00401121

004024f4 <draw_screen>:
	}
}
void draw_screen(void) {
  4024f4:	b510      	push	{r4, lr}
	ili9488_set_foreground_color(COLOR_CONVERT(COLOR_WHITE));
  4024f6:	4806      	ldr	r0, [pc, #24]	; (402510 <draw_screen+0x1c>)
  4024f8:	4b06      	ldr	r3, [pc, #24]	; (402514 <draw_screen+0x20>)
  4024fa:	4798      	blx	r3
	ili9488_draw_filled_rectangle(0, 0, ILI9488_LCD_WIDTH-1, ILI9488_LCD_HEIGHT-1);
  4024fc:	f240 13df 	movw	r3, #479	; 0x1df
  402500:	f240 123f 	movw	r2, #319	; 0x13f
  402504:	2100      	movs	r1, #0
  402506:	4608      	mov	r0, r1
  402508:	4c03      	ldr	r4, [pc, #12]	; (402518 <draw_screen+0x24>)
  40250a:	47a0      	blx	r4
  40250c:	bd10      	pop	{r4, pc}
  40250e:	bf00      	nop
  402510:	00fcfcfc 	.word	0x00fcfcfc
  402514:	00400e95 	.word	0x00400e95
  402518:	00401121 	.word	0x00401121

0040251c <draw_button>:
}

void draw_button(uint32_t clicked) {
  40251c:	b538      	push	{r3, r4, r5, lr}
	static uint32_t last_state = 255; // undefined
	uint8_t stingLCD[256];

	if(clicked == last_state) return;
  40251e:	4b69      	ldr	r3, [pc, #420]	; (4026c4 <draw_button+0x1a8>)
  402520:	681b      	ldr	r3, [r3, #0]
  402522:	4283      	cmp	r3, r0
  402524:	d01a      	beq.n	40255c <draw_button+0x40>
  402526:	4604      	mov	r4, r0
	
	ili9488_set_foreground_color(COLOR_CONVERT(COLOR_BLACK));
  402528:	2000      	movs	r0, #0
  40252a:	4d67      	ldr	r5, [pc, #412]	; (4026c8 <draw_button+0x1ac>)
  40252c:	47a8      	blx	r5
	//ili9488_draw_filled_rectangle(BUTTON_X-BUTTON_W/2, BUTTON_Y-BUTTON_H/2, BUTTON_X+BUTTON_W/2, BUTTON_Y+BUTTON_H/2);
	ili9488_set_foreground_color(COLOR_CONVERT(COLOR_TOMATO));
  40252e:	4867      	ldr	r0, [pc, #412]	; (4026cc <draw_button+0x1b0>)
  402530:	47a8      	blx	r5
	ili9488_draw_filled_circle(275, 50,25);
  402532:	2219      	movs	r2, #25
  402534:	2132      	movs	r1, #50	; 0x32
  402536:	f240 1013 	movw	r0, #275	; 0x113
  40253a:	4b65      	ldr	r3, [pc, #404]	; (4026d0 <draw_button+0x1b4>)
  40253c:	4798      	blx	r3
	
	if(selection){
  40253e:	4b65      	ldr	r3, [pc, #404]	; (4026d4 <draw_button+0x1b8>)
  402540:	781b      	ldrb	r3, [r3, #0]
  402542:	b963      	cbnz	r3, 40255e <draw_button+0x42>
			ili9488_draw_filled_circle(275, 50,25);
		}
			
	}
	else{
		if (locked){ //Pinta a tela de preto para indicar que esta travado
  402544:	4b64      	ldr	r3, [pc, #400]	; (4026d8 <draw_button+0x1bc>)
  402546:	781b      	ldrb	r3, [r3, #0]
  402548:	2b00      	cmp	r3, #0
  40254a:	d14c      	bne.n	4025e6 <draw_button+0xca>
			ili9488_set_foreground_color(COLOR_CONVERT(COLOR_GREEN));
			ili9488_draw_filled_circle(275, 50,25);
			ili9488_set_foreground_color(COLOR_CONVERT(COLOR_WHITE));
		}
		else {		
			if (clicked==3){ //Voltando do estado de Travado
  40254c:	2c03      	cmp	r4, #3
  40254e:	d061      	beq.n	402614 <draw_button+0xf8>
					ili9488_set_foreground_color(COLOR_CONVERT(COLOR_GREEN));
					ili9488_draw_filled_rectangle(BUTTON_X-BUTTON_W/2+BUTTON_BORDER, BUTTON_Y-BUTTON_H/2+BUTTON_BORDER, BUTTON_X+BUTTON_W/2-BUTTON_BORDER, BUTTON_Y-BUTTON_BORDER);
				}
			}
		
			else if(clicked==1) {
  402550:	2c01      	cmp	r4, #1
  402552:	f000 8094 	beq.w	40267e <draw_button+0x162>
				RTC_init();
				start = true;
				last_state = clicked;
			} 
		
			else if(clicked == 0) {
  402556:	2c00      	cmp	r4, #0
  402558:	f000 80a3 	beq.w	4026a2 <draw_button+0x186>
  40255c:	bd38      	pop	{r3, r4, r5, pc}
		clear_LCD(0,450);
  40255e:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
  402562:	2000      	movs	r0, #0
  402564:	4b5d      	ldr	r3, [pc, #372]	; (4026dc <draw_button+0x1c0>)
  402566:	4798      	blx	r3
		last_state = 1;
  402568:	2201      	movs	r2, #1
  40256a:	4b56      	ldr	r3, [pc, #344]	; (4026c4 <draw_button+0x1a8>)
  40256c:	601a      	str	r2, [r3, #0]
		if (locked){ //Pinta a tela de preto para indicar que esta travado
  40256e:	4b5a      	ldr	r3, [pc, #360]	; (4026d8 <draw_button+0x1bc>)
  402570:	781b      	ldrb	r3, [r3, #0]
  402572:	b1b3      	cbz	r3, 4025a2 <draw_button+0x86>
			ili9488_set_foreground_color(COLOR_CONVERT(COLOR_BLACK));
  402574:	2000      	movs	r0, #0
  402576:	462c      	mov	r4, r5
  402578:	47a8      	blx	r5
			ili9488_draw_filled_rectangle(0, 0, ILI9488_LCD_WIDTH, ILI9488_LCD_HEIGHT);
  40257a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  40257e:	f44f 72a0 	mov.w	r2, #320	; 0x140
  402582:	2100      	movs	r1, #0
  402584:	4608      	mov	r0, r1
  402586:	4d56      	ldr	r5, [pc, #344]	; (4026e0 <draw_button+0x1c4>)
  402588:	47a8      	blx	r5
			ili9488_set_foreground_color(COLOR_CONVERT(COLOR_GREEN));
  40258a:	f44f 407c 	mov.w	r0, #64512	; 0xfc00
  40258e:	47a0      	blx	r4
			ili9488_draw_filled_circle(275, 50,25);
  402590:	2219      	movs	r2, #25
  402592:	2132      	movs	r1, #50	; 0x32
  402594:	f240 1013 	movw	r0, #275	; 0x113
  402598:	4b4d      	ldr	r3, [pc, #308]	; (4026d0 <draw_button+0x1b4>)
  40259a:	4798      	blx	r3
			ili9488_set_foreground_color(COLOR_CONVERT(COLOR_WHITE));
  40259c:	4851      	ldr	r0, [pc, #324]	; (4026e4 <draw_button+0x1c8>)
  40259e:	47a0      	blx	r4
  4025a0:	bd38      	pop	{r3, r4, r5, pc}
			ili9488_set_foreground_color(COLOR_CONVERT(COLOR_BLACK));
  4025a2:	2000      	movs	r0, #0
  4025a4:	4d48      	ldr	r5, [pc, #288]	; (4026c8 <draw_button+0x1ac>)
  4025a6:	47a8      	blx	r5
			ili9488_draw_filled_rectangle(ARROW_X,ARROW_Y,ARROW_W,ARROW_Y-ARROW_H);
  4025a8:	23af      	movs	r3, #175	; 0xaf
  4025aa:	2232      	movs	r2, #50	; 0x32
  4025ac:	f240 1113 	movw	r1, #275	; 0x113
  4025b0:	2000      	movs	r0, #0
  4025b2:	4c4b      	ldr	r4, [pc, #300]	; (4026e0 <draw_button+0x1c4>)
  4025b4:	47a0      	blx	r4
			ili9488_draw_filled_rectangle(ILI9488_LCD_WIDTH,ARROW_Y,ILI9488_LCD_WIDTH-ARROW_W,ARROW_Y-ARROW_H);
  4025b6:	23af      	movs	r3, #175	; 0xaf
  4025b8:	f44f 7287 	mov.w	r2, #270	; 0x10e
  4025bc:	f240 1113 	movw	r1, #275	; 0x113
  4025c0:	f44f 70a0 	mov.w	r0, #320	; 0x140
  4025c4:	47a0      	blx	r4
			ili9488_draw_filled_rectangle(100,325,ILI9488_LCD_WIDTH-100,375);
  4025c6:	f240 1377 	movw	r3, #375	; 0x177
  4025ca:	22dc      	movs	r2, #220	; 0xdc
  4025cc:	f240 1145 	movw	r1, #325	; 0x145
  4025d0:	2064      	movs	r0, #100	; 0x64
  4025d2:	47a0      	blx	r4
			ili9488_set_foreground_color(COLOR_CONVERT(COLOR_TOMATO));
  4025d4:	483d      	ldr	r0, [pc, #244]	; (4026cc <draw_button+0x1b0>)
  4025d6:	47a8      	blx	r5
			ili9488_draw_filled_circle(275, 50,25);
  4025d8:	2219      	movs	r2, #25
  4025da:	2132      	movs	r1, #50	; 0x32
  4025dc:	f240 1013 	movw	r0, #275	; 0x113
  4025e0:	4b3b      	ldr	r3, [pc, #236]	; (4026d0 <draw_button+0x1b4>)
  4025e2:	4798      	blx	r3
  4025e4:	bd38      	pop	{r3, r4, r5, pc}
			ili9488_set_foreground_color(COLOR_CONVERT(COLOR_BLACK));
  4025e6:	2000      	movs	r0, #0
  4025e8:	4c37      	ldr	r4, [pc, #220]	; (4026c8 <draw_button+0x1ac>)
  4025ea:	47a0      	blx	r4
			ili9488_draw_filled_rectangle(0, 0, ILI9488_LCD_WIDTH, ILI9488_LCD_HEIGHT);
  4025ec:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  4025f0:	f44f 72a0 	mov.w	r2, #320	; 0x140
  4025f4:	2100      	movs	r1, #0
  4025f6:	4608      	mov	r0, r1
  4025f8:	4d39      	ldr	r5, [pc, #228]	; (4026e0 <draw_button+0x1c4>)
  4025fa:	47a8      	blx	r5
			ili9488_set_foreground_color(COLOR_CONVERT(COLOR_GREEN));
  4025fc:	f44f 407c 	mov.w	r0, #64512	; 0xfc00
  402600:	47a0      	blx	r4
			ili9488_draw_filled_circle(275, 50,25);
  402602:	2219      	movs	r2, #25
  402604:	2132      	movs	r1, #50	; 0x32
  402606:	f240 1013 	movw	r0, #275	; 0x113
  40260a:	4b31      	ldr	r3, [pc, #196]	; (4026d0 <draw_button+0x1b4>)
  40260c:	4798      	blx	r3
			ili9488_set_foreground_color(COLOR_CONVERT(COLOR_WHITE));
  40260e:	4835      	ldr	r0, [pc, #212]	; (4026e4 <draw_button+0x1c8>)
  402610:	47a0      	blx	r4
  402612:	bd38      	pop	{r3, r4, r5, pc}
				ili9488_set_foreground_color(COLOR_CONVERT(COLOR_WHITE));
  402614:	4833      	ldr	r0, [pc, #204]	; (4026e4 <draw_button+0x1c8>)
  402616:	4c2c      	ldr	r4, [pc, #176]	; (4026c8 <draw_button+0x1ac>)
  402618:	47a0      	blx	r4
				ili9488_draw_filled_rectangle(0, 0, ILI9488_LCD_WIDTH, ILI9488_LCD_HEIGHT);
  40261a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  40261e:	f44f 72a0 	mov.w	r2, #320	; 0x140
  402622:	2100      	movs	r1, #0
  402624:	4608      	mov	r0, r1
  402626:	4d2e      	ldr	r5, [pc, #184]	; (4026e0 <draw_button+0x1c4>)
  402628:	47a8      	blx	r5
				ili9488_set_foreground_color(COLOR_CONVERT(COLOR_TOMATO));
  40262a:	4828      	ldr	r0, [pc, #160]	; (4026cc <draw_button+0x1b0>)
  40262c:	47a0      	blx	r4
				ili9488_draw_filled_circle(275, 50,25);
  40262e:	2219      	movs	r2, #25
  402630:	2132      	movs	r1, #50	; 0x32
  402632:	f240 1013 	movw	r0, #275	; 0x113
  402636:	4b26      	ldr	r3, [pc, #152]	; (4026d0 <draw_button+0x1b4>)
  402638:	4798      	blx	r3
				ili9488_set_foreground_color(COLOR_CONVERT(COLOR_BLACK));
  40263a:	2000      	movs	r0, #0
  40263c:	47a0      	blx	r4
				ili9488_draw_filled_rectangle(BUTTON_X-BUTTON_W/2, BUTTON_Y-BUTTON_H/2, BUTTON_X+BUTTON_W/2, BUTTON_Y+BUTTON_H/2);
  40263e:	f240 133b 	movw	r3, #315	; 0x13b
  402642:	22dc      	movs	r2, #220	; 0xdc
  402644:	21a5      	movs	r1, #165	; 0xa5
  402646:	2064      	movs	r0, #100	; 0x64
  402648:	47a8      	blx	r5
				if(last_state==1) {
  40264a:	4b1e      	ldr	r3, [pc, #120]	; (4026c4 <draw_button+0x1a8>)
  40264c:	681b      	ldr	r3, [r3, #0]
  40264e:	2b01      	cmp	r3, #1
  402650:	d00c      	beq.n	40266c <draw_button+0x150>
				else if (last_state==0){
  402652:	2b00      	cmp	r3, #0
  402654:	d182      	bne.n	40255c <draw_button+0x40>
					ili9488_set_foreground_color(COLOR_CONVERT(COLOR_GREEN));
  402656:	f44f 407c 	mov.w	r0, #64512	; 0xfc00
  40265a:	4b1b      	ldr	r3, [pc, #108]	; (4026c8 <draw_button+0x1ac>)
  40265c:	4798      	blx	r3
					ili9488_draw_filled_rectangle(BUTTON_X-BUTTON_W/2+BUTTON_BORDER, BUTTON_Y-BUTTON_H/2+BUTTON_BORDER, BUTTON_X+BUTTON_W/2-BUTTON_BORDER, BUTTON_Y-BUTTON_BORDER);
  40265e:	23ee      	movs	r3, #238	; 0xee
  402660:	22da      	movs	r2, #218	; 0xda
  402662:	21a7      	movs	r1, #167	; 0xa7
  402664:	2066      	movs	r0, #102	; 0x66
  402666:	4c1e      	ldr	r4, [pc, #120]	; (4026e0 <draw_button+0x1c4>)
  402668:	47a0      	blx	r4
  40266a:	bd38      	pop	{r3, r4, r5, pc}
					ili9488_set_foreground_color(COLOR_CONVERT(COLOR_TOMATO));
  40266c:	4817      	ldr	r0, [pc, #92]	; (4026cc <draw_button+0x1b0>)
  40266e:	47a0      	blx	r4
					ili9488_draw_filled_rectangle(BUTTON_X-BUTTON_W/2+BUTTON_BORDER, BUTTON_Y+BUTTON_BORDER, BUTTON_X+BUTTON_W/2-BUTTON_BORDER, BUTTON_Y+BUTTON_H/2-BUTTON_BORDER);
  402670:	f240 1339 	movw	r3, #313	; 0x139
  402674:	22da      	movs	r2, #218	; 0xda
  402676:	21f2      	movs	r1, #242	; 0xf2
  402678:	2066      	movs	r0, #102	; 0x66
  40267a:	47a8      	blx	r5
  40267c:	bd38      	pop	{r3, r4, r5, pc}
				ili9488_set_foreground_color(COLOR_CONVERT(COLOR_TOMATO));
  40267e:	4813      	ldr	r0, [pc, #76]	; (4026cc <draw_button+0x1b0>)
  402680:	4b11      	ldr	r3, [pc, #68]	; (4026c8 <draw_button+0x1ac>)
  402682:	4798      	blx	r3
				ili9488_draw_filled_rectangle(BUTTON_X-BUTTON_W/2+BUTTON_BORDER, BUTTON_Y+BUTTON_BORDER, BUTTON_X+BUTTON_W/2-BUTTON_BORDER, BUTTON_Y+BUTTON_H/2-BUTTON_BORDER);
  402684:	f240 1339 	movw	r3, #313	; 0x139
  402688:	22da      	movs	r2, #218	; 0xda
  40268a:	21f2      	movs	r1, #242	; 0xf2
  40268c:	2066      	movs	r0, #102	; 0x66
  40268e:	4c14      	ldr	r4, [pc, #80]	; (4026e0 <draw_button+0x1c4>)
  402690:	47a0      	blx	r4
				RTC_init();
  402692:	4b15      	ldr	r3, [pc, #84]	; (4026e8 <draw_button+0x1cc>)
  402694:	4798      	blx	r3
				start = true;
  402696:	2301      	movs	r3, #1
  402698:	4a14      	ldr	r2, [pc, #80]	; (4026ec <draw_button+0x1d0>)
  40269a:	7013      	strb	r3, [r2, #0]
				last_state = clicked;
  40269c:	4a09      	ldr	r2, [pc, #36]	; (4026c4 <draw_button+0x1a8>)
  40269e:	6013      	str	r3, [r2, #0]
  4026a0:	bd38      	pop	{r3, r4, r5, pc}
				ili9488_set_foreground_color(COLOR_CONVERT(COLOR_GREEN));
  4026a2:	f44f 407c 	mov.w	r0, #64512	; 0xfc00
  4026a6:	4b08      	ldr	r3, [pc, #32]	; (4026c8 <draw_button+0x1ac>)
  4026a8:	4798      	blx	r3
				ili9488_draw_filled_rectangle(BUTTON_X-BUTTON_W/2+BUTTON_BORDER, BUTTON_Y-BUTTON_H/2+BUTTON_BORDER, BUTTON_X+BUTTON_W/2-BUTTON_BORDER, BUTTON_Y-BUTTON_BORDER);
  4026aa:	23ee      	movs	r3, #238	; 0xee
  4026ac:	22da      	movs	r2, #218	; 0xda
  4026ae:	21a7      	movs	r1, #167	; 0xa7
  4026b0:	2066      	movs	r0, #102	; 0x66
  4026b2:	4c0b      	ldr	r4, [pc, #44]	; (4026e0 <draw_button+0x1c4>)
  4026b4:	47a0      	blx	r4
				start = false;
  4026b6:	2300      	movs	r3, #0
  4026b8:	4a0c      	ldr	r2, [pc, #48]	; (4026ec <draw_button+0x1d0>)
  4026ba:	7013      	strb	r3, [r2, #0]
				last_state = clicked;
  4026bc:	4a01      	ldr	r2, [pc, #4]	; (4026c4 <draw_button+0x1a8>)
  4026be:	6013      	str	r3, [r2, #0]
  4026c0:	e74c      	b.n	40255c <draw_button+0x40>
  4026c2:	bf00      	nop
  4026c4:	2040013c 	.word	0x2040013c
  4026c8:	00400e95 	.word	0x00400e95
  4026cc:	00fc6044 	.word	0x00fc6044
  4026d0:	004011dd 	.word	0x004011dd
  4026d4:	20400140 	.word	0x20400140
  4026d8:	20400f4d 	.word	0x20400f4d
  4026dc:	004024a5 	.word	0x004024a5
  4026e0:	00401121 	.word	0x00401121
  4026e4:	00fcfcfc 	.word	0x00fcfcfc
  4026e8:	00402435 	.word	0x00402435
  4026ec:	20400f4e 	.word	0x20400f4e

004026f0 <touch_handler>:
}

volatile int c =0;
volatile int clkd;

void touch_handler(uint32_t tx, uint32_t ty) {
  4026f0:	b538      	push	{r3, r4, r5, lr}
  4026f2:	4604      	mov	r4, r0
  4026f4:	460d      	mov	r5, r1
	if(locked==false){ 
  4026f6:	4b25      	ldr	r3, [pc, #148]	; (40278c <touch_handler+0x9c>)
  4026f8:	781b      	ldrb	r3, [r3, #0]
  4026fa:	b99b      	cbnz	r3, 402724 <touch_handler+0x34>
		if(selection==true){
  4026fc:	4b24      	ldr	r3, [pc, #144]	; (402790 <touch_handler+0xa0>)
  4026fe:	781b      	ldrb	r3, [r3, #0]
  402700:	b2db      	uxtb	r3, r3
  402702:	2b01      	cmp	r3, #1
  402704:	d027      	beq.n	402756 <touch_handler+0x66>
				draw_button(3);
			}
		}
		else{
			// Botoes de liga desliga lavagem
			if(tx >= BUTTON_X-BUTTON_W/2 && tx <= BUTTON_X + BUTTON_W/2) {
  402706:	f1a0 0364 	sub.w	r3, r0, #100	; 0x64
  40270a:	2b78      	cmp	r3, #120	; 0x78
  40270c:	d80a      	bhi.n	402724 <touch_handler+0x34>
				if(ty >= BUTTON_Y-BUTTON_H/2 && ty <= BUTTON_Y) {
  40270e:	f1a1 03a5 	sub.w	r3, r1, #165	; 0xa5
  402712:	2b4b      	cmp	r3, #75	; 0x4b
  402714:	d82e      	bhi.n	402774 <touch_handler+0x84>
					clkd =1;
  402716:	2201      	movs	r2, #1
  402718:	4b1e      	ldr	r3, [pc, #120]	; (402794 <touch_handler+0xa4>)
  40271a:	601a      	str	r2, [r3, #0]
				} 
				else if(ty > BUTTON_Y && ty < BUTTON_Y + BUTTON_H/2) {
					clkd =0;
				}
				draw_button(clkd);
  40271c:	4b1d      	ldr	r3, [pc, #116]	; (402794 <touch_handler+0xa4>)
  40271e:	6818      	ldr	r0, [r3, #0]
  402720:	4b1d      	ldr	r3, [pc, #116]	; (402798 <touch_handler+0xa8>)
  402722:	4798      	blx	r3
			}
		}
	}
	
	if(tx >=275 && tx <= 315 && ty >= 25 && ty <= 50) { // Botao do Lock
  402724:	f2a4 1413 	subw	r4, r4, #275	; 0x113
  402728:	2c28      	cmp	r4, #40	; 0x28
  40272a:	d813      	bhi.n	402754 <touch_handler+0x64>
  40272c:	3d19      	subs	r5, #25
  40272e:	2d19      	cmp	r5, #25
  402730:	d810      	bhi.n	402754 <touch_handler+0x64>
		c++;
  402732:	4b1a      	ldr	r3, [pc, #104]	; (40279c <touch_handler+0xac>)
  402734:	681a      	ldr	r2, [r3, #0]
  402736:	3201      	adds	r2, #1
  402738:	601a      	str	r2, [r3, #0]
		if(c%2!=0){
  40273a:	681b      	ldr	r3, [r3, #0]
  40273c:	f013 0f01 	tst.w	r3, #1
  402740:	d008      	beq.n	402754 <touch_handler+0x64>
			if (locked){
  402742:	4b12      	ldr	r3, [pc, #72]	; (40278c <touch_handler+0x9c>)
  402744:	781b      	ldrb	r3, [r3, #0]
  402746:	b1eb      	cbz	r3, 402784 <touch_handler+0x94>
				locked=false;
  402748:	2200      	movs	r2, #0
  40274a:	4b10      	ldr	r3, [pc, #64]	; (40278c <touch_handler+0x9c>)
  40274c:	701a      	strb	r2, [r3, #0]
			}
			else{
				locked=true;
			}
			draw_button(3);
  40274e:	2003      	movs	r0, #3
  402750:	4b11      	ldr	r3, [pc, #68]	; (402798 <touch_handler+0xa8>)
  402752:	4798      	blx	r3
  402754:	bd38      	pop	{r3, r4, r5, pc}
			if(tx >=100 && tx <= ILI9488_LCD_WIDTH-100 && ty >= 325 && ty <= 375) {
  402756:	f1a0 0364 	sub.w	r3, r0, #100	; 0x64
  40275a:	2b78      	cmp	r3, #120	; 0x78
  40275c:	d8e2      	bhi.n	402724 <touch_handler+0x34>
  40275e:	f2a1 1345 	subw	r3, r1, #325	; 0x145
  402762:	2b32      	cmp	r3, #50	; 0x32
  402764:	d8de      	bhi.n	402724 <touch_handler+0x34>
				selection=false;	
  402766:	2200      	movs	r2, #0
  402768:	4b09      	ldr	r3, [pc, #36]	; (402790 <touch_handler+0xa0>)
  40276a:	701a      	strb	r2, [r3, #0]
				draw_button(3);
  40276c:	2003      	movs	r0, #3
  40276e:	4b0a      	ldr	r3, [pc, #40]	; (402798 <touch_handler+0xa8>)
  402770:	4798      	blx	r3
  402772:	e7d7      	b.n	402724 <touch_handler+0x34>
				else if(ty > BUTTON_Y && ty < BUTTON_Y + BUTTON_H/2) {
  402774:	f1a1 03f1 	sub.w	r3, r1, #241	; 0xf1
  402778:	2b49      	cmp	r3, #73	; 0x49
  40277a:	d8cf      	bhi.n	40271c <touch_handler+0x2c>
					clkd =0;
  40277c:	2200      	movs	r2, #0
  40277e:	4b05      	ldr	r3, [pc, #20]	; (402794 <touch_handler+0xa4>)
  402780:	601a      	str	r2, [r3, #0]
  402782:	e7cb      	b.n	40271c <touch_handler+0x2c>
				locked=true;
  402784:	2201      	movs	r2, #1
  402786:	4b01      	ldr	r3, [pc, #4]	; (40278c <touch_handler+0x9c>)
  402788:	701a      	strb	r2, [r3, #0]
  40278a:	e7e0      	b.n	40274e <touch_handler+0x5e>
  40278c:	20400f4d 	.word	0x20400f4d
  402790:	20400140 	.word	0x20400140
  402794:	20400f98 	.word	0x20400f98
  402798:	0040251d 	.word	0x0040251d
  40279c:	20400f48 	.word	0x20400f48

004027a0 <mxt_handler>:
		}
	}
}

void mxt_handler(struct mxt_device *device)
{
  4027a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4027a4:	b0ce      	sub	sp, #312	; 0x138
  4027a6:	4605      	mov	r5, r0
	/* USART tx buffer initialized to 0 */
	char tx_buf[STRING_LENGTH * MAX_ENTRIES] = {0};
  4027a8:	22d2      	movs	r2, #210	; 0xd2
  4027aa:	2100      	movs	r1, #0
  4027ac:	a819      	add	r0, sp, #100	; 0x64
  4027ae:	4b23      	ldr	r3, [pc, #140]	; (40283c <mxt_handler+0x9c>)
  4027b0:	4798      	blx	r3
	uint8_t i = 0; /* Iterator */
  4027b2:	2400      	movs	r4, #0
	do {
		/* Temporary buffer for each new touch event line */
		char buf[STRING_LENGTH];
	
		/* Read next next touch event in the queue, discard if read fails */
		if (mxt_read_touch_event(device, &touch_event) != STATUS_OK) {
  4027b4:	4f22      	ldr	r7, [pc, #136]	; (402840 <mxt_handler+0xa0>)
		 // eixos trocados (quando na vertical LCD)
		uint32_t conv_x = convert_axis_system_x(touch_event.y);
		uint32_t conv_y = convert_axis_system_y(touch_event.x);
		
		/* Format a new entry in the data string that will be sent over USART */
		sprintf(buf, "Nr: %1d, X:%4d, Y:%4d, Status:0x%2x conv X:%3d Y:%3d\n\r",
  4027b6:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 40285c <mxt_handler+0xbc>
  4027ba:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 402860 <mxt_handler+0xc0>
  4027be:	e005      	b.n	4027cc <mxt_handler+0x2c>
		strcat(tx_buf, buf);
		i++;

		/* Check if there is still messages in the queue and
		 * if we have reached the maximum numbers of events */
	} while ((mxt_is_message_pending(device)) & (i < MAX_ENTRIES));
  4027c0:	4628      	mov	r0, r5
  4027c2:	4b20      	ldr	r3, [pc, #128]	; (402844 <mxt_handler+0xa4>)
  4027c4:	4798      	blx	r3
  4027c6:	2c02      	cmp	r4, #2
  4027c8:	d82a      	bhi.n	402820 <mxt_handler+0x80>
  4027ca:	b348      	cbz	r0, 402820 <mxt_handler+0x80>
		if (mxt_read_touch_event(device, &touch_event) != STATUS_OK) {
  4027cc:	a916      	add	r1, sp, #88	; 0x58
  4027ce:	4628      	mov	r0, r5
  4027d0:	47b8      	blx	r7
  4027d2:	2800      	cmp	r0, #0
  4027d4:	d1f4      	bne.n	4027c0 <mxt_handler+0x20>
		uint32_t conv_x = convert_axis_system_x(touch_event.y);
  4027d6:	f8bd 105c 	ldrh.w	r1, [sp, #92]	; 0x5c
	return ILI9488_LCD_WIDTH - ILI9488_LCD_WIDTH*touch_y/4096;
  4027da:	eb01 0681 	add.w	r6, r1, r1, lsl #2
  4027de:	f3c6 1693 	ubfx	r6, r6, #6, #20
  4027e2:	f5c6 76a0 	rsb	r6, r6, #320	; 0x140
		uint32_t conv_y = convert_axis_system_y(touch_event.x);
  4027e6:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
	return ILI9488_LCD_HEIGHT*touch_x/4096;
  4027ea:	ebc3 1a03 	rsb	sl, r3, r3, lsl #4
  4027ee:	f3ca 1ad3 	ubfx	sl, sl, #7, #20
		sprintf(buf, "Nr: %1d, X:%4d, Y:%4d, Status:0x%2x conv X:%3d Y:%3d\n\r",
  4027f2:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
  4027f6:	f8cd a00c 	str.w	sl, [sp, #12]
  4027fa:	9602      	str	r6, [sp, #8]
  4027fc:	f89d 0059 	ldrb.w	r0, [sp, #89]	; 0x59
  402800:	9001      	str	r0, [sp, #4]
  402802:	9100      	str	r1, [sp, #0]
  402804:	4649      	mov	r1, r9
  402806:	a804      	add	r0, sp, #16
  402808:	47c0      	blx	r8
		touch_handler(conv_x, conv_y);
  40280a:	4651      	mov	r1, sl
  40280c:	4630      	mov	r0, r6
  40280e:	4b0e      	ldr	r3, [pc, #56]	; (402848 <mxt_handler+0xa8>)
  402810:	4798      	blx	r3
		strcat(tx_buf, buf);
  402812:	a904      	add	r1, sp, #16
  402814:	a819      	add	r0, sp, #100	; 0x64
  402816:	4b0d      	ldr	r3, [pc, #52]	; (40284c <mxt_handler+0xac>)
  402818:	4798      	blx	r3
		i++;
  40281a:	3401      	adds	r4, #1
  40281c:	b2e4      	uxtb	r4, r4
  40281e:	e7cf      	b.n	4027c0 <mxt_handler+0x20>

	/* If there is any entries in the buffer, send them over USART */
	if (i > 0) {
  402820:	b914      	cbnz	r4, 402828 <mxt_handler+0x88>
		usart_serial_write_packet(USART_SERIAL_EXAMPLE, (uint8_t *)tx_buf, strlen(tx_buf));
	}
}
  402822:	b04e      	add	sp, #312	; 0x138
  402824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		usart_serial_write_packet(USART_SERIAL_EXAMPLE, (uint8_t *)tx_buf, strlen(tx_buf));
  402828:	a819      	add	r0, sp, #100	; 0x64
  40282a:	4b09      	ldr	r3, [pc, #36]	; (402850 <mxt_handler+0xb0>)
  40282c:	4798      	blx	r3
  40282e:	4602      	mov	r2, r0
  402830:	a919      	add	r1, sp, #100	; 0x64
  402832:	4808      	ldr	r0, [pc, #32]	; (402854 <mxt_handler+0xb4>)
  402834:	4b08      	ldr	r3, [pc, #32]	; (402858 <mxt_handler+0xb8>)
  402836:	4798      	blx	r3
}
  402838:	e7f3      	b.n	402822 <mxt_handler+0x82>
  40283a:	bf00      	nop
  40283c:	004031f1 	.word	0x004031f1
  402840:	004005dd 	.word	0x004005dd
  402844:	0040056d 	.word	0x0040056d
  402848:	004026f1 	.word	0x004026f1
  40284c:	004034b5 	.word	0x004034b5
  402850:	004035c1 	.word	0x004035c1
  402854:	40028000 	.word	0x40028000
  402858:	004006c1 	.word	0x004006c1
  40285c:	00409970 	.word	0x00409970
  402860:	00403469 	.word	0x00403469

00402864 <crono>:

void crono(int tempo){
  402864:	b5f0      	push	{r4, r5, r6, r7, lr}
  402866:	b0c3      	sub	sp, #268	; 0x10c
  402868:	4604      	mov	r4, r0
	clear_LCD(390,415);
  40286a:	f240 119f 	movw	r1, #415	; 0x19f
  40286e:	f44f 70c3 	mov.w	r0, #390	; 0x186
  402872:	4b20      	ldr	r3, [pc, #128]	; (4028f4 <crono+0x90>)
  402874:	4798      	blx	r3
	t_ciclo *p_primeiro = initMenuOrder();
  402876:	4b20      	ldr	r3, [pc, #128]	; (4028f8 <crono+0x94>)
  402878:	4798      	blx	r3
	if (start==true){
  40287a:	4b20      	ldr	r3, [pc, #128]	; (4028fc <crono+0x98>)
  40287c:	781b      	ldrb	r3, [r3, #0]
  40287e:	b2db      	uxtb	r3, r3
  402880:	2b01      	cmp	r3, #1
  402882:	d001      	beq.n	402888 <crono+0x24>
			selection=true;
			draw_button(3);
		}
	}
	else{return;}
}
  402884:	b043      	add	sp, #268	; 0x10c
  402886:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rtc_get_time(RTC, &hour, &minu, &seg);
  402888:	4e1d      	ldr	r6, [pc, #116]	; (402900 <crono+0x9c>)
  40288a:	4d1e      	ldr	r5, [pc, #120]	; (402904 <crono+0xa0>)
  40288c:	4633      	mov	r3, r6
  40288e:	462a      	mov	r2, r5
  402890:	491d      	ldr	r1, [pc, #116]	; (402908 <crono+0xa4>)
  402892:	481e      	ldr	r0, [pc, #120]	; (40290c <crono+0xa8>)
  402894:	4f1e      	ldr	r7, [pc, #120]	; (402910 <crono+0xac>)
  402896:	47b8      	blx	r7
		sprintf(stingLCD, "%d :%d de %d min.",minu,seg,tempo);
  402898:	6833      	ldr	r3, [r6, #0]
  40289a:	9400      	str	r4, [sp, #0]
  40289c:	682a      	ldr	r2, [r5, #0]
  40289e:	491d      	ldr	r1, [pc, #116]	; (402914 <crono+0xb0>)
  4028a0:	a802      	add	r0, sp, #8
  4028a2:	4e1d      	ldr	r6, [pc, #116]	; (402918 <crono+0xb4>)
  4028a4:	47b0      	blx	r6
		ili9488_draw_string(40, 400, stingLCD);
  4028a6:	aa02      	add	r2, sp, #8
  4028a8:	f44f 71c8 	mov.w	r1, #400	; 0x190
  4028ac:	2028      	movs	r0, #40	; 0x28
  4028ae:	4b1b      	ldr	r3, [pc, #108]	; (40291c <crono+0xb8>)
  4028b0:	4798      	blx	r3
		if(minu == tempo){
  4028b2:	682b      	ldr	r3, [r5, #0]
  4028b4:	42a3      	cmp	r3, r4
  4028b6:	d1e5      	bne.n	402884 <crono+0x20>
			sprintf(stingLCD, "ACABOU A LAVAGEM SEU CORNO");
  4028b8:	ac02      	add	r4, sp, #8
  4028ba:	4d19      	ldr	r5, [pc, #100]	; (402920 <crono+0xbc>)
  4028bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4028be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4028c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  4028c4:	c403      	stmia	r4!, {r0, r1}
  4028c6:	f824 2b02 	strh.w	r2, [r4], #2
  4028ca:	0c12      	lsrs	r2, r2, #16
  4028cc:	7022      	strb	r2, [r4, #0]
			ili9488_draw_string(5, 455, stingLCD);
  4028ce:	aa02      	add	r2, sp, #8
  4028d0:	f240 11c7 	movw	r1, #455	; 0x1c7
  4028d4:	2005      	movs	r0, #5
  4028d6:	4b11      	ldr	r3, [pc, #68]	; (40291c <crono+0xb8>)
  4028d8:	4798      	blx	r3
			delay_s(1);
  4028da:	4812      	ldr	r0, [pc, #72]	; (402924 <crono+0xc0>)
  4028dc:	4b12      	ldr	r3, [pc, #72]	; (402928 <crono+0xc4>)
  4028de:	4798      	blx	r3
			start=false;
  4028e0:	2200      	movs	r2, #0
  4028e2:	4b06      	ldr	r3, [pc, #24]	; (4028fc <crono+0x98>)
  4028e4:	701a      	strb	r2, [r3, #0]
			selection=true;
  4028e6:	2201      	movs	r2, #1
  4028e8:	4b10      	ldr	r3, [pc, #64]	; (40292c <crono+0xc8>)
  4028ea:	701a      	strb	r2, [r3, #0]
			draw_button(3);
  4028ec:	2003      	movs	r0, #3
  4028ee:	4b10      	ldr	r3, [pc, #64]	; (402930 <crono+0xcc>)
  4028f0:	4798      	blx	r3
  4028f2:	e7c7      	b.n	402884 <crono+0x20>
  4028f4:	004024a5 	.word	0x004024a5
  4028f8:	004023dd 	.word	0x004023dd
  4028fc:	20400f4e 	.word	0x20400f4e
  402900:	20400f90 	.word	0x20400f90
  402904:	20400f94 	.word	0x20400f94
  402908:	20400f9c 	.word	0x20400f9c
  40290c:	400e1860 	.word	0x400e1860
  402910:	00401833 	.word	0x00401833
  402914:	0040991c 	.word	0x0040991c
  402918:	00403469 	.word	0x00403469
  40291c:	00401281 	.word	0x00401281
  402920:	00409930 	.word	0x00409930
  402924:	0303af6b 	.word	0x0303af6b
  402928:	20400001 	.word	0x20400001
  40292c:	20400140 	.word	0x20400140
  402930:	0040251d 	.word	0x0040251d

00402934 <main>:
 
int main(void){
  402934:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402938:	b0a5      	sub	sp, #148	; 0x94
		.charlength   = USART_SERIAL_CHAR_LENGTH,
		.paritytype   = USART_SERIAL_PARITY,
		.stopbits     = USART_SERIAL_STOP_BIT
	};

	sysclk_init(); /* Initialize system clocks */
  40293a:	4b87      	ldr	r3, [pc, #540]	; (402b58 <main+0x224>)
  40293c:	4798      	blx	r3
	board_init();  /* Initialize board */
  40293e:	4b87      	ldr	r3, [pc, #540]	; (402b5c <main+0x228>)
  402940:	4798      	blx	r3
	g_ili9488_display_opt.ul_width = ILI9488_LCD_WIDTH;
  402942:	4887      	ldr	r0, [pc, #540]	; (402b60 <main+0x22c>)
  402944:	f44f 73a0 	mov.w	r3, #320	; 0x140
  402948:	6003      	str	r3, [r0, #0]
	g_ili9488_display_opt.ul_height = ILI9488_LCD_HEIGHT;
  40294a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  40294e:	6043      	str	r3, [r0, #4]
	g_ili9488_display_opt.foreground_color = COLOR_CONVERT(COLOR_WHITE);
  402950:	4b84      	ldr	r3, [pc, #528]	; (402b64 <main+0x230>)
  402952:	6083      	str	r3, [r0, #8]
	g_ili9488_display_opt.background_color = COLOR_CONVERT(COLOR_WHITE);
  402954:	60c3      	str	r3, [r0, #12]
	ili9488_init(&g_ili9488_display_opt);
  402956:	4b84      	ldr	r3, [pc, #528]	; (402b68 <main+0x234>)
  402958:	4798      	blx	r3
	configure_lcd();
	draw_screen();
  40295a:	4b84      	ldr	r3, [pc, #528]	; (402b6c <main+0x238>)
  40295c:	4798      	blx	r3
	draw_button(0);
  40295e:	2000      	movs	r0, #0
  402960:	4b83      	ldr	r3, [pc, #524]	; (402b70 <main+0x23c>)
  402962:	4798      	blx	r3
	uint8_t t8_object[] = {
  402964:	4c83      	ldr	r4, [pc, #524]	; (402b74 <main+0x240>)
  402966:	ab04      	add	r3, sp, #16
  402968:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
  40296c:	c303      	stmia	r3!, {r0, r1}
  40296e:	801a      	strh	r2, [r3, #0]
	uint8_t t9_object[] = {
  402970:	ad13      	add	r5, sp, #76	; 0x4c
  402972:	f104 060c 	add.w	r6, r4, #12
  402976:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  402978:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  40297a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  40297c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  40297e:	6833      	ldr	r3, [r6, #0]
  402980:	602b      	str	r3, [r5, #0]
	uint8_t t46_object[] = {
  402982:	ab01      	add	r3, sp, #4
  402984:	f104 0230 	add.w	r2, r4, #48	; 0x30
  402988:	ca07      	ldmia	r2, {r0, r1, r2}
  40298a:	c303      	stmia	r3!, {r0, r1}
  40298c:	701a      	strb	r2, [r3, #0]
	uint8_t t56_object[] = {
  40298e:	ad0a      	add	r5, sp, #40	; 0x28
  402990:	343c      	adds	r4, #60	; 0x3c
  402992:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  402994:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  402996:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  402998:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  40299a:	6823      	ldr	r3, [r4, #0]
  40299c:	702b      	strb	r3, [r5, #0]
	twihs_master_options_t twi_opt = {
  40299e:	2400      	movs	r4, #0
  4029a0:	9409      	str	r4, [sp, #36]	; 0x24
  4029a2:	4b75      	ldr	r3, [pc, #468]	; (402b78 <main+0x244>)
  4029a4:	9308      	str	r3, [sp, #32]
  4029a6:	264a      	movs	r6, #74	; 0x4a
  4029a8:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
typedef twihs_packet_t twihs_package_t;

static inline uint32_t twihs_master_setup(twihs_master_t p_twihs,
		twihs_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_peripheral_hz();
  4029ac:	f8df 8250 	ldr.w	r8, [pc, #592]	; 402c00 <main+0x2cc>
  4029b0:	f8cd 801c 	str.w	r8, [sp, #28]
  4029b4:	2013      	movs	r0, #19
  4029b6:	f8df 924c 	ldr.w	r9, [pc, #588]	; 402c04 <main+0x2d0>
  4029ba:	47c8      	blx	r9
#endif		
	} else {
		// Do Nothing
	}
#endif
	return (twihs_master_init(p_twihs, p_opt));
  4029bc:	4d6f      	ldr	r5, [pc, #444]	; (402b7c <main+0x248>)
  4029be:	a907      	add	r1, sp, #28
  4029c0:	4628      	mov	r0, r5
  4029c2:	4b6f      	ldr	r3, [pc, #444]	; (402b80 <main+0x24c>)
  4029c4:	4798      	blx	r3
	status = mxt_init_device(device, MAXTOUCH_TWI_INTERFACE,
  4029c6:	2302      	movs	r3, #2
  4029c8:	4632      	mov	r2, r6
  4029ca:	4629      	mov	r1, r5
  4029cc:	a81c      	add	r0, sp, #112	; 0x70
  4029ce:	4d6d      	ldr	r5, [pc, #436]	; (402b84 <main+0x250>)
  4029d0:	47a8      	blx	r5
	mxt_write_config_reg(device, mxt_get_object_address(device,
  4029d2:	4622      	mov	r2, r4
  4029d4:	2106      	movs	r1, #6
  4029d6:	a81c      	add	r0, sp, #112	; 0x70
  4029d8:	4d6b      	ldr	r5, [pc, #428]	; (402b88 <main+0x254>)
  4029da:	47a8      	blx	r5
  4029dc:	2201      	movs	r2, #1
  4029de:	4601      	mov	r1, r0
  4029e0:	a81c      	add	r0, sp, #112	; 0x70
  4029e2:	4e6a      	ldr	r6, [pc, #424]	; (402b8c <main+0x258>)
  4029e4:	47b0      	blx	r6
	delay_ms(MXT_RESET_TIME);
  4029e6:	486a      	ldr	r0, [pc, #424]	; (402b90 <main+0x25c>)
  4029e8:	4b6a      	ldr	r3, [pc, #424]	; (402b94 <main+0x260>)
  4029ea:	4798      	blx	r3
	mxt_write_config_reg(device, mxt_get_object_address(device,
  4029ec:	4622      	mov	r2, r4
  4029ee:	2107      	movs	r1, #7
  4029f0:	a81c      	add	r0, sp, #112	; 0x70
  4029f2:	47a8      	blx	r5
  4029f4:	2220      	movs	r2, #32
  4029f6:	4601      	mov	r1, r0
  4029f8:	a81c      	add	r0, sp, #112	; 0x70
  4029fa:	47b0      	blx	r6
	mxt_write_config_reg(device, mxt_get_object_address(device,
  4029fc:	4622      	mov	r2, r4
  4029fe:	2107      	movs	r1, #7
  402a00:	a81c      	add	r0, sp, #112	; 0x70
  402a02:	47a8      	blx	r5
  402a04:	1c41      	adds	r1, r0, #1
  402a06:	2210      	movs	r2, #16
  402a08:	b289      	uxth	r1, r1
  402a0a:	a81c      	add	r0, sp, #112	; 0x70
  402a0c:	47b0      	blx	r6
	mxt_write_config_reg(device, mxt_get_object_address(device,
  402a0e:	4622      	mov	r2, r4
  402a10:	2107      	movs	r1, #7
  402a12:	a81c      	add	r0, sp, #112	; 0x70
  402a14:	47a8      	blx	r5
  402a16:	1c81      	adds	r1, r0, #2
  402a18:	224b      	movs	r2, #75	; 0x4b
  402a1a:	b289      	uxth	r1, r1
  402a1c:	a81c      	add	r0, sp, #112	; 0x70
  402a1e:	47b0      	blx	r6
	mxt_write_config_reg(device, mxt_get_object_address(device,
  402a20:	4622      	mov	r2, r4
  402a22:	2107      	movs	r1, #7
  402a24:	a81c      	add	r0, sp, #112	; 0x70
  402a26:	47a8      	blx	r5
  402a28:	1cc1      	adds	r1, r0, #3
  402a2a:	2284      	movs	r2, #132	; 0x84
  402a2c:	b289      	uxth	r1, r1
  402a2e:	a81c      	add	r0, sp, #112	; 0x70
  402a30:	47b0      	blx	r6
	mxt_write_config_object(device, mxt_get_object_address(device,
  402a32:	4622      	mov	r2, r4
  402a34:	2108      	movs	r1, #8
  402a36:	a81c      	add	r0, sp, #112	; 0x70
  402a38:	47a8      	blx	r5
  402a3a:	aa04      	add	r2, sp, #16
  402a3c:	4601      	mov	r1, r0
  402a3e:	a81c      	add	r0, sp, #112	; 0x70
  402a40:	4f55      	ldr	r7, [pc, #340]	; (402b98 <main+0x264>)
  402a42:	47b8      	blx	r7
	mxt_write_config_object(device, mxt_get_object_address(device,
  402a44:	4622      	mov	r2, r4
  402a46:	2109      	movs	r1, #9
  402a48:	a81c      	add	r0, sp, #112	; 0x70
  402a4a:	47a8      	blx	r5
  402a4c:	aa13      	add	r2, sp, #76	; 0x4c
  402a4e:	4601      	mov	r1, r0
  402a50:	a81c      	add	r0, sp, #112	; 0x70
  402a52:	47b8      	blx	r7
	mxt_write_config_object(device, mxt_get_object_address(device,
  402a54:	4622      	mov	r2, r4
  402a56:	212e      	movs	r1, #46	; 0x2e
  402a58:	a81c      	add	r0, sp, #112	; 0x70
  402a5a:	47a8      	blx	r5
  402a5c:	aa01      	add	r2, sp, #4
  402a5e:	4601      	mov	r1, r0
  402a60:	a81c      	add	r0, sp, #112	; 0x70
  402a62:	47b8      	blx	r7
	mxt_write_config_object(device, mxt_get_object_address(device,
  402a64:	4622      	mov	r2, r4
  402a66:	2138      	movs	r1, #56	; 0x38
  402a68:	a81c      	add	r0, sp, #112	; 0x70
  402a6a:	47a8      	blx	r5
  402a6c:	aa0a      	add	r2, sp, #40	; 0x28
  402a6e:	4601      	mov	r1, r0
  402a70:	a81c      	add	r0, sp, #112	; 0x70
  402a72:	47b8      	blx	r7
	mxt_write_config_reg(device, mxt_get_object_address(device,
  402a74:	4622      	mov	r2, r4
  402a76:	2106      	movs	r1, #6
  402a78:	a81c      	add	r0, sp, #112	; 0x70
  402a7a:	47a8      	blx	r5
  402a7c:	1c81      	adds	r1, r0, #2
  402a7e:	2201      	movs	r2, #1
  402a80:	b289      	uxth	r1, r1
  402a82:	a81c      	add	r0, sp, #112	; 0x70
  402a84:	47b0      	blx	r6
	/* Initialize the mXT touch device */
	mxt_init(&device);
    t_ciclo *p_primeiro = initMenuOrder();
  402a86:	4b45      	ldr	r3, [pc, #276]	; (402b9c <main+0x268>)
  402a88:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  402a8a:	4d45      	ldr	r5, [pc, #276]	; (402ba0 <main+0x26c>)
  402a8c:	4b45      	ldr	r3, [pc, #276]	; (402ba4 <main+0x270>)
  402a8e:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  402a90:	4a45      	ldr	r2, [pc, #276]	; (402ba8 <main+0x274>)
  402a92:	4b46      	ldr	r3, [pc, #280]	; (402bac <main+0x278>)
  402a94:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  402a96:	4a46      	ldr	r2, [pc, #280]	; (402bb0 <main+0x27c>)
  402a98:	4b46      	ldr	r3, [pc, #280]	; (402bb4 <main+0x280>)
  402a9a:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  402a9c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  402aa0:	9313      	str	r3, [sp, #76]	; 0x4c
	usart_settings.char_length = opt->charlength;
  402aa2:	23c0      	movs	r3, #192	; 0xc0
  402aa4:	9314      	str	r3, [sp, #80]	; 0x50
	usart_settings.parity_type = opt->paritytype;
  402aa6:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402aaa:	9315      	str	r3, [sp, #84]	; 0x54
	usart_settings.stop_bits= opt->stopbits;
  402aac:	9416      	str	r4, [sp, #88]	; 0x58
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  402aae:	9417      	str	r4, [sp, #92]	; 0x5c
  402ab0:	200e      	movs	r0, #14
  402ab2:	47c8      	blx	r9
		usart_init_rs232(p_usart, &usart_settings,
  402ab4:	4642      	mov	r2, r8
  402ab6:	a913      	add	r1, sp, #76	; 0x4c
  402ab8:	4628      	mov	r0, r5
  402aba:	4b3f      	ldr	r3, [pc, #252]	; (402bb8 <main+0x284>)
  402abc:	4798      	blx	r3
		usart_enable_tx(p_usart);
  402abe:	4628      	mov	r0, r5
  402ac0:	4b3e      	ldr	r3, [pc, #248]	; (402bbc <main+0x288>)
  402ac2:	4798      	blx	r3
		usart_enable_rx(p_usart);
  402ac4:	4628      	mov	r0, r5
  402ac6:	4b3e      	ldr	r3, [pc, #248]	; (402bc0 <main+0x28c>)
  402ac8:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  402aca:	4e3e      	ldr	r6, [pc, #248]	; (402bc4 <main+0x290>)
  402acc:	6833      	ldr	r3, [r6, #0]
  402ace:	4621      	mov	r1, r4
  402ad0:	6898      	ldr	r0, [r3, #8]
  402ad2:	4d3d      	ldr	r5, [pc, #244]	; (402bc8 <main+0x294>)
  402ad4:	47a8      	blx	r5
	setbuf(stdin, NULL);
  402ad6:	6833      	ldr	r3, [r6, #0]
  402ad8:	4621      	mov	r1, r4
  402ada:	6858      	ldr	r0, [r3, #4]
  402adc:	47a8      	blx	r5

	/* Initialize stdio on USART */
	stdio_serial_init(USART_SERIAL_EXAMPLE, &usart_serial_options);

	printf("\n\rmaXTouch data USART transmitter\n\r");
  402ade:	483b      	ldr	r0, [pc, #236]	; (402bcc <main+0x298>)
  402ae0:	4b3b      	ldr	r3, [pc, #236]	; (402bd0 <main+0x29c>)
  402ae2:	4798      	blx	r3
	
	f_rtt_alarme = true;
  402ae4:	2201      	movs	r2, #1
  402ae6:	4b3b      	ldr	r3, [pc, #236]	; (402bd4 <main+0x2a0>)
  402ae8:	701a      	strb	r2, [r3, #0]

	while (true) {
		if(f_rtt_alarme){
  402aea:	461f      	mov	r7, r3
	rtt_sel_source(RTT, false);
  402aec:	4c3a      	ldr	r4, [pc, #232]	; (402bd8 <main+0x2a4>)
	ul_previous_time = rtt_read_timer_value(RTT);
  402aee:	4e3b      	ldr	r6, [pc, #236]	; (402bdc <main+0x2a8>)
  402af0:	e002      	b.n	402af8 <main+0x1c4>
			/* Check for any pending messages and run message handler if any
			* message is found in the queue */
			if (mxt_is_message_pending(&device)) {
				mxt_handler(&device);
			}
			crono(1);	
  402af2:	2001      	movs	r0, #1
  402af4:	4b3a      	ldr	r3, [pc, #232]	; (402be0 <main+0x2ac>)
  402af6:	4798      	blx	r3
		if(f_rtt_alarme){
  402af8:	783b      	ldrb	r3, [r7, #0]
  402afa:	2b00      	cmp	r3, #0
  402afc:	d0fc      	beq.n	402af8 <main+0x1c4>
	rtt_sel_source(RTT, false);
  402afe:	2100      	movs	r1, #0
  402b00:	4620      	mov	r0, r4
  402b02:	4b38      	ldr	r3, [pc, #224]	; (402be4 <main+0x2b0>)
  402b04:	4798      	blx	r3
	rtt_init(RTT, pllPreScale);
  402b06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  402b0a:	4620      	mov	r0, r4
  402b0c:	4b36      	ldr	r3, [pc, #216]	; (402be8 <main+0x2b4>)
  402b0e:	4798      	blx	r3
	ul_previous_time = rtt_read_timer_value(RTT);
  402b10:	4620      	mov	r0, r4
  402b12:	47b0      	blx	r6
  402b14:	4605      	mov	r5, r0
	while (ul_previous_time == rtt_read_timer_value(RTT));
  402b16:	4620      	mov	r0, r4
  402b18:	47b0      	blx	r6
  402b1a:	4285      	cmp	r5, r0
  402b1c:	d0fb      	beq.n	402b16 <main+0x1e2>
	rtt_write_alarm_time(RTT, IrqNPulses+ul_previous_time);
  402b1e:	1d29      	adds	r1, r5, #4
  402b20:	4620      	mov	r0, r4
  402b22:	4b32      	ldr	r3, [pc, #200]	; (402bec <main+0x2b8>)
  402b24:	4798      	blx	r3
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  402b26:	4b32      	ldr	r3, [pc, #200]	; (402bf0 <main+0x2bc>)
  402b28:	2208      	movs	r2, #8
  402b2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  402b2e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402b32:	2500      	movs	r5, #0
  402b34:	f883 5303 	strb.w	r5, [r3, #771]	; 0x303
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402b38:	601a      	str	r2, [r3, #0]
	rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  402b3a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  402b3e:	4620      	mov	r0, r4
  402b40:	4b2c      	ldr	r3, [pc, #176]	; (402bf4 <main+0x2c0>)
  402b42:	4798      	blx	r3
			f_rtt_alarme = false;
  402b44:	703d      	strb	r5, [r7, #0]
			if (mxt_is_message_pending(&device)) {
  402b46:	a81c      	add	r0, sp, #112	; 0x70
  402b48:	4b2b      	ldr	r3, [pc, #172]	; (402bf8 <main+0x2c4>)
  402b4a:	4798      	blx	r3
  402b4c:	2800      	cmp	r0, #0
  402b4e:	d0d0      	beq.n	402af2 <main+0x1be>
				mxt_handler(&device);
  402b50:	a81c      	add	r0, sp, #112	; 0x70
  402b52:	4b2a      	ldr	r3, [pc, #168]	; (402bfc <main+0x2c8>)
  402b54:	4798      	blx	r3
  402b56:	e7cc      	b.n	402af2 <main+0x1be>
  402b58:	0040064d 	.word	0x0040064d
  402b5c:	004009b5 	.word	0x004009b5
  402b60:	20400fa0 	.word	0x20400fa0
  402b64:	00fcfcfc 	.word	0x00fcfcfc
  402b68:	00400f21 	.word	0x00400f21
  402b6c:	004024f5 	.word	0x004024f5
  402b70:	0040251d 	.word	0x0040251d
  402b74:	004098bc 	.word	0x004098bc
  402b78:	00061a80 	.word	0x00061a80
  402b7c:	40018000 	.word	0x40018000
  402b80:	00401cc5 	.word	0x00401cc5
  402b84:	004001d5 	.word	0x004001d5
  402b88:	0040046d 	.word	0x0040046d
  402b8c:	00400525 	.word	0x00400525
  402b90:	003228d8 	.word	0x003228d8
  402b94:	20400001 	.word	0x20400001
  402b98:	004004ad 	.word	0x004004ad
  402b9c:	004023dd 	.word	0x004023dd
  402ba0:	40028000 	.word	0x40028000
  402ba4:	20400f8c 	.word	0x20400f8c
  402ba8:	00402309 	.word	0x00402309
  402bac:	20400f88 	.word	0x20400f88
  402bb0:	0040222d 	.word	0x0040222d
  402bb4:	20400f84 	.word	0x20400f84
  402bb8:	00401eed 	.word	0x00401eed
  402bbc:	00401f41 	.word	0x00401f41
  402bc0:	00401f47 	.word	0x00401f47
  402bc4:	20400144 	.word	0x20400144
  402bc8:	004032c9 	.word	0x004032c9
  402bcc:	0040994c 	.word	0x0040994c
  402bd0:	00402c59 	.word	0x00402c59
  402bd4:	20400f4c 	.word	0x20400f4c
  402bd8:	400e1830 	.word	0x400e1830
  402bdc:	00401a3d 	.word	0x00401a3d
  402be0:	00402865 	.word	0x00402865
  402be4:	004019e9 	.word	0x004019e9
  402be8:	004019d5 	.word	0x004019d5
  402bec:	00401a55 	.word	0x00401a55
  402bf0:	e000e100 	.word	0xe000e100
  402bf4:	00401a15 	.word	0x00401a15
  402bf8:	0040056d 	.word	0x0040056d
  402bfc:	004027a1 	.word	0x004027a1
  402c00:	08f0d180 	.word	0x08f0d180
  402c04:	004017f9 	.word	0x004017f9

00402c08 <__libc_init_array>:
  402c08:	b570      	push	{r4, r5, r6, lr}
  402c0a:	4e0f      	ldr	r6, [pc, #60]	; (402c48 <__libc_init_array+0x40>)
  402c0c:	4d0f      	ldr	r5, [pc, #60]	; (402c4c <__libc_init_array+0x44>)
  402c0e:	1b76      	subs	r6, r6, r5
  402c10:	10b6      	asrs	r6, r6, #2
  402c12:	bf18      	it	ne
  402c14:	2400      	movne	r4, #0
  402c16:	d005      	beq.n	402c24 <__libc_init_array+0x1c>
  402c18:	3401      	adds	r4, #1
  402c1a:	f855 3b04 	ldr.w	r3, [r5], #4
  402c1e:	4798      	blx	r3
  402c20:	42a6      	cmp	r6, r4
  402c22:	d1f9      	bne.n	402c18 <__libc_init_array+0x10>
  402c24:	4e0a      	ldr	r6, [pc, #40]	; (402c50 <__libc_init_array+0x48>)
  402c26:	4d0b      	ldr	r5, [pc, #44]	; (402c54 <__libc_init_array+0x4c>)
  402c28:	1b76      	subs	r6, r6, r5
  402c2a:	f007 f811 	bl	409c50 <_init>
  402c2e:	10b6      	asrs	r6, r6, #2
  402c30:	bf18      	it	ne
  402c32:	2400      	movne	r4, #0
  402c34:	d006      	beq.n	402c44 <__libc_init_array+0x3c>
  402c36:	3401      	adds	r4, #1
  402c38:	f855 3b04 	ldr.w	r3, [r5], #4
  402c3c:	4798      	blx	r3
  402c3e:	42a6      	cmp	r6, r4
  402c40:	d1f9      	bne.n	402c36 <__libc_init_array+0x2e>
  402c42:	bd70      	pop	{r4, r5, r6, pc}
  402c44:	bd70      	pop	{r4, r5, r6, pc}
  402c46:	bf00      	nop
  402c48:	00409c5c 	.word	0x00409c5c
  402c4c:	00409c5c 	.word	0x00409c5c
  402c50:	00409c64 	.word	0x00409c64
  402c54:	00409c5c 	.word	0x00409c5c

00402c58 <iprintf>:
  402c58:	b40f      	push	{r0, r1, r2, r3}
  402c5a:	b500      	push	{lr}
  402c5c:	4907      	ldr	r1, [pc, #28]	; (402c7c <iprintf+0x24>)
  402c5e:	b083      	sub	sp, #12
  402c60:	ab04      	add	r3, sp, #16
  402c62:	6808      	ldr	r0, [r1, #0]
  402c64:	f853 2b04 	ldr.w	r2, [r3], #4
  402c68:	6881      	ldr	r1, [r0, #8]
  402c6a:	9301      	str	r3, [sp, #4]
  402c6c:	f001 ff84 	bl	404b78 <_vfiprintf_r>
  402c70:	b003      	add	sp, #12
  402c72:	f85d eb04 	ldr.w	lr, [sp], #4
  402c76:	b004      	add	sp, #16
  402c78:	4770      	bx	lr
  402c7a:	bf00      	nop
  402c7c:	20400144 	.word	0x20400144

00402c80 <malloc>:
  402c80:	4b02      	ldr	r3, [pc, #8]	; (402c8c <malloc+0xc>)
  402c82:	4601      	mov	r1, r0
  402c84:	6818      	ldr	r0, [r3, #0]
  402c86:	f000 b803 	b.w	402c90 <_malloc_r>
  402c8a:	bf00      	nop
  402c8c:	20400144 	.word	0x20400144

00402c90 <_malloc_r>:
  402c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402c94:	f101 060b 	add.w	r6, r1, #11
  402c98:	2e16      	cmp	r6, #22
  402c9a:	b083      	sub	sp, #12
  402c9c:	4605      	mov	r5, r0
  402c9e:	f240 809e 	bls.w	402dde <_malloc_r+0x14e>
  402ca2:	f036 0607 	bics.w	r6, r6, #7
  402ca6:	f100 80bd 	bmi.w	402e24 <_malloc_r+0x194>
  402caa:	42b1      	cmp	r1, r6
  402cac:	f200 80ba 	bhi.w	402e24 <_malloc_r+0x194>
  402cb0:	f000 faec 	bl	40328c <__malloc_lock>
  402cb4:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  402cb8:	f0c0 8293 	bcc.w	4031e2 <_malloc_r+0x552>
  402cbc:	0a73      	lsrs	r3, r6, #9
  402cbe:	f000 80b8 	beq.w	402e32 <_malloc_r+0x1a2>
  402cc2:	2b04      	cmp	r3, #4
  402cc4:	f200 8179 	bhi.w	402fba <_malloc_r+0x32a>
  402cc8:	09b3      	lsrs	r3, r6, #6
  402cca:	f103 0039 	add.w	r0, r3, #57	; 0x39
  402cce:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  402cd2:	00c3      	lsls	r3, r0, #3
  402cd4:	4fbf      	ldr	r7, [pc, #764]	; (402fd4 <_malloc_r+0x344>)
  402cd6:	443b      	add	r3, r7
  402cd8:	f1a3 0108 	sub.w	r1, r3, #8
  402cdc:	685c      	ldr	r4, [r3, #4]
  402cde:	42a1      	cmp	r1, r4
  402ce0:	d106      	bne.n	402cf0 <_malloc_r+0x60>
  402ce2:	e00c      	b.n	402cfe <_malloc_r+0x6e>
  402ce4:	2a00      	cmp	r2, #0
  402ce6:	f280 80aa 	bge.w	402e3e <_malloc_r+0x1ae>
  402cea:	68e4      	ldr	r4, [r4, #12]
  402cec:	42a1      	cmp	r1, r4
  402cee:	d006      	beq.n	402cfe <_malloc_r+0x6e>
  402cf0:	6863      	ldr	r3, [r4, #4]
  402cf2:	f023 0303 	bic.w	r3, r3, #3
  402cf6:	1b9a      	subs	r2, r3, r6
  402cf8:	2a0f      	cmp	r2, #15
  402cfa:	ddf3      	ble.n	402ce4 <_malloc_r+0x54>
  402cfc:	4670      	mov	r0, lr
  402cfe:	693c      	ldr	r4, [r7, #16]
  402d00:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 402fe8 <_malloc_r+0x358>
  402d04:	4574      	cmp	r4, lr
  402d06:	f000 81ab 	beq.w	403060 <_malloc_r+0x3d0>
  402d0a:	6863      	ldr	r3, [r4, #4]
  402d0c:	f023 0303 	bic.w	r3, r3, #3
  402d10:	1b9a      	subs	r2, r3, r6
  402d12:	2a0f      	cmp	r2, #15
  402d14:	f300 8190 	bgt.w	403038 <_malloc_r+0x3a8>
  402d18:	2a00      	cmp	r2, #0
  402d1a:	f8c7 e014 	str.w	lr, [r7, #20]
  402d1e:	f8c7 e010 	str.w	lr, [r7, #16]
  402d22:	f280 809d 	bge.w	402e60 <_malloc_r+0x1d0>
  402d26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402d2a:	f080 8161 	bcs.w	402ff0 <_malloc_r+0x360>
  402d2e:	08db      	lsrs	r3, r3, #3
  402d30:	f103 0c01 	add.w	ip, r3, #1
  402d34:	1099      	asrs	r1, r3, #2
  402d36:	687a      	ldr	r2, [r7, #4]
  402d38:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  402d3c:	f8c4 8008 	str.w	r8, [r4, #8]
  402d40:	2301      	movs	r3, #1
  402d42:	408b      	lsls	r3, r1
  402d44:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  402d48:	4313      	orrs	r3, r2
  402d4a:	3908      	subs	r1, #8
  402d4c:	60e1      	str	r1, [r4, #12]
  402d4e:	607b      	str	r3, [r7, #4]
  402d50:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  402d54:	f8c8 400c 	str.w	r4, [r8, #12]
  402d58:	1082      	asrs	r2, r0, #2
  402d5a:	2401      	movs	r4, #1
  402d5c:	4094      	lsls	r4, r2
  402d5e:	429c      	cmp	r4, r3
  402d60:	f200 808b 	bhi.w	402e7a <_malloc_r+0x1ea>
  402d64:	421c      	tst	r4, r3
  402d66:	d106      	bne.n	402d76 <_malloc_r+0xe6>
  402d68:	f020 0003 	bic.w	r0, r0, #3
  402d6c:	0064      	lsls	r4, r4, #1
  402d6e:	421c      	tst	r4, r3
  402d70:	f100 0004 	add.w	r0, r0, #4
  402d74:	d0fa      	beq.n	402d6c <_malloc_r+0xdc>
  402d76:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  402d7a:	46cc      	mov	ip, r9
  402d7c:	4680      	mov	r8, r0
  402d7e:	f8dc 300c 	ldr.w	r3, [ip, #12]
  402d82:	459c      	cmp	ip, r3
  402d84:	d107      	bne.n	402d96 <_malloc_r+0x106>
  402d86:	e16d      	b.n	403064 <_malloc_r+0x3d4>
  402d88:	2a00      	cmp	r2, #0
  402d8a:	f280 817b 	bge.w	403084 <_malloc_r+0x3f4>
  402d8e:	68db      	ldr	r3, [r3, #12]
  402d90:	459c      	cmp	ip, r3
  402d92:	f000 8167 	beq.w	403064 <_malloc_r+0x3d4>
  402d96:	6859      	ldr	r1, [r3, #4]
  402d98:	f021 0103 	bic.w	r1, r1, #3
  402d9c:	1b8a      	subs	r2, r1, r6
  402d9e:	2a0f      	cmp	r2, #15
  402da0:	ddf2      	ble.n	402d88 <_malloc_r+0xf8>
  402da2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  402da6:	f8d3 8008 	ldr.w	r8, [r3, #8]
  402daa:	9300      	str	r3, [sp, #0]
  402dac:	199c      	adds	r4, r3, r6
  402dae:	4628      	mov	r0, r5
  402db0:	f046 0601 	orr.w	r6, r6, #1
  402db4:	f042 0501 	orr.w	r5, r2, #1
  402db8:	605e      	str	r6, [r3, #4]
  402dba:	f8c8 c00c 	str.w	ip, [r8, #12]
  402dbe:	f8cc 8008 	str.w	r8, [ip, #8]
  402dc2:	617c      	str	r4, [r7, #20]
  402dc4:	613c      	str	r4, [r7, #16]
  402dc6:	f8c4 e00c 	str.w	lr, [r4, #12]
  402dca:	f8c4 e008 	str.w	lr, [r4, #8]
  402dce:	6065      	str	r5, [r4, #4]
  402dd0:	505a      	str	r2, [r3, r1]
  402dd2:	f000 fa61 	bl	403298 <__malloc_unlock>
  402dd6:	9b00      	ldr	r3, [sp, #0]
  402dd8:	f103 0408 	add.w	r4, r3, #8
  402ddc:	e01e      	b.n	402e1c <_malloc_r+0x18c>
  402dde:	2910      	cmp	r1, #16
  402de0:	d820      	bhi.n	402e24 <_malloc_r+0x194>
  402de2:	f000 fa53 	bl	40328c <__malloc_lock>
  402de6:	2610      	movs	r6, #16
  402de8:	2318      	movs	r3, #24
  402dea:	2002      	movs	r0, #2
  402dec:	4f79      	ldr	r7, [pc, #484]	; (402fd4 <_malloc_r+0x344>)
  402dee:	443b      	add	r3, r7
  402df0:	f1a3 0208 	sub.w	r2, r3, #8
  402df4:	685c      	ldr	r4, [r3, #4]
  402df6:	4294      	cmp	r4, r2
  402df8:	f000 813d 	beq.w	403076 <_malloc_r+0x3e6>
  402dfc:	6863      	ldr	r3, [r4, #4]
  402dfe:	68e1      	ldr	r1, [r4, #12]
  402e00:	68a6      	ldr	r6, [r4, #8]
  402e02:	f023 0303 	bic.w	r3, r3, #3
  402e06:	4423      	add	r3, r4
  402e08:	4628      	mov	r0, r5
  402e0a:	685a      	ldr	r2, [r3, #4]
  402e0c:	60f1      	str	r1, [r6, #12]
  402e0e:	f042 0201 	orr.w	r2, r2, #1
  402e12:	608e      	str	r6, [r1, #8]
  402e14:	605a      	str	r2, [r3, #4]
  402e16:	f000 fa3f 	bl	403298 <__malloc_unlock>
  402e1a:	3408      	adds	r4, #8
  402e1c:	4620      	mov	r0, r4
  402e1e:	b003      	add	sp, #12
  402e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402e24:	2400      	movs	r4, #0
  402e26:	230c      	movs	r3, #12
  402e28:	4620      	mov	r0, r4
  402e2a:	602b      	str	r3, [r5, #0]
  402e2c:	b003      	add	sp, #12
  402e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402e32:	2040      	movs	r0, #64	; 0x40
  402e34:	f44f 7300 	mov.w	r3, #512	; 0x200
  402e38:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  402e3c:	e74a      	b.n	402cd4 <_malloc_r+0x44>
  402e3e:	4423      	add	r3, r4
  402e40:	68e1      	ldr	r1, [r4, #12]
  402e42:	685a      	ldr	r2, [r3, #4]
  402e44:	68a6      	ldr	r6, [r4, #8]
  402e46:	f042 0201 	orr.w	r2, r2, #1
  402e4a:	60f1      	str	r1, [r6, #12]
  402e4c:	4628      	mov	r0, r5
  402e4e:	608e      	str	r6, [r1, #8]
  402e50:	605a      	str	r2, [r3, #4]
  402e52:	f000 fa21 	bl	403298 <__malloc_unlock>
  402e56:	3408      	adds	r4, #8
  402e58:	4620      	mov	r0, r4
  402e5a:	b003      	add	sp, #12
  402e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402e60:	4423      	add	r3, r4
  402e62:	4628      	mov	r0, r5
  402e64:	685a      	ldr	r2, [r3, #4]
  402e66:	f042 0201 	orr.w	r2, r2, #1
  402e6a:	605a      	str	r2, [r3, #4]
  402e6c:	f000 fa14 	bl	403298 <__malloc_unlock>
  402e70:	3408      	adds	r4, #8
  402e72:	4620      	mov	r0, r4
  402e74:	b003      	add	sp, #12
  402e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402e7a:	68bc      	ldr	r4, [r7, #8]
  402e7c:	6863      	ldr	r3, [r4, #4]
  402e7e:	f023 0803 	bic.w	r8, r3, #3
  402e82:	45b0      	cmp	r8, r6
  402e84:	d304      	bcc.n	402e90 <_malloc_r+0x200>
  402e86:	eba8 0306 	sub.w	r3, r8, r6
  402e8a:	2b0f      	cmp	r3, #15
  402e8c:	f300 8085 	bgt.w	402f9a <_malloc_r+0x30a>
  402e90:	f8df 9158 	ldr.w	r9, [pc, #344]	; 402fec <_malloc_r+0x35c>
  402e94:	4b50      	ldr	r3, [pc, #320]	; (402fd8 <_malloc_r+0x348>)
  402e96:	f8d9 2000 	ldr.w	r2, [r9]
  402e9a:	681b      	ldr	r3, [r3, #0]
  402e9c:	3201      	adds	r2, #1
  402e9e:	4433      	add	r3, r6
  402ea0:	eb04 0a08 	add.w	sl, r4, r8
  402ea4:	f000 8155 	beq.w	403152 <_malloc_r+0x4c2>
  402ea8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  402eac:	330f      	adds	r3, #15
  402eae:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  402eb2:	f02b 0b0f 	bic.w	fp, fp, #15
  402eb6:	4659      	mov	r1, fp
  402eb8:	4628      	mov	r0, r5
  402eba:	f000 f9f3 	bl	4032a4 <_sbrk_r>
  402ebe:	1c41      	adds	r1, r0, #1
  402ec0:	4602      	mov	r2, r0
  402ec2:	f000 80fc 	beq.w	4030be <_malloc_r+0x42e>
  402ec6:	4582      	cmp	sl, r0
  402ec8:	f200 80f7 	bhi.w	4030ba <_malloc_r+0x42a>
  402ecc:	4b43      	ldr	r3, [pc, #268]	; (402fdc <_malloc_r+0x34c>)
  402ece:	6819      	ldr	r1, [r3, #0]
  402ed0:	4459      	add	r1, fp
  402ed2:	6019      	str	r1, [r3, #0]
  402ed4:	f000 814d 	beq.w	403172 <_malloc_r+0x4e2>
  402ed8:	f8d9 0000 	ldr.w	r0, [r9]
  402edc:	3001      	adds	r0, #1
  402ede:	bf1b      	ittet	ne
  402ee0:	eba2 0a0a 	subne.w	sl, r2, sl
  402ee4:	4451      	addne	r1, sl
  402ee6:	f8c9 2000 	streq.w	r2, [r9]
  402eea:	6019      	strne	r1, [r3, #0]
  402eec:	f012 0107 	ands.w	r1, r2, #7
  402ef0:	f000 8115 	beq.w	40311e <_malloc_r+0x48e>
  402ef4:	f1c1 0008 	rsb	r0, r1, #8
  402ef8:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  402efc:	4402      	add	r2, r0
  402efe:	3108      	adds	r1, #8
  402f00:	eb02 090b 	add.w	r9, r2, fp
  402f04:	f3c9 090b 	ubfx	r9, r9, #0, #12
  402f08:	eba1 0909 	sub.w	r9, r1, r9
  402f0c:	4649      	mov	r1, r9
  402f0e:	4628      	mov	r0, r5
  402f10:	9301      	str	r3, [sp, #4]
  402f12:	9200      	str	r2, [sp, #0]
  402f14:	f000 f9c6 	bl	4032a4 <_sbrk_r>
  402f18:	1c43      	adds	r3, r0, #1
  402f1a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  402f1e:	f000 8143 	beq.w	4031a8 <_malloc_r+0x518>
  402f22:	1a80      	subs	r0, r0, r2
  402f24:	4448      	add	r0, r9
  402f26:	f040 0001 	orr.w	r0, r0, #1
  402f2a:	6819      	ldr	r1, [r3, #0]
  402f2c:	60ba      	str	r2, [r7, #8]
  402f2e:	4449      	add	r1, r9
  402f30:	42bc      	cmp	r4, r7
  402f32:	6050      	str	r0, [r2, #4]
  402f34:	6019      	str	r1, [r3, #0]
  402f36:	d017      	beq.n	402f68 <_malloc_r+0x2d8>
  402f38:	f1b8 0f0f 	cmp.w	r8, #15
  402f3c:	f240 80fb 	bls.w	403136 <_malloc_r+0x4a6>
  402f40:	6860      	ldr	r0, [r4, #4]
  402f42:	f1a8 020c 	sub.w	r2, r8, #12
  402f46:	f022 0207 	bic.w	r2, r2, #7
  402f4a:	eb04 0e02 	add.w	lr, r4, r2
  402f4e:	f000 0001 	and.w	r0, r0, #1
  402f52:	f04f 0c05 	mov.w	ip, #5
  402f56:	4310      	orrs	r0, r2
  402f58:	2a0f      	cmp	r2, #15
  402f5a:	6060      	str	r0, [r4, #4]
  402f5c:	f8ce c004 	str.w	ip, [lr, #4]
  402f60:	f8ce c008 	str.w	ip, [lr, #8]
  402f64:	f200 8117 	bhi.w	403196 <_malloc_r+0x506>
  402f68:	4b1d      	ldr	r3, [pc, #116]	; (402fe0 <_malloc_r+0x350>)
  402f6a:	68bc      	ldr	r4, [r7, #8]
  402f6c:	681a      	ldr	r2, [r3, #0]
  402f6e:	4291      	cmp	r1, r2
  402f70:	bf88      	it	hi
  402f72:	6019      	strhi	r1, [r3, #0]
  402f74:	4b1b      	ldr	r3, [pc, #108]	; (402fe4 <_malloc_r+0x354>)
  402f76:	681a      	ldr	r2, [r3, #0]
  402f78:	4291      	cmp	r1, r2
  402f7a:	6862      	ldr	r2, [r4, #4]
  402f7c:	bf88      	it	hi
  402f7e:	6019      	strhi	r1, [r3, #0]
  402f80:	f022 0203 	bic.w	r2, r2, #3
  402f84:	4296      	cmp	r6, r2
  402f86:	eba2 0306 	sub.w	r3, r2, r6
  402f8a:	d801      	bhi.n	402f90 <_malloc_r+0x300>
  402f8c:	2b0f      	cmp	r3, #15
  402f8e:	dc04      	bgt.n	402f9a <_malloc_r+0x30a>
  402f90:	4628      	mov	r0, r5
  402f92:	f000 f981 	bl	403298 <__malloc_unlock>
  402f96:	2400      	movs	r4, #0
  402f98:	e740      	b.n	402e1c <_malloc_r+0x18c>
  402f9a:	19a2      	adds	r2, r4, r6
  402f9c:	f043 0301 	orr.w	r3, r3, #1
  402fa0:	f046 0601 	orr.w	r6, r6, #1
  402fa4:	6066      	str	r6, [r4, #4]
  402fa6:	4628      	mov	r0, r5
  402fa8:	60ba      	str	r2, [r7, #8]
  402faa:	6053      	str	r3, [r2, #4]
  402fac:	f000 f974 	bl	403298 <__malloc_unlock>
  402fb0:	3408      	adds	r4, #8
  402fb2:	4620      	mov	r0, r4
  402fb4:	b003      	add	sp, #12
  402fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402fba:	2b14      	cmp	r3, #20
  402fbc:	d971      	bls.n	4030a2 <_malloc_r+0x412>
  402fbe:	2b54      	cmp	r3, #84	; 0x54
  402fc0:	f200 80a3 	bhi.w	40310a <_malloc_r+0x47a>
  402fc4:	0b33      	lsrs	r3, r6, #12
  402fc6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  402fca:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  402fce:	00c3      	lsls	r3, r0, #3
  402fd0:	e680      	b.n	402cd4 <_malloc_r+0x44>
  402fd2:	bf00      	nop
  402fd4:	20400570 	.word	0x20400570
  402fd8:	20400f80 	.word	0x20400f80
  402fdc:	20400f50 	.word	0x20400f50
  402fe0:	20400f78 	.word	0x20400f78
  402fe4:	20400f7c 	.word	0x20400f7c
  402fe8:	20400578 	.word	0x20400578
  402fec:	20400978 	.word	0x20400978
  402ff0:	0a5a      	lsrs	r2, r3, #9
  402ff2:	2a04      	cmp	r2, #4
  402ff4:	d95b      	bls.n	4030ae <_malloc_r+0x41e>
  402ff6:	2a14      	cmp	r2, #20
  402ff8:	f200 80ae 	bhi.w	403158 <_malloc_r+0x4c8>
  402ffc:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  403000:	00c9      	lsls	r1, r1, #3
  403002:	325b      	adds	r2, #91	; 0x5b
  403004:	eb07 0c01 	add.w	ip, r7, r1
  403008:	5879      	ldr	r1, [r7, r1]
  40300a:	f1ac 0c08 	sub.w	ip, ip, #8
  40300e:	458c      	cmp	ip, r1
  403010:	f000 8088 	beq.w	403124 <_malloc_r+0x494>
  403014:	684a      	ldr	r2, [r1, #4]
  403016:	f022 0203 	bic.w	r2, r2, #3
  40301a:	4293      	cmp	r3, r2
  40301c:	d273      	bcs.n	403106 <_malloc_r+0x476>
  40301e:	6889      	ldr	r1, [r1, #8]
  403020:	458c      	cmp	ip, r1
  403022:	d1f7      	bne.n	403014 <_malloc_r+0x384>
  403024:	f8dc 200c 	ldr.w	r2, [ip, #12]
  403028:	687b      	ldr	r3, [r7, #4]
  40302a:	60e2      	str	r2, [r4, #12]
  40302c:	f8c4 c008 	str.w	ip, [r4, #8]
  403030:	6094      	str	r4, [r2, #8]
  403032:	f8cc 400c 	str.w	r4, [ip, #12]
  403036:	e68f      	b.n	402d58 <_malloc_r+0xc8>
  403038:	19a1      	adds	r1, r4, r6
  40303a:	f046 0c01 	orr.w	ip, r6, #1
  40303e:	f042 0601 	orr.w	r6, r2, #1
  403042:	f8c4 c004 	str.w	ip, [r4, #4]
  403046:	4628      	mov	r0, r5
  403048:	6179      	str	r1, [r7, #20]
  40304a:	6139      	str	r1, [r7, #16]
  40304c:	f8c1 e00c 	str.w	lr, [r1, #12]
  403050:	f8c1 e008 	str.w	lr, [r1, #8]
  403054:	604e      	str	r6, [r1, #4]
  403056:	50e2      	str	r2, [r4, r3]
  403058:	f000 f91e 	bl	403298 <__malloc_unlock>
  40305c:	3408      	adds	r4, #8
  40305e:	e6dd      	b.n	402e1c <_malloc_r+0x18c>
  403060:	687b      	ldr	r3, [r7, #4]
  403062:	e679      	b.n	402d58 <_malloc_r+0xc8>
  403064:	f108 0801 	add.w	r8, r8, #1
  403068:	f018 0f03 	tst.w	r8, #3
  40306c:	f10c 0c08 	add.w	ip, ip, #8
  403070:	f47f ae85 	bne.w	402d7e <_malloc_r+0xee>
  403074:	e02d      	b.n	4030d2 <_malloc_r+0x442>
  403076:	68dc      	ldr	r4, [r3, #12]
  403078:	42a3      	cmp	r3, r4
  40307a:	bf08      	it	eq
  40307c:	3002      	addeq	r0, #2
  40307e:	f43f ae3e 	beq.w	402cfe <_malloc_r+0x6e>
  403082:	e6bb      	b.n	402dfc <_malloc_r+0x16c>
  403084:	4419      	add	r1, r3
  403086:	461c      	mov	r4, r3
  403088:	684a      	ldr	r2, [r1, #4]
  40308a:	68db      	ldr	r3, [r3, #12]
  40308c:	f854 6f08 	ldr.w	r6, [r4, #8]!
  403090:	f042 0201 	orr.w	r2, r2, #1
  403094:	604a      	str	r2, [r1, #4]
  403096:	4628      	mov	r0, r5
  403098:	60f3      	str	r3, [r6, #12]
  40309a:	609e      	str	r6, [r3, #8]
  40309c:	f000 f8fc 	bl	403298 <__malloc_unlock>
  4030a0:	e6bc      	b.n	402e1c <_malloc_r+0x18c>
  4030a2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  4030a6:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  4030aa:	00c3      	lsls	r3, r0, #3
  4030ac:	e612      	b.n	402cd4 <_malloc_r+0x44>
  4030ae:	099a      	lsrs	r2, r3, #6
  4030b0:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4030b4:	00c9      	lsls	r1, r1, #3
  4030b6:	3238      	adds	r2, #56	; 0x38
  4030b8:	e7a4      	b.n	403004 <_malloc_r+0x374>
  4030ba:	42bc      	cmp	r4, r7
  4030bc:	d054      	beq.n	403168 <_malloc_r+0x4d8>
  4030be:	68bc      	ldr	r4, [r7, #8]
  4030c0:	6862      	ldr	r2, [r4, #4]
  4030c2:	f022 0203 	bic.w	r2, r2, #3
  4030c6:	e75d      	b.n	402f84 <_malloc_r+0x2f4>
  4030c8:	f859 3908 	ldr.w	r3, [r9], #-8
  4030cc:	4599      	cmp	r9, r3
  4030ce:	f040 8086 	bne.w	4031de <_malloc_r+0x54e>
  4030d2:	f010 0f03 	tst.w	r0, #3
  4030d6:	f100 30ff 	add.w	r0, r0, #4294967295
  4030da:	d1f5      	bne.n	4030c8 <_malloc_r+0x438>
  4030dc:	687b      	ldr	r3, [r7, #4]
  4030de:	ea23 0304 	bic.w	r3, r3, r4
  4030e2:	607b      	str	r3, [r7, #4]
  4030e4:	0064      	lsls	r4, r4, #1
  4030e6:	429c      	cmp	r4, r3
  4030e8:	f63f aec7 	bhi.w	402e7a <_malloc_r+0x1ea>
  4030ec:	2c00      	cmp	r4, #0
  4030ee:	f43f aec4 	beq.w	402e7a <_malloc_r+0x1ea>
  4030f2:	421c      	tst	r4, r3
  4030f4:	4640      	mov	r0, r8
  4030f6:	f47f ae3e 	bne.w	402d76 <_malloc_r+0xe6>
  4030fa:	0064      	lsls	r4, r4, #1
  4030fc:	421c      	tst	r4, r3
  4030fe:	f100 0004 	add.w	r0, r0, #4
  403102:	d0fa      	beq.n	4030fa <_malloc_r+0x46a>
  403104:	e637      	b.n	402d76 <_malloc_r+0xe6>
  403106:	468c      	mov	ip, r1
  403108:	e78c      	b.n	403024 <_malloc_r+0x394>
  40310a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40310e:	d815      	bhi.n	40313c <_malloc_r+0x4ac>
  403110:	0bf3      	lsrs	r3, r6, #15
  403112:	f103 0078 	add.w	r0, r3, #120	; 0x78
  403116:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40311a:	00c3      	lsls	r3, r0, #3
  40311c:	e5da      	b.n	402cd4 <_malloc_r+0x44>
  40311e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403122:	e6ed      	b.n	402f00 <_malloc_r+0x270>
  403124:	687b      	ldr	r3, [r7, #4]
  403126:	1092      	asrs	r2, r2, #2
  403128:	2101      	movs	r1, #1
  40312a:	fa01 f202 	lsl.w	r2, r1, r2
  40312e:	4313      	orrs	r3, r2
  403130:	607b      	str	r3, [r7, #4]
  403132:	4662      	mov	r2, ip
  403134:	e779      	b.n	40302a <_malloc_r+0x39a>
  403136:	2301      	movs	r3, #1
  403138:	6053      	str	r3, [r2, #4]
  40313a:	e729      	b.n	402f90 <_malloc_r+0x300>
  40313c:	f240 5254 	movw	r2, #1364	; 0x554
  403140:	4293      	cmp	r3, r2
  403142:	d822      	bhi.n	40318a <_malloc_r+0x4fa>
  403144:	0cb3      	lsrs	r3, r6, #18
  403146:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40314a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40314e:	00c3      	lsls	r3, r0, #3
  403150:	e5c0      	b.n	402cd4 <_malloc_r+0x44>
  403152:	f103 0b10 	add.w	fp, r3, #16
  403156:	e6ae      	b.n	402eb6 <_malloc_r+0x226>
  403158:	2a54      	cmp	r2, #84	; 0x54
  40315a:	d829      	bhi.n	4031b0 <_malloc_r+0x520>
  40315c:	0b1a      	lsrs	r2, r3, #12
  40315e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  403162:	00c9      	lsls	r1, r1, #3
  403164:	326e      	adds	r2, #110	; 0x6e
  403166:	e74d      	b.n	403004 <_malloc_r+0x374>
  403168:	4b20      	ldr	r3, [pc, #128]	; (4031ec <_malloc_r+0x55c>)
  40316a:	6819      	ldr	r1, [r3, #0]
  40316c:	4459      	add	r1, fp
  40316e:	6019      	str	r1, [r3, #0]
  403170:	e6b2      	b.n	402ed8 <_malloc_r+0x248>
  403172:	f3ca 000b 	ubfx	r0, sl, #0, #12
  403176:	2800      	cmp	r0, #0
  403178:	f47f aeae 	bne.w	402ed8 <_malloc_r+0x248>
  40317c:	eb08 030b 	add.w	r3, r8, fp
  403180:	68ba      	ldr	r2, [r7, #8]
  403182:	f043 0301 	orr.w	r3, r3, #1
  403186:	6053      	str	r3, [r2, #4]
  403188:	e6ee      	b.n	402f68 <_malloc_r+0x2d8>
  40318a:	207f      	movs	r0, #127	; 0x7f
  40318c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  403190:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  403194:	e59e      	b.n	402cd4 <_malloc_r+0x44>
  403196:	f104 0108 	add.w	r1, r4, #8
  40319a:	4628      	mov	r0, r5
  40319c:	9300      	str	r3, [sp, #0]
  40319e:	f003 fdc7 	bl	406d30 <_free_r>
  4031a2:	9b00      	ldr	r3, [sp, #0]
  4031a4:	6819      	ldr	r1, [r3, #0]
  4031a6:	e6df      	b.n	402f68 <_malloc_r+0x2d8>
  4031a8:	2001      	movs	r0, #1
  4031aa:	f04f 0900 	mov.w	r9, #0
  4031ae:	e6bc      	b.n	402f2a <_malloc_r+0x29a>
  4031b0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4031b4:	d805      	bhi.n	4031c2 <_malloc_r+0x532>
  4031b6:	0bda      	lsrs	r2, r3, #15
  4031b8:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4031bc:	00c9      	lsls	r1, r1, #3
  4031be:	3277      	adds	r2, #119	; 0x77
  4031c0:	e720      	b.n	403004 <_malloc_r+0x374>
  4031c2:	f240 5154 	movw	r1, #1364	; 0x554
  4031c6:	428a      	cmp	r2, r1
  4031c8:	d805      	bhi.n	4031d6 <_malloc_r+0x546>
  4031ca:	0c9a      	lsrs	r2, r3, #18
  4031cc:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4031d0:	00c9      	lsls	r1, r1, #3
  4031d2:	327c      	adds	r2, #124	; 0x7c
  4031d4:	e716      	b.n	403004 <_malloc_r+0x374>
  4031d6:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4031da:	227e      	movs	r2, #126	; 0x7e
  4031dc:	e712      	b.n	403004 <_malloc_r+0x374>
  4031de:	687b      	ldr	r3, [r7, #4]
  4031e0:	e780      	b.n	4030e4 <_malloc_r+0x454>
  4031e2:	08f0      	lsrs	r0, r6, #3
  4031e4:	f106 0308 	add.w	r3, r6, #8
  4031e8:	e600      	b.n	402dec <_malloc_r+0x15c>
  4031ea:	bf00      	nop
  4031ec:	20400f50 	.word	0x20400f50

004031f0 <memset>:
  4031f0:	b470      	push	{r4, r5, r6}
  4031f2:	0786      	lsls	r6, r0, #30
  4031f4:	d046      	beq.n	403284 <memset+0x94>
  4031f6:	1e54      	subs	r4, r2, #1
  4031f8:	2a00      	cmp	r2, #0
  4031fa:	d041      	beq.n	403280 <memset+0x90>
  4031fc:	b2ca      	uxtb	r2, r1
  4031fe:	4603      	mov	r3, r0
  403200:	e002      	b.n	403208 <memset+0x18>
  403202:	f114 34ff 	adds.w	r4, r4, #4294967295
  403206:	d33b      	bcc.n	403280 <memset+0x90>
  403208:	f803 2b01 	strb.w	r2, [r3], #1
  40320c:	079d      	lsls	r5, r3, #30
  40320e:	d1f8      	bne.n	403202 <memset+0x12>
  403210:	2c03      	cmp	r4, #3
  403212:	d92e      	bls.n	403272 <memset+0x82>
  403214:	b2cd      	uxtb	r5, r1
  403216:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40321a:	2c0f      	cmp	r4, #15
  40321c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  403220:	d919      	bls.n	403256 <memset+0x66>
  403222:	f103 0210 	add.w	r2, r3, #16
  403226:	4626      	mov	r6, r4
  403228:	3e10      	subs	r6, #16
  40322a:	2e0f      	cmp	r6, #15
  40322c:	f842 5c10 	str.w	r5, [r2, #-16]
  403230:	f842 5c0c 	str.w	r5, [r2, #-12]
  403234:	f842 5c08 	str.w	r5, [r2, #-8]
  403238:	f842 5c04 	str.w	r5, [r2, #-4]
  40323c:	f102 0210 	add.w	r2, r2, #16
  403240:	d8f2      	bhi.n	403228 <memset+0x38>
  403242:	f1a4 0210 	sub.w	r2, r4, #16
  403246:	f022 020f 	bic.w	r2, r2, #15
  40324a:	f004 040f 	and.w	r4, r4, #15
  40324e:	3210      	adds	r2, #16
  403250:	2c03      	cmp	r4, #3
  403252:	4413      	add	r3, r2
  403254:	d90d      	bls.n	403272 <memset+0x82>
  403256:	461e      	mov	r6, r3
  403258:	4622      	mov	r2, r4
  40325a:	3a04      	subs	r2, #4
  40325c:	2a03      	cmp	r2, #3
  40325e:	f846 5b04 	str.w	r5, [r6], #4
  403262:	d8fa      	bhi.n	40325a <memset+0x6a>
  403264:	1f22      	subs	r2, r4, #4
  403266:	f022 0203 	bic.w	r2, r2, #3
  40326a:	3204      	adds	r2, #4
  40326c:	4413      	add	r3, r2
  40326e:	f004 0403 	and.w	r4, r4, #3
  403272:	b12c      	cbz	r4, 403280 <memset+0x90>
  403274:	b2c9      	uxtb	r1, r1
  403276:	441c      	add	r4, r3
  403278:	f803 1b01 	strb.w	r1, [r3], #1
  40327c:	429c      	cmp	r4, r3
  40327e:	d1fb      	bne.n	403278 <memset+0x88>
  403280:	bc70      	pop	{r4, r5, r6}
  403282:	4770      	bx	lr
  403284:	4614      	mov	r4, r2
  403286:	4603      	mov	r3, r0
  403288:	e7c2      	b.n	403210 <memset+0x20>
  40328a:	bf00      	nop

0040328c <__malloc_lock>:
  40328c:	4801      	ldr	r0, [pc, #4]	; (403294 <__malloc_lock+0x8>)
  40328e:	f003 bff7 	b.w	407280 <__retarget_lock_acquire_recursive>
  403292:	bf00      	nop
  403294:	20400fc0 	.word	0x20400fc0

00403298 <__malloc_unlock>:
  403298:	4801      	ldr	r0, [pc, #4]	; (4032a0 <__malloc_unlock+0x8>)
  40329a:	f003 bff3 	b.w	407284 <__retarget_lock_release_recursive>
  40329e:	bf00      	nop
  4032a0:	20400fc0 	.word	0x20400fc0

004032a4 <_sbrk_r>:
  4032a4:	b538      	push	{r3, r4, r5, lr}
  4032a6:	4c07      	ldr	r4, [pc, #28]	; (4032c4 <_sbrk_r+0x20>)
  4032a8:	2300      	movs	r3, #0
  4032aa:	4605      	mov	r5, r0
  4032ac:	4608      	mov	r0, r1
  4032ae:	6023      	str	r3, [r4, #0]
  4032b0:	f7fe ff94 	bl	4021dc <_sbrk>
  4032b4:	1c43      	adds	r3, r0, #1
  4032b6:	d000      	beq.n	4032ba <_sbrk_r+0x16>
  4032b8:	bd38      	pop	{r3, r4, r5, pc}
  4032ba:	6823      	ldr	r3, [r4, #0]
  4032bc:	2b00      	cmp	r3, #0
  4032be:	d0fb      	beq.n	4032b8 <_sbrk_r+0x14>
  4032c0:	602b      	str	r3, [r5, #0]
  4032c2:	bd38      	pop	{r3, r4, r5, pc}
  4032c4:	20400fd4 	.word	0x20400fd4

004032c8 <setbuf>:
  4032c8:	2900      	cmp	r1, #0
  4032ca:	bf0c      	ite	eq
  4032cc:	2202      	moveq	r2, #2
  4032ce:	2200      	movne	r2, #0
  4032d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4032d4:	f000 b800 	b.w	4032d8 <setvbuf>

004032d8 <setvbuf>:
  4032d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4032dc:	4c61      	ldr	r4, [pc, #388]	; (403464 <setvbuf+0x18c>)
  4032de:	6825      	ldr	r5, [r4, #0]
  4032e0:	b083      	sub	sp, #12
  4032e2:	4604      	mov	r4, r0
  4032e4:	460f      	mov	r7, r1
  4032e6:	4690      	mov	r8, r2
  4032e8:	461e      	mov	r6, r3
  4032ea:	b115      	cbz	r5, 4032f2 <setvbuf+0x1a>
  4032ec:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4032ee:	2b00      	cmp	r3, #0
  4032f0:	d064      	beq.n	4033bc <setvbuf+0xe4>
  4032f2:	f1b8 0f02 	cmp.w	r8, #2
  4032f6:	d006      	beq.n	403306 <setvbuf+0x2e>
  4032f8:	f1b8 0f01 	cmp.w	r8, #1
  4032fc:	f200 809f 	bhi.w	40343e <setvbuf+0x166>
  403300:	2e00      	cmp	r6, #0
  403302:	f2c0 809c 	blt.w	40343e <setvbuf+0x166>
  403306:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403308:	07d8      	lsls	r0, r3, #31
  40330a:	d534      	bpl.n	403376 <setvbuf+0x9e>
  40330c:	4621      	mov	r1, r4
  40330e:	4628      	mov	r0, r5
  403310:	f003 fb90 	bl	406a34 <_fflush_r>
  403314:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403316:	b141      	cbz	r1, 40332a <setvbuf+0x52>
  403318:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40331c:	4299      	cmp	r1, r3
  40331e:	d002      	beq.n	403326 <setvbuf+0x4e>
  403320:	4628      	mov	r0, r5
  403322:	f003 fd05 	bl	406d30 <_free_r>
  403326:	2300      	movs	r3, #0
  403328:	6323      	str	r3, [r4, #48]	; 0x30
  40332a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40332e:	2200      	movs	r2, #0
  403330:	61a2      	str	r2, [r4, #24]
  403332:	6062      	str	r2, [r4, #4]
  403334:	061a      	lsls	r2, r3, #24
  403336:	d43a      	bmi.n	4033ae <setvbuf+0xd6>
  403338:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  40333c:	f023 0303 	bic.w	r3, r3, #3
  403340:	f1b8 0f02 	cmp.w	r8, #2
  403344:	81a3      	strh	r3, [r4, #12]
  403346:	d01d      	beq.n	403384 <setvbuf+0xac>
  403348:	ab01      	add	r3, sp, #4
  40334a:	466a      	mov	r2, sp
  40334c:	4621      	mov	r1, r4
  40334e:	4628      	mov	r0, r5
  403350:	f003 ff9a 	bl	407288 <__swhatbuf_r>
  403354:	89a3      	ldrh	r3, [r4, #12]
  403356:	4318      	orrs	r0, r3
  403358:	81a0      	strh	r0, [r4, #12]
  40335a:	2e00      	cmp	r6, #0
  40335c:	d132      	bne.n	4033c4 <setvbuf+0xec>
  40335e:	9e00      	ldr	r6, [sp, #0]
  403360:	4630      	mov	r0, r6
  403362:	f7ff fc8d 	bl	402c80 <malloc>
  403366:	4607      	mov	r7, r0
  403368:	2800      	cmp	r0, #0
  40336a:	d06b      	beq.n	403444 <setvbuf+0x16c>
  40336c:	89a3      	ldrh	r3, [r4, #12]
  40336e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403372:	81a3      	strh	r3, [r4, #12]
  403374:	e028      	b.n	4033c8 <setvbuf+0xf0>
  403376:	89a3      	ldrh	r3, [r4, #12]
  403378:	0599      	lsls	r1, r3, #22
  40337a:	d4c7      	bmi.n	40330c <setvbuf+0x34>
  40337c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40337e:	f003 ff7f 	bl	407280 <__retarget_lock_acquire_recursive>
  403382:	e7c3      	b.n	40330c <setvbuf+0x34>
  403384:	2500      	movs	r5, #0
  403386:	6e61      	ldr	r1, [r4, #100]	; 0x64
  403388:	2600      	movs	r6, #0
  40338a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40338e:	f043 0302 	orr.w	r3, r3, #2
  403392:	2001      	movs	r0, #1
  403394:	60a6      	str	r6, [r4, #8]
  403396:	07ce      	lsls	r6, r1, #31
  403398:	81a3      	strh	r3, [r4, #12]
  40339a:	6022      	str	r2, [r4, #0]
  40339c:	6122      	str	r2, [r4, #16]
  40339e:	6160      	str	r0, [r4, #20]
  4033a0:	d401      	bmi.n	4033a6 <setvbuf+0xce>
  4033a2:	0598      	lsls	r0, r3, #22
  4033a4:	d53e      	bpl.n	403424 <setvbuf+0x14c>
  4033a6:	4628      	mov	r0, r5
  4033a8:	b003      	add	sp, #12
  4033aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4033ae:	6921      	ldr	r1, [r4, #16]
  4033b0:	4628      	mov	r0, r5
  4033b2:	f003 fcbd 	bl	406d30 <_free_r>
  4033b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4033ba:	e7bd      	b.n	403338 <setvbuf+0x60>
  4033bc:	4628      	mov	r0, r5
  4033be:	f003 fb91 	bl	406ae4 <__sinit>
  4033c2:	e796      	b.n	4032f2 <setvbuf+0x1a>
  4033c4:	2f00      	cmp	r7, #0
  4033c6:	d0cb      	beq.n	403360 <setvbuf+0x88>
  4033c8:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4033ca:	2b00      	cmp	r3, #0
  4033cc:	d033      	beq.n	403436 <setvbuf+0x15e>
  4033ce:	9b00      	ldr	r3, [sp, #0]
  4033d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4033d4:	6027      	str	r7, [r4, #0]
  4033d6:	429e      	cmp	r6, r3
  4033d8:	bf1c      	itt	ne
  4033da:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  4033de:	81a2      	strhne	r2, [r4, #12]
  4033e0:	f1b8 0f01 	cmp.w	r8, #1
  4033e4:	bf04      	itt	eq
  4033e6:	f042 0201 	orreq.w	r2, r2, #1
  4033ea:	81a2      	strheq	r2, [r4, #12]
  4033ec:	b292      	uxth	r2, r2
  4033ee:	f012 0308 	ands.w	r3, r2, #8
  4033f2:	6127      	str	r7, [r4, #16]
  4033f4:	6166      	str	r6, [r4, #20]
  4033f6:	d00e      	beq.n	403416 <setvbuf+0x13e>
  4033f8:	07d1      	lsls	r1, r2, #31
  4033fa:	d51a      	bpl.n	403432 <setvbuf+0x15a>
  4033fc:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4033fe:	4276      	negs	r6, r6
  403400:	2300      	movs	r3, #0
  403402:	f015 0501 	ands.w	r5, r5, #1
  403406:	61a6      	str	r6, [r4, #24]
  403408:	60a3      	str	r3, [r4, #8]
  40340a:	d009      	beq.n	403420 <setvbuf+0x148>
  40340c:	2500      	movs	r5, #0
  40340e:	4628      	mov	r0, r5
  403410:	b003      	add	sp, #12
  403412:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403416:	60a3      	str	r3, [r4, #8]
  403418:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40341a:	f015 0501 	ands.w	r5, r5, #1
  40341e:	d1f5      	bne.n	40340c <setvbuf+0x134>
  403420:	0593      	lsls	r3, r2, #22
  403422:	d4c0      	bmi.n	4033a6 <setvbuf+0xce>
  403424:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403426:	f003 ff2d 	bl	407284 <__retarget_lock_release_recursive>
  40342a:	4628      	mov	r0, r5
  40342c:	b003      	add	sp, #12
  40342e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403432:	60a6      	str	r6, [r4, #8]
  403434:	e7f0      	b.n	403418 <setvbuf+0x140>
  403436:	4628      	mov	r0, r5
  403438:	f003 fb54 	bl	406ae4 <__sinit>
  40343c:	e7c7      	b.n	4033ce <setvbuf+0xf6>
  40343e:	f04f 35ff 	mov.w	r5, #4294967295
  403442:	e7b0      	b.n	4033a6 <setvbuf+0xce>
  403444:	f8dd 9000 	ldr.w	r9, [sp]
  403448:	45b1      	cmp	r9, r6
  40344a:	d004      	beq.n	403456 <setvbuf+0x17e>
  40344c:	4648      	mov	r0, r9
  40344e:	f7ff fc17 	bl	402c80 <malloc>
  403452:	4607      	mov	r7, r0
  403454:	b920      	cbnz	r0, 403460 <setvbuf+0x188>
  403456:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40345a:	f04f 35ff 	mov.w	r5, #4294967295
  40345e:	e792      	b.n	403386 <setvbuf+0xae>
  403460:	464e      	mov	r6, r9
  403462:	e783      	b.n	40336c <setvbuf+0x94>
  403464:	20400144 	.word	0x20400144

00403468 <sprintf>:
  403468:	b40e      	push	{r1, r2, r3}
  40346a:	b5f0      	push	{r4, r5, r6, r7, lr}
  40346c:	b09c      	sub	sp, #112	; 0x70
  40346e:	ab21      	add	r3, sp, #132	; 0x84
  403470:	490f      	ldr	r1, [pc, #60]	; (4034b0 <sprintf+0x48>)
  403472:	f853 2b04 	ldr.w	r2, [r3], #4
  403476:	9301      	str	r3, [sp, #4]
  403478:	4605      	mov	r5, r0
  40347a:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  40347e:	6808      	ldr	r0, [r1, #0]
  403480:	9502      	str	r5, [sp, #8]
  403482:	f44f 7702 	mov.w	r7, #520	; 0x208
  403486:	f64f 76ff 	movw	r6, #65535	; 0xffff
  40348a:	a902      	add	r1, sp, #8
  40348c:	9506      	str	r5, [sp, #24]
  40348e:	f8ad 7014 	strh.w	r7, [sp, #20]
  403492:	9404      	str	r4, [sp, #16]
  403494:	9407      	str	r4, [sp, #28]
  403496:	f8ad 6016 	strh.w	r6, [sp, #22]
  40349a:	f000 f8ff 	bl	40369c <_svfprintf_r>
  40349e:	9b02      	ldr	r3, [sp, #8]
  4034a0:	2200      	movs	r2, #0
  4034a2:	701a      	strb	r2, [r3, #0]
  4034a4:	b01c      	add	sp, #112	; 0x70
  4034a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  4034aa:	b003      	add	sp, #12
  4034ac:	4770      	bx	lr
  4034ae:	bf00      	nop
  4034b0:	20400144 	.word	0x20400144

004034b4 <strcat>:
  4034b4:	0783      	lsls	r3, r0, #30
  4034b6:	b510      	push	{r4, lr}
  4034b8:	4604      	mov	r4, r0
  4034ba:	d110      	bne.n	4034de <strcat+0x2a>
  4034bc:	6802      	ldr	r2, [r0, #0]
  4034be:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
  4034c2:	ea23 0302 	bic.w	r3, r3, r2
  4034c6:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  4034ca:	d108      	bne.n	4034de <strcat+0x2a>
  4034cc:	f850 2f04 	ldr.w	r2, [r0, #4]!
  4034d0:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
  4034d4:	ea23 0302 	bic.w	r3, r3, r2
  4034d8:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  4034dc:	d0f6      	beq.n	4034cc <strcat+0x18>
  4034de:	7803      	ldrb	r3, [r0, #0]
  4034e0:	b11b      	cbz	r3, 4034ea <strcat+0x36>
  4034e2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  4034e6:	2b00      	cmp	r3, #0
  4034e8:	d1fb      	bne.n	4034e2 <strcat+0x2e>
  4034ea:	f000 f803 	bl	4034f4 <strcpy>
  4034ee:	4620      	mov	r0, r4
  4034f0:	bd10      	pop	{r4, pc}
  4034f2:	bf00      	nop

004034f4 <strcpy>:
  4034f4:	ea80 0201 	eor.w	r2, r0, r1
  4034f8:	4684      	mov	ip, r0
  4034fa:	f012 0f03 	tst.w	r2, #3
  4034fe:	d14f      	bne.n	4035a0 <strcpy+0xac>
  403500:	f011 0f03 	tst.w	r1, #3
  403504:	d132      	bne.n	40356c <strcpy+0x78>
  403506:	f84d 4d04 	str.w	r4, [sp, #-4]!
  40350a:	f011 0f04 	tst.w	r1, #4
  40350e:	f851 3b04 	ldr.w	r3, [r1], #4
  403512:	d00b      	beq.n	40352c <strcpy+0x38>
  403514:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  403518:	439a      	bics	r2, r3
  40351a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40351e:	bf04      	itt	eq
  403520:	f84c 3b04 	streq.w	r3, [ip], #4
  403524:	f851 3b04 	ldreq.w	r3, [r1], #4
  403528:	d116      	bne.n	403558 <strcpy+0x64>
  40352a:	bf00      	nop
  40352c:	f851 4b04 	ldr.w	r4, [r1], #4
  403530:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  403534:	439a      	bics	r2, r3
  403536:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40353a:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  40353e:	d10b      	bne.n	403558 <strcpy+0x64>
  403540:	f84c 3b04 	str.w	r3, [ip], #4
  403544:	43a2      	bics	r2, r4
  403546:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40354a:	bf04      	itt	eq
  40354c:	f851 3b04 	ldreq.w	r3, [r1], #4
  403550:	f84c 4b04 	streq.w	r4, [ip], #4
  403554:	d0ea      	beq.n	40352c <strcpy+0x38>
  403556:	4623      	mov	r3, r4
  403558:	f80c 3b01 	strb.w	r3, [ip], #1
  40355c:	f013 0fff 	tst.w	r3, #255	; 0xff
  403560:	ea4f 2333 	mov.w	r3, r3, ror #8
  403564:	d1f8      	bne.n	403558 <strcpy+0x64>
  403566:	f85d 4b04 	ldr.w	r4, [sp], #4
  40356a:	4770      	bx	lr
  40356c:	f011 0f01 	tst.w	r1, #1
  403570:	d006      	beq.n	403580 <strcpy+0x8c>
  403572:	f811 2b01 	ldrb.w	r2, [r1], #1
  403576:	f80c 2b01 	strb.w	r2, [ip], #1
  40357a:	2a00      	cmp	r2, #0
  40357c:	bf08      	it	eq
  40357e:	4770      	bxeq	lr
  403580:	f011 0f02 	tst.w	r1, #2
  403584:	d0bf      	beq.n	403506 <strcpy+0x12>
  403586:	f831 2b02 	ldrh.w	r2, [r1], #2
  40358a:	f012 0fff 	tst.w	r2, #255	; 0xff
  40358e:	bf16      	itet	ne
  403590:	f82c 2b02 	strhne.w	r2, [ip], #2
  403594:	f88c 2000 	strbeq.w	r2, [ip]
  403598:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  40359c:	d1b3      	bne.n	403506 <strcpy+0x12>
  40359e:	4770      	bx	lr
  4035a0:	f811 2b01 	ldrb.w	r2, [r1], #1
  4035a4:	f80c 2b01 	strb.w	r2, [ip], #1
  4035a8:	2a00      	cmp	r2, #0
  4035aa:	d1f9      	bne.n	4035a0 <strcpy+0xac>
  4035ac:	4770      	bx	lr
  4035ae:	bf00      	nop
	...

004035c0 <strlen>:
  4035c0:	f890 f000 	pld	[r0]
  4035c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4035c8:	f020 0107 	bic.w	r1, r0, #7
  4035cc:	f06f 0c00 	mvn.w	ip, #0
  4035d0:	f010 0407 	ands.w	r4, r0, #7
  4035d4:	f891 f020 	pld	[r1, #32]
  4035d8:	f040 8049 	bne.w	40366e <strlen+0xae>
  4035dc:	f04f 0400 	mov.w	r4, #0
  4035e0:	f06f 0007 	mvn.w	r0, #7
  4035e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4035e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4035ec:	f100 0008 	add.w	r0, r0, #8
  4035f0:	fa82 f24c 	uadd8	r2, r2, ip
  4035f4:	faa4 f28c 	sel	r2, r4, ip
  4035f8:	fa83 f34c 	uadd8	r3, r3, ip
  4035fc:	faa2 f38c 	sel	r3, r2, ip
  403600:	bb4b      	cbnz	r3, 403656 <strlen+0x96>
  403602:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  403606:	fa82 f24c 	uadd8	r2, r2, ip
  40360a:	f100 0008 	add.w	r0, r0, #8
  40360e:	faa4 f28c 	sel	r2, r4, ip
  403612:	fa83 f34c 	uadd8	r3, r3, ip
  403616:	faa2 f38c 	sel	r3, r2, ip
  40361a:	b9e3      	cbnz	r3, 403656 <strlen+0x96>
  40361c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  403620:	fa82 f24c 	uadd8	r2, r2, ip
  403624:	f100 0008 	add.w	r0, r0, #8
  403628:	faa4 f28c 	sel	r2, r4, ip
  40362c:	fa83 f34c 	uadd8	r3, r3, ip
  403630:	faa2 f38c 	sel	r3, r2, ip
  403634:	b97b      	cbnz	r3, 403656 <strlen+0x96>
  403636:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40363a:	f101 0120 	add.w	r1, r1, #32
  40363e:	fa82 f24c 	uadd8	r2, r2, ip
  403642:	f100 0008 	add.w	r0, r0, #8
  403646:	faa4 f28c 	sel	r2, r4, ip
  40364a:	fa83 f34c 	uadd8	r3, r3, ip
  40364e:	faa2 f38c 	sel	r3, r2, ip
  403652:	2b00      	cmp	r3, #0
  403654:	d0c6      	beq.n	4035e4 <strlen+0x24>
  403656:	2a00      	cmp	r2, #0
  403658:	bf04      	itt	eq
  40365a:	3004      	addeq	r0, #4
  40365c:	461a      	moveq	r2, r3
  40365e:	ba12      	rev	r2, r2
  403660:	fab2 f282 	clz	r2, r2
  403664:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  403668:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40366c:	4770      	bx	lr
  40366e:	e9d1 2300 	ldrd	r2, r3, [r1]
  403672:	f004 0503 	and.w	r5, r4, #3
  403676:	f1c4 0000 	rsb	r0, r4, #0
  40367a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40367e:	f014 0f04 	tst.w	r4, #4
  403682:	f891 f040 	pld	[r1, #64]	; 0x40
  403686:	fa0c f505 	lsl.w	r5, ip, r5
  40368a:	ea62 0205 	orn	r2, r2, r5
  40368e:	bf1c      	itt	ne
  403690:	ea63 0305 	ornne	r3, r3, r5
  403694:	4662      	movne	r2, ip
  403696:	f04f 0400 	mov.w	r4, #0
  40369a:	e7a9      	b.n	4035f0 <strlen+0x30>

0040369c <_svfprintf_r>:
  40369c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4036a0:	b0c3      	sub	sp, #268	; 0x10c
  4036a2:	460c      	mov	r4, r1
  4036a4:	910b      	str	r1, [sp, #44]	; 0x2c
  4036a6:	4692      	mov	sl, r2
  4036a8:	930f      	str	r3, [sp, #60]	; 0x3c
  4036aa:	900c      	str	r0, [sp, #48]	; 0x30
  4036ac:	f003 fdd6 	bl	40725c <_localeconv_r>
  4036b0:	6803      	ldr	r3, [r0, #0]
  4036b2:	931a      	str	r3, [sp, #104]	; 0x68
  4036b4:	4618      	mov	r0, r3
  4036b6:	f7ff ff83 	bl	4035c0 <strlen>
  4036ba:	89a3      	ldrh	r3, [r4, #12]
  4036bc:	9019      	str	r0, [sp, #100]	; 0x64
  4036be:	0619      	lsls	r1, r3, #24
  4036c0:	d503      	bpl.n	4036ca <_svfprintf_r+0x2e>
  4036c2:	6923      	ldr	r3, [r4, #16]
  4036c4:	2b00      	cmp	r3, #0
  4036c6:	f001 8003 	beq.w	4046d0 <_svfprintf_r+0x1034>
  4036ca:	2300      	movs	r3, #0
  4036cc:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  4036d0:	9313      	str	r3, [sp, #76]	; 0x4c
  4036d2:	9315      	str	r3, [sp, #84]	; 0x54
  4036d4:	9314      	str	r3, [sp, #80]	; 0x50
  4036d6:	9327      	str	r3, [sp, #156]	; 0x9c
  4036d8:	9326      	str	r3, [sp, #152]	; 0x98
  4036da:	9318      	str	r3, [sp, #96]	; 0x60
  4036dc:	931b      	str	r3, [sp, #108]	; 0x6c
  4036de:	9309      	str	r3, [sp, #36]	; 0x24
  4036e0:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  4036e4:	46c8      	mov	r8, r9
  4036e6:	9316      	str	r3, [sp, #88]	; 0x58
  4036e8:	9317      	str	r3, [sp, #92]	; 0x5c
  4036ea:	f89a 3000 	ldrb.w	r3, [sl]
  4036ee:	4654      	mov	r4, sl
  4036f0:	b1e3      	cbz	r3, 40372c <_svfprintf_r+0x90>
  4036f2:	2b25      	cmp	r3, #37	; 0x25
  4036f4:	d102      	bne.n	4036fc <_svfprintf_r+0x60>
  4036f6:	e019      	b.n	40372c <_svfprintf_r+0x90>
  4036f8:	2b25      	cmp	r3, #37	; 0x25
  4036fa:	d003      	beq.n	403704 <_svfprintf_r+0x68>
  4036fc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  403700:	2b00      	cmp	r3, #0
  403702:	d1f9      	bne.n	4036f8 <_svfprintf_r+0x5c>
  403704:	eba4 050a 	sub.w	r5, r4, sl
  403708:	b185      	cbz	r5, 40372c <_svfprintf_r+0x90>
  40370a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40370c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40370e:	f8c8 a000 	str.w	sl, [r8]
  403712:	3301      	adds	r3, #1
  403714:	442a      	add	r2, r5
  403716:	2b07      	cmp	r3, #7
  403718:	f8c8 5004 	str.w	r5, [r8, #4]
  40371c:	9227      	str	r2, [sp, #156]	; 0x9c
  40371e:	9326      	str	r3, [sp, #152]	; 0x98
  403720:	dc7f      	bgt.n	403822 <_svfprintf_r+0x186>
  403722:	f108 0808 	add.w	r8, r8, #8
  403726:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403728:	442b      	add	r3, r5
  40372a:	9309      	str	r3, [sp, #36]	; 0x24
  40372c:	7823      	ldrb	r3, [r4, #0]
  40372e:	2b00      	cmp	r3, #0
  403730:	d07f      	beq.n	403832 <_svfprintf_r+0x196>
  403732:	2300      	movs	r3, #0
  403734:	461a      	mov	r2, r3
  403736:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40373a:	4619      	mov	r1, r3
  40373c:	930d      	str	r3, [sp, #52]	; 0x34
  40373e:	469b      	mov	fp, r3
  403740:	f04f 30ff 	mov.w	r0, #4294967295
  403744:	7863      	ldrb	r3, [r4, #1]
  403746:	900a      	str	r0, [sp, #40]	; 0x28
  403748:	f104 0a01 	add.w	sl, r4, #1
  40374c:	f10a 0a01 	add.w	sl, sl, #1
  403750:	f1a3 0020 	sub.w	r0, r3, #32
  403754:	2858      	cmp	r0, #88	; 0x58
  403756:	f200 83c1 	bhi.w	403edc <_svfprintf_r+0x840>
  40375a:	e8df f010 	tbh	[pc, r0, lsl #1]
  40375e:	0238      	.short	0x0238
  403760:	03bf03bf 	.word	0x03bf03bf
  403764:	03bf0240 	.word	0x03bf0240
  403768:	03bf03bf 	.word	0x03bf03bf
  40376c:	03bf03bf 	.word	0x03bf03bf
  403770:	024503bf 	.word	0x024503bf
  403774:	03bf0203 	.word	0x03bf0203
  403778:	026b005d 	.word	0x026b005d
  40377c:	028603bf 	.word	0x028603bf
  403780:	039d039d 	.word	0x039d039d
  403784:	039d039d 	.word	0x039d039d
  403788:	039d039d 	.word	0x039d039d
  40378c:	039d039d 	.word	0x039d039d
  403790:	03bf039d 	.word	0x03bf039d
  403794:	03bf03bf 	.word	0x03bf03bf
  403798:	03bf03bf 	.word	0x03bf03bf
  40379c:	03bf03bf 	.word	0x03bf03bf
  4037a0:	03bf03bf 	.word	0x03bf03bf
  4037a4:	033703bf 	.word	0x033703bf
  4037a8:	03bf0357 	.word	0x03bf0357
  4037ac:	03bf0357 	.word	0x03bf0357
  4037b0:	03bf03bf 	.word	0x03bf03bf
  4037b4:	039803bf 	.word	0x039803bf
  4037b8:	03bf03bf 	.word	0x03bf03bf
  4037bc:	03bf03ad 	.word	0x03bf03ad
  4037c0:	03bf03bf 	.word	0x03bf03bf
  4037c4:	03bf03bf 	.word	0x03bf03bf
  4037c8:	03bf0259 	.word	0x03bf0259
  4037cc:	031e03bf 	.word	0x031e03bf
  4037d0:	03bf03bf 	.word	0x03bf03bf
  4037d4:	03bf03bf 	.word	0x03bf03bf
  4037d8:	03bf03bf 	.word	0x03bf03bf
  4037dc:	03bf03bf 	.word	0x03bf03bf
  4037e0:	03bf03bf 	.word	0x03bf03bf
  4037e4:	02db02c6 	.word	0x02db02c6
  4037e8:	03570357 	.word	0x03570357
  4037ec:	028b0357 	.word	0x028b0357
  4037f0:	03bf02db 	.word	0x03bf02db
  4037f4:	029003bf 	.word	0x029003bf
  4037f8:	029d03bf 	.word	0x029d03bf
  4037fc:	02b401cc 	.word	0x02b401cc
  403800:	03bf0208 	.word	0x03bf0208
  403804:	03bf01e1 	.word	0x03bf01e1
  403808:	03bf007e 	.word	0x03bf007e
  40380c:	020d03bf 	.word	0x020d03bf
  403810:	980d      	ldr	r0, [sp, #52]	; 0x34
  403812:	930f      	str	r3, [sp, #60]	; 0x3c
  403814:	4240      	negs	r0, r0
  403816:	900d      	str	r0, [sp, #52]	; 0x34
  403818:	f04b 0b04 	orr.w	fp, fp, #4
  40381c:	f89a 3000 	ldrb.w	r3, [sl]
  403820:	e794      	b.n	40374c <_svfprintf_r+0xb0>
  403822:	aa25      	add	r2, sp, #148	; 0x94
  403824:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403826:	980c      	ldr	r0, [sp, #48]	; 0x30
  403828:	f004 fbf4 	bl	408014 <__ssprint_r>
  40382c:	b940      	cbnz	r0, 403840 <_svfprintf_r+0x1a4>
  40382e:	46c8      	mov	r8, r9
  403830:	e779      	b.n	403726 <_svfprintf_r+0x8a>
  403832:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403834:	b123      	cbz	r3, 403840 <_svfprintf_r+0x1a4>
  403836:	980c      	ldr	r0, [sp, #48]	; 0x30
  403838:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40383a:	aa25      	add	r2, sp, #148	; 0x94
  40383c:	f004 fbea 	bl	408014 <__ssprint_r>
  403840:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403842:	899b      	ldrh	r3, [r3, #12]
  403844:	f013 0f40 	tst.w	r3, #64	; 0x40
  403848:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40384a:	bf18      	it	ne
  40384c:	f04f 33ff 	movne.w	r3, #4294967295
  403850:	9309      	str	r3, [sp, #36]	; 0x24
  403852:	9809      	ldr	r0, [sp, #36]	; 0x24
  403854:	b043      	add	sp, #268	; 0x10c
  403856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40385a:	f01b 0f20 	tst.w	fp, #32
  40385e:	9311      	str	r3, [sp, #68]	; 0x44
  403860:	f040 81dd 	bne.w	403c1e <_svfprintf_r+0x582>
  403864:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403866:	f01b 0f10 	tst.w	fp, #16
  40386a:	4613      	mov	r3, r2
  40386c:	f040 856e 	bne.w	40434c <_svfprintf_r+0xcb0>
  403870:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403874:	f000 856a 	beq.w	40434c <_svfprintf_r+0xcb0>
  403878:	8814      	ldrh	r4, [r2, #0]
  40387a:	3204      	adds	r2, #4
  40387c:	2500      	movs	r5, #0
  40387e:	2301      	movs	r3, #1
  403880:	920f      	str	r2, [sp, #60]	; 0x3c
  403882:	2700      	movs	r7, #0
  403884:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  403888:	990a      	ldr	r1, [sp, #40]	; 0x28
  40388a:	1c4a      	adds	r2, r1, #1
  40388c:	f000 8265 	beq.w	403d5a <_svfprintf_r+0x6be>
  403890:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  403894:	9207      	str	r2, [sp, #28]
  403896:	ea54 0205 	orrs.w	r2, r4, r5
  40389a:	f040 8264 	bne.w	403d66 <_svfprintf_r+0x6ca>
  40389e:	2900      	cmp	r1, #0
  4038a0:	f040 843c 	bne.w	40411c <_svfprintf_r+0xa80>
  4038a4:	2b00      	cmp	r3, #0
  4038a6:	f040 84d7 	bne.w	404258 <_svfprintf_r+0xbbc>
  4038aa:	f01b 0301 	ands.w	r3, fp, #1
  4038ae:	930e      	str	r3, [sp, #56]	; 0x38
  4038b0:	f000 8604 	beq.w	4044bc <_svfprintf_r+0xe20>
  4038b4:	ae42      	add	r6, sp, #264	; 0x108
  4038b6:	2330      	movs	r3, #48	; 0x30
  4038b8:	f806 3d41 	strb.w	r3, [r6, #-65]!
  4038bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4038be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4038c0:	4293      	cmp	r3, r2
  4038c2:	bfb8      	it	lt
  4038c4:	4613      	movlt	r3, r2
  4038c6:	9308      	str	r3, [sp, #32]
  4038c8:	2300      	movs	r3, #0
  4038ca:	9312      	str	r3, [sp, #72]	; 0x48
  4038cc:	b117      	cbz	r7, 4038d4 <_svfprintf_r+0x238>
  4038ce:	9b08      	ldr	r3, [sp, #32]
  4038d0:	3301      	adds	r3, #1
  4038d2:	9308      	str	r3, [sp, #32]
  4038d4:	9b07      	ldr	r3, [sp, #28]
  4038d6:	f013 0302 	ands.w	r3, r3, #2
  4038da:	9310      	str	r3, [sp, #64]	; 0x40
  4038dc:	d002      	beq.n	4038e4 <_svfprintf_r+0x248>
  4038de:	9b08      	ldr	r3, [sp, #32]
  4038e0:	3302      	adds	r3, #2
  4038e2:	9308      	str	r3, [sp, #32]
  4038e4:	9b07      	ldr	r3, [sp, #28]
  4038e6:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  4038ea:	f040 830e 	bne.w	403f0a <_svfprintf_r+0x86e>
  4038ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4038f0:	9a08      	ldr	r2, [sp, #32]
  4038f2:	eba3 0b02 	sub.w	fp, r3, r2
  4038f6:	f1bb 0f00 	cmp.w	fp, #0
  4038fa:	f340 8306 	ble.w	403f0a <_svfprintf_r+0x86e>
  4038fe:	f1bb 0f10 	cmp.w	fp, #16
  403902:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403904:	9a26      	ldr	r2, [sp, #152]	; 0x98
  403906:	dd29      	ble.n	40395c <_svfprintf_r+0x2c0>
  403908:	4643      	mov	r3, r8
  40390a:	4621      	mov	r1, r4
  40390c:	46a8      	mov	r8, r5
  40390e:	2710      	movs	r7, #16
  403910:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403912:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  403914:	e006      	b.n	403924 <_svfprintf_r+0x288>
  403916:	f1ab 0b10 	sub.w	fp, fp, #16
  40391a:	f1bb 0f10 	cmp.w	fp, #16
  40391e:	f103 0308 	add.w	r3, r3, #8
  403922:	dd18      	ble.n	403956 <_svfprintf_r+0x2ba>
  403924:	3201      	adds	r2, #1
  403926:	48b7      	ldr	r0, [pc, #732]	; (403c04 <_svfprintf_r+0x568>)
  403928:	9226      	str	r2, [sp, #152]	; 0x98
  40392a:	3110      	adds	r1, #16
  40392c:	2a07      	cmp	r2, #7
  40392e:	9127      	str	r1, [sp, #156]	; 0x9c
  403930:	e883 0081 	stmia.w	r3, {r0, r7}
  403934:	ddef      	ble.n	403916 <_svfprintf_r+0x27a>
  403936:	aa25      	add	r2, sp, #148	; 0x94
  403938:	4629      	mov	r1, r5
  40393a:	4620      	mov	r0, r4
  40393c:	f004 fb6a 	bl	408014 <__ssprint_r>
  403940:	2800      	cmp	r0, #0
  403942:	f47f af7d 	bne.w	403840 <_svfprintf_r+0x1a4>
  403946:	f1ab 0b10 	sub.w	fp, fp, #16
  40394a:	f1bb 0f10 	cmp.w	fp, #16
  40394e:	9927      	ldr	r1, [sp, #156]	; 0x9c
  403950:	9a26      	ldr	r2, [sp, #152]	; 0x98
  403952:	464b      	mov	r3, r9
  403954:	dce6      	bgt.n	403924 <_svfprintf_r+0x288>
  403956:	4645      	mov	r5, r8
  403958:	460c      	mov	r4, r1
  40395a:	4698      	mov	r8, r3
  40395c:	3201      	adds	r2, #1
  40395e:	4ba9      	ldr	r3, [pc, #676]	; (403c04 <_svfprintf_r+0x568>)
  403960:	9226      	str	r2, [sp, #152]	; 0x98
  403962:	445c      	add	r4, fp
  403964:	2a07      	cmp	r2, #7
  403966:	9427      	str	r4, [sp, #156]	; 0x9c
  403968:	e888 0808 	stmia.w	r8, {r3, fp}
  40396c:	f300 8498 	bgt.w	4042a0 <_svfprintf_r+0xc04>
  403970:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403974:	f108 0808 	add.w	r8, r8, #8
  403978:	b177      	cbz	r7, 403998 <_svfprintf_r+0x2fc>
  40397a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40397c:	3301      	adds	r3, #1
  40397e:	3401      	adds	r4, #1
  403980:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  403984:	2201      	movs	r2, #1
  403986:	2b07      	cmp	r3, #7
  403988:	9427      	str	r4, [sp, #156]	; 0x9c
  40398a:	9326      	str	r3, [sp, #152]	; 0x98
  40398c:	e888 0006 	stmia.w	r8, {r1, r2}
  403990:	f300 83db 	bgt.w	40414a <_svfprintf_r+0xaae>
  403994:	f108 0808 	add.w	r8, r8, #8
  403998:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40399a:	b16b      	cbz	r3, 4039b8 <_svfprintf_r+0x31c>
  40399c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40399e:	3301      	adds	r3, #1
  4039a0:	3402      	adds	r4, #2
  4039a2:	a91e      	add	r1, sp, #120	; 0x78
  4039a4:	2202      	movs	r2, #2
  4039a6:	2b07      	cmp	r3, #7
  4039a8:	9427      	str	r4, [sp, #156]	; 0x9c
  4039aa:	9326      	str	r3, [sp, #152]	; 0x98
  4039ac:	e888 0006 	stmia.w	r8, {r1, r2}
  4039b0:	f300 83d6 	bgt.w	404160 <_svfprintf_r+0xac4>
  4039b4:	f108 0808 	add.w	r8, r8, #8
  4039b8:	2d80      	cmp	r5, #128	; 0x80
  4039ba:	f000 8315 	beq.w	403fe8 <_svfprintf_r+0x94c>
  4039be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4039c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4039c2:	1a9f      	subs	r7, r3, r2
  4039c4:	2f00      	cmp	r7, #0
  4039c6:	dd36      	ble.n	403a36 <_svfprintf_r+0x39a>
  4039c8:	2f10      	cmp	r7, #16
  4039ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4039cc:	4d8e      	ldr	r5, [pc, #568]	; (403c08 <_svfprintf_r+0x56c>)
  4039ce:	dd27      	ble.n	403a20 <_svfprintf_r+0x384>
  4039d0:	4642      	mov	r2, r8
  4039d2:	4621      	mov	r1, r4
  4039d4:	46b0      	mov	r8, r6
  4039d6:	f04f 0b10 	mov.w	fp, #16
  4039da:	462e      	mov	r6, r5
  4039dc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4039de:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4039e0:	e004      	b.n	4039ec <_svfprintf_r+0x350>
  4039e2:	3f10      	subs	r7, #16
  4039e4:	2f10      	cmp	r7, #16
  4039e6:	f102 0208 	add.w	r2, r2, #8
  4039ea:	dd15      	ble.n	403a18 <_svfprintf_r+0x37c>
  4039ec:	3301      	adds	r3, #1
  4039ee:	3110      	adds	r1, #16
  4039f0:	2b07      	cmp	r3, #7
  4039f2:	9127      	str	r1, [sp, #156]	; 0x9c
  4039f4:	9326      	str	r3, [sp, #152]	; 0x98
  4039f6:	e882 0840 	stmia.w	r2, {r6, fp}
  4039fa:	ddf2      	ble.n	4039e2 <_svfprintf_r+0x346>
  4039fc:	aa25      	add	r2, sp, #148	; 0x94
  4039fe:	4629      	mov	r1, r5
  403a00:	4620      	mov	r0, r4
  403a02:	f004 fb07 	bl	408014 <__ssprint_r>
  403a06:	2800      	cmp	r0, #0
  403a08:	f47f af1a 	bne.w	403840 <_svfprintf_r+0x1a4>
  403a0c:	3f10      	subs	r7, #16
  403a0e:	2f10      	cmp	r7, #16
  403a10:	9927      	ldr	r1, [sp, #156]	; 0x9c
  403a12:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403a14:	464a      	mov	r2, r9
  403a16:	dce9      	bgt.n	4039ec <_svfprintf_r+0x350>
  403a18:	4635      	mov	r5, r6
  403a1a:	460c      	mov	r4, r1
  403a1c:	4646      	mov	r6, r8
  403a1e:	4690      	mov	r8, r2
  403a20:	3301      	adds	r3, #1
  403a22:	443c      	add	r4, r7
  403a24:	2b07      	cmp	r3, #7
  403a26:	9427      	str	r4, [sp, #156]	; 0x9c
  403a28:	9326      	str	r3, [sp, #152]	; 0x98
  403a2a:	e888 00a0 	stmia.w	r8, {r5, r7}
  403a2e:	f300 8381 	bgt.w	404134 <_svfprintf_r+0xa98>
  403a32:	f108 0808 	add.w	r8, r8, #8
  403a36:	9b07      	ldr	r3, [sp, #28]
  403a38:	05df      	lsls	r7, r3, #23
  403a3a:	f100 8268 	bmi.w	403f0e <_svfprintf_r+0x872>
  403a3e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403a40:	990e      	ldr	r1, [sp, #56]	; 0x38
  403a42:	f8c8 6000 	str.w	r6, [r8]
  403a46:	3301      	adds	r3, #1
  403a48:	440c      	add	r4, r1
  403a4a:	2b07      	cmp	r3, #7
  403a4c:	9427      	str	r4, [sp, #156]	; 0x9c
  403a4e:	f8c8 1004 	str.w	r1, [r8, #4]
  403a52:	9326      	str	r3, [sp, #152]	; 0x98
  403a54:	f300 834d 	bgt.w	4040f2 <_svfprintf_r+0xa56>
  403a58:	f108 0808 	add.w	r8, r8, #8
  403a5c:	9b07      	ldr	r3, [sp, #28]
  403a5e:	075b      	lsls	r3, r3, #29
  403a60:	d53a      	bpl.n	403ad8 <_svfprintf_r+0x43c>
  403a62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403a64:	9a08      	ldr	r2, [sp, #32]
  403a66:	1a9d      	subs	r5, r3, r2
  403a68:	2d00      	cmp	r5, #0
  403a6a:	dd35      	ble.n	403ad8 <_svfprintf_r+0x43c>
  403a6c:	2d10      	cmp	r5, #16
  403a6e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403a70:	dd20      	ble.n	403ab4 <_svfprintf_r+0x418>
  403a72:	2610      	movs	r6, #16
  403a74:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  403a76:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  403a7a:	e004      	b.n	403a86 <_svfprintf_r+0x3ea>
  403a7c:	3d10      	subs	r5, #16
  403a7e:	2d10      	cmp	r5, #16
  403a80:	f108 0808 	add.w	r8, r8, #8
  403a84:	dd16      	ble.n	403ab4 <_svfprintf_r+0x418>
  403a86:	3301      	adds	r3, #1
  403a88:	4a5e      	ldr	r2, [pc, #376]	; (403c04 <_svfprintf_r+0x568>)
  403a8a:	9326      	str	r3, [sp, #152]	; 0x98
  403a8c:	3410      	adds	r4, #16
  403a8e:	2b07      	cmp	r3, #7
  403a90:	9427      	str	r4, [sp, #156]	; 0x9c
  403a92:	e888 0044 	stmia.w	r8, {r2, r6}
  403a96:	ddf1      	ble.n	403a7c <_svfprintf_r+0x3e0>
  403a98:	aa25      	add	r2, sp, #148	; 0x94
  403a9a:	4659      	mov	r1, fp
  403a9c:	4638      	mov	r0, r7
  403a9e:	f004 fab9 	bl	408014 <__ssprint_r>
  403aa2:	2800      	cmp	r0, #0
  403aa4:	f47f aecc 	bne.w	403840 <_svfprintf_r+0x1a4>
  403aa8:	3d10      	subs	r5, #16
  403aaa:	2d10      	cmp	r5, #16
  403aac:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403aae:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403ab0:	46c8      	mov	r8, r9
  403ab2:	dce8      	bgt.n	403a86 <_svfprintf_r+0x3ea>
  403ab4:	3301      	adds	r3, #1
  403ab6:	4a53      	ldr	r2, [pc, #332]	; (403c04 <_svfprintf_r+0x568>)
  403ab8:	9326      	str	r3, [sp, #152]	; 0x98
  403aba:	442c      	add	r4, r5
  403abc:	2b07      	cmp	r3, #7
  403abe:	9427      	str	r4, [sp, #156]	; 0x9c
  403ac0:	e888 0024 	stmia.w	r8, {r2, r5}
  403ac4:	dd08      	ble.n	403ad8 <_svfprintf_r+0x43c>
  403ac6:	aa25      	add	r2, sp, #148	; 0x94
  403ac8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403aca:	980c      	ldr	r0, [sp, #48]	; 0x30
  403acc:	f004 faa2 	bl	408014 <__ssprint_r>
  403ad0:	2800      	cmp	r0, #0
  403ad2:	f47f aeb5 	bne.w	403840 <_svfprintf_r+0x1a4>
  403ad6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403ada:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  403adc:	9908      	ldr	r1, [sp, #32]
  403ade:	428a      	cmp	r2, r1
  403ae0:	bfac      	ite	ge
  403ae2:	189b      	addge	r3, r3, r2
  403ae4:	185b      	addlt	r3, r3, r1
  403ae6:	9309      	str	r3, [sp, #36]	; 0x24
  403ae8:	2c00      	cmp	r4, #0
  403aea:	f040 830d 	bne.w	404108 <_svfprintf_r+0xa6c>
  403aee:	2300      	movs	r3, #0
  403af0:	9326      	str	r3, [sp, #152]	; 0x98
  403af2:	46c8      	mov	r8, r9
  403af4:	e5f9      	b.n	4036ea <_svfprintf_r+0x4e>
  403af6:	9311      	str	r3, [sp, #68]	; 0x44
  403af8:	f01b 0320 	ands.w	r3, fp, #32
  403afc:	f040 81e3 	bne.w	403ec6 <_svfprintf_r+0x82a>
  403b00:	f01b 0210 	ands.w	r2, fp, #16
  403b04:	f040 842e 	bne.w	404364 <_svfprintf_r+0xcc8>
  403b08:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  403b0c:	f000 842a 	beq.w	404364 <_svfprintf_r+0xcc8>
  403b10:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403b12:	4613      	mov	r3, r2
  403b14:	460a      	mov	r2, r1
  403b16:	3204      	adds	r2, #4
  403b18:	880c      	ldrh	r4, [r1, #0]
  403b1a:	920f      	str	r2, [sp, #60]	; 0x3c
  403b1c:	2500      	movs	r5, #0
  403b1e:	e6b0      	b.n	403882 <_svfprintf_r+0x1e6>
  403b20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403b22:	9311      	str	r3, [sp, #68]	; 0x44
  403b24:	6816      	ldr	r6, [r2, #0]
  403b26:	2400      	movs	r4, #0
  403b28:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  403b2c:	1d15      	adds	r5, r2, #4
  403b2e:	2e00      	cmp	r6, #0
  403b30:	f000 86a7 	beq.w	404882 <_svfprintf_r+0x11e6>
  403b34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403b36:	1c53      	adds	r3, r2, #1
  403b38:	f000 8609 	beq.w	40474e <_svfprintf_r+0x10b2>
  403b3c:	4621      	mov	r1, r4
  403b3e:	4630      	mov	r0, r6
  403b40:	f003 fc36 	bl	4073b0 <memchr>
  403b44:	2800      	cmp	r0, #0
  403b46:	f000 86e1 	beq.w	40490c <_svfprintf_r+0x1270>
  403b4a:	1b83      	subs	r3, r0, r6
  403b4c:	930e      	str	r3, [sp, #56]	; 0x38
  403b4e:	940a      	str	r4, [sp, #40]	; 0x28
  403b50:	950f      	str	r5, [sp, #60]	; 0x3c
  403b52:	f8cd b01c 	str.w	fp, [sp, #28]
  403b56:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403b5a:	9308      	str	r3, [sp, #32]
  403b5c:	9412      	str	r4, [sp, #72]	; 0x48
  403b5e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403b62:	e6b3      	b.n	4038cc <_svfprintf_r+0x230>
  403b64:	f89a 3000 	ldrb.w	r3, [sl]
  403b68:	2201      	movs	r2, #1
  403b6a:	212b      	movs	r1, #43	; 0x2b
  403b6c:	e5ee      	b.n	40374c <_svfprintf_r+0xb0>
  403b6e:	f04b 0b20 	orr.w	fp, fp, #32
  403b72:	f89a 3000 	ldrb.w	r3, [sl]
  403b76:	e5e9      	b.n	40374c <_svfprintf_r+0xb0>
  403b78:	9311      	str	r3, [sp, #68]	; 0x44
  403b7a:	2a00      	cmp	r2, #0
  403b7c:	f040 8795 	bne.w	404aaa <_svfprintf_r+0x140e>
  403b80:	4b22      	ldr	r3, [pc, #136]	; (403c0c <_svfprintf_r+0x570>)
  403b82:	9318      	str	r3, [sp, #96]	; 0x60
  403b84:	f01b 0f20 	tst.w	fp, #32
  403b88:	f040 8111 	bne.w	403dae <_svfprintf_r+0x712>
  403b8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403b8e:	f01b 0f10 	tst.w	fp, #16
  403b92:	4613      	mov	r3, r2
  403b94:	f040 83e1 	bne.w	40435a <_svfprintf_r+0xcbe>
  403b98:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403b9c:	f000 83dd 	beq.w	40435a <_svfprintf_r+0xcbe>
  403ba0:	3304      	adds	r3, #4
  403ba2:	8814      	ldrh	r4, [r2, #0]
  403ba4:	930f      	str	r3, [sp, #60]	; 0x3c
  403ba6:	2500      	movs	r5, #0
  403ba8:	f01b 0f01 	tst.w	fp, #1
  403bac:	f000 810c 	beq.w	403dc8 <_svfprintf_r+0x72c>
  403bb0:	ea54 0305 	orrs.w	r3, r4, r5
  403bb4:	f000 8108 	beq.w	403dc8 <_svfprintf_r+0x72c>
  403bb8:	2330      	movs	r3, #48	; 0x30
  403bba:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  403bbe:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  403bc2:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  403bc6:	f04b 0b02 	orr.w	fp, fp, #2
  403bca:	2302      	movs	r3, #2
  403bcc:	e659      	b.n	403882 <_svfprintf_r+0x1e6>
  403bce:	f89a 3000 	ldrb.w	r3, [sl]
  403bd2:	2900      	cmp	r1, #0
  403bd4:	f47f adba 	bne.w	40374c <_svfprintf_r+0xb0>
  403bd8:	2201      	movs	r2, #1
  403bda:	2120      	movs	r1, #32
  403bdc:	e5b6      	b.n	40374c <_svfprintf_r+0xb0>
  403bde:	f04b 0b01 	orr.w	fp, fp, #1
  403be2:	f89a 3000 	ldrb.w	r3, [sl]
  403be6:	e5b1      	b.n	40374c <_svfprintf_r+0xb0>
  403be8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  403bea:	6823      	ldr	r3, [r4, #0]
  403bec:	930d      	str	r3, [sp, #52]	; 0x34
  403bee:	4618      	mov	r0, r3
  403bf0:	2800      	cmp	r0, #0
  403bf2:	4623      	mov	r3, r4
  403bf4:	f103 0304 	add.w	r3, r3, #4
  403bf8:	f6ff ae0a 	blt.w	403810 <_svfprintf_r+0x174>
  403bfc:	930f      	str	r3, [sp, #60]	; 0x3c
  403bfe:	f89a 3000 	ldrb.w	r3, [sl]
  403c02:	e5a3      	b.n	40374c <_svfprintf_r+0xb0>
  403c04:	004099f0 	.word	0x004099f0
  403c08:	00409a00 	.word	0x00409a00
  403c0c:	004099d0 	.word	0x004099d0
  403c10:	f04b 0b10 	orr.w	fp, fp, #16
  403c14:	f01b 0f20 	tst.w	fp, #32
  403c18:	9311      	str	r3, [sp, #68]	; 0x44
  403c1a:	f43f ae23 	beq.w	403864 <_svfprintf_r+0x1c8>
  403c1e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403c20:	3507      	adds	r5, #7
  403c22:	f025 0307 	bic.w	r3, r5, #7
  403c26:	f103 0208 	add.w	r2, r3, #8
  403c2a:	e9d3 4500 	ldrd	r4, r5, [r3]
  403c2e:	920f      	str	r2, [sp, #60]	; 0x3c
  403c30:	2301      	movs	r3, #1
  403c32:	e626      	b.n	403882 <_svfprintf_r+0x1e6>
  403c34:	f89a 3000 	ldrb.w	r3, [sl]
  403c38:	2b2a      	cmp	r3, #42	; 0x2a
  403c3a:	f10a 0401 	add.w	r4, sl, #1
  403c3e:	f000 8727 	beq.w	404a90 <_svfprintf_r+0x13f4>
  403c42:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403c46:	2809      	cmp	r0, #9
  403c48:	46a2      	mov	sl, r4
  403c4a:	f200 86ad 	bhi.w	4049a8 <_svfprintf_r+0x130c>
  403c4e:	2300      	movs	r3, #0
  403c50:	461c      	mov	r4, r3
  403c52:	f81a 3b01 	ldrb.w	r3, [sl], #1
  403c56:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  403c5a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  403c5e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403c62:	2809      	cmp	r0, #9
  403c64:	d9f5      	bls.n	403c52 <_svfprintf_r+0x5b6>
  403c66:	940a      	str	r4, [sp, #40]	; 0x28
  403c68:	e572      	b.n	403750 <_svfprintf_r+0xb4>
  403c6a:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  403c6e:	f89a 3000 	ldrb.w	r3, [sl]
  403c72:	e56b      	b.n	40374c <_svfprintf_r+0xb0>
  403c74:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  403c78:	f89a 3000 	ldrb.w	r3, [sl]
  403c7c:	e566      	b.n	40374c <_svfprintf_r+0xb0>
  403c7e:	f89a 3000 	ldrb.w	r3, [sl]
  403c82:	2b6c      	cmp	r3, #108	; 0x6c
  403c84:	bf03      	ittte	eq
  403c86:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  403c8a:	f04b 0b20 	orreq.w	fp, fp, #32
  403c8e:	f10a 0a01 	addeq.w	sl, sl, #1
  403c92:	f04b 0b10 	orrne.w	fp, fp, #16
  403c96:	e559      	b.n	40374c <_svfprintf_r+0xb0>
  403c98:	2a00      	cmp	r2, #0
  403c9a:	f040 8711 	bne.w	404ac0 <_svfprintf_r+0x1424>
  403c9e:	f01b 0f20 	tst.w	fp, #32
  403ca2:	f040 84f9 	bne.w	404698 <_svfprintf_r+0xffc>
  403ca6:	f01b 0f10 	tst.w	fp, #16
  403caa:	f040 84ac 	bne.w	404606 <_svfprintf_r+0xf6a>
  403cae:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403cb2:	f000 84a8 	beq.w	404606 <_svfprintf_r+0xf6a>
  403cb6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403cb8:	6813      	ldr	r3, [r2, #0]
  403cba:	3204      	adds	r2, #4
  403cbc:	920f      	str	r2, [sp, #60]	; 0x3c
  403cbe:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  403cc2:	801a      	strh	r2, [r3, #0]
  403cc4:	e511      	b.n	4036ea <_svfprintf_r+0x4e>
  403cc6:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403cc8:	4bb3      	ldr	r3, [pc, #716]	; (403f98 <_svfprintf_r+0x8fc>)
  403cca:	680c      	ldr	r4, [r1, #0]
  403ccc:	9318      	str	r3, [sp, #96]	; 0x60
  403cce:	2230      	movs	r2, #48	; 0x30
  403cd0:	2378      	movs	r3, #120	; 0x78
  403cd2:	3104      	adds	r1, #4
  403cd4:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  403cd8:	9311      	str	r3, [sp, #68]	; 0x44
  403cda:	f04b 0b02 	orr.w	fp, fp, #2
  403cde:	910f      	str	r1, [sp, #60]	; 0x3c
  403ce0:	2500      	movs	r5, #0
  403ce2:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  403ce6:	2302      	movs	r3, #2
  403ce8:	e5cb      	b.n	403882 <_svfprintf_r+0x1e6>
  403cea:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403cec:	9311      	str	r3, [sp, #68]	; 0x44
  403cee:	680a      	ldr	r2, [r1, #0]
  403cf0:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  403cf4:	2300      	movs	r3, #0
  403cf6:	460a      	mov	r2, r1
  403cf8:	461f      	mov	r7, r3
  403cfa:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403cfe:	3204      	adds	r2, #4
  403d00:	2301      	movs	r3, #1
  403d02:	9308      	str	r3, [sp, #32]
  403d04:	f8cd b01c 	str.w	fp, [sp, #28]
  403d08:	970a      	str	r7, [sp, #40]	; 0x28
  403d0a:	9712      	str	r7, [sp, #72]	; 0x48
  403d0c:	920f      	str	r2, [sp, #60]	; 0x3c
  403d0e:	930e      	str	r3, [sp, #56]	; 0x38
  403d10:	ae28      	add	r6, sp, #160	; 0xa0
  403d12:	e5df      	b.n	4038d4 <_svfprintf_r+0x238>
  403d14:	9311      	str	r3, [sp, #68]	; 0x44
  403d16:	2a00      	cmp	r2, #0
  403d18:	f040 86ea 	bne.w	404af0 <_svfprintf_r+0x1454>
  403d1c:	f01b 0f20 	tst.w	fp, #32
  403d20:	d15d      	bne.n	403dde <_svfprintf_r+0x742>
  403d22:	f01b 0f10 	tst.w	fp, #16
  403d26:	f040 8308 	bne.w	40433a <_svfprintf_r+0xc9e>
  403d2a:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403d2e:	f000 8304 	beq.w	40433a <_svfprintf_r+0xc9e>
  403d32:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403d34:	f9b1 4000 	ldrsh.w	r4, [r1]
  403d38:	3104      	adds	r1, #4
  403d3a:	17e5      	asrs	r5, r4, #31
  403d3c:	4622      	mov	r2, r4
  403d3e:	462b      	mov	r3, r5
  403d40:	910f      	str	r1, [sp, #60]	; 0x3c
  403d42:	2a00      	cmp	r2, #0
  403d44:	f173 0300 	sbcs.w	r3, r3, #0
  403d48:	db58      	blt.n	403dfc <_svfprintf_r+0x760>
  403d4a:	990a      	ldr	r1, [sp, #40]	; 0x28
  403d4c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403d50:	1c4a      	adds	r2, r1, #1
  403d52:	f04f 0301 	mov.w	r3, #1
  403d56:	f47f ad9b 	bne.w	403890 <_svfprintf_r+0x1f4>
  403d5a:	ea54 0205 	orrs.w	r2, r4, r5
  403d5e:	f000 81df 	beq.w	404120 <_svfprintf_r+0xa84>
  403d62:	f8cd b01c 	str.w	fp, [sp, #28]
  403d66:	2b01      	cmp	r3, #1
  403d68:	f000 827b 	beq.w	404262 <_svfprintf_r+0xbc6>
  403d6c:	2b02      	cmp	r3, #2
  403d6e:	f040 8206 	bne.w	40417e <_svfprintf_r+0xae2>
  403d72:	9818      	ldr	r0, [sp, #96]	; 0x60
  403d74:	464e      	mov	r6, r9
  403d76:	0923      	lsrs	r3, r4, #4
  403d78:	f004 010f 	and.w	r1, r4, #15
  403d7c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  403d80:	092a      	lsrs	r2, r5, #4
  403d82:	461c      	mov	r4, r3
  403d84:	4615      	mov	r5, r2
  403d86:	5c43      	ldrb	r3, [r0, r1]
  403d88:	f806 3d01 	strb.w	r3, [r6, #-1]!
  403d8c:	ea54 0305 	orrs.w	r3, r4, r5
  403d90:	d1f1      	bne.n	403d76 <_svfprintf_r+0x6da>
  403d92:	eba9 0306 	sub.w	r3, r9, r6
  403d96:	930e      	str	r3, [sp, #56]	; 0x38
  403d98:	e590      	b.n	4038bc <_svfprintf_r+0x220>
  403d9a:	9311      	str	r3, [sp, #68]	; 0x44
  403d9c:	2a00      	cmp	r2, #0
  403d9e:	f040 86a3 	bne.w	404ae8 <_svfprintf_r+0x144c>
  403da2:	4b7e      	ldr	r3, [pc, #504]	; (403f9c <_svfprintf_r+0x900>)
  403da4:	9318      	str	r3, [sp, #96]	; 0x60
  403da6:	f01b 0f20 	tst.w	fp, #32
  403daa:	f43f aeef 	beq.w	403b8c <_svfprintf_r+0x4f0>
  403dae:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403db0:	3507      	adds	r5, #7
  403db2:	f025 0307 	bic.w	r3, r5, #7
  403db6:	f103 0208 	add.w	r2, r3, #8
  403dba:	f01b 0f01 	tst.w	fp, #1
  403dbe:	920f      	str	r2, [sp, #60]	; 0x3c
  403dc0:	e9d3 4500 	ldrd	r4, r5, [r3]
  403dc4:	f47f aef4 	bne.w	403bb0 <_svfprintf_r+0x514>
  403dc8:	2302      	movs	r3, #2
  403dca:	e55a      	b.n	403882 <_svfprintf_r+0x1e6>
  403dcc:	9311      	str	r3, [sp, #68]	; 0x44
  403dce:	2a00      	cmp	r2, #0
  403dd0:	f040 8686 	bne.w	404ae0 <_svfprintf_r+0x1444>
  403dd4:	f04b 0b10 	orr.w	fp, fp, #16
  403dd8:	f01b 0f20 	tst.w	fp, #32
  403ddc:	d0a1      	beq.n	403d22 <_svfprintf_r+0x686>
  403dde:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403de0:	3507      	adds	r5, #7
  403de2:	f025 0507 	bic.w	r5, r5, #7
  403de6:	e9d5 2300 	ldrd	r2, r3, [r5]
  403dea:	2a00      	cmp	r2, #0
  403dec:	f105 0108 	add.w	r1, r5, #8
  403df0:	461d      	mov	r5, r3
  403df2:	f173 0300 	sbcs.w	r3, r3, #0
  403df6:	910f      	str	r1, [sp, #60]	; 0x3c
  403df8:	4614      	mov	r4, r2
  403dfa:	daa6      	bge.n	403d4a <_svfprintf_r+0x6ae>
  403dfc:	272d      	movs	r7, #45	; 0x2d
  403dfe:	4264      	negs	r4, r4
  403e00:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  403e04:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  403e08:	2301      	movs	r3, #1
  403e0a:	e53d      	b.n	403888 <_svfprintf_r+0x1ec>
  403e0c:	9311      	str	r3, [sp, #68]	; 0x44
  403e0e:	2a00      	cmp	r2, #0
  403e10:	f040 8662 	bne.w	404ad8 <_svfprintf_r+0x143c>
  403e14:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403e16:	3507      	adds	r5, #7
  403e18:	f025 0307 	bic.w	r3, r5, #7
  403e1c:	f103 0208 	add.w	r2, r3, #8
  403e20:	920f      	str	r2, [sp, #60]	; 0x3c
  403e22:	681a      	ldr	r2, [r3, #0]
  403e24:	9215      	str	r2, [sp, #84]	; 0x54
  403e26:	685b      	ldr	r3, [r3, #4]
  403e28:	9314      	str	r3, [sp, #80]	; 0x50
  403e2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
  403e2c:	9d15      	ldr	r5, [sp, #84]	; 0x54
  403e2e:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  403e32:	4628      	mov	r0, r5
  403e34:	4621      	mov	r1, r4
  403e36:	f04f 32ff 	mov.w	r2, #4294967295
  403e3a:	4b59      	ldr	r3, [pc, #356]	; (403fa0 <_svfprintf_r+0x904>)
  403e3c:	f004 ffb8 	bl	408db0 <__aeabi_dcmpun>
  403e40:	2800      	cmp	r0, #0
  403e42:	f040 834a 	bne.w	4044da <_svfprintf_r+0xe3e>
  403e46:	4628      	mov	r0, r5
  403e48:	4621      	mov	r1, r4
  403e4a:	f04f 32ff 	mov.w	r2, #4294967295
  403e4e:	4b54      	ldr	r3, [pc, #336]	; (403fa0 <_svfprintf_r+0x904>)
  403e50:	f004 ff90 	bl	408d74 <__aeabi_dcmple>
  403e54:	2800      	cmp	r0, #0
  403e56:	f040 8340 	bne.w	4044da <_svfprintf_r+0xe3e>
  403e5a:	a815      	add	r0, sp, #84	; 0x54
  403e5c:	c80d      	ldmia	r0, {r0, r2, r3}
  403e5e:	9914      	ldr	r1, [sp, #80]	; 0x50
  403e60:	f004 ff7e 	bl	408d60 <__aeabi_dcmplt>
  403e64:	2800      	cmp	r0, #0
  403e66:	f040 8530 	bne.w	4048ca <_svfprintf_r+0x122e>
  403e6a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403e6e:	4e4d      	ldr	r6, [pc, #308]	; (403fa4 <_svfprintf_r+0x908>)
  403e70:	4b4d      	ldr	r3, [pc, #308]	; (403fa8 <_svfprintf_r+0x90c>)
  403e72:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  403e76:	9007      	str	r0, [sp, #28]
  403e78:	9811      	ldr	r0, [sp, #68]	; 0x44
  403e7a:	2203      	movs	r2, #3
  403e7c:	2100      	movs	r1, #0
  403e7e:	9208      	str	r2, [sp, #32]
  403e80:	910a      	str	r1, [sp, #40]	; 0x28
  403e82:	2847      	cmp	r0, #71	; 0x47
  403e84:	bfd8      	it	le
  403e86:	461e      	movle	r6, r3
  403e88:	920e      	str	r2, [sp, #56]	; 0x38
  403e8a:	9112      	str	r1, [sp, #72]	; 0x48
  403e8c:	e51e      	b.n	4038cc <_svfprintf_r+0x230>
  403e8e:	f04b 0b08 	orr.w	fp, fp, #8
  403e92:	f89a 3000 	ldrb.w	r3, [sl]
  403e96:	e459      	b.n	40374c <_svfprintf_r+0xb0>
  403e98:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403e9c:	2300      	movs	r3, #0
  403e9e:	461c      	mov	r4, r3
  403ea0:	f81a 3b01 	ldrb.w	r3, [sl], #1
  403ea4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  403ea8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  403eac:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403eb0:	2809      	cmp	r0, #9
  403eb2:	d9f5      	bls.n	403ea0 <_svfprintf_r+0x804>
  403eb4:	940d      	str	r4, [sp, #52]	; 0x34
  403eb6:	e44b      	b.n	403750 <_svfprintf_r+0xb4>
  403eb8:	f04b 0b10 	orr.w	fp, fp, #16
  403ebc:	9311      	str	r3, [sp, #68]	; 0x44
  403ebe:	f01b 0320 	ands.w	r3, fp, #32
  403ec2:	f43f ae1d 	beq.w	403b00 <_svfprintf_r+0x464>
  403ec6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403ec8:	3507      	adds	r5, #7
  403eca:	f025 0307 	bic.w	r3, r5, #7
  403ece:	f103 0208 	add.w	r2, r3, #8
  403ed2:	e9d3 4500 	ldrd	r4, r5, [r3]
  403ed6:	920f      	str	r2, [sp, #60]	; 0x3c
  403ed8:	2300      	movs	r3, #0
  403eda:	e4d2      	b.n	403882 <_svfprintf_r+0x1e6>
  403edc:	9311      	str	r3, [sp, #68]	; 0x44
  403ede:	2a00      	cmp	r2, #0
  403ee0:	f040 85e7 	bne.w	404ab2 <_svfprintf_r+0x1416>
  403ee4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403ee6:	2a00      	cmp	r2, #0
  403ee8:	f43f aca3 	beq.w	403832 <_svfprintf_r+0x196>
  403eec:	2300      	movs	r3, #0
  403eee:	2101      	movs	r1, #1
  403ef0:	461f      	mov	r7, r3
  403ef2:	9108      	str	r1, [sp, #32]
  403ef4:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  403ef8:	f8cd b01c 	str.w	fp, [sp, #28]
  403efc:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403f00:	930a      	str	r3, [sp, #40]	; 0x28
  403f02:	9312      	str	r3, [sp, #72]	; 0x48
  403f04:	910e      	str	r1, [sp, #56]	; 0x38
  403f06:	ae28      	add	r6, sp, #160	; 0xa0
  403f08:	e4e4      	b.n	4038d4 <_svfprintf_r+0x238>
  403f0a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403f0c:	e534      	b.n	403978 <_svfprintf_r+0x2dc>
  403f0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403f10:	2b65      	cmp	r3, #101	; 0x65
  403f12:	f340 80a7 	ble.w	404064 <_svfprintf_r+0x9c8>
  403f16:	a815      	add	r0, sp, #84	; 0x54
  403f18:	c80d      	ldmia	r0, {r0, r2, r3}
  403f1a:	9914      	ldr	r1, [sp, #80]	; 0x50
  403f1c:	f004 ff16 	bl	408d4c <__aeabi_dcmpeq>
  403f20:	2800      	cmp	r0, #0
  403f22:	f000 8150 	beq.w	4041c6 <_svfprintf_r+0xb2a>
  403f26:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403f28:	4a20      	ldr	r2, [pc, #128]	; (403fac <_svfprintf_r+0x910>)
  403f2a:	f8c8 2000 	str.w	r2, [r8]
  403f2e:	3301      	adds	r3, #1
  403f30:	3401      	adds	r4, #1
  403f32:	2201      	movs	r2, #1
  403f34:	2b07      	cmp	r3, #7
  403f36:	9427      	str	r4, [sp, #156]	; 0x9c
  403f38:	9326      	str	r3, [sp, #152]	; 0x98
  403f3a:	f8c8 2004 	str.w	r2, [r8, #4]
  403f3e:	f300 836a 	bgt.w	404616 <_svfprintf_r+0xf7a>
  403f42:	f108 0808 	add.w	r8, r8, #8
  403f46:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403f48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  403f4a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403f4c:	4293      	cmp	r3, r2
  403f4e:	db03      	blt.n	403f58 <_svfprintf_r+0x8bc>
  403f50:	9b07      	ldr	r3, [sp, #28]
  403f52:	07dd      	lsls	r5, r3, #31
  403f54:	f57f ad82 	bpl.w	403a5c <_svfprintf_r+0x3c0>
  403f58:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403f5a:	9919      	ldr	r1, [sp, #100]	; 0x64
  403f5c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  403f5e:	f8c8 2000 	str.w	r2, [r8]
  403f62:	3301      	adds	r3, #1
  403f64:	440c      	add	r4, r1
  403f66:	2b07      	cmp	r3, #7
  403f68:	f8c8 1004 	str.w	r1, [r8, #4]
  403f6c:	9427      	str	r4, [sp, #156]	; 0x9c
  403f6e:	9326      	str	r3, [sp, #152]	; 0x98
  403f70:	f300 839e 	bgt.w	4046b0 <_svfprintf_r+0x1014>
  403f74:	f108 0808 	add.w	r8, r8, #8
  403f78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403f7a:	1e5e      	subs	r6, r3, #1
  403f7c:	2e00      	cmp	r6, #0
  403f7e:	f77f ad6d 	ble.w	403a5c <_svfprintf_r+0x3c0>
  403f82:	2e10      	cmp	r6, #16
  403f84:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403f86:	4d0a      	ldr	r5, [pc, #40]	; (403fb0 <_svfprintf_r+0x914>)
  403f88:	f340 81f5 	ble.w	404376 <_svfprintf_r+0xcda>
  403f8c:	4622      	mov	r2, r4
  403f8e:	2710      	movs	r7, #16
  403f90:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  403f94:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  403f96:	e013      	b.n	403fc0 <_svfprintf_r+0x924>
  403f98:	004099d0 	.word	0x004099d0
  403f9c:	004099bc 	.word	0x004099bc
  403fa0:	7fefffff 	.word	0x7fefffff
  403fa4:	004099b0 	.word	0x004099b0
  403fa8:	004099ac 	.word	0x004099ac
  403fac:	004099ec 	.word	0x004099ec
  403fb0:	00409a00 	.word	0x00409a00
  403fb4:	f108 0808 	add.w	r8, r8, #8
  403fb8:	3e10      	subs	r6, #16
  403fba:	2e10      	cmp	r6, #16
  403fbc:	f340 81da 	ble.w	404374 <_svfprintf_r+0xcd8>
  403fc0:	3301      	adds	r3, #1
  403fc2:	3210      	adds	r2, #16
  403fc4:	2b07      	cmp	r3, #7
  403fc6:	9227      	str	r2, [sp, #156]	; 0x9c
  403fc8:	9326      	str	r3, [sp, #152]	; 0x98
  403fca:	e888 00a0 	stmia.w	r8, {r5, r7}
  403fce:	ddf1      	ble.n	403fb4 <_svfprintf_r+0x918>
  403fd0:	aa25      	add	r2, sp, #148	; 0x94
  403fd2:	4621      	mov	r1, r4
  403fd4:	4658      	mov	r0, fp
  403fd6:	f004 f81d 	bl	408014 <__ssprint_r>
  403fda:	2800      	cmp	r0, #0
  403fdc:	f47f ac30 	bne.w	403840 <_svfprintf_r+0x1a4>
  403fe0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403fe2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403fe4:	46c8      	mov	r8, r9
  403fe6:	e7e7      	b.n	403fb8 <_svfprintf_r+0x91c>
  403fe8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403fea:	9a08      	ldr	r2, [sp, #32]
  403fec:	1a9f      	subs	r7, r3, r2
  403fee:	2f00      	cmp	r7, #0
  403ff0:	f77f ace5 	ble.w	4039be <_svfprintf_r+0x322>
  403ff4:	2f10      	cmp	r7, #16
  403ff6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403ff8:	4db6      	ldr	r5, [pc, #728]	; (4042d4 <_svfprintf_r+0xc38>)
  403ffa:	dd27      	ble.n	40404c <_svfprintf_r+0x9b0>
  403ffc:	4642      	mov	r2, r8
  403ffe:	4621      	mov	r1, r4
  404000:	46b0      	mov	r8, r6
  404002:	f04f 0b10 	mov.w	fp, #16
  404006:	462e      	mov	r6, r5
  404008:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40400a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40400c:	e004      	b.n	404018 <_svfprintf_r+0x97c>
  40400e:	3f10      	subs	r7, #16
  404010:	2f10      	cmp	r7, #16
  404012:	f102 0208 	add.w	r2, r2, #8
  404016:	dd15      	ble.n	404044 <_svfprintf_r+0x9a8>
  404018:	3301      	adds	r3, #1
  40401a:	3110      	adds	r1, #16
  40401c:	2b07      	cmp	r3, #7
  40401e:	9127      	str	r1, [sp, #156]	; 0x9c
  404020:	9326      	str	r3, [sp, #152]	; 0x98
  404022:	e882 0840 	stmia.w	r2, {r6, fp}
  404026:	ddf2      	ble.n	40400e <_svfprintf_r+0x972>
  404028:	aa25      	add	r2, sp, #148	; 0x94
  40402a:	4629      	mov	r1, r5
  40402c:	4620      	mov	r0, r4
  40402e:	f003 fff1 	bl	408014 <__ssprint_r>
  404032:	2800      	cmp	r0, #0
  404034:	f47f ac04 	bne.w	403840 <_svfprintf_r+0x1a4>
  404038:	3f10      	subs	r7, #16
  40403a:	2f10      	cmp	r7, #16
  40403c:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40403e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404040:	464a      	mov	r2, r9
  404042:	dce9      	bgt.n	404018 <_svfprintf_r+0x97c>
  404044:	4635      	mov	r5, r6
  404046:	460c      	mov	r4, r1
  404048:	4646      	mov	r6, r8
  40404a:	4690      	mov	r8, r2
  40404c:	3301      	adds	r3, #1
  40404e:	443c      	add	r4, r7
  404050:	2b07      	cmp	r3, #7
  404052:	9427      	str	r4, [sp, #156]	; 0x9c
  404054:	9326      	str	r3, [sp, #152]	; 0x98
  404056:	e888 00a0 	stmia.w	r8, {r5, r7}
  40405a:	f300 8232 	bgt.w	4044c2 <_svfprintf_r+0xe26>
  40405e:	f108 0808 	add.w	r8, r8, #8
  404062:	e4ac      	b.n	4039be <_svfprintf_r+0x322>
  404064:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404066:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404068:	2b01      	cmp	r3, #1
  40406a:	f340 81fe 	ble.w	40446a <_svfprintf_r+0xdce>
  40406e:	3701      	adds	r7, #1
  404070:	3401      	adds	r4, #1
  404072:	2301      	movs	r3, #1
  404074:	2f07      	cmp	r7, #7
  404076:	9427      	str	r4, [sp, #156]	; 0x9c
  404078:	9726      	str	r7, [sp, #152]	; 0x98
  40407a:	f8c8 6000 	str.w	r6, [r8]
  40407e:	f8c8 3004 	str.w	r3, [r8, #4]
  404082:	f300 8203 	bgt.w	40448c <_svfprintf_r+0xdf0>
  404086:	f108 0808 	add.w	r8, r8, #8
  40408a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40408c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40408e:	f8c8 3000 	str.w	r3, [r8]
  404092:	3701      	adds	r7, #1
  404094:	4414      	add	r4, r2
  404096:	2f07      	cmp	r7, #7
  404098:	9427      	str	r4, [sp, #156]	; 0x9c
  40409a:	9726      	str	r7, [sp, #152]	; 0x98
  40409c:	f8c8 2004 	str.w	r2, [r8, #4]
  4040a0:	f300 8200 	bgt.w	4044a4 <_svfprintf_r+0xe08>
  4040a4:	f108 0808 	add.w	r8, r8, #8
  4040a8:	a815      	add	r0, sp, #84	; 0x54
  4040aa:	c80d      	ldmia	r0, {r0, r2, r3}
  4040ac:	9914      	ldr	r1, [sp, #80]	; 0x50
  4040ae:	f004 fe4d 	bl	408d4c <__aeabi_dcmpeq>
  4040b2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4040b4:	2800      	cmp	r0, #0
  4040b6:	f040 8101 	bne.w	4042bc <_svfprintf_r+0xc20>
  4040ba:	3b01      	subs	r3, #1
  4040bc:	3701      	adds	r7, #1
  4040be:	3601      	adds	r6, #1
  4040c0:	441c      	add	r4, r3
  4040c2:	2f07      	cmp	r7, #7
  4040c4:	9726      	str	r7, [sp, #152]	; 0x98
  4040c6:	9427      	str	r4, [sp, #156]	; 0x9c
  4040c8:	f8c8 6000 	str.w	r6, [r8]
  4040cc:	f8c8 3004 	str.w	r3, [r8, #4]
  4040d0:	f300 8127 	bgt.w	404322 <_svfprintf_r+0xc86>
  4040d4:	f108 0808 	add.w	r8, r8, #8
  4040d8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  4040da:	f8c8 2004 	str.w	r2, [r8, #4]
  4040de:	3701      	adds	r7, #1
  4040e0:	4414      	add	r4, r2
  4040e2:	ab21      	add	r3, sp, #132	; 0x84
  4040e4:	2f07      	cmp	r7, #7
  4040e6:	9427      	str	r4, [sp, #156]	; 0x9c
  4040e8:	9726      	str	r7, [sp, #152]	; 0x98
  4040ea:	f8c8 3000 	str.w	r3, [r8]
  4040ee:	f77f acb3 	ble.w	403a58 <_svfprintf_r+0x3bc>
  4040f2:	aa25      	add	r2, sp, #148	; 0x94
  4040f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4040f6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4040f8:	f003 ff8c 	bl	408014 <__ssprint_r>
  4040fc:	2800      	cmp	r0, #0
  4040fe:	f47f ab9f 	bne.w	403840 <_svfprintf_r+0x1a4>
  404102:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404104:	46c8      	mov	r8, r9
  404106:	e4a9      	b.n	403a5c <_svfprintf_r+0x3c0>
  404108:	aa25      	add	r2, sp, #148	; 0x94
  40410a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40410c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40410e:	f003 ff81 	bl	408014 <__ssprint_r>
  404112:	2800      	cmp	r0, #0
  404114:	f43f aceb 	beq.w	403aee <_svfprintf_r+0x452>
  404118:	f7ff bb92 	b.w	403840 <_svfprintf_r+0x1a4>
  40411c:	f8dd b01c 	ldr.w	fp, [sp, #28]
  404120:	2b01      	cmp	r3, #1
  404122:	f000 8134 	beq.w	40438e <_svfprintf_r+0xcf2>
  404126:	2b02      	cmp	r3, #2
  404128:	d125      	bne.n	404176 <_svfprintf_r+0xada>
  40412a:	f8cd b01c 	str.w	fp, [sp, #28]
  40412e:	2400      	movs	r4, #0
  404130:	2500      	movs	r5, #0
  404132:	e61e      	b.n	403d72 <_svfprintf_r+0x6d6>
  404134:	aa25      	add	r2, sp, #148	; 0x94
  404136:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404138:	980c      	ldr	r0, [sp, #48]	; 0x30
  40413a:	f003 ff6b 	bl	408014 <__ssprint_r>
  40413e:	2800      	cmp	r0, #0
  404140:	f47f ab7e 	bne.w	403840 <_svfprintf_r+0x1a4>
  404144:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404146:	46c8      	mov	r8, r9
  404148:	e475      	b.n	403a36 <_svfprintf_r+0x39a>
  40414a:	aa25      	add	r2, sp, #148	; 0x94
  40414c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40414e:	980c      	ldr	r0, [sp, #48]	; 0x30
  404150:	f003 ff60 	bl	408014 <__ssprint_r>
  404154:	2800      	cmp	r0, #0
  404156:	f47f ab73 	bne.w	403840 <_svfprintf_r+0x1a4>
  40415a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40415c:	46c8      	mov	r8, r9
  40415e:	e41b      	b.n	403998 <_svfprintf_r+0x2fc>
  404160:	aa25      	add	r2, sp, #148	; 0x94
  404162:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404164:	980c      	ldr	r0, [sp, #48]	; 0x30
  404166:	f003 ff55 	bl	408014 <__ssprint_r>
  40416a:	2800      	cmp	r0, #0
  40416c:	f47f ab68 	bne.w	403840 <_svfprintf_r+0x1a4>
  404170:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404172:	46c8      	mov	r8, r9
  404174:	e420      	b.n	4039b8 <_svfprintf_r+0x31c>
  404176:	f8cd b01c 	str.w	fp, [sp, #28]
  40417a:	2400      	movs	r4, #0
  40417c:	2500      	movs	r5, #0
  40417e:	4649      	mov	r1, r9
  404180:	e000      	b.n	404184 <_svfprintf_r+0xae8>
  404182:	4631      	mov	r1, r6
  404184:	08e2      	lsrs	r2, r4, #3
  404186:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40418a:	08e8      	lsrs	r0, r5, #3
  40418c:	f004 0307 	and.w	r3, r4, #7
  404190:	4605      	mov	r5, r0
  404192:	4614      	mov	r4, r2
  404194:	3330      	adds	r3, #48	; 0x30
  404196:	ea54 0205 	orrs.w	r2, r4, r5
  40419a:	f801 3c01 	strb.w	r3, [r1, #-1]
  40419e:	f101 36ff 	add.w	r6, r1, #4294967295
  4041a2:	d1ee      	bne.n	404182 <_svfprintf_r+0xae6>
  4041a4:	9a07      	ldr	r2, [sp, #28]
  4041a6:	07d2      	lsls	r2, r2, #31
  4041a8:	f57f adf3 	bpl.w	403d92 <_svfprintf_r+0x6f6>
  4041ac:	2b30      	cmp	r3, #48	; 0x30
  4041ae:	f43f adf0 	beq.w	403d92 <_svfprintf_r+0x6f6>
  4041b2:	3902      	subs	r1, #2
  4041b4:	2330      	movs	r3, #48	; 0x30
  4041b6:	f806 3c01 	strb.w	r3, [r6, #-1]
  4041ba:	eba9 0301 	sub.w	r3, r9, r1
  4041be:	930e      	str	r3, [sp, #56]	; 0x38
  4041c0:	460e      	mov	r6, r1
  4041c2:	f7ff bb7b 	b.w	4038bc <_svfprintf_r+0x220>
  4041c6:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4041c8:	2900      	cmp	r1, #0
  4041ca:	f340 822e 	ble.w	40462a <_svfprintf_r+0xf8e>
  4041ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4041d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4041d2:	4293      	cmp	r3, r2
  4041d4:	bfa8      	it	ge
  4041d6:	4613      	movge	r3, r2
  4041d8:	2b00      	cmp	r3, #0
  4041da:	461f      	mov	r7, r3
  4041dc:	dd0d      	ble.n	4041fa <_svfprintf_r+0xb5e>
  4041de:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4041e0:	f8c8 6000 	str.w	r6, [r8]
  4041e4:	3301      	adds	r3, #1
  4041e6:	443c      	add	r4, r7
  4041e8:	2b07      	cmp	r3, #7
  4041ea:	9427      	str	r4, [sp, #156]	; 0x9c
  4041ec:	f8c8 7004 	str.w	r7, [r8, #4]
  4041f0:	9326      	str	r3, [sp, #152]	; 0x98
  4041f2:	f300 831f 	bgt.w	404834 <_svfprintf_r+0x1198>
  4041f6:	f108 0808 	add.w	r8, r8, #8
  4041fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4041fc:	2f00      	cmp	r7, #0
  4041fe:	bfa8      	it	ge
  404200:	1bdb      	subge	r3, r3, r7
  404202:	2b00      	cmp	r3, #0
  404204:	461f      	mov	r7, r3
  404206:	f340 80d6 	ble.w	4043b6 <_svfprintf_r+0xd1a>
  40420a:	2f10      	cmp	r7, #16
  40420c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40420e:	4d31      	ldr	r5, [pc, #196]	; (4042d4 <_svfprintf_r+0xc38>)
  404210:	f340 81ed 	ble.w	4045ee <_svfprintf_r+0xf52>
  404214:	4642      	mov	r2, r8
  404216:	4621      	mov	r1, r4
  404218:	46b0      	mov	r8, r6
  40421a:	f04f 0b10 	mov.w	fp, #16
  40421e:	462e      	mov	r6, r5
  404220:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404222:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404224:	e004      	b.n	404230 <_svfprintf_r+0xb94>
  404226:	3208      	adds	r2, #8
  404228:	3f10      	subs	r7, #16
  40422a:	2f10      	cmp	r7, #16
  40422c:	f340 81db 	ble.w	4045e6 <_svfprintf_r+0xf4a>
  404230:	3301      	adds	r3, #1
  404232:	3110      	adds	r1, #16
  404234:	2b07      	cmp	r3, #7
  404236:	9127      	str	r1, [sp, #156]	; 0x9c
  404238:	9326      	str	r3, [sp, #152]	; 0x98
  40423a:	e882 0840 	stmia.w	r2, {r6, fp}
  40423e:	ddf2      	ble.n	404226 <_svfprintf_r+0xb8a>
  404240:	aa25      	add	r2, sp, #148	; 0x94
  404242:	4629      	mov	r1, r5
  404244:	4620      	mov	r0, r4
  404246:	f003 fee5 	bl	408014 <__ssprint_r>
  40424a:	2800      	cmp	r0, #0
  40424c:	f47f aaf8 	bne.w	403840 <_svfprintf_r+0x1a4>
  404250:	9927      	ldr	r1, [sp, #156]	; 0x9c
  404252:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404254:	464a      	mov	r2, r9
  404256:	e7e7      	b.n	404228 <_svfprintf_r+0xb8c>
  404258:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40425a:	930e      	str	r3, [sp, #56]	; 0x38
  40425c:	464e      	mov	r6, r9
  40425e:	f7ff bb2d 	b.w	4038bc <_svfprintf_r+0x220>
  404262:	2d00      	cmp	r5, #0
  404264:	bf08      	it	eq
  404266:	2c0a      	cmpeq	r4, #10
  404268:	f0c0 808f 	bcc.w	40438a <_svfprintf_r+0xcee>
  40426c:	464e      	mov	r6, r9
  40426e:	4620      	mov	r0, r4
  404270:	4629      	mov	r1, r5
  404272:	220a      	movs	r2, #10
  404274:	2300      	movs	r3, #0
  404276:	f004 fdd9 	bl	408e2c <__aeabi_uldivmod>
  40427a:	3230      	adds	r2, #48	; 0x30
  40427c:	f806 2d01 	strb.w	r2, [r6, #-1]!
  404280:	4620      	mov	r0, r4
  404282:	4629      	mov	r1, r5
  404284:	2300      	movs	r3, #0
  404286:	220a      	movs	r2, #10
  404288:	f004 fdd0 	bl	408e2c <__aeabi_uldivmod>
  40428c:	4604      	mov	r4, r0
  40428e:	460d      	mov	r5, r1
  404290:	ea54 0305 	orrs.w	r3, r4, r5
  404294:	d1eb      	bne.n	40426e <_svfprintf_r+0xbd2>
  404296:	eba9 0306 	sub.w	r3, r9, r6
  40429a:	930e      	str	r3, [sp, #56]	; 0x38
  40429c:	f7ff bb0e 	b.w	4038bc <_svfprintf_r+0x220>
  4042a0:	aa25      	add	r2, sp, #148	; 0x94
  4042a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4042a4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4042a6:	f003 feb5 	bl	408014 <__ssprint_r>
  4042aa:	2800      	cmp	r0, #0
  4042ac:	f47f aac8 	bne.w	403840 <_svfprintf_r+0x1a4>
  4042b0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4042b4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4042b6:	46c8      	mov	r8, r9
  4042b8:	f7ff bb5e 	b.w	403978 <_svfprintf_r+0x2dc>
  4042bc:	1e5e      	subs	r6, r3, #1
  4042be:	2e00      	cmp	r6, #0
  4042c0:	f77f af0a 	ble.w	4040d8 <_svfprintf_r+0xa3c>
  4042c4:	2e10      	cmp	r6, #16
  4042c6:	4d03      	ldr	r5, [pc, #12]	; (4042d4 <_svfprintf_r+0xc38>)
  4042c8:	dd22      	ble.n	404310 <_svfprintf_r+0xc74>
  4042ca:	4622      	mov	r2, r4
  4042cc:	f04f 0b10 	mov.w	fp, #16
  4042d0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4042d2:	e006      	b.n	4042e2 <_svfprintf_r+0xc46>
  4042d4:	00409a00 	.word	0x00409a00
  4042d8:	3e10      	subs	r6, #16
  4042da:	2e10      	cmp	r6, #16
  4042dc:	f108 0808 	add.w	r8, r8, #8
  4042e0:	dd15      	ble.n	40430e <_svfprintf_r+0xc72>
  4042e2:	3701      	adds	r7, #1
  4042e4:	3210      	adds	r2, #16
  4042e6:	2f07      	cmp	r7, #7
  4042e8:	9227      	str	r2, [sp, #156]	; 0x9c
  4042ea:	9726      	str	r7, [sp, #152]	; 0x98
  4042ec:	e888 0820 	stmia.w	r8, {r5, fp}
  4042f0:	ddf2      	ble.n	4042d8 <_svfprintf_r+0xc3c>
  4042f2:	aa25      	add	r2, sp, #148	; 0x94
  4042f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4042f6:	4620      	mov	r0, r4
  4042f8:	f003 fe8c 	bl	408014 <__ssprint_r>
  4042fc:	2800      	cmp	r0, #0
  4042fe:	f47f aa9f 	bne.w	403840 <_svfprintf_r+0x1a4>
  404302:	3e10      	subs	r6, #16
  404304:	2e10      	cmp	r6, #16
  404306:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404308:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40430a:	46c8      	mov	r8, r9
  40430c:	dce9      	bgt.n	4042e2 <_svfprintf_r+0xc46>
  40430e:	4614      	mov	r4, r2
  404310:	3701      	adds	r7, #1
  404312:	4434      	add	r4, r6
  404314:	2f07      	cmp	r7, #7
  404316:	9427      	str	r4, [sp, #156]	; 0x9c
  404318:	9726      	str	r7, [sp, #152]	; 0x98
  40431a:	e888 0060 	stmia.w	r8, {r5, r6}
  40431e:	f77f aed9 	ble.w	4040d4 <_svfprintf_r+0xa38>
  404322:	aa25      	add	r2, sp, #148	; 0x94
  404324:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404326:	980c      	ldr	r0, [sp, #48]	; 0x30
  404328:	f003 fe74 	bl	408014 <__ssprint_r>
  40432c:	2800      	cmp	r0, #0
  40432e:	f47f aa87 	bne.w	403840 <_svfprintf_r+0x1a4>
  404332:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404334:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404336:	46c8      	mov	r8, r9
  404338:	e6ce      	b.n	4040d8 <_svfprintf_r+0xa3c>
  40433a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40433c:	6814      	ldr	r4, [r2, #0]
  40433e:	4613      	mov	r3, r2
  404340:	3304      	adds	r3, #4
  404342:	17e5      	asrs	r5, r4, #31
  404344:	930f      	str	r3, [sp, #60]	; 0x3c
  404346:	4622      	mov	r2, r4
  404348:	462b      	mov	r3, r5
  40434a:	e4fa      	b.n	403d42 <_svfprintf_r+0x6a6>
  40434c:	3204      	adds	r2, #4
  40434e:	681c      	ldr	r4, [r3, #0]
  404350:	920f      	str	r2, [sp, #60]	; 0x3c
  404352:	2301      	movs	r3, #1
  404354:	2500      	movs	r5, #0
  404356:	f7ff ba94 	b.w	403882 <_svfprintf_r+0x1e6>
  40435a:	681c      	ldr	r4, [r3, #0]
  40435c:	3304      	adds	r3, #4
  40435e:	930f      	str	r3, [sp, #60]	; 0x3c
  404360:	2500      	movs	r5, #0
  404362:	e421      	b.n	403ba8 <_svfprintf_r+0x50c>
  404364:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404366:	460a      	mov	r2, r1
  404368:	3204      	adds	r2, #4
  40436a:	680c      	ldr	r4, [r1, #0]
  40436c:	920f      	str	r2, [sp, #60]	; 0x3c
  40436e:	2500      	movs	r5, #0
  404370:	f7ff ba87 	b.w	403882 <_svfprintf_r+0x1e6>
  404374:	4614      	mov	r4, r2
  404376:	3301      	adds	r3, #1
  404378:	4434      	add	r4, r6
  40437a:	2b07      	cmp	r3, #7
  40437c:	9427      	str	r4, [sp, #156]	; 0x9c
  40437e:	9326      	str	r3, [sp, #152]	; 0x98
  404380:	e888 0060 	stmia.w	r8, {r5, r6}
  404384:	f77f ab68 	ble.w	403a58 <_svfprintf_r+0x3bc>
  404388:	e6b3      	b.n	4040f2 <_svfprintf_r+0xa56>
  40438a:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40438e:	f8cd b01c 	str.w	fp, [sp, #28]
  404392:	ae42      	add	r6, sp, #264	; 0x108
  404394:	3430      	adds	r4, #48	; 0x30
  404396:	2301      	movs	r3, #1
  404398:	f806 4d41 	strb.w	r4, [r6, #-65]!
  40439c:	930e      	str	r3, [sp, #56]	; 0x38
  40439e:	f7ff ba8d 	b.w	4038bc <_svfprintf_r+0x220>
  4043a2:	aa25      	add	r2, sp, #148	; 0x94
  4043a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4043a6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4043a8:	f003 fe34 	bl	408014 <__ssprint_r>
  4043ac:	2800      	cmp	r0, #0
  4043ae:	f47f aa47 	bne.w	403840 <_svfprintf_r+0x1a4>
  4043b2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4043b4:	46c8      	mov	r8, r9
  4043b6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4043b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4043ba:	429a      	cmp	r2, r3
  4043bc:	db44      	blt.n	404448 <_svfprintf_r+0xdac>
  4043be:	9b07      	ldr	r3, [sp, #28]
  4043c0:	07d9      	lsls	r1, r3, #31
  4043c2:	d441      	bmi.n	404448 <_svfprintf_r+0xdac>
  4043c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4043c6:	9812      	ldr	r0, [sp, #72]	; 0x48
  4043c8:	1a9a      	subs	r2, r3, r2
  4043ca:	1a1d      	subs	r5, r3, r0
  4043cc:	4295      	cmp	r5, r2
  4043ce:	bfa8      	it	ge
  4043d0:	4615      	movge	r5, r2
  4043d2:	2d00      	cmp	r5, #0
  4043d4:	dd0e      	ble.n	4043f4 <_svfprintf_r+0xd58>
  4043d6:	9926      	ldr	r1, [sp, #152]	; 0x98
  4043d8:	f8c8 5004 	str.w	r5, [r8, #4]
  4043dc:	3101      	adds	r1, #1
  4043de:	4406      	add	r6, r0
  4043e0:	442c      	add	r4, r5
  4043e2:	2907      	cmp	r1, #7
  4043e4:	f8c8 6000 	str.w	r6, [r8]
  4043e8:	9427      	str	r4, [sp, #156]	; 0x9c
  4043ea:	9126      	str	r1, [sp, #152]	; 0x98
  4043ec:	f300 823b 	bgt.w	404866 <_svfprintf_r+0x11ca>
  4043f0:	f108 0808 	add.w	r8, r8, #8
  4043f4:	2d00      	cmp	r5, #0
  4043f6:	bfac      	ite	ge
  4043f8:	1b56      	subge	r6, r2, r5
  4043fa:	4616      	movlt	r6, r2
  4043fc:	2e00      	cmp	r6, #0
  4043fe:	f77f ab2d 	ble.w	403a5c <_svfprintf_r+0x3c0>
  404402:	2e10      	cmp	r6, #16
  404404:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404406:	4db0      	ldr	r5, [pc, #704]	; (4046c8 <_svfprintf_r+0x102c>)
  404408:	ddb5      	ble.n	404376 <_svfprintf_r+0xcda>
  40440a:	4622      	mov	r2, r4
  40440c:	2710      	movs	r7, #16
  40440e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  404412:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  404414:	e004      	b.n	404420 <_svfprintf_r+0xd84>
  404416:	f108 0808 	add.w	r8, r8, #8
  40441a:	3e10      	subs	r6, #16
  40441c:	2e10      	cmp	r6, #16
  40441e:	dda9      	ble.n	404374 <_svfprintf_r+0xcd8>
  404420:	3301      	adds	r3, #1
  404422:	3210      	adds	r2, #16
  404424:	2b07      	cmp	r3, #7
  404426:	9227      	str	r2, [sp, #156]	; 0x9c
  404428:	9326      	str	r3, [sp, #152]	; 0x98
  40442a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40442e:	ddf2      	ble.n	404416 <_svfprintf_r+0xd7a>
  404430:	aa25      	add	r2, sp, #148	; 0x94
  404432:	4621      	mov	r1, r4
  404434:	4658      	mov	r0, fp
  404436:	f003 fded 	bl	408014 <__ssprint_r>
  40443a:	2800      	cmp	r0, #0
  40443c:	f47f aa00 	bne.w	403840 <_svfprintf_r+0x1a4>
  404440:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404442:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404444:	46c8      	mov	r8, r9
  404446:	e7e8      	b.n	40441a <_svfprintf_r+0xd7e>
  404448:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40444a:	9819      	ldr	r0, [sp, #100]	; 0x64
  40444c:	991a      	ldr	r1, [sp, #104]	; 0x68
  40444e:	f8c8 1000 	str.w	r1, [r8]
  404452:	3301      	adds	r3, #1
  404454:	4404      	add	r4, r0
  404456:	2b07      	cmp	r3, #7
  404458:	9427      	str	r4, [sp, #156]	; 0x9c
  40445a:	f8c8 0004 	str.w	r0, [r8, #4]
  40445e:	9326      	str	r3, [sp, #152]	; 0x98
  404460:	f300 81f5 	bgt.w	40484e <_svfprintf_r+0x11b2>
  404464:	f108 0808 	add.w	r8, r8, #8
  404468:	e7ac      	b.n	4043c4 <_svfprintf_r+0xd28>
  40446a:	9b07      	ldr	r3, [sp, #28]
  40446c:	07da      	lsls	r2, r3, #31
  40446e:	f53f adfe 	bmi.w	40406e <_svfprintf_r+0x9d2>
  404472:	3701      	adds	r7, #1
  404474:	3401      	adds	r4, #1
  404476:	2301      	movs	r3, #1
  404478:	2f07      	cmp	r7, #7
  40447a:	9427      	str	r4, [sp, #156]	; 0x9c
  40447c:	9726      	str	r7, [sp, #152]	; 0x98
  40447e:	f8c8 6000 	str.w	r6, [r8]
  404482:	f8c8 3004 	str.w	r3, [r8, #4]
  404486:	f77f ae25 	ble.w	4040d4 <_svfprintf_r+0xa38>
  40448a:	e74a      	b.n	404322 <_svfprintf_r+0xc86>
  40448c:	aa25      	add	r2, sp, #148	; 0x94
  40448e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404490:	980c      	ldr	r0, [sp, #48]	; 0x30
  404492:	f003 fdbf 	bl	408014 <__ssprint_r>
  404496:	2800      	cmp	r0, #0
  404498:	f47f a9d2 	bne.w	403840 <_svfprintf_r+0x1a4>
  40449c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40449e:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4044a0:	46c8      	mov	r8, r9
  4044a2:	e5f2      	b.n	40408a <_svfprintf_r+0x9ee>
  4044a4:	aa25      	add	r2, sp, #148	; 0x94
  4044a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4044a8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4044aa:	f003 fdb3 	bl	408014 <__ssprint_r>
  4044ae:	2800      	cmp	r0, #0
  4044b0:	f47f a9c6 	bne.w	403840 <_svfprintf_r+0x1a4>
  4044b4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4044b6:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4044b8:	46c8      	mov	r8, r9
  4044ba:	e5f5      	b.n	4040a8 <_svfprintf_r+0xa0c>
  4044bc:	464e      	mov	r6, r9
  4044be:	f7ff b9fd 	b.w	4038bc <_svfprintf_r+0x220>
  4044c2:	aa25      	add	r2, sp, #148	; 0x94
  4044c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4044c6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4044c8:	f003 fda4 	bl	408014 <__ssprint_r>
  4044cc:	2800      	cmp	r0, #0
  4044ce:	f47f a9b7 	bne.w	403840 <_svfprintf_r+0x1a4>
  4044d2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4044d4:	46c8      	mov	r8, r9
  4044d6:	f7ff ba72 	b.w	4039be <_svfprintf_r+0x322>
  4044da:	9c15      	ldr	r4, [sp, #84]	; 0x54
  4044dc:	4622      	mov	r2, r4
  4044de:	4620      	mov	r0, r4
  4044e0:	9c14      	ldr	r4, [sp, #80]	; 0x50
  4044e2:	4623      	mov	r3, r4
  4044e4:	4621      	mov	r1, r4
  4044e6:	f004 fc63 	bl	408db0 <__aeabi_dcmpun>
  4044ea:	2800      	cmp	r0, #0
  4044ec:	f040 8286 	bne.w	4049fc <_svfprintf_r+0x1360>
  4044f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4044f2:	3301      	adds	r3, #1
  4044f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4044f6:	f023 0320 	bic.w	r3, r3, #32
  4044fa:	930e      	str	r3, [sp, #56]	; 0x38
  4044fc:	f000 81e2 	beq.w	4048c4 <_svfprintf_r+0x1228>
  404500:	2b47      	cmp	r3, #71	; 0x47
  404502:	f000 811e 	beq.w	404742 <_svfprintf_r+0x10a6>
  404506:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  40450a:	9307      	str	r3, [sp, #28]
  40450c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40450e:	1e1f      	subs	r7, r3, #0
  404510:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404512:	9308      	str	r3, [sp, #32]
  404514:	bfbb      	ittet	lt
  404516:	463b      	movlt	r3, r7
  404518:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  40451c:	2300      	movge	r3, #0
  40451e:	232d      	movlt	r3, #45	; 0x2d
  404520:	9310      	str	r3, [sp, #64]	; 0x40
  404522:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404524:	2b66      	cmp	r3, #102	; 0x66
  404526:	f000 81bb 	beq.w	4048a0 <_svfprintf_r+0x1204>
  40452a:	2b46      	cmp	r3, #70	; 0x46
  40452c:	f000 80df 	beq.w	4046ee <_svfprintf_r+0x1052>
  404530:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404532:	9a08      	ldr	r2, [sp, #32]
  404534:	2b45      	cmp	r3, #69	; 0x45
  404536:	bf0c      	ite	eq
  404538:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  40453a:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  40453c:	a823      	add	r0, sp, #140	; 0x8c
  40453e:	a920      	add	r1, sp, #128	; 0x80
  404540:	bf08      	it	eq
  404542:	1c5d      	addeq	r5, r3, #1
  404544:	9004      	str	r0, [sp, #16]
  404546:	9103      	str	r1, [sp, #12]
  404548:	a81f      	add	r0, sp, #124	; 0x7c
  40454a:	2102      	movs	r1, #2
  40454c:	463b      	mov	r3, r7
  40454e:	9002      	str	r0, [sp, #8]
  404550:	9501      	str	r5, [sp, #4]
  404552:	9100      	str	r1, [sp, #0]
  404554:	980c      	ldr	r0, [sp, #48]	; 0x30
  404556:	f001 faa3 	bl	405aa0 <_dtoa_r>
  40455a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40455c:	2b67      	cmp	r3, #103	; 0x67
  40455e:	4606      	mov	r6, r0
  404560:	f040 81e0 	bne.w	404924 <_svfprintf_r+0x1288>
  404564:	f01b 0f01 	tst.w	fp, #1
  404568:	f000 8246 	beq.w	4049f8 <_svfprintf_r+0x135c>
  40456c:	1974      	adds	r4, r6, r5
  40456e:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404570:	9808      	ldr	r0, [sp, #32]
  404572:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404574:	4639      	mov	r1, r7
  404576:	f004 fbe9 	bl	408d4c <__aeabi_dcmpeq>
  40457a:	2800      	cmp	r0, #0
  40457c:	f040 8165 	bne.w	40484a <_svfprintf_r+0x11ae>
  404580:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404582:	42a3      	cmp	r3, r4
  404584:	d206      	bcs.n	404594 <_svfprintf_r+0xef8>
  404586:	2130      	movs	r1, #48	; 0x30
  404588:	1c5a      	adds	r2, r3, #1
  40458a:	9223      	str	r2, [sp, #140]	; 0x8c
  40458c:	7019      	strb	r1, [r3, #0]
  40458e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404590:	429c      	cmp	r4, r3
  404592:	d8f9      	bhi.n	404588 <_svfprintf_r+0xeec>
  404594:	1b9b      	subs	r3, r3, r6
  404596:	9313      	str	r3, [sp, #76]	; 0x4c
  404598:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40459a:	2b47      	cmp	r3, #71	; 0x47
  40459c:	f000 80e9 	beq.w	404772 <_svfprintf_r+0x10d6>
  4045a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4045a2:	2b65      	cmp	r3, #101	; 0x65
  4045a4:	f340 81cd 	ble.w	404942 <_svfprintf_r+0x12a6>
  4045a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4045aa:	2b66      	cmp	r3, #102	; 0x66
  4045ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4045ae:	9312      	str	r3, [sp, #72]	; 0x48
  4045b0:	f000 819e 	beq.w	4048f0 <_svfprintf_r+0x1254>
  4045b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4045b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4045b8:	4619      	mov	r1, r3
  4045ba:	4291      	cmp	r1, r2
  4045bc:	f300 818a 	bgt.w	4048d4 <_svfprintf_r+0x1238>
  4045c0:	f01b 0f01 	tst.w	fp, #1
  4045c4:	f040 8213 	bne.w	4049ee <_svfprintf_r+0x1352>
  4045c8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  4045cc:	9308      	str	r3, [sp, #32]
  4045ce:	2367      	movs	r3, #103	; 0x67
  4045d0:	920e      	str	r2, [sp, #56]	; 0x38
  4045d2:	9311      	str	r3, [sp, #68]	; 0x44
  4045d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4045d6:	2b00      	cmp	r3, #0
  4045d8:	f040 80c4 	bne.w	404764 <_svfprintf_r+0x10c8>
  4045dc:	930a      	str	r3, [sp, #40]	; 0x28
  4045de:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4045e2:	f7ff b973 	b.w	4038cc <_svfprintf_r+0x230>
  4045e6:	4635      	mov	r5, r6
  4045e8:	460c      	mov	r4, r1
  4045ea:	4646      	mov	r6, r8
  4045ec:	4690      	mov	r8, r2
  4045ee:	3301      	adds	r3, #1
  4045f0:	443c      	add	r4, r7
  4045f2:	2b07      	cmp	r3, #7
  4045f4:	9427      	str	r4, [sp, #156]	; 0x9c
  4045f6:	9326      	str	r3, [sp, #152]	; 0x98
  4045f8:	e888 00a0 	stmia.w	r8, {r5, r7}
  4045fc:	f73f aed1 	bgt.w	4043a2 <_svfprintf_r+0xd06>
  404600:	f108 0808 	add.w	r8, r8, #8
  404604:	e6d7      	b.n	4043b6 <_svfprintf_r+0xd1a>
  404606:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404608:	6813      	ldr	r3, [r2, #0]
  40460a:	3204      	adds	r2, #4
  40460c:	920f      	str	r2, [sp, #60]	; 0x3c
  40460e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404610:	601a      	str	r2, [r3, #0]
  404612:	f7ff b86a 	b.w	4036ea <_svfprintf_r+0x4e>
  404616:	aa25      	add	r2, sp, #148	; 0x94
  404618:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40461a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40461c:	f003 fcfa 	bl	408014 <__ssprint_r>
  404620:	2800      	cmp	r0, #0
  404622:	f47f a90d 	bne.w	403840 <_svfprintf_r+0x1a4>
  404626:	46c8      	mov	r8, r9
  404628:	e48d      	b.n	403f46 <_svfprintf_r+0x8aa>
  40462a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40462c:	4a27      	ldr	r2, [pc, #156]	; (4046cc <_svfprintf_r+0x1030>)
  40462e:	f8c8 2000 	str.w	r2, [r8]
  404632:	3301      	adds	r3, #1
  404634:	3401      	adds	r4, #1
  404636:	2201      	movs	r2, #1
  404638:	2b07      	cmp	r3, #7
  40463a:	9427      	str	r4, [sp, #156]	; 0x9c
  40463c:	9326      	str	r3, [sp, #152]	; 0x98
  40463e:	f8c8 2004 	str.w	r2, [r8, #4]
  404642:	dc72      	bgt.n	40472a <_svfprintf_r+0x108e>
  404644:	f108 0808 	add.w	r8, r8, #8
  404648:	b929      	cbnz	r1, 404656 <_svfprintf_r+0xfba>
  40464a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40464c:	b91b      	cbnz	r3, 404656 <_svfprintf_r+0xfba>
  40464e:	9b07      	ldr	r3, [sp, #28]
  404650:	07d8      	lsls	r0, r3, #31
  404652:	f57f aa03 	bpl.w	403a5c <_svfprintf_r+0x3c0>
  404656:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404658:	9819      	ldr	r0, [sp, #100]	; 0x64
  40465a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40465c:	f8c8 2000 	str.w	r2, [r8]
  404660:	3301      	adds	r3, #1
  404662:	4602      	mov	r2, r0
  404664:	4422      	add	r2, r4
  404666:	2b07      	cmp	r3, #7
  404668:	9227      	str	r2, [sp, #156]	; 0x9c
  40466a:	f8c8 0004 	str.w	r0, [r8, #4]
  40466e:	9326      	str	r3, [sp, #152]	; 0x98
  404670:	f300 818d 	bgt.w	40498e <_svfprintf_r+0x12f2>
  404674:	f108 0808 	add.w	r8, r8, #8
  404678:	2900      	cmp	r1, #0
  40467a:	f2c0 8165 	blt.w	404948 <_svfprintf_r+0x12ac>
  40467e:	9913      	ldr	r1, [sp, #76]	; 0x4c
  404680:	f8c8 6000 	str.w	r6, [r8]
  404684:	3301      	adds	r3, #1
  404686:	188c      	adds	r4, r1, r2
  404688:	2b07      	cmp	r3, #7
  40468a:	9427      	str	r4, [sp, #156]	; 0x9c
  40468c:	9326      	str	r3, [sp, #152]	; 0x98
  40468e:	f8c8 1004 	str.w	r1, [r8, #4]
  404692:	f77f a9e1 	ble.w	403a58 <_svfprintf_r+0x3bc>
  404696:	e52c      	b.n	4040f2 <_svfprintf_r+0xa56>
  404698:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40469a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40469c:	6813      	ldr	r3, [r2, #0]
  40469e:	17cd      	asrs	r5, r1, #31
  4046a0:	4608      	mov	r0, r1
  4046a2:	3204      	adds	r2, #4
  4046a4:	4629      	mov	r1, r5
  4046a6:	920f      	str	r2, [sp, #60]	; 0x3c
  4046a8:	e9c3 0100 	strd	r0, r1, [r3]
  4046ac:	f7ff b81d 	b.w	4036ea <_svfprintf_r+0x4e>
  4046b0:	aa25      	add	r2, sp, #148	; 0x94
  4046b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4046b4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4046b6:	f003 fcad 	bl	408014 <__ssprint_r>
  4046ba:	2800      	cmp	r0, #0
  4046bc:	f47f a8c0 	bne.w	403840 <_svfprintf_r+0x1a4>
  4046c0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4046c2:	46c8      	mov	r8, r9
  4046c4:	e458      	b.n	403f78 <_svfprintf_r+0x8dc>
  4046c6:	bf00      	nop
  4046c8:	00409a00 	.word	0x00409a00
  4046cc:	004099ec 	.word	0x004099ec
  4046d0:	2140      	movs	r1, #64	; 0x40
  4046d2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4046d4:	f7fe fadc 	bl	402c90 <_malloc_r>
  4046d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4046da:	6010      	str	r0, [r2, #0]
  4046dc:	6110      	str	r0, [r2, #16]
  4046de:	2800      	cmp	r0, #0
  4046e0:	f000 81f2 	beq.w	404ac8 <_svfprintf_r+0x142c>
  4046e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4046e6:	2340      	movs	r3, #64	; 0x40
  4046e8:	6153      	str	r3, [r2, #20]
  4046ea:	f7fe bfee 	b.w	4036ca <_svfprintf_r+0x2e>
  4046ee:	a823      	add	r0, sp, #140	; 0x8c
  4046f0:	a920      	add	r1, sp, #128	; 0x80
  4046f2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4046f4:	9004      	str	r0, [sp, #16]
  4046f6:	9103      	str	r1, [sp, #12]
  4046f8:	a81f      	add	r0, sp, #124	; 0x7c
  4046fa:	2103      	movs	r1, #3
  4046fc:	9002      	str	r0, [sp, #8]
  4046fe:	9a08      	ldr	r2, [sp, #32]
  404700:	9401      	str	r4, [sp, #4]
  404702:	463b      	mov	r3, r7
  404704:	9100      	str	r1, [sp, #0]
  404706:	980c      	ldr	r0, [sp, #48]	; 0x30
  404708:	f001 f9ca 	bl	405aa0 <_dtoa_r>
  40470c:	4625      	mov	r5, r4
  40470e:	4606      	mov	r6, r0
  404710:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404712:	2b46      	cmp	r3, #70	; 0x46
  404714:	eb06 0405 	add.w	r4, r6, r5
  404718:	f47f af29 	bne.w	40456e <_svfprintf_r+0xed2>
  40471c:	7833      	ldrb	r3, [r6, #0]
  40471e:	2b30      	cmp	r3, #48	; 0x30
  404720:	f000 8178 	beq.w	404a14 <_svfprintf_r+0x1378>
  404724:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  404726:	442c      	add	r4, r5
  404728:	e721      	b.n	40456e <_svfprintf_r+0xed2>
  40472a:	aa25      	add	r2, sp, #148	; 0x94
  40472c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40472e:	980c      	ldr	r0, [sp, #48]	; 0x30
  404730:	f003 fc70 	bl	408014 <__ssprint_r>
  404734:	2800      	cmp	r0, #0
  404736:	f47f a883 	bne.w	403840 <_svfprintf_r+0x1a4>
  40473a:	991f      	ldr	r1, [sp, #124]	; 0x7c
  40473c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40473e:	46c8      	mov	r8, r9
  404740:	e782      	b.n	404648 <_svfprintf_r+0xfac>
  404742:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404744:	2b00      	cmp	r3, #0
  404746:	bf08      	it	eq
  404748:	2301      	moveq	r3, #1
  40474a:	930a      	str	r3, [sp, #40]	; 0x28
  40474c:	e6db      	b.n	404506 <_svfprintf_r+0xe6a>
  40474e:	4630      	mov	r0, r6
  404750:	940a      	str	r4, [sp, #40]	; 0x28
  404752:	f7fe ff35 	bl	4035c0 <strlen>
  404756:	950f      	str	r5, [sp, #60]	; 0x3c
  404758:	900e      	str	r0, [sp, #56]	; 0x38
  40475a:	f8cd b01c 	str.w	fp, [sp, #28]
  40475e:	4603      	mov	r3, r0
  404760:	f7ff b9f9 	b.w	403b56 <_svfprintf_r+0x4ba>
  404764:	272d      	movs	r7, #45	; 0x2d
  404766:	2300      	movs	r3, #0
  404768:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  40476c:	930a      	str	r3, [sp, #40]	; 0x28
  40476e:	f7ff b8ae 	b.w	4038ce <_svfprintf_r+0x232>
  404772:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404774:	9312      	str	r3, [sp, #72]	; 0x48
  404776:	461a      	mov	r2, r3
  404778:	3303      	adds	r3, #3
  40477a:	db04      	blt.n	404786 <_svfprintf_r+0x10ea>
  40477c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40477e:	4619      	mov	r1, r3
  404780:	4291      	cmp	r1, r2
  404782:	f6bf af17 	bge.w	4045b4 <_svfprintf_r+0xf18>
  404786:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404788:	3b02      	subs	r3, #2
  40478a:	9311      	str	r3, [sp, #68]	; 0x44
  40478c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  404790:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  404794:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404796:	3b01      	subs	r3, #1
  404798:	2b00      	cmp	r3, #0
  40479a:	931f      	str	r3, [sp, #124]	; 0x7c
  40479c:	bfbd      	ittte	lt
  40479e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  4047a0:	f1c3 0301 	rsblt	r3, r3, #1
  4047a4:	222d      	movlt	r2, #45	; 0x2d
  4047a6:	222b      	movge	r2, #43	; 0x2b
  4047a8:	2b09      	cmp	r3, #9
  4047aa:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  4047ae:	f340 8116 	ble.w	4049de <_svfprintf_r+0x1342>
  4047b2:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  4047b6:	4620      	mov	r0, r4
  4047b8:	4dab      	ldr	r5, [pc, #684]	; (404a68 <_svfprintf_r+0x13cc>)
  4047ba:	e000      	b.n	4047be <_svfprintf_r+0x1122>
  4047bc:	4610      	mov	r0, r2
  4047be:	fb85 1203 	smull	r1, r2, r5, r3
  4047c2:	17d9      	asrs	r1, r3, #31
  4047c4:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  4047c8:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  4047cc:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  4047d0:	3230      	adds	r2, #48	; 0x30
  4047d2:	2909      	cmp	r1, #9
  4047d4:	f800 2c01 	strb.w	r2, [r0, #-1]
  4047d8:	460b      	mov	r3, r1
  4047da:	f100 32ff 	add.w	r2, r0, #4294967295
  4047de:	dced      	bgt.n	4047bc <_svfprintf_r+0x1120>
  4047e0:	3330      	adds	r3, #48	; 0x30
  4047e2:	3802      	subs	r0, #2
  4047e4:	b2d9      	uxtb	r1, r3
  4047e6:	4284      	cmp	r4, r0
  4047e8:	f802 1c01 	strb.w	r1, [r2, #-1]
  4047ec:	f240 8165 	bls.w	404aba <_svfprintf_r+0x141e>
  4047f0:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  4047f4:	4613      	mov	r3, r2
  4047f6:	e001      	b.n	4047fc <_svfprintf_r+0x1160>
  4047f8:	f813 1b01 	ldrb.w	r1, [r3], #1
  4047fc:	f800 1b01 	strb.w	r1, [r0], #1
  404800:	42a3      	cmp	r3, r4
  404802:	d1f9      	bne.n	4047f8 <_svfprintf_r+0x115c>
  404804:	3301      	adds	r3, #1
  404806:	1a9b      	subs	r3, r3, r2
  404808:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  40480c:	4413      	add	r3, r2
  40480e:	aa21      	add	r2, sp, #132	; 0x84
  404810:	1a9b      	subs	r3, r3, r2
  404812:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404814:	931b      	str	r3, [sp, #108]	; 0x6c
  404816:	2a01      	cmp	r2, #1
  404818:	4413      	add	r3, r2
  40481a:	930e      	str	r3, [sp, #56]	; 0x38
  40481c:	f340 8119 	ble.w	404a52 <_svfprintf_r+0x13b6>
  404820:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404822:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404824:	4413      	add	r3, r2
  404826:	930e      	str	r3, [sp, #56]	; 0x38
  404828:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40482c:	9308      	str	r3, [sp, #32]
  40482e:	2300      	movs	r3, #0
  404830:	9312      	str	r3, [sp, #72]	; 0x48
  404832:	e6cf      	b.n	4045d4 <_svfprintf_r+0xf38>
  404834:	aa25      	add	r2, sp, #148	; 0x94
  404836:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404838:	980c      	ldr	r0, [sp, #48]	; 0x30
  40483a:	f003 fbeb 	bl	408014 <__ssprint_r>
  40483e:	2800      	cmp	r0, #0
  404840:	f47e affe 	bne.w	403840 <_svfprintf_r+0x1a4>
  404844:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404846:	46c8      	mov	r8, r9
  404848:	e4d7      	b.n	4041fa <_svfprintf_r+0xb5e>
  40484a:	4623      	mov	r3, r4
  40484c:	e6a2      	b.n	404594 <_svfprintf_r+0xef8>
  40484e:	aa25      	add	r2, sp, #148	; 0x94
  404850:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404852:	980c      	ldr	r0, [sp, #48]	; 0x30
  404854:	f003 fbde 	bl	408014 <__ssprint_r>
  404858:	2800      	cmp	r0, #0
  40485a:	f47e aff1 	bne.w	403840 <_svfprintf_r+0x1a4>
  40485e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  404860:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404862:	46c8      	mov	r8, r9
  404864:	e5ae      	b.n	4043c4 <_svfprintf_r+0xd28>
  404866:	aa25      	add	r2, sp, #148	; 0x94
  404868:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40486a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40486c:	f003 fbd2 	bl	408014 <__ssprint_r>
  404870:	2800      	cmp	r0, #0
  404872:	f47e afe5 	bne.w	403840 <_svfprintf_r+0x1a4>
  404876:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  404878:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40487a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40487c:	1a9a      	subs	r2, r3, r2
  40487e:	46c8      	mov	r8, r9
  404880:	e5b8      	b.n	4043f4 <_svfprintf_r+0xd58>
  404882:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404884:	9612      	str	r6, [sp, #72]	; 0x48
  404886:	2b06      	cmp	r3, #6
  404888:	bf28      	it	cs
  40488a:	2306      	movcs	r3, #6
  40488c:	960a      	str	r6, [sp, #40]	; 0x28
  40488e:	4637      	mov	r7, r6
  404890:	9308      	str	r3, [sp, #32]
  404892:	950f      	str	r5, [sp, #60]	; 0x3c
  404894:	f8cd b01c 	str.w	fp, [sp, #28]
  404898:	930e      	str	r3, [sp, #56]	; 0x38
  40489a:	4e74      	ldr	r6, [pc, #464]	; (404a6c <_svfprintf_r+0x13d0>)
  40489c:	f7ff b816 	b.w	4038cc <_svfprintf_r+0x230>
  4048a0:	a823      	add	r0, sp, #140	; 0x8c
  4048a2:	a920      	add	r1, sp, #128	; 0x80
  4048a4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4048a6:	9004      	str	r0, [sp, #16]
  4048a8:	9103      	str	r1, [sp, #12]
  4048aa:	a81f      	add	r0, sp, #124	; 0x7c
  4048ac:	2103      	movs	r1, #3
  4048ae:	9002      	str	r0, [sp, #8]
  4048b0:	9a08      	ldr	r2, [sp, #32]
  4048b2:	9501      	str	r5, [sp, #4]
  4048b4:	463b      	mov	r3, r7
  4048b6:	9100      	str	r1, [sp, #0]
  4048b8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4048ba:	f001 f8f1 	bl	405aa0 <_dtoa_r>
  4048be:	4606      	mov	r6, r0
  4048c0:	1944      	adds	r4, r0, r5
  4048c2:	e72b      	b.n	40471c <_svfprintf_r+0x1080>
  4048c4:	2306      	movs	r3, #6
  4048c6:	930a      	str	r3, [sp, #40]	; 0x28
  4048c8:	e61d      	b.n	404506 <_svfprintf_r+0xe6a>
  4048ca:	272d      	movs	r7, #45	; 0x2d
  4048cc:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4048d0:	f7ff bacd 	b.w	403e6e <_svfprintf_r+0x7d2>
  4048d4:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4048d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4048d8:	4413      	add	r3, r2
  4048da:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4048dc:	930e      	str	r3, [sp, #56]	; 0x38
  4048de:	2a00      	cmp	r2, #0
  4048e0:	f340 80b0 	ble.w	404a44 <_svfprintf_r+0x13a8>
  4048e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4048e8:	9308      	str	r3, [sp, #32]
  4048ea:	2367      	movs	r3, #103	; 0x67
  4048ec:	9311      	str	r3, [sp, #68]	; 0x44
  4048ee:	e671      	b.n	4045d4 <_svfprintf_r+0xf38>
  4048f0:	2b00      	cmp	r3, #0
  4048f2:	f340 80c3 	ble.w	404a7c <_svfprintf_r+0x13e0>
  4048f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4048f8:	2a00      	cmp	r2, #0
  4048fa:	f040 8099 	bne.w	404a30 <_svfprintf_r+0x1394>
  4048fe:	f01b 0f01 	tst.w	fp, #1
  404902:	f040 8095 	bne.w	404a30 <_svfprintf_r+0x1394>
  404906:	9308      	str	r3, [sp, #32]
  404908:	930e      	str	r3, [sp, #56]	; 0x38
  40490a:	e663      	b.n	4045d4 <_svfprintf_r+0xf38>
  40490c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40490e:	9308      	str	r3, [sp, #32]
  404910:	930e      	str	r3, [sp, #56]	; 0x38
  404912:	900a      	str	r0, [sp, #40]	; 0x28
  404914:	950f      	str	r5, [sp, #60]	; 0x3c
  404916:	f8cd b01c 	str.w	fp, [sp, #28]
  40491a:	9012      	str	r0, [sp, #72]	; 0x48
  40491c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404920:	f7fe bfd4 	b.w	4038cc <_svfprintf_r+0x230>
  404924:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404926:	2b47      	cmp	r3, #71	; 0x47
  404928:	f47f ae20 	bne.w	40456c <_svfprintf_r+0xed0>
  40492c:	f01b 0f01 	tst.w	fp, #1
  404930:	f47f aeee 	bne.w	404710 <_svfprintf_r+0x1074>
  404934:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404936:	1b9b      	subs	r3, r3, r6
  404938:	9313      	str	r3, [sp, #76]	; 0x4c
  40493a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40493c:	2b47      	cmp	r3, #71	; 0x47
  40493e:	f43f af18 	beq.w	404772 <_svfprintf_r+0x10d6>
  404942:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404944:	9312      	str	r3, [sp, #72]	; 0x48
  404946:	e721      	b.n	40478c <_svfprintf_r+0x10f0>
  404948:	424f      	negs	r7, r1
  40494a:	3110      	adds	r1, #16
  40494c:	4d48      	ldr	r5, [pc, #288]	; (404a70 <_svfprintf_r+0x13d4>)
  40494e:	da2f      	bge.n	4049b0 <_svfprintf_r+0x1314>
  404950:	2410      	movs	r4, #16
  404952:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  404956:	e004      	b.n	404962 <_svfprintf_r+0x12c6>
  404958:	f108 0808 	add.w	r8, r8, #8
  40495c:	3f10      	subs	r7, #16
  40495e:	2f10      	cmp	r7, #16
  404960:	dd26      	ble.n	4049b0 <_svfprintf_r+0x1314>
  404962:	3301      	adds	r3, #1
  404964:	3210      	adds	r2, #16
  404966:	2b07      	cmp	r3, #7
  404968:	9227      	str	r2, [sp, #156]	; 0x9c
  40496a:	9326      	str	r3, [sp, #152]	; 0x98
  40496c:	f8c8 5000 	str.w	r5, [r8]
  404970:	f8c8 4004 	str.w	r4, [r8, #4]
  404974:	ddf0      	ble.n	404958 <_svfprintf_r+0x12bc>
  404976:	aa25      	add	r2, sp, #148	; 0x94
  404978:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40497a:	4658      	mov	r0, fp
  40497c:	f003 fb4a 	bl	408014 <__ssprint_r>
  404980:	2800      	cmp	r0, #0
  404982:	f47e af5d 	bne.w	403840 <_svfprintf_r+0x1a4>
  404986:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404988:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40498a:	46c8      	mov	r8, r9
  40498c:	e7e6      	b.n	40495c <_svfprintf_r+0x12c0>
  40498e:	aa25      	add	r2, sp, #148	; 0x94
  404990:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404992:	980c      	ldr	r0, [sp, #48]	; 0x30
  404994:	f003 fb3e 	bl	408014 <__ssprint_r>
  404998:	2800      	cmp	r0, #0
  40499a:	f47e af51 	bne.w	403840 <_svfprintf_r+0x1a4>
  40499e:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4049a0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4049a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4049a4:	46c8      	mov	r8, r9
  4049a6:	e667      	b.n	404678 <_svfprintf_r+0xfdc>
  4049a8:	2000      	movs	r0, #0
  4049aa:	900a      	str	r0, [sp, #40]	; 0x28
  4049ac:	f7fe bed0 	b.w	403750 <_svfprintf_r+0xb4>
  4049b0:	3301      	adds	r3, #1
  4049b2:	443a      	add	r2, r7
  4049b4:	2b07      	cmp	r3, #7
  4049b6:	e888 00a0 	stmia.w	r8, {r5, r7}
  4049ba:	9227      	str	r2, [sp, #156]	; 0x9c
  4049bc:	9326      	str	r3, [sp, #152]	; 0x98
  4049be:	f108 0808 	add.w	r8, r8, #8
  4049c2:	f77f ae5c 	ble.w	40467e <_svfprintf_r+0xfe2>
  4049c6:	aa25      	add	r2, sp, #148	; 0x94
  4049c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4049ca:	980c      	ldr	r0, [sp, #48]	; 0x30
  4049cc:	f003 fb22 	bl	408014 <__ssprint_r>
  4049d0:	2800      	cmp	r0, #0
  4049d2:	f47e af35 	bne.w	403840 <_svfprintf_r+0x1a4>
  4049d6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4049d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4049da:	46c8      	mov	r8, r9
  4049dc:	e64f      	b.n	40467e <_svfprintf_r+0xfe2>
  4049de:	3330      	adds	r3, #48	; 0x30
  4049e0:	2230      	movs	r2, #48	; 0x30
  4049e2:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  4049e6:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  4049ea:	ab22      	add	r3, sp, #136	; 0x88
  4049ec:	e70f      	b.n	40480e <_svfprintf_r+0x1172>
  4049ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4049f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4049f2:	4413      	add	r3, r2
  4049f4:	930e      	str	r3, [sp, #56]	; 0x38
  4049f6:	e775      	b.n	4048e4 <_svfprintf_r+0x1248>
  4049f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4049fa:	e5cb      	b.n	404594 <_svfprintf_r+0xef8>
  4049fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4049fe:	4e1d      	ldr	r6, [pc, #116]	; (404a74 <_svfprintf_r+0x13d8>)
  404a00:	2b00      	cmp	r3, #0
  404a02:	bfb6      	itet	lt
  404a04:	272d      	movlt	r7, #45	; 0x2d
  404a06:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  404a0a:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  404a0e:	4b1a      	ldr	r3, [pc, #104]	; (404a78 <_svfprintf_r+0x13dc>)
  404a10:	f7ff ba2f 	b.w	403e72 <_svfprintf_r+0x7d6>
  404a14:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404a16:	9808      	ldr	r0, [sp, #32]
  404a18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404a1a:	4639      	mov	r1, r7
  404a1c:	f004 f996 	bl	408d4c <__aeabi_dcmpeq>
  404a20:	2800      	cmp	r0, #0
  404a22:	f47f ae7f 	bne.w	404724 <_svfprintf_r+0x1088>
  404a26:	f1c5 0501 	rsb	r5, r5, #1
  404a2a:	951f      	str	r5, [sp, #124]	; 0x7c
  404a2c:	442c      	add	r4, r5
  404a2e:	e59e      	b.n	40456e <_svfprintf_r+0xed2>
  404a30:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404a32:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404a34:	4413      	add	r3, r2
  404a36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404a38:	441a      	add	r2, r3
  404a3a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  404a3e:	920e      	str	r2, [sp, #56]	; 0x38
  404a40:	9308      	str	r3, [sp, #32]
  404a42:	e5c7      	b.n	4045d4 <_svfprintf_r+0xf38>
  404a44:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404a46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404a48:	f1c3 0301 	rsb	r3, r3, #1
  404a4c:	441a      	add	r2, r3
  404a4e:	4613      	mov	r3, r2
  404a50:	e7d0      	b.n	4049f4 <_svfprintf_r+0x1358>
  404a52:	f01b 0301 	ands.w	r3, fp, #1
  404a56:	9312      	str	r3, [sp, #72]	; 0x48
  404a58:	f47f aee2 	bne.w	404820 <_svfprintf_r+0x1184>
  404a5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404a5e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404a62:	9308      	str	r3, [sp, #32]
  404a64:	e5b6      	b.n	4045d4 <_svfprintf_r+0xf38>
  404a66:	bf00      	nop
  404a68:	66666667 	.word	0x66666667
  404a6c:	004099e4 	.word	0x004099e4
  404a70:	00409a00 	.word	0x00409a00
  404a74:	004099b8 	.word	0x004099b8
  404a78:	004099b4 	.word	0x004099b4
  404a7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404a7e:	b913      	cbnz	r3, 404a86 <_svfprintf_r+0x13ea>
  404a80:	f01b 0f01 	tst.w	fp, #1
  404a84:	d002      	beq.n	404a8c <_svfprintf_r+0x13f0>
  404a86:	9b19      	ldr	r3, [sp, #100]	; 0x64
  404a88:	3301      	adds	r3, #1
  404a8a:	e7d4      	b.n	404a36 <_svfprintf_r+0x139a>
  404a8c:	2301      	movs	r3, #1
  404a8e:	e73a      	b.n	404906 <_svfprintf_r+0x126a>
  404a90:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404a92:	f89a 3001 	ldrb.w	r3, [sl, #1]
  404a96:	6828      	ldr	r0, [r5, #0]
  404a98:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  404a9c:	900a      	str	r0, [sp, #40]	; 0x28
  404a9e:	4628      	mov	r0, r5
  404aa0:	3004      	adds	r0, #4
  404aa2:	46a2      	mov	sl, r4
  404aa4:	900f      	str	r0, [sp, #60]	; 0x3c
  404aa6:	f7fe be51 	b.w	40374c <_svfprintf_r+0xb0>
  404aaa:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404aae:	f7ff b867 	b.w	403b80 <_svfprintf_r+0x4e4>
  404ab2:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404ab6:	f7ff ba15 	b.w	403ee4 <_svfprintf_r+0x848>
  404aba:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  404abe:	e6a6      	b.n	40480e <_svfprintf_r+0x1172>
  404ac0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404ac4:	f7ff b8eb 	b.w	403c9e <_svfprintf_r+0x602>
  404ac8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404aca:	230c      	movs	r3, #12
  404acc:	6013      	str	r3, [r2, #0]
  404ace:	f04f 33ff 	mov.w	r3, #4294967295
  404ad2:	9309      	str	r3, [sp, #36]	; 0x24
  404ad4:	f7fe bebd 	b.w	403852 <_svfprintf_r+0x1b6>
  404ad8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404adc:	f7ff b99a 	b.w	403e14 <_svfprintf_r+0x778>
  404ae0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404ae4:	f7ff b976 	b.w	403dd4 <_svfprintf_r+0x738>
  404ae8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404aec:	f7ff b959 	b.w	403da2 <_svfprintf_r+0x706>
  404af0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404af4:	f7ff b912 	b.w	403d1c <_svfprintf_r+0x680>

00404af8 <__sprint_r.part.0>:
  404af8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404afc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  404afe:	049c      	lsls	r4, r3, #18
  404b00:	4693      	mov	fp, r2
  404b02:	d52f      	bpl.n	404b64 <__sprint_r.part.0+0x6c>
  404b04:	6893      	ldr	r3, [r2, #8]
  404b06:	6812      	ldr	r2, [r2, #0]
  404b08:	b353      	cbz	r3, 404b60 <__sprint_r.part.0+0x68>
  404b0a:	460e      	mov	r6, r1
  404b0c:	4607      	mov	r7, r0
  404b0e:	f102 0908 	add.w	r9, r2, #8
  404b12:	e919 0420 	ldmdb	r9, {r5, sl}
  404b16:	ea5f 089a 	movs.w	r8, sl, lsr #2
  404b1a:	d017      	beq.n	404b4c <__sprint_r.part.0+0x54>
  404b1c:	3d04      	subs	r5, #4
  404b1e:	2400      	movs	r4, #0
  404b20:	e001      	b.n	404b26 <__sprint_r.part.0+0x2e>
  404b22:	45a0      	cmp	r8, r4
  404b24:	d010      	beq.n	404b48 <__sprint_r.part.0+0x50>
  404b26:	4632      	mov	r2, r6
  404b28:	f855 1f04 	ldr.w	r1, [r5, #4]!
  404b2c:	4638      	mov	r0, r7
  404b2e:	f002 f87b 	bl	406c28 <_fputwc_r>
  404b32:	1c43      	adds	r3, r0, #1
  404b34:	f104 0401 	add.w	r4, r4, #1
  404b38:	d1f3      	bne.n	404b22 <__sprint_r.part.0+0x2a>
  404b3a:	2300      	movs	r3, #0
  404b3c:	f8cb 3008 	str.w	r3, [fp, #8]
  404b40:	f8cb 3004 	str.w	r3, [fp, #4]
  404b44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404b48:	f8db 3008 	ldr.w	r3, [fp, #8]
  404b4c:	f02a 0a03 	bic.w	sl, sl, #3
  404b50:	eba3 030a 	sub.w	r3, r3, sl
  404b54:	f8cb 3008 	str.w	r3, [fp, #8]
  404b58:	f109 0908 	add.w	r9, r9, #8
  404b5c:	2b00      	cmp	r3, #0
  404b5e:	d1d8      	bne.n	404b12 <__sprint_r.part.0+0x1a>
  404b60:	2000      	movs	r0, #0
  404b62:	e7ea      	b.n	404b3a <__sprint_r.part.0+0x42>
  404b64:	f002 f9ca 	bl	406efc <__sfvwrite_r>
  404b68:	2300      	movs	r3, #0
  404b6a:	f8cb 3008 	str.w	r3, [fp, #8]
  404b6e:	f8cb 3004 	str.w	r3, [fp, #4]
  404b72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404b76:	bf00      	nop

00404b78 <_vfiprintf_r>:
  404b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404b7c:	b0ad      	sub	sp, #180	; 0xb4
  404b7e:	461d      	mov	r5, r3
  404b80:	468b      	mov	fp, r1
  404b82:	4690      	mov	r8, r2
  404b84:	9307      	str	r3, [sp, #28]
  404b86:	9006      	str	r0, [sp, #24]
  404b88:	b118      	cbz	r0, 404b92 <_vfiprintf_r+0x1a>
  404b8a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404b8c:	2b00      	cmp	r3, #0
  404b8e:	f000 80f3 	beq.w	404d78 <_vfiprintf_r+0x200>
  404b92:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404b96:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  404b9a:	07df      	lsls	r7, r3, #31
  404b9c:	b281      	uxth	r1, r0
  404b9e:	d402      	bmi.n	404ba6 <_vfiprintf_r+0x2e>
  404ba0:	058e      	lsls	r6, r1, #22
  404ba2:	f140 80fc 	bpl.w	404d9e <_vfiprintf_r+0x226>
  404ba6:	048c      	lsls	r4, r1, #18
  404ba8:	d40a      	bmi.n	404bc0 <_vfiprintf_r+0x48>
  404baa:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404bae:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  404bb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  404bb6:	f8ab 100c 	strh.w	r1, [fp, #12]
  404bba:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  404bbe:	b289      	uxth	r1, r1
  404bc0:	0708      	lsls	r0, r1, #28
  404bc2:	f140 80b3 	bpl.w	404d2c <_vfiprintf_r+0x1b4>
  404bc6:	f8db 3010 	ldr.w	r3, [fp, #16]
  404bca:	2b00      	cmp	r3, #0
  404bcc:	f000 80ae 	beq.w	404d2c <_vfiprintf_r+0x1b4>
  404bd0:	f001 031a 	and.w	r3, r1, #26
  404bd4:	2b0a      	cmp	r3, #10
  404bd6:	f000 80b5 	beq.w	404d44 <_vfiprintf_r+0x1cc>
  404bda:	2300      	movs	r3, #0
  404bdc:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  404be0:	930b      	str	r3, [sp, #44]	; 0x2c
  404be2:	9311      	str	r3, [sp, #68]	; 0x44
  404be4:	9310      	str	r3, [sp, #64]	; 0x40
  404be6:	9303      	str	r3, [sp, #12]
  404be8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  404bec:	46ca      	mov	sl, r9
  404bee:	f8cd b010 	str.w	fp, [sp, #16]
  404bf2:	f898 3000 	ldrb.w	r3, [r8]
  404bf6:	4644      	mov	r4, r8
  404bf8:	b1fb      	cbz	r3, 404c3a <_vfiprintf_r+0xc2>
  404bfa:	2b25      	cmp	r3, #37	; 0x25
  404bfc:	d102      	bne.n	404c04 <_vfiprintf_r+0x8c>
  404bfe:	e01c      	b.n	404c3a <_vfiprintf_r+0xc2>
  404c00:	2b25      	cmp	r3, #37	; 0x25
  404c02:	d003      	beq.n	404c0c <_vfiprintf_r+0x94>
  404c04:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  404c08:	2b00      	cmp	r3, #0
  404c0a:	d1f9      	bne.n	404c00 <_vfiprintf_r+0x88>
  404c0c:	eba4 0508 	sub.w	r5, r4, r8
  404c10:	b19d      	cbz	r5, 404c3a <_vfiprintf_r+0xc2>
  404c12:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404c14:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404c16:	f8ca 8000 	str.w	r8, [sl]
  404c1a:	3301      	adds	r3, #1
  404c1c:	442a      	add	r2, r5
  404c1e:	2b07      	cmp	r3, #7
  404c20:	f8ca 5004 	str.w	r5, [sl, #4]
  404c24:	9211      	str	r2, [sp, #68]	; 0x44
  404c26:	9310      	str	r3, [sp, #64]	; 0x40
  404c28:	dd7a      	ble.n	404d20 <_vfiprintf_r+0x1a8>
  404c2a:	2a00      	cmp	r2, #0
  404c2c:	f040 84b0 	bne.w	405590 <_vfiprintf_r+0xa18>
  404c30:	9b03      	ldr	r3, [sp, #12]
  404c32:	9210      	str	r2, [sp, #64]	; 0x40
  404c34:	442b      	add	r3, r5
  404c36:	46ca      	mov	sl, r9
  404c38:	9303      	str	r3, [sp, #12]
  404c3a:	7823      	ldrb	r3, [r4, #0]
  404c3c:	2b00      	cmp	r3, #0
  404c3e:	f000 83e0 	beq.w	405402 <_vfiprintf_r+0x88a>
  404c42:	2000      	movs	r0, #0
  404c44:	f04f 0300 	mov.w	r3, #0
  404c48:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  404c4c:	f104 0801 	add.w	r8, r4, #1
  404c50:	7862      	ldrb	r2, [r4, #1]
  404c52:	4605      	mov	r5, r0
  404c54:	4606      	mov	r6, r0
  404c56:	4603      	mov	r3, r0
  404c58:	f04f 34ff 	mov.w	r4, #4294967295
  404c5c:	f108 0801 	add.w	r8, r8, #1
  404c60:	f1a2 0120 	sub.w	r1, r2, #32
  404c64:	2958      	cmp	r1, #88	; 0x58
  404c66:	f200 82de 	bhi.w	405226 <_vfiprintf_r+0x6ae>
  404c6a:	e8df f011 	tbh	[pc, r1, lsl #1]
  404c6e:	0221      	.short	0x0221
  404c70:	02dc02dc 	.word	0x02dc02dc
  404c74:	02dc0229 	.word	0x02dc0229
  404c78:	02dc02dc 	.word	0x02dc02dc
  404c7c:	02dc02dc 	.word	0x02dc02dc
  404c80:	028902dc 	.word	0x028902dc
  404c84:	02dc0295 	.word	0x02dc0295
  404c88:	02bd00a2 	.word	0x02bd00a2
  404c8c:	019f02dc 	.word	0x019f02dc
  404c90:	01a401a4 	.word	0x01a401a4
  404c94:	01a401a4 	.word	0x01a401a4
  404c98:	01a401a4 	.word	0x01a401a4
  404c9c:	01a401a4 	.word	0x01a401a4
  404ca0:	02dc01a4 	.word	0x02dc01a4
  404ca4:	02dc02dc 	.word	0x02dc02dc
  404ca8:	02dc02dc 	.word	0x02dc02dc
  404cac:	02dc02dc 	.word	0x02dc02dc
  404cb0:	02dc02dc 	.word	0x02dc02dc
  404cb4:	01b202dc 	.word	0x01b202dc
  404cb8:	02dc02dc 	.word	0x02dc02dc
  404cbc:	02dc02dc 	.word	0x02dc02dc
  404cc0:	02dc02dc 	.word	0x02dc02dc
  404cc4:	02dc02dc 	.word	0x02dc02dc
  404cc8:	02dc02dc 	.word	0x02dc02dc
  404ccc:	02dc0197 	.word	0x02dc0197
  404cd0:	02dc02dc 	.word	0x02dc02dc
  404cd4:	02dc02dc 	.word	0x02dc02dc
  404cd8:	02dc019b 	.word	0x02dc019b
  404cdc:	025302dc 	.word	0x025302dc
  404ce0:	02dc02dc 	.word	0x02dc02dc
  404ce4:	02dc02dc 	.word	0x02dc02dc
  404ce8:	02dc02dc 	.word	0x02dc02dc
  404cec:	02dc02dc 	.word	0x02dc02dc
  404cf0:	02dc02dc 	.word	0x02dc02dc
  404cf4:	021b025a 	.word	0x021b025a
  404cf8:	02dc02dc 	.word	0x02dc02dc
  404cfc:	026e02dc 	.word	0x026e02dc
  404d00:	02dc021b 	.word	0x02dc021b
  404d04:	027302dc 	.word	0x027302dc
  404d08:	01f502dc 	.word	0x01f502dc
  404d0c:	02090182 	.word	0x02090182
  404d10:	02dc02d7 	.word	0x02dc02d7
  404d14:	02dc029a 	.word	0x02dc029a
  404d18:	02dc00a7 	.word	0x02dc00a7
  404d1c:	022e02dc 	.word	0x022e02dc
  404d20:	f10a 0a08 	add.w	sl, sl, #8
  404d24:	9b03      	ldr	r3, [sp, #12]
  404d26:	442b      	add	r3, r5
  404d28:	9303      	str	r3, [sp, #12]
  404d2a:	e786      	b.n	404c3a <_vfiprintf_r+0xc2>
  404d2c:	4659      	mov	r1, fp
  404d2e:	9806      	ldr	r0, [sp, #24]
  404d30:	f000 fdac 	bl	40588c <__swsetup_r>
  404d34:	bb18      	cbnz	r0, 404d7e <_vfiprintf_r+0x206>
  404d36:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  404d3a:	f001 031a 	and.w	r3, r1, #26
  404d3e:	2b0a      	cmp	r3, #10
  404d40:	f47f af4b 	bne.w	404bda <_vfiprintf_r+0x62>
  404d44:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  404d48:	2b00      	cmp	r3, #0
  404d4a:	f6ff af46 	blt.w	404bda <_vfiprintf_r+0x62>
  404d4e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404d52:	07db      	lsls	r3, r3, #31
  404d54:	d405      	bmi.n	404d62 <_vfiprintf_r+0x1ea>
  404d56:	058f      	lsls	r7, r1, #22
  404d58:	d403      	bmi.n	404d62 <_vfiprintf_r+0x1ea>
  404d5a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404d5e:	f002 fa91 	bl	407284 <__retarget_lock_release_recursive>
  404d62:	462b      	mov	r3, r5
  404d64:	4642      	mov	r2, r8
  404d66:	4659      	mov	r1, fp
  404d68:	9806      	ldr	r0, [sp, #24]
  404d6a:	f000 fd4d 	bl	405808 <__sbprintf>
  404d6e:	9003      	str	r0, [sp, #12]
  404d70:	9803      	ldr	r0, [sp, #12]
  404d72:	b02d      	add	sp, #180	; 0xb4
  404d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404d78:	f001 feb4 	bl	406ae4 <__sinit>
  404d7c:	e709      	b.n	404b92 <_vfiprintf_r+0x1a>
  404d7e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404d82:	07d9      	lsls	r1, r3, #31
  404d84:	d404      	bmi.n	404d90 <_vfiprintf_r+0x218>
  404d86:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404d8a:	059a      	lsls	r2, r3, #22
  404d8c:	f140 84aa 	bpl.w	4056e4 <_vfiprintf_r+0xb6c>
  404d90:	f04f 33ff 	mov.w	r3, #4294967295
  404d94:	9303      	str	r3, [sp, #12]
  404d96:	9803      	ldr	r0, [sp, #12]
  404d98:	b02d      	add	sp, #180	; 0xb4
  404d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404d9e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404da2:	f002 fa6d 	bl	407280 <__retarget_lock_acquire_recursive>
  404da6:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  404daa:	b281      	uxth	r1, r0
  404dac:	e6fb      	b.n	404ba6 <_vfiprintf_r+0x2e>
  404dae:	4276      	negs	r6, r6
  404db0:	9207      	str	r2, [sp, #28]
  404db2:	f043 0304 	orr.w	r3, r3, #4
  404db6:	f898 2000 	ldrb.w	r2, [r8]
  404dba:	e74f      	b.n	404c5c <_vfiprintf_r+0xe4>
  404dbc:	9608      	str	r6, [sp, #32]
  404dbe:	069e      	lsls	r6, r3, #26
  404dc0:	f100 8450 	bmi.w	405664 <_vfiprintf_r+0xaec>
  404dc4:	9907      	ldr	r1, [sp, #28]
  404dc6:	06dd      	lsls	r5, r3, #27
  404dc8:	460a      	mov	r2, r1
  404dca:	f100 83ef 	bmi.w	4055ac <_vfiprintf_r+0xa34>
  404dce:	0658      	lsls	r0, r3, #25
  404dd0:	f140 83ec 	bpl.w	4055ac <_vfiprintf_r+0xa34>
  404dd4:	880e      	ldrh	r6, [r1, #0]
  404dd6:	3104      	adds	r1, #4
  404dd8:	2700      	movs	r7, #0
  404dda:	2201      	movs	r2, #1
  404ddc:	9107      	str	r1, [sp, #28]
  404dde:	f04f 0100 	mov.w	r1, #0
  404de2:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  404de6:	2500      	movs	r5, #0
  404de8:	1c61      	adds	r1, r4, #1
  404dea:	f000 8116 	beq.w	40501a <_vfiprintf_r+0x4a2>
  404dee:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  404df2:	9102      	str	r1, [sp, #8]
  404df4:	ea56 0107 	orrs.w	r1, r6, r7
  404df8:	f040 8114 	bne.w	405024 <_vfiprintf_r+0x4ac>
  404dfc:	2c00      	cmp	r4, #0
  404dfe:	f040 835c 	bne.w	4054ba <_vfiprintf_r+0x942>
  404e02:	2a00      	cmp	r2, #0
  404e04:	f040 83b7 	bne.w	405576 <_vfiprintf_r+0x9fe>
  404e08:	f013 0301 	ands.w	r3, r3, #1
  404e0c:	9305      	str	r3, [sp, #20]
  404e0e:	f000 8457 	beq.w	4056c0 <_vfiprintf_r+0xb48>
  404e12:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  404e16:	2330      	movs	r3, #48	; 0x30
  404e18:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  404e1c:	9b05      	ldr	r3, [sp, #20]
  404e1e:	42a3      	cmp	r3, r4
  404e20:	bfb8      	it	lt
  404e22:	4623      	movlt	r3, r4
  404e24:	9301      	str	r3, [sp, #4]
  404e26:	b10d      	cbz	r5, 404e2c <_vfiprintf_r+0x2b4>
  404e28:	3301      	adds	r3, #1
  404e2a:	9301      	str	r3, [sp, #4]
  404e2c:	9b02      	ldr	r3, [sp, #8]
  404e2e:	f013 0302 	ands.w	r3, r3, #2
  404e32:	9309      	str	r3, [sp, #36]	; 0x24
  404e34:	d002      	beq.n	404e3c <_vfiprintf_r+0x2c4>
  404e36:	9b01      	ldr	r3, [sp, #4]
  404e38:	3302      	adds	r3, #2
  404e3a:	9301      	str	r3, [sp, #4]
  404e3c:	9b02      	ldr	r3, [sp, #8]
  404e3e:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  404e42:	930a      	str	r3, [sp, #40]	; 0x28
  404e44:	f040 8217 	bne.w	405276 <_vfiprintf_r+0x6fe>
  404e48:	9b08      	ldr	r3, [sp, #32]
  404e4a:	9a01      	ldr	r2, [sp, #4]
  404e4c:	1a9d      	subs	r5, r3, r2
  404e4e:	2d00      	cmp	r5, #0
  404e50:	f340 8211 	ble.w	405276 <_vfiprintf_r+0x6fe>
  404e54:	2d10      	cmp	r5, #16
  404e56:	f340 8490 	ble.w	40577a <_vfiprintf_r+0xc02>
  404e5a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404e5c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404e5e:	4ec4      	ldr	r6, [pc, #784]	; (405170 <_vfiprintf_r+0x5f8>)
  404e60:	46d6      	mov	lr, sl
  404e62:	2710      	movs	r7, #16
  404e64:	46a2      	mov	sl, r4
  404e66:	4619      	mov	r1, r3
  404e68:	9c06      	ldr	r4, [sp, #24]
  404e6a:	e007      	b.n	404e7c <_vfiprintf_r+0x304>
  404e6c:	f101 0c02 	add.w	ip, r1, #2
  404e70:	f10e 0e08 	add.w	lr, lr, #8
  404e74:	4601      	mov	r1, r0
  404e76:	3d10      	subs	r5, #16
  404e78:	2d10      	cmp	r5, #16
  404e7a:	dd11      	ble.n	404ea0 <_vfiprintf_r+0x328>
  404e7c:	1c48      	adds	r0, r1, #1
  404e7e:	3210      	adds	r2, #16
  404e80:	2807      	cmp	r0, #7
  404e82:	9211      	str	r2, [sp, #68]	; 0x44
  404e84:	e88e 00c0 	stmia.w	lr, {r6, r7}
  404e88:	9010      	str	r0, [sp, #64]	; 0x40
  404e8a:	ddef      	ble.n	404e6c <_vfiprintf_r+0x2f4>
  404e8c:	2a00      	cmp	r2, #0
  404e8e:	f040 81e4 	bne.w	40525a <_vfiprintf_r+0x6e2>
  404e92:	3d10      	subs	r5, #16
  404e94:	2d10      	cmp	r5, #16
  404e96:	4611      	mov	r1, r2
  404e98:	f04f 0c01 	mov.w	ip, #1
  404e9c:	46ce      	mov	lr, r9
  404e9e:	dced      	bgt.n	404e7c <_vfiprintf_r+0x304>
  404ea0:	4654      	mov	r4, sl
  404ea2:	4661      	mov	r1, ip
  404ea4:	46f2      	mov	sl, lr
  404ea6:	442a      	add	r2, r5
  404ea8:	2907      	cmp	r1, #7
  404eaa:	9211      	str	r2, [sp, #68]	; 0x44
  404eac:	f8ca 6000 	str.w	r6, [sl]
  404eb0:	f8ca 5004 	str.w	r5, [sl, #4]
  404eb4:	9110      	str	r1, [sp, #64]	; 0x40
  404eb6:	f300 82ec 	bgt.w	405492 <_vfiprintf_r+0x91a>
  404eba:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404ebe:	f10a 0a08 	add.w	sl, sl, #8
  404ec2:	1c48      	adds	r0, r1, #1
  404ec4:	2d00      	cmp	r5, #0
  404ec6:	f040 81de 	bne.w	405286 <_vfiprintf_r+0x70e>
  404eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404ecc:	2b00      	cmp	r3, #0
  404ece:	f000 81f8 	beq.w	4052c2 <_vfiprintf_r+0x74a>
  404ed2:	3202      	adds	r2, #2
  404ed4:	a90e      	add	r1, sp, #56	; 0x38
  404ed6:	2302      	movs	r3, #2
  404ed8:	2807      	cmp	r0, #7
  404eda:	9211      	str	r2, [sp, #68]	; 0x44
  404edc:	9010      	str	r0, [sp, #64]	; 0x40
  404ede:	e88a 000a 	stmia.w	sl, {r1, r3}
  404ee2:	f340 81ea 	ble.w	4052ba <_vfiprintf_r+0x742>
  404ee6:	2a00      	cmp	r2, #0
  404ee8:	f040 838c 	bne.w	405604 <_vfiprintf_r+0xa8c>
  404eec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404eee:	2b80      	cmp	r3, #128	; 0x80
  404ef0:	f04f 0001 	mov.w	r0, #1
  404ef4:	4611      	mov	r1, r2
  404ef6:	46ca      	mov	sl, r9
  404ef8:	f040 81e7 	bne.w	4052ca <_vfiprintf_r+0x752>
  404efc:	9b08      	ldr	r3, [sp, #32]
  404efe:	9d01      	ldr	r5, [sp, #4]
  404f00:	1b5e      	subs	r6, r3, r5
  404f02:	2e00      	cmp	r6, #0
  404f04:	f340 81e1 	ble.w	4052ca <_vfiprintf_r+0x752>
  404f08:	2e10      	cmp	r6, #16
  404f0a:	4d9a      	ldr	r5, [pc, #616]	; (405174 <_vfiprintf_r+0x5fc>)
  404f0c:	f340 8450 	ble.w	4057b0 <_vfiprintf_r+0xc38>
  404f10:	46d4      	mov	ip, sl
  404f12:	2710      	movs	r7, #16
  404f14:	46a2      	mov	sl, r4
  404f16:	9c06      	ldr	r4, [sp, #24]
  404f18:	e007      	b.n	404f2a <_vfiprintf_r+0x3b2>
  404f1a:	f101 0e02 	add.w	lr, r1, #2
  404f1e:	f10c 0c08 	add.w	ip, ip, #8
  404f22:	4601      	mov	r1, r0
  404f24:	3e10      	subs	r6, #16
  404f26:	2e10      	cmp	r6, #16
  404f28:	dd11      	ble.n	404f4e <_vfiprintf_r+0x3d6>
  404f2a:	1c48      	adds	r0, r1, #1
  404f2c:	3210      	adds	r2, #16
  404f2e:	2807      	cmp	r0, #7
  404f30:	9211      	str	r2, [sp, #68]	; 0x44
  404f32:	e88c 00a0 	stmia.w	ip, {r5, r7}
  404f36:	9010      	str	r0, [sp, #64]	; 0x40
  404f38:	ddef      	ble.n	404f1a <_vfiprintf_r+0x3a2>
  404f3a:	2a00      	cmp	r2, #0
  404f3c:	f040 829d 	bne.w	40547a <_vfiprintf_r+0x902>
  404f40:	3e10      	subs	r6, #16
  404f42:	2e10      	cmp	r6, #16
  404f44:	f04f 0e01 	mov.w	lr, #1
  404f48:	4611      	mov	r1, r2
  404f4a:	46cc      	mov	ip, r9
  404f4c:	dced      	bgt.n	404f2a <_vfiprintf_r+0x3b2>
  404f4e:	4654      	mov	r4, sl
  404f50:	46e2      	mov	sl, ip
  404f52:	4432      	add	r2, r6
  404f54:	f1be 0f07 	cmp.w	lr, #7
  404f58:	9211      	str	r2, [sp, #68]	; 0x44
  404f5a:	e88a 0060 	stmia.w	sl, {r5, r6}
  404f5e:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  404f62:	f300 8369 	bgt.w	405638 <_vfiprintf_r+0xac0>
  404f66:	f10a 0a08 	add.w	sl, sl, #8
  404f6a:	f10e 0001 	add.w	r0, lr, #1
  404f6e:	4671      	mov	r1, lr
  404f70:	e1ab      	b.n	4052ca <_vfiprintf_r+0x752>
  404f72:	9608      	str	r6, [sp, #32]
  404f74:	f013 0220 	ands.w	r2, r3, #32
  404f78:	f040 838c 	bne.w	405694 <_vfiprintf_r+0xb1c>
  404f7c:	f013 0110 	ands.w	r1, r3, #16
  404f80:	f040 831a 	bne.w	4055b8 <_vfiprintf_r+0xa40>
  404f84:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  404f88:	f000 8316 	beq.w	4055b8 <_vfiprintf_r+0xa40>
  404f8c:	9807      	ldr	r0, [sp, #28]
  404f8e:	460a      	mov	r2, r1
  404f90:	4601      	mov	r1, r0
  404f92:	3104      	adds	r1, #4
  404f94:	8806      	ldrh	r6, [r0, #0]
  404f96:	9107      	str	r1, [sp, #28]
  404f98:	2700      	movs	r7, #0
  404f9a:	e720      	b.n	404dde <_vfiprintf_r+0x266>
  404f9c:	9608      	str	r6, [sp, #32]
  404f9e:	f043 0310 	orr.w	r3, r3, #16
  404fa2:	e7e7      	b.n	404f74 <_vfiprintf_r+0x3fc>
  404fa4:	9608      	str	r6, [sp, #32]
  404fa6:	f043 0310 	orr.w	r3, r3, #16
  404faa:	e708      	b.n	404dbe <_vfiprintf_r+0x246>
  404fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404fb0:	f898 2000 	ldrb.w	r2, [r8]
  404fb4:	e652      	b.n	404c5c <_vfiprintf_r+0xe4>
  404fb6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404fba:	2600      	movs	r6, #0
  404fbc:	f818 2b01 	ldrb.w	r2, [r8], #1
  404fc0:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  404fc4:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  404fc8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404fcc:	2909      	cmp	r1, #9
  404fce:	d9f5      	bls.n	404fbc <_vfiprintf_r+0x444>
  404fd0:	e646      	b.n	404c60 <_vfiprintf_r+0xe8>
  404fd2:	9608      	str	r6, [sp, #32]
  404fd4:	2800      	cmp	r0, #0
  404fd6:	f040 8408 	bne.w	4057ea <_vfiprintf_r+0xc72>
  404fda:	f043 0310 	orr.w	r3, r3, #16
  404fde:	069e      	lsls	r6, r3, #26
  404fe0:	f100 834c 	bmi.w	40567c <_vfiprintf_r+0xb04>
  404fe4:	06dd      	lsls	r5, r3, #27
  404fe6:	f100 82f3 	bmi.w	4055d0 <_vfiprintf_r+0xa58>
  404fea:	0658      	lsls	r0, r3, #25
  404fec:	f140 82f0 	bpl.w	4055d0 <_vfiprintf_r+0xa58>
  404ff0:	9d07      	ldr	r5, [sp, #28]
  404ff2:	f9b5 6000 	ldrsh.w	r6, [r5]
  404ff6:	462a      	mov	r2, r5
  404ff8:	17f7      	asrs	r7, r6, #31
  404ffa:	3204      	adds	r2, #4
  404ffc:	4630      	mov	r0, r6
  404ffe:	4639      	mov	r1, r7
  405000:	9207      	str	r2, [sp, #28]
  405002:	2800      	cmp	r0, #0
  405004:	f171 0200 	sbcs.w	r2, r1, #0
  405008:	f2c0 835d 	blt.w	4056c6 <_vfiprintf_r+0xb4e>
  40500c:	1c61      	adds	r1, r4, #1
  40500e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405012:	f04f 0201 	mov.w	r2, #1
  405016:	f47f aeea 	bne.w	404dee <_vfiprintf_r+0x276>
  40501a:	ea56 0107 	orrs.w	r1, r6, r7
  40501e:	f000 824d 	beq.w	4054bc <_vfiprintf_r+0x944>
  405022:	9302      	str	r3, [sp, #8]
  405024:	2a01      	cmp	r2, #1
  405026:	f000 828c 	beq.w	405542 <_vfiprintf_r+0x9ca>
  40502a:	2a02      	cmp	r2, #2
  40502c:	f040 825c 	bne.w	4054e8 <_vfiprintf_r+0x970>
  405030:	980b      	ldr	r0, [sp, #44]	; 0x2c
  405032:	46cb      	mov	fp, r9
  405034:	0933      	lsrs	r3, r6, #4
  405036:	f006 010f 	and.w	r1, r6, #15
  40503a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  40503e:	093a      	lsrs	r2, r7, #4
  405040:	461e      	mov	r6, r3
  405042:	4617      	mov	r7, r2
  405044:	5c43      	ldrb	r3, [r0, r1]
  405046:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  40504a:	ea56 0307 	orrs.w	r3, r6, r7
  40504e:	d1f1      	bne.n	405034 <_vfiprintf_r+0x4bc>
  405050:	eba9 030b 	sub.w	r3, r9, fp
  405054:	9305      	str	r3, [sp, #20]
  405056:	e6e1      	b.n	404e1c <_vfiprintf_r+0x2a4>
  405058:	2800      	cmp	r0, #0
  40505a:	f040 83c0 	bne.w	4057de <_vfiprintf_r+0xc66>
  40505e:	0699      	lsls	r1, r3, #26
  405060:	f100 8367 	bmi.w	405732 <_vfiprintf_r+0xbba>
  405064:	06da      	lsls	r2, r3, #27
  405066:	f100 80f1 	bmi.w	40524c <_vfiprintf_r+0x6d4>
  40506a:	065b      	lsls	r3, r3, #25
  40506c:	f140 80ee 	bpl.w	40524c <_vfiprintf_r+0x6d4>
  405070:	9a07      	ldr	r2, [sp, #28]
  405072:	6813      	ldr	r3, [r2, #0]
  405074:	3204      	adds	r2, #4
  405076:	9207      	str	r2, [sp, #28]
  405078:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  40507c:	801a      	strh	r2, [r3, #0]
  40507e:	e5b8      	b.n	404bf2 <_vfiprintf_r+0x7a>
  405080:	9807      	ldr	r0, [sp, #28]
  405082:	4a3d      	ldr	r2, [pc, #244]	; (405178 <_vfiprintf_r+0x600>)
  405084:	9608      	str	r6, [sp, #32]
  405086:	920b      	str	r2, [sp, #44]	; 0x2c
  405088:	6806      	ldr	r6, [r0, #0]
  40508a:	2278      	movs	r2, #120	; 0x78
  40508c:	2130      	movs	r1, #48	; 0x30
  40508e:	3004      	adds	r0, #4
  405090:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  405094:	f043 0302 	orr.w	r3, r3, #2
  405098:	9007      	str	r0, [sp, #28]
  40509a:	2700      	movs	r7, #0
  40509c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4050a0:	2202      	movs	r2, #2
  4050a2:	e69c      	b.n	404dde <_vfiprintf_r+0x266>
  4050a4:	9608      	str	r6, [sp, #32]
  4050a6:	2800      	cmp	r0, #0
  4050a8:	d099      	beq.n	404fde <_vfiprintf_r+0x466>
  4050aa:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4050ae:	e796      	b.n	404fde <_vfiprintf_r+0x466>
  4050b0:	f898 2000 	ldrb.w	r2, [r8]
  4050b4:	2d00      	cmp	r5, #0
  4050b6:	f47f add1 	bne.w	404c5c <_vfiprintf_r+0xe4>
  4050ba:	2001      	movs	r0, #1
  4050bc:	2520      	movs	r5, #32
  4050be:	e5cd      	b.n	404c5c <_vfiprintf_r+0xe4>
  4050c0:	f043 0301 	orr.w	r3, r3, #1
  4050c4:	f898 2000 	ldrb.w	r2, [r8]
  4050c8:	e5c8      	b.n	404c5c <_vfiprintf_r+0xe4>
  4050ca:	9608      	str	r6, [sp, #32]
  4050cc:	2800      	cmp	r0, #0
  4050ce:	f040 8393 	bne.w	4057f8 <_vfiprintf_r+0xc80>
  4050d2:	4929      	ldr	r1, [pc, #164]	; (405178 <_vfiprintf_r+0x600>)
  4050d4:	910b      	str	r1, [sp, #44]	; 0x2c
  4050d6:	069f      	lsls	r7, r3, #26
  4050d8:	f100 82e8 	bmi.w	4056ac <_vfiprintf_r+0xb34>
  4050dc:	9807      	ldr	r0, [sp, #28]
  4050de:	06de      	lsls	r6, r3, #27
  4050e0:	4601      	mov	r1, r0
  4050e2:	f100 8270 	bmi.w	4055c6 <_vfiprintf_r+0xa4e>
  4050e6:	065d      	lsls	r5, r3, #25
  4050e8:	f140 826d 	bpl.w	4055c6 <_vfiprintf_r+0xa4e>
  4050ec:	3104      	adds	r1, #4
  4050ee:	8806      	ldrh	r6, [r0, #0]
  4050f0:	9107      	str	r1, [sp, #28]
  4050f2:	2700      	movs	r7, #0
  4050f4:	07d8      	lsls	r0, r3, #31
  4050f6:	f140 8222 	bpl.w	40553e <_vfiprintf_r+0x9c6>
  4050fa:	ea56 0107 	orrs.w	r1, r6, r7
  4050fe:	f000 821e 	beq.w	40553e <_vfiprintf_r+0x9c6>
  405102:	2130      	movs	r1, #48	; 0x30
  405104:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  405108:	f043 0302 	orr.w	r3, r3, #2
  40510c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  405110:	2202      	movs	r2, #2
  405112:	e664      	b.n	404dde <_vfiprintf_r+0x266>
  405114:	9608      	str	r6, [sp, #32]
  405116:	2800      	cmp	r0, #0
  405118:	f040 836b 	bne.w	4057f2 <_vfiprintf_r+0xc7a>
  40511c:	4917      	ldr	r1, [pc, #92]	; (40517c <_vfiprintf_r+0x604>)
  40511e:	910b      	str	r1, [sp, #44]	; 0x2c
  405120:	e7d9      	b.n	4050d6 <_vfiprintf_r+0x55e>
  405122:	9907      	ldr	r1, [sp, #28]
  405124:	9608      	str	r6, [sp, #32]
  405126:	680a      	ldr	r2, [r1, #0]
  405128:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40512c:	f04f 0000 	mov.w	r0, #0
  405130:	460a      	mov	r2, r1
  405132:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  405136:	3204      	adds	r2, #4
  405138:	2001      	movs	r0, #1
  40513a:	9001      	str	r0, [sp, #4]
  40513c:	9207      	str	r2, [sp, #28]
  40513e:	9005      	str	r0, [sp, #20]
  405140:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  405144:	9302      	str	r3, [sp, #8]
  405146:	2400      	movs	r4, #0
  405148:	e670      	b.n	404e2c <_vfiprintf_r+0x2b4>
  40514a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40514e:	f898 2000 	ldrb.w	r2, [r8]
  405152:	e583      	b.n	404c5c <_vfiprintf_r+0xe4>
  405154:	f898 2000 	ldrb.w	r2, [r8]
  405158:	2a6c      	cmp	r2, #108	; 0x6c
  40515a:	bf03      	ittte	eq
  40515c:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  405160:	f043 0320 	orreq.w	r3, r3, #32
  405164:	f108 0801 	addeq.w	r8, r8, #1
  405168:	f043 0310 	orrne.w	r3, r3, #16
  40516c:	e576      	b.n	404c5c <_vfiprintf_r+0xe4>
  40516e:	bf00      	nop
  405170:	00409a10 	.word	0x00409a10
  405174:	00409a20 	.word	0x00409a20
  405178:	004099d0 	.word	0x004099d0
  40517c:	004099bc 	.word	0x004099bc
  405180:	9907      	ldr	r1, [sp, #28]
  405182:	680e      	ldr	r6, [r1, #0]
  405184:	460a      	mov	r2, r1
  405186:	2e00      	cmp	r6, #0
  405188:	f102 0204 	add.w	r2, r2, #4
  40518c:	f6ff ae0f 	blt.w	404dae <_vfiprintf_r+0x236>
  405190:	9207      	str	r2, [sp, #28]
  405192:	f898 2000 	ldrb.w	r2, [r8]
  405196:	e561      	b.n	404c5c <_vfiprintf_r+0xe4>
  405198:	f898 2000 	ldrb.w	r2, [r8]
  40519c:	2001      	movs	r0, #1
  40519e:	252b      	movs	r5, #43	; 0x2b
  4051a0:	e55c      	b.n	404c5c <_vfiprintf_r+0xe4>
  4051a2:	9907      	ldr	r1, [sp, #28]
  4051a4:	9608      	str	r6, [sp, #32]
  4051a6:	f8d1 b000 	ldr.w	fp, [r1]
  4051aa:	f04f 0200 	mov.w	r2, #0
  4051ae:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4051b2:	1d0e      	adds	r6, r1, #4
  4051b4:	f1bb 0f00 	cmp.w	fp, #0
  4051b8:	f000 82e5 	beq.w	405786 <_vfiprintf_r+0xc0e>
  4051bc:	1c67      	adds	r7, r4, #1
  4051be:	f000 82c4 	beq.w	40574a <_vfiprintf_r+0xbd2>
  4051c2:	4622      	mov	r2, r4
  4051c4:	2100      	movs	r1, #0
  4051c6:	4658      	mov	r0, fp
  4051c8:	9301      	str	r3, [sp, #4]
  4051ca:	f002 f8f1 	bl	4073b0 <memchr>
  4051ce:	9b01      	ldr	r3, [sp, #4]
  4051d0:	2800      	cmp	r0, #0
  4051d2:	f000 82e5 	beq.w	4057a0 <_vfiprintf_r+0xc28>
  4051d6:	eba0 020b 	sub.w	r2, r0, fp
  4051da:	9205      	str	r2, [sp, #20]
  4051dc:	9607      	str	r6, [sp, #28]
  4051de:	9302      	str	r3, [sp, #8]
  4051e0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4051e4:	2400      	movs	r4, #0
  4051e6:	e619      	b.n	404e1c <_vfiprintf_r+0x2a4>
  4051e8:	f898 2000 	ldrb.w	r2, [r8]
  4051ec:	2a2a      	cmp	r2, #42	; 0x2a
  4051ee:	f108 0701 	add.w	r7, r8, #1
  4051f2:	f000 82e9 	beq.w	4057c8 <_vfiprintf_r+0xc50>
  4051f6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4051fa:	2909      	cmp	r1, #9
  4051fc:	46b8      	mov	r8, r7
  4051fe:	f04f 0400 	mov.w	r4, #0
  405202:	f63f ad2d 	bhi.w	404c60 <_vfiprintf_r+0xe8>
  405206:	f818 2b01 	ldrb.w	r2, [r8], #1
  40520a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40520e:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  405212:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  405216:	2909      	cmp	r1, #9
  405218:	d9f5      	bls.n	405206 <_vfiprintf_r+0x68e>
  40521a:	e521      	b.n	404c60 <_vfiprintf_r+0xe8>
  40521c:	f043 0320 	orr.w	r3, r3, #32
  405220:	f898 2000 	ldrb.w	r2, [r8]
  405224:	e51a      	b.n	404c5c <_vfiprintf_r+0xe4>
  405226:	9608      	str	r6, [sp, #32]
  405228:	2800      	cmp	r0, #0
  40522a:	f040 82db 	bne.w	4057e4 <_vfiprintf_r+0xc6c>
  40522e:	2a00      	cmp	r2, #0
  405230:	f000 80e7 	beq.w	405402 <_vfiprintf_r+0x88a>
  405234:	2101      	movs	r1, #1
  405236:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40523a:	f04f 0200 	mov.w	r2, #0
  40523e:	9101      	str	r1, [sp, #4]
  405240:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  405244:	9105      	str	r1, [sp, #20]
  405246:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40524a:	e77b      	b.n	405144 <_vfiprintf_r+0x5cc>
  40524c:	9a07      	ldr	r2, [sp, #28]
  40524e:	6813      	ldr	r3, [r2, #0]
  405250:	3204      	adds	r2, #4
  405252:	9207      	str	r2, [sp, #28]
  405254:	9a03      	ldr	r2, [sp, #12]
  405256:	601a      	str	r2, [r3, #0]
  405258:	e4cb      	b.n	404bf2 <_vfiprintf_r+0x7a>
  40525a:	aa0f      	add	r2, sp, #60	; 0x3c
  40525c:	9904      	ldr	r1, [sp, #16]
  40525e:	4620      	mov	r0, r4
  405260:	f7ff fc4a 	bl	404af8 <__sprint_r.part.0>
  405264:	2800      	cmp	r0, #0
  405266:	f040 8139 	bne.w	4054dc <_vfiprintf_r+0x964>
  40526a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40526c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40526e:	f101 0c01 	add.w	ip, r1, #1
  405272:	46ce      	mov	lr, r9
  405274:	e5ff      	b.n	404e76 <_vfiprintf_r+0x2fe>
  405276:	9910      	ldr	r1, [sp, #64]	; 0x40
  405278:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40527a:	1c48      	adds	r0, r1, #1
  40527c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405280:	2d00      	cmp	r5, #0
  405282:	f43f ae22 	beq.w	404eca <_vfiprintf_r+0x352>
  405286:	3201      	adds	r2, #1
  405288:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  40528c:	2101      	movs	r1, #1
  40528e:	2807      	cmp	r0, #7
  405290:	9211      	str	r2, [sp, #68]	; 0x44
  405292:	9010      	str	r0, [sp, #64]	; 0x40
  405294:	f8ca 5000 	str.w	r5, [sl]
  405298:	f8ca 1004 	str.w	r1, [sl, #4]
  40529c:	f340 8108 	ble.w	4054b0 <_vfiprintf_r+0x938>
  4052a0:	2a00      	cmp	r2, #0
  4052a2:	f040 81bc 	bne.w	40561e <_vfiprintf_r+0xaa6>
  4052a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4052a8:	2b00      	cmp	r3, #0
  4052aa:	f43f ae1f 	beq.w	404eec <_vfiprintf_r+0x374>
  4052ae:	ab0e      	add	r3, sp, #56	; 0x38
  4052b0:	2202      	movs	r2, #2
  4052b2:	4608      	mov	r0, r1
  4052b4:	931c      	str	r3, [sp, #112]	; 0x70
  4052b6:	921d      	str	r2, [sp, #116]	; 0x74
  4052b8:	46ca      	mov	sl, r9
  4052ba:	4601      	mov	r1, r0
  4052bc:	f10a 0a08 	add.w	sl, sl, #8
  4052c0:	3001      	adds	r0, #1
  4052c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4052c4:	2b80      	cmp	r3, #128	; 0x80
  4052c6:	f43f ae19 	beq.w	404efc <_vfiprintf_r+0x384>
  4052ca:	9b05      	ldr	r3, [sp, #20]
  4052cc:	1ae4      	subs	r4, r4, r3
  4052ce:	2c00      	cmp	r4, #0
  4052d0:	dd2e      	ble.n	405330 <_vfiprintf_r+0x7b8>
  4052d2:	2c10      	cmp	r4, #16
  4052d4:	4db3      	ldr	r5, [pc, #716]	; (4055a4 <_vfiprintf_r+0xa2c>)
  4052d6:	dd1e      	ble.n	405316 <_vfiprintf_r+0x79e>
  4052d8:	46d6      	mov	lr, sl
  4052da:	2610      	movs	r6, #16
  4052dc:	9f06      	ldr	r7, [sp, #24]
  4052de:	f8dd a010 	ldr.w	sl, [sp, #16]
  4052e2:	e006      	b.n	4052f2 <_vfiprintf_r+0x77a>
  4052e4:	1c88      	adds	r0, r1, #2
  4052e6:	f10e 0e08 	add.w	lr, lr, #8
  4052ea:	4619      	mov	r1, r3
  4052ec:	3c10      	subs	r4, #16
  4052ee:	2c10      	cmp	r4, #16
  4052f0:	dd10      	ble.n	405314 <_vfiprintf_r+0x79c>
  4052f2:	1c4b      	adds	r3, r1, #1
  4052f4:	3210      	adds	r2, #16
  4052f6:	2b07      	cmp	r3, #7
  4052f8:	9211      	str	r2, [sp, #68]	; 0x44
  4052fa:	e88e 0060 	stmia.w	lr, {r5, r6}
  4052fe:	9310      	str	r3, [sp, #64]	; 0x40
  405300:	ddf0      	ble.n	4052e4 <_vfiprintf_r+0x76c>
  405302:	2a00      	cmp	r2, #0
  405304:	d165      	bne.n	4053d2 <_vfiprintf_r+0x85a>
  405306:	3c10      	subs	r4, #16
  405308:	2c10      	cmp	r4, #16
  40530a:	f04f 0001 	mov.w	r0, #1
  40530e:	4611      	mov	r1, r2
  405310:	46ce      	mov	lr, r9
  405312:	dcee      	bgt.n	4052f2 <_vfiprintf_r+0x77a>
  405314:	46f2      	mov	sl, lr
  405316:	4422      	add	r2, r4
  405318:	2807      	cmp	r0, #7
  40531a:	9211      	str	r2, [sp, #68]	; 0x44
  40531c:	f8ca 5000 	str.w	r5, [sl]
  405320:	f8ca 4004 	str.w	r4, [sl, #4]
  405324:	9010      	str	r0, [sp, #64]	; 0x40
  405326:	f300 8085 	bgt.w	405434 <_vfiprintf_r+0x8bc>
  40532a:	f10a 0a08 	add.w	sl, sl, #8
  40532e:	3001      	adds	r0, #1
  405330:	9905      	ldr	r1, [sp, #20]
  405332:	f8ca b000 	str.w	fp, [sl]
  405336:	440a      	add	r2, r1
  405338:	2807      	cmp	r0, #7
  40533a:	9211      	str	r2, [sp, #68]	; 0x44
  40533c:	f8ca 1004 	str.w	r1, [sl, #4]
  405340:	9010      	str	r0, [sp, #64]	; 0x40
  405342:	f340 8082 	ble.w	40544a <_vfiprintf_r+0x8d2>
  405346:	2a00      	cmp	r2, #0
  405348:	f040 8118 	bne.w	40557c <_vfiprintf_r+0xa04>
  40534c:	9b02      	ldr	r3, [sp, #8]
  40534e:	9210      	str	r2, [sp, #64]	; 0x40
  405350:	0758      	lsls	r0, r3, #29
  405352:	d535      	bpl.n	4053c0 <_vfiprintf_r+0x848>
  405354:	9b08      	ldr	r3, [sp, #32]
  405356:	9901      	ldr	r1, [sp, #4]
  405358:	1a5c      	subs	r4, r3, r1
  40535a:	2c00      	cmp	r4, #0
  40535c:	f340 80e7 	ble.w	40552e <_vfiprintf_r+0x9b6>
  405360:	46ca      	mov	sl, r9
  405362:	2c10      	cmp	r4, #16
  405364:	f340 8218 	ble.w	405798 <_vfiprintf_r+0xc20>
  405368:	9910      	ldr	r1, [sp, #64]	; 0x40
  40536a:	4e8f      	ldr	r6, [pc, #572]	; (4055a8 <_vfiprintf_r+0xa30>)
  40536c:	9f06      	ldr	r7, [sp, #24]
  40536e:	f8dd b010 	ldr.w	fp, [sp, #16]
  405372:	2510      	movs	r5, #16
  405374:	e006      	b.n	405384 <_vfiprintf_r+0x80c>
  405376:	1c88      	adds	r0, r1, #2
  405378:	f10a 0a08 	add.w	sl, sl, #8
  40537c:	4619      	mov	r1, r3
  40537e:	3c10      	subs	r4, #16
  405380:	2c10      	cmp	r4, #16
  405382:	dd11      	ble.n	4053a8 <_vfiprintf_r+0x830>
  405384:	1c4b      	adds	r3, r1, #1
  405386:	3210      	adds	r2, #16
  405388:	2b07      	cmp	r3, #7
  40538a:	9211      	str	r2, [sp, #68]	; 0x44
  40538c:	f8ca 6000 	str.w	r6, [sl]
  405390:	f8ca 5004 	str.w	r5, [sl, #4]
  405394:	9310      	str	r3, [sp, #64]	; 0x40
  405396:	ddee      	ble.n	405376 <_vfiprintf_r+0x7fe>
  405398:	bb42      	cbnz	r2, 4053ec <_vfiprintf_r+0x874>
  40539a:	3c10      	subs	r4, #16
  40539c:	2c10      	cmp	r4, #16
  40539e:	f04f 0001 	mov.w	r0, #1
  4053a2:	4611      	mov	r1, r2
  4053a4:	46ca      	mov	sl, r9
  4053a6:	dced      	bgt.n	405384 <_vfiprintf_r+0x80c>
  4053a8:	4422      	add	r2, r4
  4053aa:	2807      	cmp	r0, #7
  4053ac:	9211      	str	r2, [sp, #68]	; 0x44
  4053ae:	f8ca 6000 	str.w	r6, [sl]
  4053b2:	f8ca 4004 	str.w	r4, [sl, #4]
  4053b6:	9010      	str	r0, [sp, #64]	; 0x40
  4053b8:	dd51      	ble.n	40545e <_vfiprintf_r+0x8e6>
  4053ba:	2a00      	cmp	r2, #0
  4053bc:	f040 819b 	bne.w	4056f6 <_vfiprintf_r+0xb7e>
  4053c0:	9b03      	ldr	r3, [sp, #12]
  4053c2:	9a08      	ldr	r2, [sp, #32]
  4053c4:	9901      	ldr	r1, [sp, #4]
  4053c6:	428a      	cmp	r2, r1
  4053c8:	bfac      	ite	ge
  4053ca:	189b      	addge	r3, r3, r2
  4053cc:	185b      	addlt	r3, r3, r1
  4053ce:	9303      	str	r3, [sp, #12]
  4053d0:	e04e      	b.n	405470 <_vfiprintf_r+0x8f8>
  4053d2:	aa0f      	add	r2, sp, #60	; 0x3c
  4053d4:	4651      	mov	r1, sl
  4053d6:	4638      	mov	r0, r7
  4053d8:	f7ff fb8e 	bl	404af8 <__sprint_r.part.0>
  4053dc:	2800      	cmp	r0, #0
  4053de:	f040 813f 	bne.w	405660 <_vfiprintf_r+0xae8>
  4053e2:	9910      	ldr	r1, [sp, #64]	; 0x40
  4053e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4053e6:	1c48      	adds	r0, r1, #1
  4053e8:	46ce      	mov	lr, r9
  4053ea:	e77f      	b.n	4052ec <_vfiprintf_r+0x774>
  4053ec:	aa0f      	add	r2, sp, #60	; 0x3c
  4053ee:	4659      	mov	r1, fp
  4053f0:	4638      	mov	r0, r7
  4053f2:	f7ff fb81 	bl	404af8 <__sprint_r.part.0>
  4053f6:	b960      	cbnz	r0, 405412 <_vfiprintf_r+0x89a>
  4053f8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4053fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4053fc:	1c48      	adds	r0, r1, #1
  4053fe:	46ca      	mov	sl, r9
  405400:	e7bd      	b.n	40537e <_vfiprintf_r+0x806>
  405402:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405404:	f8dd b010 	ldr.w	fp, [sp, #16]
  405408:	2b00      	cmp	r3, #0
  40540a:	f040 81d4 	bne.w	4057b6 <_vfiprintf_r+0xc3e>
  40540e:	2300      	movs	r3, #0
  405410:	9310      	str	r3, [sp, #64]	; 0x40
  405412:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405416:	f013 0f01 	tst.w	r3, #1
  40541a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40541e:	d102      	bne.n	405426 <_vfiprintf_r+0x8ae>
  405420:	059a      	lsls	r2, r3, #22
  405422:	f140 80de 	bpl.w	4055e2 <_vfiprintf_r+0xa6a>
  405426:	065b      	lsls	r3, r3, #25
  405428:	f53f acb2 	bmi.w	404d90 <_vfiprintf_r+0x218>
  40542c:	9803      	ldr	r0, [sp, #12]
  40542e:	b02d      	add	sp, #180	; 0xb4
  405430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405434:	2a00      	cmp	r2, #0
  405436:	f040 8106 	bne.w	405646 <_vfiprintf_r+0xace>
  40543a:	9a05      	ldr	r2, [sp, #20]
  40543c:	921d      	str	r2, [sp, #116]	; 0x74
  40543e:	2301      	movs	r3, #1
  405440:	9211      	str	r2, [sp, #68]	; 0x44
  405442:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  405446:	9310      	str	r3, [sp, #64]	; 0x40
  405448:	46ca      	mov	sl, r9
  40544a:	f10a 0a08 	add.w	sl, sl, #8
  40544e:	9b02      	ldr	r3, [sp, #8]
  405450:	0759      	lsls	r1, r3, #29
  405452:	d504      	bpl.n	40545e <_vfiprintf_r+0x8e6>
  405454:	9b08      	ldr	r3, [sp, #32]
  405456:	9901      	ldr	r1, [sp, #4]
  405458:	1a5c      	subs	r4, r3, r1
  40545a:	2c00      	cmp	r4, #0
  40545c:	dc81      	bgt.n	405362 <_vfiprintf_r+0x7ea>
  40545e:	9b03      	ldr	r3, [sp, #12]
  405460:	9908      	ldr	r1, [sp, #32]
  405462:	9801      	ldr	r0, [sp, #4]
  405464:	4281      	cmp	r1, r0
  405466:	bfac      	ite	ge
  405468:	185b      	addge	r3, r3, r1
  40546a:	181b      	addlt	r3, r3, r0
  40546c:	9303      	str	r3, [sp, #12]
  40546e:	bb72      	cbnz	r2, 4054ce <_vfiprintf_r+0x956>
  405470:	2300      	movs	r3, #0
  405472:	9310      	str	r3, [sp, #64]	; 0x40
  405474:	46ca      	mov	sl, r9
  405476:	f7ff bbbc 	b.w	404bf2 <_vfiprintf_r+0x7a>
  40547a:	aa0f      	add	r2, sp, #60	; 0x3c
  40547c:	9904      	ldr	r1, [sp, #16]
  40547e:	4620      	mov	r0, r4
  405480:	f7ff fb3a 	bl	404af8 <__sprint_r.part.0>
  405484:	bb50      	cbnz	r0, 4054dc <_vfiprintf_r+0x964>
  405486:	9910      	ldr	r1, [sp, #64]	; 0x40
  405488:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40548a:	f101 0e01 	add.w	lr, r1, #1
  40548e:	46cc      	mov	ip, r9
  405490:	e548      	b.n	404f24 <_vfiprintf_r+0x3ac>
  405492:	2a00      	cmp	r2, #0
  405494:	f040 8140 	bne.w	405718 <_vfiprintf_r+0xba0>
  405498:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  40549c:	2900      	cmp	r1, #0
  40549e:	f000 811b 	beq.w	4056d8 <_vfiprintf_r+0xb60>
  4054a2:	2201      	movs	r2, #1
  4054a4:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  4054a8:	4610      	mov	r0, r2
  4054aa:	921d      	str	r2, [sp, #116]	; 0x74
  4054ac:	911c      	str	r1, [sp, #112]	; 0x70
  4054ae:	46ca      	mov	sl, r9
  4054b0:	4601      	mov	r1, r0
  4054b2:	f10a 0a08 	add.w	sl, sl, #8
  4054b6:	3001      	adds	r0, #1
  4054b8:	e507      	b.n	404eca <_vfiprintf_r+0x352>
  4054ba:	9b02      	ldr	r3, [sp, #8]
  4054bc:	2a01      	cmp	r2, #1
  4054be:	f000 8098 	beq.w	4055f2 <_vfiprintf_r+0xa7a>
  4054c2:	2a02      	cmp	r2, #2
  4054c4:	d10d      	bne.n	4054e2 <_vfiprintf_r+0x96a>
  4054c6:	9302      	str	r3, [sp, #8]
  4054c8:	2600      	movs	r6, #0
  4054ca:	2700      	movs	r7, #0
  4054cc:	e5b0      	b.n	405030 <_vfiprintf_r+0x4b8>
  4054ce:	aa0f      	add	r2, sp, #60	; 0x3c
  4054d0:	9904      	ldr	r1, [sp, #16]
  4054d2:	9806      	ldr	r0, [sp, #24]
  4054d4:	f7ff fb10 	bl	404af8 <__sprint_r.part.0>
  4054d8:	2800      	cmp	r0, #0
  4054da:	d0c9      	beq.n	405470 <_vfiprintf_r+0x8f8>
  4054dc:	f8dd b010 	ldr.w	fp, [sp, #16]
  4054e0:	e797      	b.n	405412 <_vfiprintf_r+0x89a>
  4054e2:	9302      	str	r3, [sp, #8]
  4054e4:	2600      	movs	r6, #0
  4054e6:	2700      	movs	r7, #0
  4054e8:	4649      	mov	r1, r9
  4054ea:	e000      	b.n	4054ee <_vfiprintf_r+0x976>
  4054ec:	4659      	mov	r1, fp
  4054ee:	08f2      	lsrs	r2, r6, #3
  4054f0:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  4054f4:	08f8      	lsrs	r0, r7, #3
  4054f6:	f006 0307 	and.w	r3, r6, #7
  4054fa:	4607      	mov	r7, r0
  4054fc:	4616      	mov	r6, r2
  4054fe:	3330      	adds	r3, #48	; 0x30
  405500:	ea56 0207 	orrs.w	r2, r6, r7
  405504:	f801 3c01 	strb.w	r3, [r1, #-1]
  405508:	f101 3bff 	add.w	fp, r1, #4294967295
  40550c:	d1ee      	bne.n	4054ec <_vfiprintf_r+0x974>
  40550e:	9a02      	ldr	r2, [sp, #8]
  405510:	07d6      	lsls	r6, r2, #31
  405512:	f57f ad9d 	bpl.w	405050 <_vfiprintf_r+0x4d8>
  405516:	2b30      	cmp	r3, #48	; 0x30
  405518:	f43f ad9a 	beq.w	405050 <_vfiprintf_r+0x4d8>
  40551c:	3902      	subs	r1, #2
  40551e:	2330      	movs	r3, #48	; 0x30
  405520:	f80b 3c01 	strb.w	r3, [fp, #-1]
  405524:	eba9 0301 	sub.w	r3, r9, r1
  405528:	9305      	str	r3, [sp, #20]
  40552a:	468b      	mov	fp, r1
  40552c:	e476      	b.n	404e1c <_vfiprintf_r+0x2a4>
  40552e:	9b03      	ldr	r3, [sp, #12]
  405530:	9a08      	ldr	r2, [sp, #32]
  405532:	428a      	cmp	r2, r1
  405534:	bfac      	ite	ge
  405536:	189b      	addge	r3, r3, r2
  405538:	185b      	addlt	r3, r3, r1
  40553a:	9303      	str	r3, [sp, #12]
  40553c:	e798      	b.n	405470 <_vfiprintf_r+0x8f8>
  40553e:	2202      	movs	r2, #2
  405540:	e44d      	b.n	404dde <_vfiprintf_r+0x266>
  405542:	2f00      	cmp	r7, #0
  405544:	bf08      	it	eq
  405546:	2e0a      	cmpeq	r6, #10
  405548:	d352      	bcc.n	4055f0 <_vfiprintf_r+0xa78>
  40554a:	46cb      	mov	fp, r9
  40554c:	4630      	mov	r0, r6
  40554e:	4639      	mov	r1, r7
  405550:	220a      	movs	r2, #10
  405552:	2300      	movs	r3, #0
  405554:	f003 fc6a 	bl	408e2c <__aeabi_uldivmod>
  405558:	3230      	adds	r2, #48	; 0x30
  40555a:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  40555e:	4630      	mov	r0, r6
  405560:	4639      	mov	r1, r7
  405562:	2300      	movs	r3, #0
  405564:	220a      	movs	r2, #10
  405566:	f003 fc61 	bl	408e2c <__aeabi_uldivmod>
  40556a:	4606      	mov	r6, r0
  40556c:	460f      	mov	r7, r1
  40556e:	ea56 0307 	orrs.w	r3, r6, r7
  405572:	d1eb      	bne.n	40554c <_vfiprintf_r+0x9d4>
  405574:	e56c      	b.n	405050 <_vfiprintf_r+0x4d8>
  405576:	9405      	str	r4, [sp, #20]
  405578:	46cb      	mov	fp, r9
  40557a:	e44f      	b.n	404e1c <_vfiprintf_r+0x2a4>
  40557c:	aa0f      	add	r2, sp, #60	; 0x3c
  40557e:	9904      	ldr	r1, [sp, #16]
  405580:	9806      	ldr	r0, [sp, #24]
  405582:	f7ff fab9 	bl	404af8 <__sprint_r.part.0>
  405586:	2800      	cmp	r0, #0
  405588:	d1a8      	bne.n	4054dc <_vfiprintf_r+0x964>
  40558a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40558c:	46ca      	mov	sl, r9
  40558e:	e75e      	b.n	40544e <_vfiprintf_r+0x8d6>
  405590:	aa0f      	add	r2, sp, #60	; 0x3c
  405592:	9904      	ldr	r1, [sp, #16]
  405594:	9806      	ldr	r0, [sp, #24]
  405596:	f7ff faaf 	bl	404af8 <__sprint_r.part.0>
  40559a:	2800      	cmp	r0, #0
  40559c:	d19e      	bne.n	4054dc <_vfiprintf_r+0x964>
  40559e:	46ca      	mov	sl, r9
  4055a0:	f7ff bbc0 	b.w	404d24 <_vfiprintf_r+0x1ac>
  4055a4:	00409a20 	.word	0x00409a20
  4055a8:	00409a10 	.word	0x00409a10
  4055ac:	3104      	adds	r1, #4
  4055ae:	6816      	ldr	r6, [r2, #0]
  4055b0:	9107      	str	r1, [sp, #28]
  4055b2:	2201      	movs	r2, #1
  4055b4:	2700      	movs	r7, #0
  4055b6:	e412      	b.n	404dde <_vfiprintf_r+0x266>
  4055b8:	9807      	ldr	r0, [sp, #28]
  4055ba:	4601      	mov	r1, r0
  4055bc:	3104      	adds	r1, #4
  4055be:	6806      	ldr	r6, [r0, #0]
  4055c0:	9107      	str	r1, [sp, #28]
  4055c2:	2700      	movs	r7, #0
  4055c4:	e40b      	b.n	404dde <_vfiprintf_r+0x266>
  4055c6:	680e      	ldr	r6, [r1, #0]
  4055c8:	3104      	adds	r1, #4
  4055ca:	9107      	str	r1, [sp, #28]
  4055cc:	2700      	movs	r7, #0
  4055ce:	e591      	b.n	4050f4 <_vfiprintf_r+0x57c>
  4055d0:	9907      	ldr	r1, [sp, #28]
  4055d2:	680e      	ldr	r6, [r1, #0]
  4055d4:	460a      	mov	r2, r1
  4055d6:	17f7      	asrs	r7, r6, #31
  4055d8:	3204      	adds	r2, #4
  4055da:	9207      	str	r2, [sp, #28]
  4055dc:	4630      	mov	r0, r6
  4055de:	4639      	mov	r1, r7
  4055e0:	e50f      	b.n	405002 <_vfiprintf_r+0x48a>
  4055e2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4055e6:	f001 fe4d 	bl	407284 <__retarget_lock_release_recursive>
  4055ea:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4055ee:	e71a      	b.n	405426 <_vfiprintf_r+0x8ae>
  4055f0:	9b02      	ldr	r3, [sp, #8]
  4055f2:	9302      	str	r3, [sp, #8]
  4055f4:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4055f8:	3630      	adds	r6, #48	; 0x30
  4055fa:	2301      	movs	r3, #1
  4055fc:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  405600:	9305      	str	r3, [sp, #20]
  405602:	e40b      	b.n	404e1c <_vfiprintf_r+0x2a4>
  405604:	aa0f      	add	r2, sp, #60	; 0x3c
  405606:	9904      	ldr	r1, [sp, #16]
  405608:	9806      	ldr	r0, [sp, #24]
  40560a:	f7ff fa75 	bl	404af8 <__sprint_r.part.0>
  40560e:	2800      	cmp	r0, #0
  405610:	f47f af64 	bne.w	4054dc <_vfiprintf_r+0x964>
  405614:	9910      	ldr	r1, [sp, #64]	; 0x40
  405616:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405618:	1c48      	adds	r0, r1, #1
  40561a:	46ca      	mov	sl, r9
  40561c:	e651      	b.n	4052c2 <_vfiprintf_r+0x74a>
  40561e:	aa0f      	add	r2, sp, #60	; 0x3c
  405620:	9904      	ldr	r1, [sp, #16]
  405622:	9806      	ldr	r0, [sp, #24]
  405624:	f7ff fa68 	bl	404af8 <__sprint_r.part.0>
  405628:	2800      	cmp	r0, #0
  40562a:	f47f af57 	bne.w	4054dc <_vfiprintf_r+0x964>
  40562e:	9910      	ldr	r1, [sp, #64]	; 0x40
  405630:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405632:	1c48      	adds	r0, r1, #1
  405634:	46ca      	mov	sl, r9
  405636:	e448      	b.n	404eca <_vfiprintf_r+0x352>
  405638:	2a00      	cmp	r2, #0
  40563a:	f040 8091 	bne.w	405760 <_vfiprintf_r+0xbe8>
  40563e:	2001      	movs	r0, #1
  405640:	4611      	mov	r1, r2
  405642:	46ca      	mov	sl, r9
  405644:	e641      	b.n	4052ca <_vfiprintf_r+0x752>
  405646:	aa0f      	add	r2, sp, #60	; 0x3c
  405648:	9904      	ldr	r1, [sp, #16]
  40564a:	9806      	ldr	r0, [sp, #24]
  40564c:	f7ff fa54 	bl	404af8 <__sprint_r.part.0>
  405650:	2800      	cmp	r0, #0
  405652:	f47f af43 	bne.w	4054dc <_vfiprintf_r+0x964>
  405656:	9810      	ldr	r0, [sp, #64]	; 0x40
  405658:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40565a:	3001      	adds	r0, #1
  40565c:	46ca      	mov	sl, r9
  40565e:	e667      	b.n	405330 <_vfiprintf_r+0x7b8>
  405660:	46d3      	mov	fp, sl
  405662:	e6d6      	b.n	405412 <_vfiprintf_r+0x89a>
  405664:	9e07      	ldr	r6, [sp, #28]
  405666:	3607      	adds	r6, #7
  405668:	f026 0207 	bic.w	r2, r6, #7
  40566c:	f102 0108 	add.w	r1, r2, #8
  405670:	e9d2 6700 	ldrd	r6, r7, [r2]
  405674:	9107      	str	r1, [sp, #28]
  405676:	2201      	movs	r2, #1
  405678:	f7ff bbb1 	b.w	404dde <_vfiprintf_r+0x266>
  40567c:	9e07      	ldr	r6, [sp, #28]
  40567e:	3607      	adds	r6, #7
  405680:	f026 0607 	bic.w	r6, r6, #7
  405684:	e9d6 0100 	ldrd	r0, r1, [r6]
  405688:	f106 0208 	add.w	r2, r6, #8
  40568c:	9207      	str	r2, [sp, #28]
  40568e:	4606      	mov	r6, r0
  405690:	460f      	mov	r7, r1
  405692:	e4b6      	b.n	405002 <_vfiprintf_r+0x48a>
  405694:	9e07      	ldr	r6, [sp, #28]
  405696:	3607      	adds	r6, #7
  405698:	f026 0207 	bic.w	r2, r6, #7
  40569c:	f102 0108 	add.w	r1, r2, #8
  4056a0:	e9d2 6700 	ldrd	r6, r7, [r2]
  4056a4:	9107      	str	r1, [sp, #28]
  4056a6:	2200      	movs	r2, #0
  4056a8:	f7ff bb99 	b.w	404dde <_vfiprintf_r+0x266>
  4056ac:	9e07      	ldr	r6, [sp, #28]
  4056ae:	3607      	adds	r6, #7
  4056b0:	f026 0107 	bic.w	r1, r6, #7
  4056b4:	f101 0008 	add.w	r0, r1, #8
  4056b8:	9007      	str	r0, [sp, #28]
  4056ba:	e9d1 6700 	ldrd	r6, r7, [r1]
  4056be:	e519      	b.n	4050f4 <_vfiprintf_r+0x57c>
  4056c0:	46cb      	mov	fp, r9
  4056c2:	f7ff bbab 	b.w	404e1c <_vfiprintf_r+0x2a4>
  4056c6:	252d      	movs	r5, #45	; 0x2d
  4056c8:	4276      	negs	r6, r6
  4056ca:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  4056ce:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4056d2:	2201      	movs	r2, #1
  4056d4:	f7ff bb88 	b.w	404de8 <_vfiprintf_r+0x270>
  4056d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4056da:	b9b3      	cbnz	r3, 40570a <_vfiprintf_r+0xb92>
  4056dc:	4611      	mov	r1, r2
  4056de:	2001      	movs	r0, #1
  4056e0:	46ca      	mov	sl, r9
  4056e2:	e5f2      	b.n	4052ca <_vfiprintf_r+0x752>
  4056e4:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4056e8:	f001 fdcc 	bl	407284 <__retarget_lock_release_recursive>
  4056ec:	f04f 33ff 	mov.w	r3, #4294967295
  4056f0:	9303      	str	r3, [sp, #12]
  4056f2:	f7ff bb50 	b.w	404d96 <_vfiprintf_r+0x21e>
  4056f6:	aa0f      	add	r2, sp, #60	; 0x3c
  4056f8:	9904      	ldr	r1, [sp, #16]
  4056fa:	9806      	ldr	r0, [sp, #24]
  4056fc:	f7ff f9fc 	bl	404af8 <__sprint_r.part.0>
  405700:	2800      	cmp	r0, #0
  405702:	f47f aeeb 	bne.w	4054dc <_vfiprintf_r+0x964>
  405706:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405708:	e6a9      	b.n	40545e <_vfiprintf_r+0x8e6>
  40570a:	ab0e      	add	r3, sp, #56	; 0x38
  40570c:	2202      	movs	r2, #2
  40570e:	931c      	str	r3, [sp, #112]	; 0x70
  405710:	921d      	str	r2, [sp, #116]	; 0x74
  405712:	2001      	movs	r0, #1
  405714:	46ca      	mov	sl, r9
  405716:	e5d0      	b.n	4052ba <_vfiprintf_r+0x742>
  405718:	aa0f      	add	r2, sp, #60	; 0x3c
  40571a:	9904      	ldr	r1, [sp, #16]
  40571c:	9806      	ldr	r0, [sp, #24]
  40571e:	f7ff f9eb 	bl	404af8 <__sprint_r.part.0>
  405722:	2800      	cmp	r0, #0
  405724:	f47f aeda 	bne.w	4054dc <_vfiprintf_r+0x964>
  405728:	9910      	ldr	r1, [sp, #64]	; 0x40
  40572a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40572c:	1c48      	adds	r0, r1, #1
  40572e:	46ca      	mov	sl, r9
  405730:	e5a4      	b.n	40527c <_vfiprintf_r+0x704>
  405732:	9a07      	ldr	r2, [sp, #28]
  405734:	9903      	ldr	r1, [sp, #12]
  405736:	6813      	ldr	r3, [r2, #0]
  405738:	17cd      	asrs	r5, r1, #31
  40573a:	4608      	mov	r0, r1
  40573c:	3204      	adds	r2, #4
  40573e:	4629      	mov	r1, r5
  405740:	9207      	str	r2, [sp, #28]
  405742:	e9c3 0100 	strd	r0, r1, [r3]
  405746:	f7ff ba54 	b.w	404bf2 <_vfiprintf_r+0x7a>
  40574a:	4658      	mov	r0, fp
  40574c:	9607      	str	r6, [sp, #28]
  40574e:	9302      	str	r3, [sp, #8]
  405750:	f7fd ff36 	bl	4035c0 <strlen>
  405754:	2400      	movs	r4, #0
  405756:	9005      	str	r0, [sp, #20]
  405758:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40575c:	f7ff bb5e 	b.w	404e1c <_vfiprintf_r+0x2a4>
  405760:	aa0f      	add	r2, sp, #60	; 0x3c
  405762:	9904      	ldr	r1, [sp, #16]
  405764:	9806      	ldr	r0, [sp, #24]
  405766:	f7ff f9c7 	bl	404af8 <__sprint_r.part.0>
  40576a:	2800      	cmp	r0, #0
  40576c:	f47f aeb6 	bne.w	4054dc <_vfiprintf_r+0x964>
  405770:	9910      	ldr	r1, [sp, #64]	; 0x40
  405772:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405774:	1c48      	adds	r0, r1, #1
  405776:	46ca      	mov	sl, r9
  405778:	e5a7      	b.n	4052ca <_vfiprintf_r+0x752>
  40577a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40577c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40577e:	4e20      	ldr	r6, [pc, #128]	; (405800 <_vfiprintf_r+0xc88>)
  405780:	3101      	adds	r1, #1
  405782:	f7ff bb90 	b.w	404ea6 <_vfiprintf_r+0x32e>
  405786:	2c06      	cmp	r4, #6
  405788:	bf28      	it	cs
  40578a:	2406      	movcs	r4, #6
  40578c:	9405      	str	r4, [sp, #20]
  40578e:	9607      	str	r6, [sp, #28]
  405790:	9401      	str	r4, [sp, #4]
  405792:	f8df b070 	ldr.w	fp, [pc, #112]	; 405804 <_vfiprintf_r+0xc8c>
  405796:	e4d5      	b.n	405144 <_vfiprintf_r+0x5cc>
  405798:	9810      	ldr	r0, [sp, #64]	; 0x40
  40579a:	4e19      	ldr	r6, [pc, #100]	; (405800 <_vfiprintf_r+0xc88>)
  40579c:	3001      	adds	r0, #1
  40579e:	e603      	b.n	4053a8 <_vfiprintf_r+0x830>
  4057a0:	9405      	str	r4, [sp, #20]
  4057a2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4057a6:	9607      	str	r6, [sp, #28]
  4057a8:	9302      	str	r3, [sp, #8]
  4057aa:	4604      	mov	r4, r0
  4057ac:	f7ff bb36 	b.w	404e1c <_vfiprintf_r+0x2a4>
  4057b0:	4686      	mov	lr, r0
  4057b2:	f7ff bbce 	b.w	404f52 <_vfiprintf_r+0x3da>
  4057b6:	9806      	ldr	r0, [sp, #24]
  4057b8:	aa0f      	add	r2, sp, #60	; 0x3c
  4057ba:	4659      	mov	r1, fp
  4057bc:	f7ff f99c 	bl	404af8 <__sprint_r.part.0>
  4057c0:	2800      	cmp	r0, #0
  4057c2:	f43f ae24 	beq.w	40540e <_vfiprintf_r+0x896>
  4057c6:	e624      	b.n	405412 <_vfiprintf_r+0x89a>
  4057c8:	9907      	ldr	r1, [sp, #28]
  4057ca:	f898 2001 	ldrb.w	r2, [r8, #1]
  4057ce:	680c      	ldr	r4, [r1, #0]
  4057d0:	3104      	adds	r1, #4
  4057d2:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  4057d6:	46b8      	mov	r8, r7
  4057d8:	9107      	str	r1, [sp, #28]
  4057da:	f7ff ba3f 	b.w	404c5c <_vfiprintf_r+0xe4>
  4057de:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4057e2:	e43c      	b.n	40505e <_vfiprintf_r+0x4e6>
  4057e4:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4057e8:	e521      	b.n	40522e <_vfiprintf_r+0x6b6>
  4057ea:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4057ee:	f7ff bbf4 	b.w	404fda <_vfiprintf_r+0x462>
  4057f2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4057f6:	e491      	b.n	40511c <_vfiprintf_r+0x5a4>
  4057f8:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4057fc:	e469      	b.n	4050d2 <_vfiprintf_r+0x55a>
  4057fe:	bf00      	nop
  405800:	00409a10 	.word	0x00409a10
  405804:	004099e4 	.word	0x004099e4

00405808 <__sbprintf>:
  405808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40580c:	460c      	mov	r4, r1
  40580e:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  405812:	8989      	ldrh	r1, [r1, #12]
  405814:	6e66      	ldr	r6, [r4, #100]	; 0x64
  405816:	89e5      	ldrh	r5, [r4, #14]
  405818:	9619      	str	r6, [sp, #100]	; 0x64
  40581a:	f021 0102 	bic.w	r1, r1, #2
  40581e:	4606      	mov	r6, r0
  405820:	69e0      	ldr	r0, [r4, #28]
  405822:	f8ad 100c 	strh.w	r1, [sp, #12]
  405826:	4617      	mov	r7, r2
  405828:	f44f 6180 	mov.w	r1, #1024	; 0x400
  40582c:	6a62      	ldr	r2, [r4, #36]	; 0x24
  40582e:	f8ad 500e 	strh.w	r5, [sp, #14]
  405832:	4698      	mov	r8, r3
  405834:	ad1a      	add	r5, sp, #104	; 0x68
  405836:	2300      	movs	r3, #0
  405838:	9007      	str	r0, [sp, #28]
  40583a:	a816      	add	r0, sp, #88	; 0x58
  40583c:	9209      	str	r2, [sp, #36]	; 0x24
  40583e:	9306      	str	r3, [sp, #24]
  405840:	9500      	str	r5, [sp, #0]
  405842:	9504      	str	r5, [sp, #16]
  405844:	9102      	str	r1, [sp, #8]
  405846:	9105      	str	r1, [sp, #20]
  405848:	f001 fd16 	bl	407278 <__retarget_lock_init_recursive>
  40584c:	4643      	mov	r3, r8
  40584e:	463a      	mov	r2, r7
  405850:	4669      	mov	r1, sp
  405852:	4630      	mov	r0, r6
  405854:	f7ff f990 	bl	404b78 <_vfiprintf_r>
  405858:	1e05      	subs	r5, r0, #0
  40585a:	db07      	blt.n	40586c <__sbprintf+0x64>
  40585c:	4630      	mov	r0, r6
  40585e:	4669      	mov	r1, sp
  405860:	f001 f8e8 	bl	406a34 <_fflush_r>
  405864:	2800      	cmp	r0, #0
  405866:	bf18      	it	ne
  405868:	f04f 35ff 	movne.w	r5, #4294967295
  40586c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  405870:	065b      	lsls	r3, r3, #25
  405872:	d503      	bpl.n	40587c <__sbprintf+0x74>
  405874:	89a3      	ldrh	r3, [r4, #12]
  405876:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40587a:	81a3      	strh	r3, [r4, #12]
  40587c:	9816      	ldr	r0, [sp, #88]	; 0x58
  40587e:	f001 fcfd 	bl	40727c <__retarget_lock_close_recursive>
  405882:	4628      	mov	r0, r5
  405884:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  405888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040588c <__swsetup_r>:
  40588c:	b538      	push	{r3, r4, r5, lr}
  40588e:	4b30      	ldr	r3, [pc, #192]	; (405950 <__swsetup_r+0xc4>)
  405890:	681b      	ldr	r3, [r3, #0]
  405892:	4605      	mov	r5, r0
  405894:	460c      	mov	r4, r1
  405896:	b113      	cbz	r3, 40589e <__swsetup_r+0x12>
  405898:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40589a:	2a00      	cmp	r2, #0
  40589c:	d038      	beq.n	405910 <__swsetup_r+0x84>
  40589e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4058a2:	b293      	uxth	r3, r2
  4058a4:	0718      	lsls	r0, r3, #28
  4058a6:	d50c      	bpl.n	4058c2 <__swsetup_r+0x36>
  4058a8:	6920      	ldr	r0, [r4, #16]
  4058aa:	b1a8      	cbz	r0, 4058d8 <__swsetup_r+0x4c>
  4058ac:	f013 0201 	ands.w	r2, r3, #1
  4058b0:	d01e      	beq.n	4058f0 <__swsetup_r+0x64>
  4058b2:	6963      	ldr	r3, [r4, #20]
  4058b4:	2200      	movs	r2, #0
  4058b6:	425b      	negs	r3, r3
  4058b8:	61a3      	str	r3, [r4, #24]
  4058ba:	60a2      	str	r2, [r4, #8]
  4058bc:	b1f0      	cbz	r0, 4058fc <__swsetup_r+0x70>
  4058be:	2000      	movs	r0, #0
  4058c0:	bd38      	pop	{r3, r4, r5, pc}
  4058c2:	06d9      	lsls	r1, r3, #27
  4058c4:	d53c      	bpl.n	405940 <__swsetup_r+0xb4>
  4058c6:	0758      	lsls	r0, r3, #29
  4058c8:	d426      	bmi.n	405918 <__swsetup_r+0x8c>
  4058ca:	6920      	ldr	r0, [r4, #16]
  4058cc:	f042 0308 	orr.w	r3, r2, #8
  4058d0:	81a3      	strh	r3, [r4, #12]
  4058d2:	b29b      	uxth	r3, r3
  4058d4:	2800      	cmp	r0, #0
  4058d6:	d1e9      	bne.n	4058ac <__swsetup_r+0x20>
  4058d8:	f403 7220 	and.w	r2, r3, #640	; 0x280
  4058dc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4058e0:	d0e4      	beq.n	4058ac <__swsetup_r+0x20>
  4058e2:	4628      	mov	r0, r5
  4058e4:	4621      	mov	r1, r4
  4058e6:	f001 fcfd 	bl	4072e4 <__smakebuf_r>
  4058ea:	89a3      	ldrh	r3, [r4, #12]
  4058ec:	6920      	ldr	r0, [r4, #16]
  4058ee:	e7dd      	b.n	4058ac <__swsetup_r+0x20>
  4058f0:	0799      	lsls	r1, r3, #30
  4058f2:	bf58      	it	pl
  4058f4:	6962      	ldrpl	r2, [r4, #20]
  4058f6:	60a2      	str	r2, [r4, #8]
  4058f8:	2800      	cmp	r0, #0
  4058fa:	d1e0      	bne.n	4058be <__swsetup_r+0x32>
  4058fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405900:	061a      	lsls	r2, r3, #24
  405902:	d5dd      	bpl.n	4058c0 <__swsetup_r+0x34>
  405904:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405908:	81a3      	strh	r3, [r4, #12]
  40590a:	f04f 30ff 	mov.w	r0, #4294967295
  40590e:	bd38      	pop	{r3, r4, r5, pc}
  405910:	4618      	mov	r0, r3
  405912:	f001 f8e7 	bl	406ae4 <__sinit>
  405916:	e7c2      	b.n	40589e <__swsetup_r+0x12>
  405918:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40591a:	b151      	cbz	r1, 405932 <__swsetup_r+0xa6>
  40591c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405920:	4299      	cmp	r1, r3
  405922:	d004      	beq.n	40592e <__swsetup_r+0xa2>
  405924:	4628      	mov	r0, r5
  405926:	f001 fa03 	bl	406d30 <_free_r>
  40592a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40592e:	2300      	movs	r3, #0
  405930:	6323      	str	r3, [r4, #48]	; 0x30
  405932:	2300      	movs	r3, #0
  405934:	6920      	ldr	r0, [r4, #16]
  405936:	6063      	str	r3, [r4, #4]
  405938:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  40593c:	6020      	str	r0, [r4, #0]
  40593e:	e7c5      	b.n	4058cc <__swsetup_r+0x40>
  405940:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  405944:	2309      	movs	r3, #9
  405946:	602b      	str	r3, [r5, #0]
  405948:	f04f 30ff 	mov.w	r0, #4294967295
  40594c:	81a2      	strh	r2, [r4, #12]
  40594e:	bd38      	pop	{r3, r4, r5, pc}
  405950:	20400144 	.word	0x20400144

00405954 <register_fini>:
  405954:	4b02      	ldr	r3, [pc, #8]	; (405960 <register_fini+0xc>)
  405956:	b113      	cbz	r3, 40595e <register_fini+0xa>
  405958:	4802      	ldr	r0, [pc, #8]	; (405964 <register_fini+0x10>)
  40595a:	f000 b805 	b.w	405968 <atexit>
  40595e:	4770      	bx	lr
  405960:	00000000 	.word	0x00000000
  405964:	00406b55 	.word	0x00406b55

00405968 <atexit>:
  405968:	2300      	movs	r3, #0
  40596a:	4601      	mov	r1, r0
  40596c:	461a      	mov	r2, r3
  40596e:	4618      	mov	r0, r3
  405970:	f002 bc74 	b.w	40825c <__register_exitproc>

00405974 <quorem>:
  405974:	6902      	ldr	r2, [r0, #16]
  405976:	690b      	ldr	r3, [r1, #16]
  405978:	4293      	cmp	r3, r2
  40597a:	f300 808d 	bgt.w	405a98 <quorem+0x124>
  40597e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405982:	f103 38ff 	add.w	r8, r3, #4294967295
  405986:	f101 0714 	add.w	r7, r1, #20
  40598a:	f100 0b14 	add.w	fp, r0, #20
  40598e:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  405992:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  405996:	ea4f 0488 	mov.w	r4, r8, lsl #2
  40599a:	b083      	sub	sp, #12
  40599c:	3201      	adds	r2, #1
  40599e:	fbb3 f9f2 	udiv	r9, r3, r2
  4059a2:	eb0b 0304 	add.w	r3, fp, r4
  4059a6:	9400      	str	r4, [sp, #0]
  4059a8:	eb07 0a04 	add.w	sl, r7, r4
  4059ac:	9301      	str	r3, [sp, #4]
  4059ae:	f1b9 0f00 	cmp.w	r9, #0
  4059b2:	d039      	beq.n	405a28 <quorem+0xb4>
  4059b4:	2500      	movs	r5, #0
  4059b6:	462e      	mov	r6, r5
  4059b8:	46bc      	mov	ip, r7
  4059ba:	46de      	mov	lr, fp
  4059bc:	f85c 4b04 	ldr.w	r4, [ip], #4
  4059c0:	f8de 3000 	ldr.w	r3, [lr]
  4059c4:	b2a2      	uxth	r2, r4
  4059c6:	fb09 5502 	mla	r5, r9, r2, r5
  4059ca:	0c22      	lsrs	r2, r4, #16
  4059cc:	0c2c      	lsrs	r4, r5, #16
  4059ce:	fb09 4202 	mla	r2, r9, r2, r4
  4059d2:	b2ad      	uxth	r5, r5
  4059d4:	1b75      	subs	r5, r6, r5
  4059d6:	b296      	uxth	r6, r2
  4059d8:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  4059dc:	fa15 f383 	uxtah	r3, r5, r3
  4059e0:	eb06 4623 	add.w	r6, r6, r3, asr #16
  4059e4:	b29b      	uxth	r3, r3
  4059e6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  4059ea:	45e2      	cmp	sl, ip
  4059ec:	ea4f 4512 	mov.w	r5, r2, lsr #16
  4059f0:	f84e 3b04 	str.w	r3, [lr], #4
  4059f4:	ea4f 4626 	mov.w	r6, r6, asr #16
  4059f8:	d2e0      	bcs.n	4059bc <quorem+0x48>
  4059fa:	9b00      	ldr	r3, [sp, #0]
  4059fc:	f85b 3003 	ldr.w	r3, [fp, r3]
  405a00:	b993      	cbnz	r3, 405a28 <quorem+0xb4>
  405a02:	9c01      	ldr	r4, [sp, #4]
  405a04:	1f23      	subs	r3, r4, #4
  405a06:	459b      	cmp	fp, r3
  405a08:	d20c      	bcs.n	405a24 <quorem+0xb0>
  405a0a:	f854 3c04 	ldr.w	r3, [r4, #-4]
  405a0e:	b94b      	cbnz	r3, 405a24 <quorem+0xb0>
  405a10:	f1a4 0308 	sub.w	r3, r4, #8
  405a14:	e002      	b.n	405a1c <quorem+0xa8>
  405a16:	681a      	ldr	r2, [r3, #0]
  405a18:	3b04      	subs	r3, #4
  405a1a:	b91a      	cbnz	r2, 405a24 <quorem+0xb0>
  405a1c:	459b      	cmp	fp, r3
  405a1e:	f108 38ff 	add.w	r8, r8, #4294967295
  405a22:	d3f8      	bcc.n	405a16 <quorem+0xa2>
  405a24:	f8c0 8010 	str.w	r8, [r0, #16]
  405a28:	4604      	mov	r4, r0
  405a2a:	f002 f80d 	bl	407a48 <__mcmp>
  405a2e:	2800      	cmp	r0, #0
  405a30:	db2e      	blt.n	405a90 <quorem+0x11c>
  405a32:	f109 0901 	add.w	r9, r9, #1
  405a36:	465d      	mov	r5, fp
  405a38:	2300      	movs	r3, #0
  405a3a:	f857 1b04 	ldr.w	r1, [r7], #4
  405a3e:	6828      	ldr	r0, [r5, #0]
  405a40:	b28a      	uxth	r2, r1
  405a42:	1a9a      	subs	r2, r3, r2
  405a44:	0c0b      	lsrs	r3, r1, #16
  405a46:	fa12 f280 	uxtah	r2, r2, r0
  405a4a:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  405a4e:	eb03 4322 	add.w	r3, r3, r2, asr #16
  405a52:	b292      	uxth	r2, r2
  405a54:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  405a58:	45ba      	cmp	sl, r7
  405a5a:	f845 2b04 	str.w	r2, [r5], #4
  405a5e:	ea4f 4323 	mov.w	r3, r3, asr #16
  405a62:	d2ea      	bcs.n	405a3a <quorem+0xc6>
  405a64:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  405a68:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  405a6c:	b982      	cbnz	r2, 405a90 <quorem+0x11c>
  405a6e:	1f1a      	subs	r2, r3, #4
  405a70:	4593      	cmp	fp, r2
  405a72:	d20b      	bcs.n	405a8c <quorem+0x118>
  405a74:	f853 2c04 	ldr.w	r2, [r3, #-4]
  405a78:	b942      	cbnz	r2, 405a8c <quorem+0x118>
  405a7a:	3b08      	subs	r3, #8
  405a7c:	e002      	b.n	405a84 <quorem+0x110>
  405a7e:	681a      	ldr	r2, [r3, #0]
  405a80:	3b04      	subs	r3, #4
  405a82:	b91a      	cbnz	r2, 405a8c <quorem+0x118>
  405a84:	459b      	cmp	fp, r3
  405a86:	f108 38ff 	add.w	r8, r8, #4294967295
  405a8a:	d3f8      	bcc.n	405a7e <quorem+0x10a>
  405a8c:	f8c4 8010 	str.w	r8, [r4, #16]
  405a90:	4648      	mov	r0, r9
  405a92:	b003      	add	sp, #12
  405a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405a98:	2000      	movs	r0, #0
  405a9a:	4770      	bx	lr
  405a9c:	0000      	movs	r0, r0
	...

00405aa0 <_dtoa_r>:
  405aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405aa4:	6c01      	ldr	r1, [r0, #64]	; 0x40
  405aa6:	b09b      	sub	sp, #108	; 0x6c
  405aa8:	4604      	mov	r4, r0
  405aaa:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  405aac:	4692      	mov	sl, r2
  405aae:	469b      	mov	fp, r3
  405ab0:	b141      	cbz	r1, 405ac4 <_dtoa_r+0x24>
  405ab2:	6c42      	ldr	r2, [r0, #68]	; 0x44
  405ab4:	604a      	str	r2, [r1, #4]
  405ab6:	2301      	movs	r3, #1
  405ab8:	4093      	lsls	r3, r2
  405aba:	608b      	str	r3, [r1, #8]
  405abc:	f001 fdec 	bl	407698 <_Bfree>
  405ac0:	2300      	movs	r3, #0
  405ac2:	6423      	str	r3, [r4, #64]	; 0x40
  405ac4:	f1bb 0f00 	cmp.w	fp, #0
  405ac8:	465d      	mov	r5, fp
  405aca:	db35      	blt.n	405b38 <_dtoa_r+0x98>
  405acc:	2300      	movs	r3, #0
  405ace:	6033      	str	r3, [r6, #0]
  405ad0:	4b9d      	ldr	r3, [pc, #628]	; (405d48 <_dtoa_r+0x2a8>)
  405ad2:	43ab      	bics	r3, r5
  405ad4:	d015      	beq.n	405b02 <_dtoa_r+0x62>
  405ad6:	4650      	mov	r0, sl
  405ad8:	4659      	mov	r1, fp
  405ada:	2200      	movs	r2, #0
  405adc:	2300      	movs	r3, #0
  405ade:	f003 f935 	bl	408d4c <__aeabi_dcmpeq>
  405ae2:	4680      	mov	r8, r0
  405ae4:	2800      	cmp	r0, #0
  405ae6:	d02d      	beq.n	405b44 <_dtoa_r+0xa4>
  405ae8:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405aea:	2301      	movs	r3, #1
  405aec:	6013      	str	r3, [r2, #0]
  405aee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405af0:	2b00      	cmp	r3, #0
  405af2:	f000 80bd 	beq.w	405c70 <_dtoa_r+0x1d0>
  405af6:	4895      	ldr	r0, [pc, #596]	; (405d4c <_dtoa_r+0x2ac>)
  405af8:	6018      	str	r0, [r3, #0]
  405afa:	3801      	subs	r0, #1
  405afc:	b01b      	add	sp, #108	; 0x6c
  405afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405b02:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405b04:	f242 730f 	movw	r3, #9999	; 0x270f
  405b08:	6013      	str	r3, [r2, #0]
  405b0a:	f1ba 0f00 	cmp.w	sl, #0
  405b0e:	d10d      	bne.n	405b2c <_dtoa_r+0x8c>
  405b10:	f3c5 0513 	ubfx	r5, r5, #0, #20
  405b14:	b955      	cbnz	r5, 405b2c <_dtoa_r+0x8c>
  405b16:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405b18:	488d      	ldr	r0, [pc, #564]	; (405d50 <_dtoa_r+0x2b0>)
  405b1a:	2b00      	cmp	r3, #0
  405b1c:	d0ee      	beq.n	405afc <_dtoa_r+0x5c>
  405b1e:	f100 0308 	add.w	r3, r0, #8
  405b22:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  405b24:	6013      	str	r3, [r2, #0]
  405b26:	b01b      	add	sp, #108	; 0x6c
  405b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405b2c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405b2e:	4889      	ldr	r0, [pc, #548]	; (405d54 <_dtoa_r+0x2b4>)
  405b30:	2b00      	cmp	r3, #0
  405b32:	d0e3      	beq.n	405afc <_dtoa_r+0x5c>
  405b34:	1cc3      	adds	r3, r0, #3
  405b36:	e7f4      	b.n	405b22 <_dtoa_r+0x82>
  405b38:	2301      	movs	r3, #1
  405b3a:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  405b3e:	6033      	str	r3, [r6, #0]
  405b40:	46ab      	mov	fp, r5
  405b42:	e7c5      	b.n	405ad0 <_dtoa_r+0x30>
  405b44:	aa18      	add	r2, sp, #96	; 0x60
  405b46:	ab19      	add	r3, sp, #100	; 0x64
  405b48:	9201      	str	r2, [sp, #4]
  405b4a:	9300      	str	r3, [sp, #0]
  405b4c:	4652      	mov	r2, sl
  405b4e:	465b      	mov	r3, fp
  405b50:	4620      	mov	r0, r4
  405b52:	f002 f819 	bl	407b88 <__d2b>
  405b56:	0d2b      	lsrs	r3, r5, #20
  405b58:	4681      	mov	r9, r0
  405b5a:	d071      	beq.n	405c40 <_dtoa_r+0x1a0>
  405b5c:	f3cb 0213 	ubfx	r2, fp, #0, #20
  405b60:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  405b64:	9f18      	ldr	r7, [sp, #96]	; 0x60
  405b66:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  405b6a:	4650      	mov	r0, sl
  405b6c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  405b70:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  405b74:	2200      	movs	r2, #0
  405b76:	4b78      	ldr	r3, [pc, #480]	; (405d58 <_dtoa_r+0x2b8>)
  405b78:	f002 fccc 	bl	408514 <__aeabi_dsub>
  405b7c:	a36c      	add	r3, pc, #432	; (adr r3, 405d30 <_dtoa_r+0x290>)
  405b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
  405b82:	f002 fe7b 	bl	40887c <__aeabi_dmul>
  405b86:	a36c      	add	r3, pc, #432	; (adr r3, 405d38 <_dtoa_r+0x298>)
  405b88:	e9d3 2300 	ldrd	r2, r3, [r3]
  405b8c:	f002 fcc4 	bl	408518 <__adddf3>
  405b90:	e9cd 0102 	strd	r0, r1, [sp, #8]
  405b94:	4630      	mov	r0, r6
  405b96:	f002 fe0b 	bl	4087b0 <__aeabi_i2d>
  405b9a:	a369      	add	r3, pc, #420	; (adr r3, 405d40 <_dtoa_r+0x2a0>)
  405b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
  405ba0:	f002 fe6c 	bl	40887c <__aeabi_dmul>
  405ba4:	4602      	mov	r2, r0
  405ba6:	460b      	mov	r3, r1
  405ba8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  405bac:	f002 fcb4 	bl	408518 <__adddf3>
  405bb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
  405bb4:	f003 f912 	bl	408ddc <__aeabi_d2iz>
  405bb8:	2200      	movs	r2, #0
  405bba:	9002      	str	r0, [sp, #8]
  405bbc:	2300      	movs	r3, #0
  405bbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  405bc2:	f003 f8cd 	bl	408d60 <__aeabi_dcmplt>
  405bc6:	2800      	cmp	r0, #0
  405bc8:	f040 8173 	bne.w	405eb2 <_dtoa_r+0x412>
  405bcc:	9d02      	ldr	r5, [sp, #8]
  405bce:	2d16      	cmp	r5, #22
  405bd0:	f200 815d 	bhi.w	405e8e <_dtoa_r+0x3ee>
  405bd4:	4b61      	ldr	r3, [pc, #388]	; (405d5c <_dtoa_r+0x2bc>)
  405bd6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  405bda:	e9d3 0100 	ldrd	r0, r1, [r3]
  405bde:	4652      	mov	r2, sl
  405be0:	465b      	mov	r3, fp
  405be2:	f003 f8db 	bl	408d9c <__aeabi_dcmpgt>
  405be6:	2800      	cmp	r0, #0
  405be8:	f000 81c5 	beq.w	405f76 <_dtoa_r+0x4d6>
  405bec:	1e6b      	subs	r3, r5, #1
  405bee:	9302      	str	r3, [sp, #8]
  405bf0:	2300      	movs	r3, #0
  405bf2:	930e      	str	r3, [sp, #56]	; 0x38
  405bf4:	1bbf      	subs	r7, r7, r6
  405bf6:	1e7b      	subs	r3, r7, #1
  405bf8:	9306      	str	r3, [sp, #24]
  405bfa:	f100 8154 	bmi.w	405ea6 <_dtoa_r+0x406>
  405bfe:	2300      	movs	r3, #0
  405c00:	9308      	str	r3, [sp, #32]
  405c02:	9b02      	ldr	r3, [sp, #8]
  405c04:	2b00      	cmp	r3, #0
  405c06:	f2c0 8145 	blt.w	405e94 <_dtoa_r+0x3f4>
  405c0a:	9a06      	ldr	r2, [sp, #24]
  405c0c:	930d      	str	r3, [sp, #52]	; 0x34
  405c0e:	4611      	mov	r1, r2
  405c10:	4419      	add	r1, r3
  405c12:	2300      	movs	r3, #0
  405c14:	9106      	str	r1, [sp, #24]
  405c16:	930c      	str	r3, [sp, #48]	; 0x30
  405c18:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405c1a:	2b09      	cmp	r3, #9
  405c1c:	d82a      	bhi.n	405c74 <_dtoa_r+0x1d4>
  405c1e:	2b05      	cmp	r3, #5
  405c20:	f340 865b 	ble.w	4068da <_dtoa_r+0xe3a>
  405c24:	3b04      	subs	r3, #4
  405c26:	9324      	str	r3, [sp, #144]	; 0x90
  405c28:	2500      	movs	r5, #0
  405c2a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405c2c:	3b02      	subs	r3, #2
  405c2e:	2b03      	cmp	r3, #3
  405c30:	f200 8642 	bhi.w	4068b8 <_dtoa_r+0xe18>
  405c34:	e8df f013 	tbh	[pc, r3, lsl #1]
  405c38:	02c903d4 	.word	0x02c903d4
  405c3c:	046103df 	.word	0x046103df
  405c40:	9f18      	ldr	r7, [sp, #96]	; 0x60
  405c42:	9e19      	ldr	r6, [sp, #100]	; 0x64
  405c44:	443e      	add	r6, r7
  405c46:	f206 4332 	addw	r3, r6, #1074	; 0x432
  405c4a:	2b20      	cmp	r3, #32
  405c4c:	f340 818e 	ble.w	405f6c <_dtoa_r+0x4cc>
  405c50:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  405c54:	f206 4012 	addw	r0, r6, #1042	; 0x412
  405c58:	409d      	lsls	r5, r3
  405c5a:	fa2a f000 	lsr.w	r0, sl, r0
  405c5e:	4328      	orrs	r0, r5
  405c60:	f002 fd96 	bl	408790 <__aeabi_ui2d>
  405c64:	2301      	movs	r3, #1
  405c66:	3e01      	subs	r6, #1
  405c68:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  405c6c:	9314      	str	r3, [sp, #80]	; 0x50
  405c6e:	e781      	b.n	405b74 <_dtoa_r+0xd4>
  405c70:	483b      	ldr	r0, [pc, #236]	; (405d60 <_dtoa_r+0x2c0>)
  405c72:	e743      	b.n	405afc <_dtoa_r+0x5c>
  405c74:	2100      	movs	r1, #0
  405c76:	6461      	str	r1, [r4, #68]	; 0x44
  405c78:	4620      	mov	r0, r4
  405c7a:	9125      	str	r1, [sp, #148]	; 0x94
  405c7c:	f001 fce6 	bl	40764c <_Balloc>
  405c80:	f04f 33ff 	mov.w	r3, #4294967295
  405c84:	930a      	str	r3, [sp, #40]	; 0x28
  405c86:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405c88:	930f      	str	r3, [sp, #60]	; 0x3c
  405c8a:	2301      	movs	r3, #1
  405c8c:	9004      	str	r0, [sp, #16]
  405c8e:	6420      	str	r0, [r4, #64]	; 0x40
  405c90:	9224      	str	r2, [sp, #144]	; 0x90
  405c92:	930b      	str	r3, [sp, #44]	; 0x2c
  405c94:	9b19      	ldr	r3, [sp, #100]	; 0x64
  405c96:	2b00      	cmp	r3, #0
  405c98:	f2c0 80d9 	blt.w	405e4e <_dtoa_r+0x3ae>
  405c9c:	9a02      	ldr	r2, [sp, #8]
  405c9e:	2a0e      	cmp	r2, #14
  405ca0:	f300 80d5 	bgt.w	405e4e <_dtoa_r+0x3ae>
  405ca4:	4b2d      	ldr	r3, [pc, #180]	; (405d5c <_dtoa_r+0x2bc>)
  405ca6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405caa:	e9d3 2300 	ldrd	r2, r3, [r3]
  405cae:	e9cd 2308 	strd	r2, r3, [sp, #32]
  405cb2:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405cb4:	2b00      	cmp	r3, #0
  405cb6:	f2c0 83ba 	blt.w	40642e <_dtoa_r+0x98e>
  405cba:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  405cbe:	4650      	mov	r0, sl
  405cc0:	462a      	mov	r2, r5
  405cc2:	4633      	mov	r3, r6
  405cc4:	4659      	mov	r1, fp
  405cc6:	f002 ff03 	bl	408ad0 <__aeabi_ddiv>
  405cca:	f003 f887 	bl	408ddc <__aeabi_d2iz>
  405cce:	4680      	mov	r8, r0
  405cd0:	f002 fd6e 	bl	4087b0 <__aeabi_i2d>
  405cd4:	462a      	mov	r2, r5
  405cd6:	4633      	mov	r3, r6
  405cd8:	f002 fdd0 	bl	40887c <__aeabi_dmul>
  405cdc:	460b      	mov	r3, r1
  405cde:	4602      	mov	r2, r0
  405ce0:	4659      	mov	r1, fp
  405ce2:	4650      	mov	r0, sl
  405ce4:	f002 fc16 	bl	408514 <__aeabi_dsub>
  405ce8:	9d04      	ldr	r5, [sp, #16]
  405cea:	f108 0330 	add.w	r3, r8, #48	; 0x30
  405cee:	702b      	strb	r3, [r5, #0]
  405cf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405cf2:	2b01      	cmp	r3, #1
  405cf4:	4606      	mov	r6, r0
  405cf6:	460f      	mov	r7, r1
  405cf8:	f105 0501 	add.w	r5, r5, #1
  405cfc:	d068      	beq.n	405dd0 <_dtoa_r+0x330>
  405cfe:	2200      	movs	r2, #0
  405d00:	4b18      	ldr	r3, [pc, #96]	; (405d64 <_dtoa_r+0x2c4>)
  405d02:	f002 fdbb 	bl	40887c <__aeabi_dmul>
  405d06:	2200      	movs	r2, #0
  405d08:	2300      	movs	r3, #0
  405d0a:	4606      	mov	r6, r0
  405d0c:	460f      	mov	r7, r1
  405d0e:	f003 f81d 	bl	408d4c <__aeabi_dcmpeq>
  405d12:	2800      	cmp	r0, #0
  405d14:	f040 8088 	bne.w	405e28 <_dtoa_r+0x388>
  405d18:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  405d1c:	f04f 0a00 	mov.w	sl, #0
  405d20:	f8df b040 	ldr.w	fp, [pc, #64]	; 405d64 <_dtoa_r+0x2c4>
  405d24:	940c      	str	r4, [sp, #48]	; 0x30
  405d26:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  405d2a:	e028      	b.n	405d7e <_dtoa_r+0x2de>
  405d2c:	f3af 8000 	nop.w
  405d30:	636f4361 	.word	0x636f4361
  405d34:	3fd287a7 	.word	0x3fd287a7
  405d38:	8b60c8b3 	.word	0x8b60c8b3
  405d3c:	3fc68a28 	.word	0x3fc68a28
  405d40:	509f79fb 	.word	0x509f79fb
  405d44:	3fd34413 	.word	0x3fd34413
  405d48:	7ff00000 	.word	0x7ff00000
  405d4c:	004099ed 	.word	0x004099ed
  405d50:	00409a30 	.word	0x00409a30
  405d54:	00409a3c 	.word	0x00409a3c
  405d58:	3ff80000 	.word	0x3ff80000
  405d5c:	00409a78 	.word	0x00409a78
  405d60:	004099ec 	.word	0x004099ec
  405d64:	40240000 	.word	0x40240000
  405d68:	f002 fd88 	bl	40887c <__aeabi_dmul>
  405d6c:	2200      	movs	r2, #0
  405d6e:	2300      	movs	r3, #0
  405d70:	4606      	mov	r6, r0
  405d72:	460f      	mov	r7, r1
  405d74:	f002 ffea 	bl	408d4c <__aeabi_dcmpeq>
  405d78:	2800      	cmp	r0, #0
  405d7a:	f040 83c1 	bne.w	406500 <_dtoa_r+0xa60>
  405d7e:	4642      	mov	r2, r8
  405d80:	464b      	mov	r3, r9
  405d82:	4630      	mov	r0, r6
  405d84:	4639      	mov	r1, r7
  405d86:	f002 fea3 	bl	408ad0 <__aeabi_ddiv>
  405d8a:	f003 f827 	bl	408ddc <__aeabi_d2iz>
  405d8e:	4604      	mov	r4, r0
  405d90:	f002 fd0e 	bl	4087b0 <__aeabi_i2d>
  405d94:	4642      	mov	r2, r8
  405d96:	464b      	mov	r3, r9
  405d98:	f002 fd70 	bl	40887c <__aeabi_dmul>
  405d9c:	4602      	mov	r2, r0
  405d9e:	460b      	mov	r3, r1
  405da0:	4630      	mov	r0, r6
  405da2:	4639      	mov	r1, r7
  405da4:	f002 fbb6 	bl	408514 <__aeabi_dsub>
  405da8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  405dac:	9e04      	ldr	r6, [sp, #16]
  405dae:	f805 eb01 	strb.w	lr, [r5], #1
  405db2:	eba5 0e06 	sub.w	lr, r5, r6
  405db6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  405db8:	45b6      	cmp	lr, r6
  405dba:	e9cd 0106 	strd	r0, r1, [sp, #24]
  405dbe:	4652      	mov	r2, sl
  405dc0:	465b      	mov	r3, fp
  405dc2:	d1d1      	bne.n	405d68 <_dtoa_r+0x2c8>
  405dc4:	46a0      	mov	r8, r4
  405dc6:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  405dca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405dcc:	4606      	mov	r6, r0
  405dce:	460f      	mov	r7, r1
  405dd0:	4632      	mov	r2, r6
  405dd2:	463b      	mov	r3, r7
  405dd4:	4630      	mov	r0, r6
  405dd6:	4639      	mov	r1, r7
  405dd8:	f002 fb9e 	bl	408518 <__adddf3>
  405ddc:	4606      	mov	r6, r0
  405dde:	460f      	mov	r7, r1
  405de0:	4602      	mov	r2, r0
  405de2:	460b      	mov	r3, r1
  405de4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405de8:	f002 ffba 	bl	408d60 <__aeabi_dcmplt>
  405dec:	b948      	cbnz	r0, 405e02 <_dtoa_r+0x362>
  405dee:	4632      	mov	r2, r6
  405df0:	463b      	mov	r3, r7
  405df2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405df6:	f002 ffa9 	bl	408d4c <__aeabi_dcmpeq>
  405dfa:	b1a8      	cbz	r0, 405e28 <_dtoa_r+0x388>
  405dfc:	f018 0f01 	tst.w	r8, #1
  405e00:	d012      	beq.n	405e28 <_dtoa_r+0x388>
  405e02:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  405e06:	9a04      	ldr	r2, [sp, #16]
  405e08:	1e6b      	subs	r3, r5, #1
  405e0a:	e004      	b.n	405e16 <_dtoa_r+0x376>
  405e0c:	429a      	cmp	r2, r3
  405e0e:	f000 8401 	beq.w	406614 <_dtoa_r+0xb74>
  405e12:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  405e16:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  405e1a:	f103 0501 	add.w	r5, r3, #1
  405e1e:	d0f5      	beq.n	405e0c <_dtoa_r+0x36c>
  405e20:	f108 0801 	add.w	r8, r8, #1
  405e24:	f883 8000 	strb.w	r8, [r3]
  405e28:	4649      	mov	r1, r9
  405e2a:	4620      	mov	r0, r4
  405e2c:	f001 fc34 	bl	407698 <_Bfree>
  405e30:	2200      	movs	r2, #0
  405e32:	9b02      	ldr	r3, [sp, #8]
  405e34:	702a      	strb	r2, [r5, #0]
  405e36:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405e38:	3301      	adds	r3, #1
  405e3a:	6013      	str	r3, [r2, #0]
  405e3c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405e3e:	2b00      	cmp	r3, #0
  405e40:	f000 839e 	beq.w	406580 <_dtoa_r+0xae0>
  405e44:	9804      	ldr	r0, [sp, #16]
  405e46:	601d      	str	r5, [r3, #0]
  405e48:	b01b      	add	sp, #108	; 0x6c
  405e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405e4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405e50:	2a00      	cmp	r2, #0
  405e52:	d03e      	beq.n	405ed2 <_dtoa_r+0x432>
  405e54:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405e56:	2a01      	cmp	r2, #1
  405e58:	f340 8311 	ble.w	40647e <_dtoa_r+0x9de>
  405e5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405e5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405e60:	1e5f      	subs	r7, r3, #1
  405e62:	42ba      	cmp	r2, r7
  405e64:	f2c0 838f 	blt.w	406586 <_dtoa_r+0xae6>
  405e68:	1bd7      	subs	r7, r2, r7
  405e6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405e6c:	2b00      	cmp	r3, #0
  405e6e:	f2c0 848b 	blt.w	406788 <_dtoa_r+0xce8>
  405e72:	9d08      	ldr	r5, [sp, #32]
  405e74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405e76:	9a08      	ldr	r2, [sp, #32]
  405e78:	441a      	add	r2, r3
  405e7a:	9208      	str	r2, [sp, #32]
  405e7c:	9a06      	ldr	r2, [sp, #24]
  405e7e:	2101      	movs	r1, #1
  405e80:	441a      	add	r2, r3
  405e82:	4620      	mov	r0, r4
  405e84:	9206      	str	r2, [sp, #24]
  405e86:	f001 fca1 	bl	4077cc <__i2b>
  405e8a:	4606      	mov	r6, r0
  405e8c:	e024      	b.n	405ed8 <_dtoa_r+0x438>
  405e8e:	2301      	movs	r3, #1
  405e90:	930e      	str	r3, [sp, #56]	; 0x38
  405e92:	e6af      	b.n	405bf4 <_dtoa_r+0x154>
  405e94:	9a08      	ldr	r2, [sp, #32]
  405e96:	9b02      	ldr	r3, [sp, #8]
  405e98:	1ad2      	subs	r2, r2, r3
  405e9a:	425b      	negs	r3, r3
  405e9c:	930c      	str	r3, [sp, #48]	; 0x30
  405e9e:	2300      	movs	r3, #0
  405ea0:	9208      	str	r2, [sp, #32]
  405ea2:	930d      	str	r3, [sp, #52]	; 0x34
  405ea4:	e6b8      	b.n	405c18 <_dtoa_r+0x178>
  405ea6:	f1c7 0301 	rsb	r3, r7, #1
  405eaa:	9308      	str	r3, [sp, #32]
  405eac:	2300      	movs	r3, #0
  405eae:	9306      	str	r3, [sp, #24]
  405eb0:	e6a7      	b.n	405c02 <_dtoa_r+0x162>
  405eb2:	9d02      	ldr	r5, [sp, #8]
  405eb4:	4628      	mov	r0, r5
  405eb6:	f002 fc7b 	bl	4087b0 <__aeabi_i2d>
  405eba:	4602      	mov	r2, r0
  405ebc:	460b      	mov	r3, r1
  405ebe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  405ec2:	f002 ff43 	bl	408d4c <__aeabi_dcmpeq>
  405ec6:	2800      	cmp	r0, #0
  405ec8:	f47f ae80 	bne.w	405bcc <_dtoa_r+0x12c>
  405ecc:	1e6b      	subs	r3, r5, #1
  405ece:	9302      	str	r3, [sp, #8]
  405ed0:	e67c      	b.n	405bcc <_dtoa_r+0x12c>
  405ed2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405ed4:	9d08      	ldr	r5, [sp, #32]
  405ed6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  405ed8:	2d00      	cmp	r5, #0
  405eda:	dd0c      	ble.n	405ef6 <_dtoa_r+0x456>
  405edc:	9906      	ldr	r1, [sp, #24]
  405ede:	2900      	cmp	r1, #0
  405ee0:	460b      	mov	r3, r1
  405ee2:	dd08      	ble.n	405ef6 <_dtoa_r+0x456>
  405ee4:	42a9      	cmp	r1, r5
  405ee6:	9a08      	ldr	r2, [sp, #32]
  405ee8:	bfa8      	it	ge
  405eea:	462b      	movge	r3, r5
  405eec:	1ad2      	subs	r2, r2, r3
  405eee:	1aed      	subs	r5, r5, r3
  405ef0:	1acb      	subs	r3, r1, r3
  405ef2:	9208      	str	r2, [sp, #32]
  405ef4:	9306      	str	r3, [sp, #24]
  405ef6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405ef8:	b1d3      	cbz	r3, 405f30 <_dtoa_r+0x490>
  405efa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405efc:	2b00      	cmp	r3, #0
  405efe:	f000 82b7 	beq.w	406470 <_dtoa_r+0x9d0>
  405f02:	2f00      	cmp	r7, #0
  405f04:	dd10      	ble.n	405f28 <_dtoa_r+0x488>
  405f06:	4631      	mov	r1, r6
  405f08:	463a      	mov	r2, r7
  405f0a:	4620      	mov	r0, r4
  405f0c:	f001 fcfa 	bl	407904 <__pow5mult>
  405f10:	464a      	mov	r2, r9
  405f12:	4601      	mov	r1, r0
  405f14:	4606      	mov	r6, r0
  405f16:	4620      	mov	r0, r4
  405f18:	f001 fc62 	bl	4077e0 <__multiply>
  405f1c:	4649      	mov	r1, r9
  405f1e:	4680      	mov	r8, r0
  405f20:	4620      	mov	r0, r4
  405f22:	f001 fbb9 	bl	407698 <_Bfree>
  405f26:	46c1      	mov	r9, r8
  405f28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405f2a:	1bda      	subs	r2, r3, r7
  405f2c:	f040 82a1 	bne.w	406472 <_dtoa_r+0x9d2>
  405f30:	2101      	movs	r1, #1
  405f32:	4620      	mov	r0, r4
  405f34:	f001 fc4a 	bl	4077cc <__i2b>
  405f38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405f3a:	2b00      	cmp	r3, #0
  405f3c:	4680      	mov	r8, r0
  405f3e:	dd1c      	ble.n	405f7a <_dtoa_r+0x4da>
  405f40:	4601      	mov	r1, r0
  405f42:	461a      	mov	r2, r3
  405f44:	4620      	mov	r0, r4
  405f46:	f001 fcdd 	bl	407904 <__pow5mult>
  405f4a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405f4c:	2b01      	cmp	r3, #1
  405f4e:	4680      	mov	r8, r0
  405f50:	f340 8254 	ble.w	4063fc <_dtoa_r+0x95c>
  405f54:	2300      	movs	r3, #0
  405f56:	930c      	str	r3, [sp, #48]	; 0x30
  405f58:	f8d8 3010 	ldr.w	r3, [r8, #16]
  405f5c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  405f60:	6918      	ldr	r0, [r3, #16]
  405f62:	f001 fbe3 	bl	40772c <__hi0bits>
  405f66:	f1c0 0020 	rsb	r0, r0, #32
  405f6a:	e010      	b.n	405f8e <_dtoa_r+0x4ee>
  405f6c:	f1c3 0520 	rsb	r5, r3, #32
  405f70:	fa0a f005 	lsl.w	r0, sl, r5
  405f74:	e674      	b.n	405c60 <_dtoa_r+0x1c0>
  405f76:	900e      	str	r0, [sp, #56]	; 0x38
  405f78:	e63c      	b.n	405bf4 <_dtoa_r+0x154>
  405f7a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405f7c:	2b01      	cmp	r3, #1
  405f7e:	f340 8287 	ble.w	406490 <_dtoa_r+0x9f0>
  405f82:	2300      	movs	r3, #0
  405f84:	930c      	str	r3, [sp, #48]	; 0x30
  405f86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405f88:	2001      	movs	r0, #1
  405f8a:	2b00      	cmp	r3, #0
  405f8c:	d1e4      	bne.n	405f58 <_dtoa_r+0x4b8>
  405f8e:	9a06      	ldr	r2, [sp, #24]
  405f90:	4410      	add	r0, r2
  405f92:	f010 001f 	ands.w	r0, r0, #31
  405f96:	f000 80a1 	beq.w	4060dc <_dtoa_r+0x63c>
  405f9a:	f1c0 0320 	rsb	r3, r0, #32
  405f9e:	2b04      	cmp	r3, #4
  405fa0:	f340 849e 	ble.w	4068e0 <_dtoa_r+0xe40>
  405fa4:	9b08      	ldr	r3, [sp, #32]
  405fa6:	f1c0 001c 	rsb	r0, r0, #28
  405faa:	4403      	add	r3, r0
  405fac:	9308      	str	r3, [sp, #32]
  405fae:	4613      	mov	r3, r2
  405fb0:	4403      	add	r3, r0
  405fb2:	4405      	add	r5, r0
  405fb4:	9306      	str	r3, [sp, #24]
  405fb6:	9b08      	ldr	r3, [sp, #32]
  405fb8:	2b00      	cmp	r3, #0
  405fba:	dd05      	ble.n	405fc8 <_dtoa_r+0x528>
  405fbc:	4649      	mov	r1, r9
  405fbe:	461a      	mov	r2, r3
  405fc0:	4620      	mov	r0, r4
  405fc2:	f001 fcef 	bl	4079a4 <__lshift>
  405fc6:	4681      	mov	r9, r0
  405fc8:	9b06      	ldr	r3, [sp, #24]
  405fca:	2b00      	cmp	r3, #0
  405fcc:	dd05      	ble.n	405fda <_dtoa_r+0x53a>
  405fce:	4641      	mov	r1, r8
  405fd0:	461a      	mov	r2, r3
  405fd2:	4620      	mov	r0, r4
  405fd4:	f001 fce6 	bl	4079a4 <__lshift>
  405fd8:	4680      	mov	r8, r0
  405fda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405fdc:	2b00      	cmp	r3, #0
  405fde:	f040 8086 	bne.w	4060ee <_dtoa_r+0x64e>
  405fe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405fe4:	2b00      	cmp	r3, #0
  405fe6:	f340 8266 	ble.w	4064b6 <_dtoa_r+0xa16>
  405fea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405fec:	2b00      	cmp	r3, #0
  405fee:	f000 8098 	beq.w	406122 <_dtoa_r+0x682>
  405ff2:	2d00      	cmp	r5, #0
  405ff4:	dd05      	ble.n	406002 <_dtoa_r+0x562>
  405ff6:	4631      	mov	r1, r6
  405ff8:	462a      	mov	r2, r5
  405ffa:	4620      	mov	r0, r4
  405ffc:	f001 fcd2 	bl	4079a4 <__lshift>
  406000:	4606      	mov	r6, r0
  406002:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406004:	2b00      	cmp	r3, #0
  406006:	f040 8337 	bne.w	406678 <_dtoa_r+0xbd8>
  40600a:	9606      	str	r6, [sp, #24]
  40600c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40600e:	9a04      	ldr	r2, [sp, #16]
  406010:	f8dd b018 	ldr.w	fp, [sp, #24]
  406014:	3b01      	subs	r3, #1
  406016:	18d3      	adds	r3, r2, r3
  406018:	930b      	str	r3, [sp, #44]	; 0x2c
  40601a:	f00a 0301 	and.w	r3, sl, #1
  40601e:	930c      	str	r3, [sp, #48]	; 0x30
  406020:	4617      	mov	r7, r2
  406022:	46c2      	mov	sl, r8
  406024:	4651      	mov	r1, sl
  406026:	4648      	mov	r0, r9
  406028:	f7ff fca4 	bl	405974 <quorem>
  40602c:	4631      	mov	r1, r6
  40602e:	4605      	mov	r5, r0
  406030:	4648      	mov	r0, r9
  406032:	f001 fd09 	bl	407a48 <__mcmp>
  406036:	465a      	mov	r2, fp
  406038:	900a      	str	r0, [sp, #40]	; 0x28
  40603a:	4651      	mov	r1, sl
  40603c:	4620      	mov	r0, r4
  40603e:	f001 fd1f 	bl	407a80 <__mdiff>
  406042:	68c2      	ldr	r2, [r0, #12]
  406044:	4680      	mov	r8, r0
  406046:	f105 0330 	add.w	r3, r5, #48	; 0x30
  40604a:	2a00      	cmp	r2, #0
  40604c:	f040 822b 	bne.w	4064a6 <_dtoa_r+0xa06>
  406050:	4601      	mov	r1, r0
  406052:	4648      	mov	r0, r9
  406054:	9308      	str	r3, [sp, #32]
  406056:	f001 fcf7 	bl	407a48 <__mcmp>
  40605a:	4641      	mov	r1, r8
  40605c:	9006      	str	r0, [sp, #24]
  40605e:	4620      	mov	r0, r4
  406060:	f001 fb1a 	bl	407698 <_Bfree>
  406064:	9a06      	ldr	r2, [sp, #24]
  406066:	9b08      	ldr	r3, [sp, #32]
  406068:	b932      	cbnz	r2, 406078 <_dtoa_r+0x5d8>
  40606a:	9924      	ldr	r1, [sp, #144]	; 0x90
  40606c:	b921      	cbnz	r1, 406078 <_dtoa_r+0x5d8>
  40606e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406070:	2a00      	cmp	r2, #0
  406072:	f000 83ef 	beq.w	406854 <_dtoa_r+0xdb4>
  406076:	9a24      	ldr	r2, [sp, #144]	; 0x90
  406078:	990a      	ldr	r1, [sp, #40]	; 0x28
  40607a:	2900      	cmp	r1, #0
  40607c:	f2c0 829f 	blt.w	4065be <_dtoa_r+0xb1e>
  406080:	d105      	bne.n	40608e <_dtoa_r+0x5ee>
  406082:	9924      	ldr	r1, [sp, #144]	; 0x90
  406084:	b919      	cbnz	r1, 40608e <_dtoa_r+0x5ee>
  406086:	990c      	ldr	r1, [sp, #48]	; 0x30
  406088:	2900      	cmp	r1, #0
  40608a:	f000 8298 	beq.w	4065be <_dtoa_r+0xb1e>
  40608e:	2a00      	cmp	r2, #0
  406090:	f300 8306 	bgt.w	4066a0 <_dtoa_r+0xc00>
  406094:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  406096:	703b      	strb	r3, [r7, #0]
  406098:	f107 0801 	add.w	r8, r7, #1
  40609c:	4297      	cmp	r7, r2
  40609e:	4645      	mov	r5, r8
  4060a0:	f000 830c 	beq.w	4066bc <_dtoa_r+0xc1c>
  4060a4:	4649      	mov	r1, r9
  4060a6:	2300      	movs	r3, #0
  4060a8:	220a      	movs	r2, #10
  4060aa:	4620      	mov	r0, r4
  4060ac:	f001 fafe 	bl	4076ac <__multadd>
  4060b0:	455e      	cmp	r6, fp
  4060b2:	4681      	mov	r9, r0
  4060b4:	4631      	mov	r1, r6
  4060b6:	f04f 0300 	mov.w	r3, #0
  4060ba:	f04f 020a 	mov.w	r2, #10
  4060be:	4620      	mov	r0, r4
  4060c0:	f000 81eb 	beq.w	40649a <_dtoa_r+0x9fa>
  4060c4:	f001 faf2 	bl	4076ac <__multadd>
  4060c8:	4659      	mov	r1, fp
  4060ca:	4606      	mov	r6, r0
  4060cc:	2300      	movs	r3, #0
  4060ce:	220a      	movs	r2, #10
  4060d0:	4620      	mov	r0, r4
  4060d2:	f001 faeb 	bl	4076ac <__multadd>
  4060d6:	4647      	mov	r7, r8
  4060d8:	4683      	mov	fp, r0
  4060da:	e7a3      	b.n	406024 <_dtoa_r+0x584>
  4060dc:	201c      	movs	r0, #28
  4060de:	9b08      	ldr	r3, [sp, #32]
  4060e0:	4403      	add	r3, r0
  4060e2:	9308      	str	r3, [sp, #32]
  4060e4:	9b06      	ldr	r3, [sp, #24]
  4060e6:	4403      	add	r3, r0
  4060e8:	4405      	add	r5, r0
  4060ea:	9306      	str	r3, [sp, #24]
  4060ec:	e763      	b.n	405fb6 <_dtoa_r+0x516>
  4060ee:	4641      	mov	r1, r8
  4060f0:	4648      	mov	r0, r9
  4060f2:	f001 fca9 	bl	407a48 <__mcmp>
  4060f6:	2800      	cmp	r0, #0
  4060f8:	f6bf af73 	bge.w	405fe2 <_dtoa_r+0x542>
  4060fc:	9f02      	ldr	r7, [sp, #8]
  4060fe:	4649      	mov	r1, r9
  406100:	2300      	movs	r3, #0
  406102:	220a      	movs	r2, #10
  406104:	4620      	mov	r0, r4
  406106:	3f01      	subs	r7, #1
  406108:	9702      	str	r7, [sp, #8]
  40610a:	f001 facf 	bl	4076ac <__multadd>
  40610e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406110:	4681      	mov	r9, r0
  406112:	2b00      	cmp	r3, #0
  406114:	f040 83b6 	bne.w	406884 <_dtoa_r+0xde4>
  406118:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40611a:	2b00      	cmp	r3, #0
  40611c:	f340 83bf 	ble.w	40689e <_dtoa_r+0xdfe>
  406120:	930a      	str	r3, [sp, #40]	; 0x28
  406122:	f8dd b010 	ldr.w	fp, [sp, #16]
  406126:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  406128:	465d      	mov	r5, fp
  40612a:	e002      	b.n	406132 <_dtoa_r+0x692>
  40612c:	f001 fabe 	bl	4076ac <__multadd>
  406130:	4681      	mov	r9, r0
  406132:	4641      	mov	r1, r8
  406134:	4648      	mov	r0, r9
  406136:	f7ff fc1d 	bl	405974 <quorem>
  40613a:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  40613e:	f805 ab01 	strb.w	sl, [r5], #1
  406142:	eba5 030b 	sub.w	r3, r5, fp
  406146:	42bb      	cmp	r3, r7
  406148:	f04f 020a 	mov.w	r2, #10
  40614c:	f04f 0300 	mov.w	r3, #0
  406150:	4649      	mov	r1, r9
  406152:	4620      	mov	r0, r4
  406154:	dbea      	blt.n	40612c <_dtoa_r+0x68c>
  406156:	9b04      	ldr	r3, [sp, #16]
  406158:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40615a:	2a01      	cmp	r2, #1
  40615c:	bfac      	ite	ge
  40615e:	189b      	addge	r3, r3, r2
  406160:	3301      	addlt	r3, #1
  406162:	461d      	mov	r5, r3
  406164:	f04f 0b00 	mov.w	fp, #0
  406168:	4649      	mov	r1, r9
  40616a:	2201      	movs	r2, #1
  40616c:	4620      	mov	r0, r4
  40616e:	f001 fc19 	bl	4079a4 <__lshift>
  406172:	4641      	mov	r1, r8
  406174:	4681      	mov	r9, r0
  406176:	f001 fc67 	bl	407a48 <__mcmp>
  40617a:	2800      	cmp	r0, #0
  40617c:	f340 823d 	ble.w	4065fa <_dtoa_r+0xb5a>
  406180:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  406184:	9904      	ldr	r1, [sp, #16]
  406186:	1e6b      	subs	r3, r5, #1
  406188:	e004      	b.n	406194 <_dtoa_r+0x6f4>
  40618a:	428b      	cmp	r3, r1
  40618c:	f000 81ae 	beq.w	4064ec <_dtoa_r+0xa4c>
  406190:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  406194:	2a39      	cmp	r2, #57	; 0x39
  406196:	f103 0501 	add.w	r5, r3, #1
  40619a:	d0f6      	beq.n	40618a <_dtoa_r+0x6ea>
  40619c:	3201      	adds	r2, #1
  40619e:	701a      	strb	r2, [r3, #0]
  4061a0:	4641      	mov	r1, r8
  4061a2:	4620      	mov	r0, r4
  4061a4:	f001 fa78 	bl	407698 <_Bfree>
  4061a8:	2e00      	cmp	r6, #0
  4061aa:	f43f ae3d 	beq.w	405e28 <_dtoa_r+0x388>
  4061ae:	f1bb 0f00 	cmp.w	fp, #0
  4061b2:	d005      	beq.n	4061c0 <_dtoa_r+0x720>
  4061b4:	45b3      	cmp	fp, r6
  4061b6:	d003      	beq.n	4061c0 <_dtoa_r+0x720>
  4061b8:	4659      	mov	r1, fp
  4061ba:	4620      	mov	r0, r4
  4061bc:	f001 fa6c 	bl	407698 <_Bfree>
  4061c0:	4631      	mov	r1, r6
  4061c2:	4620      	mov	r0, r4
  4061c4:	f001 fa68 	bl	407698 <_Bfree>
  4061c8:	e62e      	b.n	405e28 <_dtoa_r+0x388>
  4061ca:	2300      	movs	r3, #0
  4061cc:	930b      	str	r3, [sp, #44]	; 0x2c
  4061ce:	9b02      	ldr	r3, [sp, #8]
  4061d0:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4061d2:	4413      	add	r3, r2
  4061d4:	930f      	str	r3, [sp, #60]	; 0x3c
  4061d6:	3301      	adds	r3, #1
  4061d8:	2b01      	cmp	r3, #1
  4061da:	461f      	mov	r7, r3
  4061dc:	461e      	mov	r6, r3
  4061de:	930a      	str	r3, [sp, #40]	; 0x28
  4061e0:	bfb8      	it	lt
  4061e2:	2701      	movlt	r7, #1
  4061e4:	2100      	movs	r1, #0
  4061e6:	2f17      	cmp	r7, #23
  4061e8:	6461      	str	r1, [r4, #68]	; 0x44
  4061ea:	d90a      	bls.n	406202 <_dtoa_r+0x762>
  4061ec:	2201      	movs	r2, #1
  4061ee:	2304      	movs	r3, #4
  4061f0:	005b      	lsls	r3, r3, #1
  4061f2:	f103 0014 	add.w	r0, r3, #20
  4061f6:	4287      	cmp	r7, r0
  4061f8:	4611      	mov	r1, r2
  4061fa:	f102 0201 	add.w	r2, r2, #1
  4061fe:	d2f7      	bcs.n	4061f0 <_dtoa_r+0x750>
  406200:	6461      	str	r1, [r4, #68]	; 0x44
  406202:	4620      	mov	r0, r4
  406204:	f001 fa22 	bl	40764c <_Balloc>
  406208:	2e0e      	cmp	r6, #14
  40620a:	9004      	str	r0, [sp, #16]
  40620c:	6420      	str	r0, [r4, #64]	; 0x40
  40620e:	f63f ad41 	bhi.w	405c94 <_dtoa_r+0x1f4>
  406212:	2d00      	cmp	r5, #0
  406214:	f43f ad3e 	beq.w	405c94 <_dtoa_r+0x1f4>
  406218:	9902      	ldr	r1, [sp, #8]
  40621a:	2900      	cmp	r1, #0
  40621c:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  406220:	f340 8202 	ble.w	406628 <_dtoa_r+0xb88>
  406224:	4bb8      	ldr	r3, [pc, #736]	; (406508 <_dtoa_r+0xa68>)
  406226:	f001 020f 	and.w	r2, r1, #15
  40622a:	110d      	asrs	r5, r1, #4
  40622c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  406230:	06e9      	lsls	r1, r5, #27
  406232:	e9d3 6700 	ldrd	r6, r7, [r3]
  406236:	f140 81ae 	bpl.w	406596 <_dtoa_r+0xaf6>
  40623a:	4bb4      	ldr	r3, [pc, #720]	; (40650c <_dtoa_r+0xa6c>)
  40623c:	4650      	mov	r0, sl
  40623e:	4659      	mov	r1, fp
  406240:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  406244:	f002 fc44 	bl	408ad0 <__aeabi_ddiv>
  406248:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  40624c:	f005 050f 	and.w	r5, r5, #15
  406250:	f04f 0a03 	mov.w	sl, #3
  406254:	b18d      	cbz	r5, 40627a <_dtoa_r+0x7da>
  406256:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 40650c <_dtoa_r+0xa6c>
  40625a:	07ea      	lsls	r2, r5, #31
  40625c:	d509      	bpl.n	406272 <_dtoa_r+0x7d2>
  40625e:	4630      	mov	r0, r6
  406260:	4639      	mov	r1, r7
  406262:	e9d8 2300 	ldrd	r2, r3, [r8]
  406266:	f002 fb09 	bl	40887c <__aeabi_dmul>
  40626a:	f10a 0a01 	add.w	sl, sl, #1
  40626e:	4606      	mov	r6, r0
  406270:	460f      	mov	r7, r1
  406272:	106d      	asrs	r5, r5, #1
  406274:	f108 0808 	add.w	r8, r8, #8
  406278:	d1ef      	bne.n	40625a <_dtoa_r+0x7ba>
  40627a:	463b      	mov	r3, r7
  40627c:	4632      	mov	r2, r6
  40627e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  406282:	f002 fc25 	bl	408ad0 <__aeabi_ddiv>
  406286:	4607      	mov	r7, r0
  406288:	4688      	mov	r8, r1
  40628a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40628c:	b143      	cbz	r3, 4062a0 <_dtoa_r+0x800>
  40628e:	2200      	movs	r2, #0
  406290:	4b9f      	ldr	r3, [pc, #636]	; (406510 <_dtoa_r+0xa70>)
  406292:	4638      	mov	r0, r7
  406294:	4641      	mov	r1, r8
  406296:	f002 fd63 	bl	408d60 <__aeabi_dcmplt>
  40629a:	2800      	cmp	r0, #0
  40629c:	f040 8286 	bne.w	4067ac <_dtoa_r+0xd0c>
  4062a0:	4650      	mov	r0, sl
  4062a2:	f002 fa85 	bl	4087b0 <__aeabi_i2d>
  4062a6:	463a      	mov	r2, r7
  4062a8:	4643      	mov	r3, r8
  4062aa:	f002 fae7 	bl	40887c <__aeabi_dmul>
  4062ae:	4b99      	ldr	r3, [pc, #612]	; (406514 <_dtoa_r+0xa74>)
  4062b0:	2200      	movs	r2, #0
  4062b2:	f002 f931 	bl	408518 <__adddf3>
  4062b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4062b8:	4605      	mov	r5, r0
  4062ba:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4062be:	2b00      	cmp	r3, #0
  4062c0:	f000 813e 	beq.w	406540 <_dtoa_r+0xaa0>
  4062c4:	9b02      	ldr	r3, [sp, #8]
  4062c6:	9315      	str	r3, [sp, #84]	; 0x54
  4062c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4062ca:	9312      	str	r3, [sp, #72]	; 0x48
  4062cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4062ce:	2b00      	cmp	r3, #0
  4062d0:	f000 81fa 	beq.w	4066c8 <_dtoa_r+0xc28>
  4062d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4062d6:	4b8c      	ldr	r3, [pc, #560]	; (406508 <_dtoa_r+0xa68>)
  4062d8:	498f      	ldr	r1, [pc, #572]	; (406518 <_dtoa_r+0xa78>)
  4062da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4062de:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  4062e2:	2000      	movs	r0, #0
  4062e4:	f002 fbf4 	bl	408ad0 <__aeabi_ddiv>
  4062e8:	462a      	mov	r2, r5
  4062ea:	4633      	mov	r3, r6
  4062ec:	f002 f912 	bl	408514 <__aeabi_dsub>
  4062f0:	4682      	mov	sl, r0
  4062f2:	468b      	mov	fp, r1
  4062f4:	4638      	mov	r0, r7
  4062f6:	4641      	mov	r1, r8
  4062f8:	f002 fd70 	bl	408ddc <__aeabi_d2iz>
  4062fc:	4605      	mov	r5, r0
  4062fe:	f002 fa57 	bl	4087b0 <__aeabi_i2d>
  406302:	4602      	mov	r2, r0
  406304:	460b      	mov	r3, r1
  406306:	4638      	mov	r0, r7
  406308:	4641      	mov	r1, r8
  40630a:	f002 f903 	bl	408514 <__aeabi_dsub>
  40630e:	3530      	adds	r5, #48	; 0x30
  406310:	fa5f f885 	uxtb.w	r8, r5
  406314:	9d04      	ldr	r5, [sp, #16]
  406316:	4606      	mov	r6, r0
  406318:	460f      	mov	r7, r1
  40631a:	f885 8000 	strb.w	r8, [r5]
  40631e:	4602      	mov	r2, r0
  406320:	460b      	mov	r3, r1
  406322:	4650      	mov	r0, sl
  406324:	4659      	mov	r1, fp
  406326:	3501      	adds	r5, #1
  406328:	f002 fd38 	bl	408d9c <__aeabi_dcmpgt>
  40632c:	2800      	cmp	r0, #0
  40632e:	d154      	bne.n	4063da <_dtoa_r+0x93a>
  406330:	4632      	mov	r2, r6
  406332:	463b      	mov	r3, r7
  406334:	2000      	movs	r0, #0
  406336:	4976      	ldr	r1, [pc, #472]	; (406510 <_dtoa_r+0xa70>)
  406338:	f002 f8ec 	bl	408514 <__aeabi_dsub>
  40633c:	4602      	mov	r2, r0
  40633e:	460b      	mov	r3, r1
  406340:	4650      	mov	r0, sl
  406342:	4659      	mov	r1, fp
  406344:	f002 fd2a 	bl	408d9c <__aeabi_dcmpgt>
  406348:	2800      	cmp	r0, #0
  40634a:	f040 8270 	bne.w	40682e <_dtoa_r+0xd8e>
  40634e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  406350:	2a01      	cmp	r2, #1
  406352:	f000 8111 	beq.w	406578 <_dtoa_r+0xad8>
  406356:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406358:	9a04      	ldr	r2, [sp, #16]
  40635a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40635e:	4413      	add	r3, r2
  406360:	4699      	mov	r9, r3
  406362:	e00d      	b.n	406380 <_dtoa_r+0x8e0>
  406364:	2000      	movs	r0, #0
  406366:	496a      	ldr	r1, [pc, #424]	; (406510 <_dtoa_r+0xa70>)
  406368:	f002 f8d4 	bl	408514 <__aeabi_dsub>
  40636c:	4652      	mov	r2, sl
  40636e:	465b      	mov	r3, fp
  406370:	f002 fcf6 	bl	408d60 <__aeabi_dcmplt>
  406374:	2800      	cmp	r0, #0
  406376:	f040 8258 	bne.w	40682a <_dtoa_r+0xd8a>
  40637a:	454d      	cmp	r5, r9
  40637c:	f000 80fa 	beq.w	406574 <_dtoa_r+0xad4>
  406380:	4650      	mov	r0, sl
  406382:	4659      	mov	r1, fp
  406384:	2200      	movs	r2, #0
  406386:	4b65      	ldr	r3, [pc, #404]	; (40651c <_dtoa_r+0xa7c>)
  406388:	f002 fa78 	bl	40887c <__aeabi_dmul>
  40638c:	2200      	movs	r2, #0
  40638e:	4b63      	ldr	r3, [pc, #396]	; (40651c <_dtoa_r+0xa7c>)
  406390:	4682      	mov	sl, r0
  406392:	468b      	mov	fp, r1
  406394:	4630      	mov	r0, r6
  406396:	4639      	mov	r1, r7
  406398:	f002 fa70 	bl	40887c <__aeabi_dmul>
  40639c:	460f      	mov	r7, r1
  40639e:	4606      	mov	r6, r0
  4063a0:	f002 fd1c 	bl	408ddc <__aeabi_d2iz>
  4063a4:	4680      	mov	r8, r0
  4063a6:	f002 fa03 	bl	4087b0 <__aeabi_i2d>
  4063aa:	4602      	mov	r2, r0
  4063ac:	460b      	mov	r3, r1
  4063ae:	4630      	mov	r0, r6
  4063b0:	4639      	mov	r1, r7
  4063b2:	f002 f8af 	bl	408514 <__aeabi_dsub>
  4063b6:	f108 0830 	add.w	r8, r8, #48	; 0x30
  4063ba:	fa5f f888 	uxtb.w	r8, r8
  4063be:	4652      	mov	r2, sl
  4063c0:	465b      	mov	r3, fp
  4063c2:	f805 8b01 	strb.w	r8, [r5], #1
  4063c6:	4606      	mov	r6, r0
  4063c8:	460f      	mov	r7, r1
  4063ca:	f002 fcc9 	bl	408d60 <__aeabi_dcmplt>
  4063ce:	4632      	mov	r2, r6
  4063d0:	463b      	mov	r3, r7
  4063d2:	2800      	cmp	r0, #0
  4063d4:	d0c6      	beq.n	406364 <_dtoa_r+0x8c4>
  4063d6:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4063da:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4063dc:	9302      	str	r3, [sp, #8]
  4063de:	e523      	b.n	405e28 <_dtoa_r+0x388>
  4063e0:	2300      	movs	r3, #0
  4063e2:	930b      	str	r3, [sp, #44]	; 0x2c
  4063e4:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4063e6:	2b00      	cmp	r3, #0
  4063e8:	f340 80dc 	ble.w	4065a4 <_dtoa_r+0xb04>
  4063ec:	461f      	mov	r7, r3
  4063ee:	461e      	mov	r6, r3
  4063f0:	930f      	str	r3, [sp, #60]	; 0x3c
  4063f2:	930a      	str	r3, [sp, #40]	; 0x28
  4063f4:	e6f6      	b.n	4061e4 <_dtoa_r+0x744>
  4063f6:	2301      	movs	r3, #1
  4063f8:	930b      	str	r3, [sp, #44]	; 0x2c
  4063fa:	e7f3      	b.n	4063e4 <_dtoa_r+0x944>
  4063fc:	f1ba 0f00 	cmp.w	sl, #0
  406400:	f47f ada8 	bne.w	405f54 <_dtoa_r+0x4b4>
  406404:	f3cb 0313 	ubfx	r3, fp, #0, #20
  406408:	2b00      	cmp	r3, #0
  40640a:	f47f adba 	bne.w	405f82 <_dtoa_r+0x4e2>
  40640e:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  406412:	0d3f      	lsrs	r7, r7, #20
  406414:	053f      	lsls	r7, r7, #20
  406416:	2f00      	cmp	r7, #0
  406418:	f000 820d 	beq.w	406836 <_dtoa_r+0xd96>
  40641c:	9b08      	ldr	r3, [sp, #32]
  40641e:	3301      	adds	r3, #1
  406420:	9308      	str	r3, [sp, #32]
  406422:	9b06      	ldr	r3, [sp, #24]
  406424:	3301      	adds	r3, #1
  406426:	9306      	str	r3, [sp, #24]
  406428:	2301      	movs	r3, #1
  40642a:	930c      	str	r3, [sp, #48]	; 0x30
  40642c:	e5ab      	b.n	405f86 <_dtoa_r+0x4e6>
  40642e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406430:	2b00      	cmp	r3, #0
  406432:	f73f ac42 	bgt.w	405cba <_dtoa_r+0x21a>
  406436:	f040 8221 	bne.w	40687c <_dtoa_r+0xddc>
  40643a:	2200      	movs	r2, #0
  40643c:	4b38      	ldr	r3, [pc, #224]	; (406520 <_dtoa_r+0xa80>)
  40643e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  406442:	f002 fa1b 	bl	40887c <__aeabi_dmul>
  406446:	4652      	mov	r2, sl
  406448:	465b      	mov	r3, fp
  40644a:	f002 fc9d 	bl	408d88 <__aeabi_dcmpge>
  40644e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  406452:	4646      	mov	r6, r8
  406454:	2800      	cmp	r0, #0
  406456:	d041      	beq.n	4064dc <_dtoa_r+0xa3c>
  406458:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40645a:	9d04      	ldr	r5, [sp, #16]
  40645c:	43db      	mvns	r3, r3
  40645e:	9302      	str	r3, [sp, #8]
  406460:	4641      	mov	r1, r8
  406462:	4620      	mov	r0, r4
  406464:	f001 f918 	bl	407698 <_Bfree>
  406468:	2e00      	cmp	r6, #0
  40646a:	f43f acdd 	beq.w	405e28 <_dtoa_r+0x388>
  40646e:	e6a7      	b.n	4061c0 <_dtoa_r+0x720>
  406470:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406472:	4649      	mov	r1, r9
  406474:	4620      	mov	r0, r4
  406476:	f001 fa45 	bl	407904 <__pow5mult>
  40647a:	4681      	mov	r9, r0
  40647c:	e558      	b.n	405f30 <_dtoa_r+0x490>
  40647e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  406480:	2a00      	cmp	r2, #0
  406482:	f000 8187 	beq.w	406794 <_dtoa_r+0xcf4>
  406486:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40648a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40648c:	9d08      	ldr	r5, [sp, #32]
  40648e:	e4f2      	b.n	405e76 <_dtoa_r+0x3d6>
  406490:	f1ba 0f00 	cmp.w	sl, #0
  406494:	f47f ad75 	bne.w	405f82 <_dtoa_r+0x4e2>
  406498:	e7b4      	b.n	406404 <_dtoa_r+0x964>
  40649a:	f001 f907 	bl	4076ac <__multadd>
  40649e:	4647      	mov	r7, r8
  4064a0:	4606      	mov	r6, r0
  4064a2:	4683      	mov	fp, r0
  4064a4:	e5be      	b.n	406024 <_dtoa_r+0x584>
  4064a6:	4601      	mov	r1, r0
  4064a8:	4620      	mov	r0, r4
  4064aa:	9306      	str	r3, [sp, #24]
  4064ac:	f001 f8f4 	bl	407698 <_Bfree>
  4064b0:	2201      	movs	r2, #1
  4064b2:	9b06      	ldr	r3, [sp, #24]
  4064b4:	e5e0      	b.n	406078 <_dtoa_r+0x5d8>
  4064b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4064b8:	2b02      	cmp	r3, #2
  4064ba:	f77f ad96 	ble.w	405fea <_dtoa_r+0x54a>
  4064be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4064c0:	2b00      	cmp	r3, #0
  4064c2:	d1c9      	bne.n	406458 <_dtoa_r+0x9b8>
  4064c4:	4641      	mov	r1, r8
  4064c6:	2205      	movs	r2, #5
  4064c8:	4620      	mov	r0, r4
  4064ca:	f001 f8ef 	bl	4076ac <__multadd>
  4064ce:	4601      	mov	r1, r0
  4064d0:	4680      	mov	r8, r0
  4064d2:	4648      	mov	r0, r9
  4064d4:	f001 fab8 	bl	407a48 <__mcmp>
  4064d8:	2800      	cmp	r0, #0
  4064da:	ddbd      	ble.n	406458 <_dtoa_r+0x9b8>
  4064dc:	9a02      	ldr	r2, [sp, #8]
  4064de:	9904      	ldr	r1, [sp, #16]
  4064e0:	2331      	movs	r3, #49	; 0x31
  4064e2:	3201      	adds	r2, #1
  4064e4:	9202      	str	r2, [sp, #8]
  4064e6:	700b      	strb	r3, [r1, #0]
  4064e8:	1c4d      	adds	r5, r1, #1
  4064ea:	e7b9      	b.n	406460 <_dtoa_r+0x9c0>
  4064ec:	9a02      	ldr	r2, [sp, #8]
  4064ee:	3201      	adds	r2, #1
  4064f0:	9202      	str	r2, [sp, #8]
  4064f2:	9a04      	ldr	r2, [sp, #16]
  4064f4:	2331      	movs	r3, #49	; 0x31
  4064f6:	7013      	strb	r3, [r2, #0]
  4064f8:	e652      	b.n	4061a0 <_dtoa_r+0x700>
  4064fa:	2301      	movs	r3, #1
  4064fc:	930b      	str	r3, [sp, #44]	; 0x2c
  4064fe:	e666      	b.n	4061ce <_dtoa_r+0x72e>
  406500:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  406504:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  406506:	e48f      	b.n	405e28 <_dtoa_r+0x388>
  406508:	00409a78 	.word	0x00409a78
  40650c:	00409a50 	.word	0x00409a50
  406510:	3ff00000 	.word	0x3ff00000
  406514:	401c0000 	.word	0x401c0000
  406518:	3fe00000 	.word	0x3fe00000
  40651c:	40240000 	.word	0x40240000
  406520:	40140000 	.word	0x40140000
  406524:	4650      	mov	r0, sl
  406526:	f002 f943 	bl	4087b0 <__aeabi_i2d>
  40652a:	463a      	mov	r2, r7
  40652c:	4643      	mov	r3, r8
  40652e:	f002 f9a5 	bl	40887c <__aeabi_dmul>
  406532:	2200      	movs	r2, #0
  406534:	4bc1      	ldr	r3, [pc, #772]	; (40683c <_dtoa_r+0xd9c>)
  406536:	f001 ffef 	bl	408518 <__adddf3>
  40653a:	4605      	mov	r5, r0
  40653c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  406540:	4641      	mov	r1, r8
  406542:	2200      	movs	r2, #0
  406544:	4bbe      	ldr	r3, [pc, #760]	; (406840 <_dtoa_r+0xda0>)
  406546:	4638      	mov	r0, r7
  406548:	f001 ffe4 	bl	408514 <__aeabi_dsub>
  40654c:	462a      	mov	r2, r5
  40654e:	4633      	mov	r3, r6
  406550:	4682      	mov	sl, r0
  406552:	468b      	mov	fp, r1
  406554:	f002 fc22 	bl	408d9c <__aeabi_dcmpgt>
  406558:	4680      	mov	r8, r0
  40655a:	2800      	cmp	r0, #0
  40655c:	f040 8110 	bne.w	406780 <_dtoa_r+0xce0>
  406560:	462a      	mov	r2, r5
  406562:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  406566:	4650      	mov	r0, sl
  406568:	4659      	mov	r1, fp
  40656a:	f002 fbf9 	bl	408d60 <__aeabi_dcmplt>
  40656e:	b118      	cbz	r0, 406578 <_dtoa_r+0xad8>
  406570:	4646      	mov	r6, r8
  406572:	e771      	b.n	406458 <_dtoa_r+0x9b8>
  406574:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  406578:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  40657c:	f7ff bb8a 	b.w	405c94 <_dtoa_r+0x1f4>
  406580:	9804      	ldr	r0, [sp, #16]
  406582:	f7ff babb 	b.w	405afc <_dtoa_r+0x5c>
  406586:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406588:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40658a:	970c      	str	r7, [sp, #48]	; 0x30
  40658c:	1afb      	subs	r3, r7, r3
  40658e:	441a      	add	r2, r3
  406590:	920d      	str	r2, [sp, #52]	; 0x34
  406592:	2700      	movs	r7, #0
  406594:	e469      	b.n	405e6a <_dtoa_r+0x3ca>
  406596:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  40659a:	f04f 0a02 	mov.w	sl, #2
  40659e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  4065a2:	e657      	b.n	406254 <_dtoa_r+0x7b4>
  4065a4:	2100      	movs	r1, #0
  4065a6:	2301      	movs	r3, #1
  4065a8:	6461      	str	r1, [r4, #68]	; 0x44
  4065aa:	4620      	mov	r0, r4
  4065ac:	9325      	str	r3, [sp, #148]	; 0x94
  4065ae:	f001 f84d 	bl	40764c <_Balloc>
  4065b2:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4065b4:	9004      	str	r0, [sp, #16]
  4065b6:	6420      	str	r0, [r4, #64]	; 0x40
  4065b8:	930a      	str	r3, [sp, #40]	; 0x28
  4065ba:	930f      	str	r3, [sp, #60]	; 0x3c
  4065bc:	e629      	b.n	406212 <_dtoa_r+0x772>
  4065be:	2a00      	cmp	r2, #0
  4065c0:	46d0      	mov	r8, sl
  4065c2:	f8cd b018 	str.w	fp, [sp, #24]
  4065c6:	469a      	mov	sl, r3
  4065c8:	dd11      	ble.n	4065ee <_dtoa_r+0xb4e>
  4065ca:	4649      	mov	r1, r9
  4065cc:	2201      	movs	r2, #1
  4065ce:	4620      	mov	r0, r4
  4065d0:	f001 f9e8 	bl	4079a4 <__lshift>
  4065d4:	4641      	mov	r1, r8
  4065d6:	4681      	mov	r9, r0
  4065d8:	f001 fa36 	bl	407a48 <__mcmp>
  4065dc:	2800      	cmp	r0, #0
  4065de:	f340 8146 	ble.w	40686e <_dtoa_r+0xdce>
  4065e2:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  4065e6:	f000 8106 	beq.w	4067f6 <_dtoa_r+0xd56>
  4065ea:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  4065ee:	46b3      	mov	fp, r6
  4065f0:	f887 a000 	strb.w	sl, [r7]
  4065f4:	1c7d      	adds	r5, r7, #1
  4065f6:	9e06      	ldr	r6, [sp, #24]
  4065f8:	e5d2      	b.n	4061a0 <_dtoa_r+0x700>
  4065fa:	d104      	bne.n	406606 <_dtoa_r+0xb66>
  4065fc:	f01a 0f01 	tst.w	sl, #1
  406600:	d001      	beq.n	406606 <_dtoa_r+0xb66>
  406602:	e5bd      	b.n	406180 <_dtoa_r+0x6e0>
  406604:	4615      	mov	r5, r2
  406606:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40660a:	2b30      	cmp	r3, #48	; 0x30
  40660c:	f105 32ff 	add.w	r2, r5, #4294967295
  406610:	d0f8      	beq.n	406604 <_dtoa_r+0xb64>
  406612:	e5c5      	b.n	4061a0 <_dtoa_r+0x700>
  406614:	9904      	ldr	r1, [sp, #16]
  406616:	2230      	movs	r2, #48	; 0x30
  406618:	700a      	strb	r2, [r1, #0]
  40661a:	9a02      	ldr	r2, [sp, #8]
  40661c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  406620:	3201      	adds	r2, #1
  406622:	9202      	str	r2, [sp, #8]
  406624:	f7ff bbfc 	b.w	405e20 <_dtoa_r+0x380>
  406628:	f000 80bb 	beq.w	4067a2 <_dtoa_r+0xd02>
  40662c:	9b02      	ldr	r3, [sp, #8]
  40662e:	425d      	negs	r5, r3
  406630:	4b84      	ldr	r3, [pc, #528]	; (406844 <_dtoa_r+0xda4>)
  406632:	f005 020f 	and.w	r2, r5, #15
  406636:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40663a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40663e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  406642:	f002 f91b 	bl	40887c <__aeabi_dmul>
  406646:	112d      	asrs	r5, r5, #4
  406648:	4607      	mov	r7, r0
  40664a:	4688      	mov	r8, r1
  40664c:	f000 812c 	beq.w	4068a8 <_dtoa_r+0xe08>
  406650:	4e7d      	ldr	r6, [pc, #500]	; (406848 <_dtoa_r+0xda8>)
  406652:	f04f 0a02 	mov.w	sl, #2
  406656:	07eb      	lsls	r3, r5, #31
  406658:	d509      	bpl.n	40666e <_dtoa_r+0xbce>
  40665a:	4638      	mov	r0, r7
  40665c:	4641      	mov	r1, r8
  40665e:	e9d6 2300 	ldrd	r2, r3, [r6]
  406662:	f002 f90b 	bl	40887c <__aeabi_dmul>
  406666:	f10a 0a01 	add.w	sl, sl, #1
  40666a:	4607      	mov	r7, r0
  40666c:	4688      	mov	r8, r1
  40666e:	106d      	asrs	r5, r5, #1
  406670:	f106 0608 	add.w	r6, r6, #8
  406674:	d1ef      	bne.n	406656 <_dtoa_r+0xbb6>
  406676:	e608      	b.n	40628a <_dtoa_r+0x7ea>
  406678:	6871      	ldr	r1, [r6, #4]
  40667a:	4620      	mov	r0, r4
  40667c:	f000 ffe6 	bl	40764c <_Balloc>
  406680:	6933      	ldr	r3, [r6, #16]
  406682:	3302      	adds	r3, #2
  406684:	009a      	lsls	r2, r3, #2
  406686:	4605      	mov	r5, r0
  406688:	f106 010c 	add.w	r1, r6, #12
  40668c:	300c      	adds	r0, #12
  40668e:	f000 fedf 	bl	407450 <memcpy>
  406692:	4629      	mov	r1, r5
  406694:	2201      	movs	r2, #1
  406696:	4620      	mov	r0, r4
  406698:	f001 f984 	bl	4079a4 <__lshift>
  40669c:	9006      	str	r0, [sp, #24]
  40669e:	e4b5      	b.n	40600c <_dtoa_r+0x56c>
  4066a0:	2b39      	cmp	r3, #57	; 0x39
  4066a2:	f8cd b018 	str.w	fp, [sp, #24]
  4066a6:	46d0      	mov	r8, sl
  4066a8:	f000 80a5 	beq.w	4067f6 <_dtoa_r+0xd56>
  4066ac:	f103 0a01 	add.w	sl, r3, #1
  4066b0:	46b3      	mov	fp, r6
  4066b2:	f887 a000 	strb.w	sl, [r7]
  4066b6:	1c7d      	adds	r5, r7, #1
  4066b8:	9e06      	ldr	r6, [sp, #24]
  4066ba:	e571      	b.n	4061a0 <_dtoa_r+0x700>
  4066bc:	465a      	mov	r2, fp
  4066be:	46d0      	mov	r8, sl
  4066c0:	46b3      	mov	fp, r6
  4066c2:	469a      	mov	sl, r3
  4066c4:	4616      	mov	r6, r2
  4066c6:	e54f      	b.n	406168 <_dtoa_r+0x6c8>
  4066c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4066ca:	495e      	ldr	r1, [pc, #376]	; (406844 <_dtoa_r+0xda4>)
  4066cc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  4066d0:	462a      	mov	r2, r5
  4066d2:	4633      	mov	r3, r6
  4066d4:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  4066d8:	f002 f8d0 	bl	40887c <__aeabi_dmul>
  4066dc:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  4066e0:	4638      	mov	r0, r7
  4066e2:	4641      	mov	r1, r8
  4066e4:	f002 fb7a 	bl	408ddc <__aeabi_d2iz>
  4066e8:	4605      	mov	r5, r0
  4066ea:	f002 f861 	bl	4087b0 <__aeabi_i2d>
  4066ee:	460b      	mov	r3, r1
  4066f0:	4602      	mov	r2, r0
  4066f2:	4641      	mov	r1, r8
  4066f4:	4638      	mov	r0, r7
  4066f6:	f001 ff0d 	bl	408514 <__aeabi_dsub>
  4066fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4066fc:	460f      	mov	r7, r1
  4066fe:	9904      	ldr	r1, [sp, #16]
  406700:	3530      	adds	r5, #48	; 0x30
  406702:	2b01      	cmp	r3, #1
  406704:	700d      	strb	r5, [r1, #0]
  406706:	4606      	mov	r6, r0
  406708:	f101 0501 	add.w	r5, r1, #1
  40670c:	d026      	beq.n	40675c <_dtoa_r+0xcbc>
  40670e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406710:	9a04      	ldr	r2, [sp, #16]
  406712:	f8df b13c 	ldr.w	fp, [pc, #316]	; 406850 <_dtoa_r+0xdb0>
  406716:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40671a:	4413      	add	r3, r2
  40671c:	f04f 0a00 	mov.w	sl, #0
  406720:	4699      	mov	r9, r3
  406722:	4652      	mov	r2, sl
  406724:	465b      	mov	r3, fp
  406726:	4630      	mov	r0, r6
  406728:	4639      	mov	r1, r7
  40672a:	f002 f8a7 	bl	40887c <__aeabi_dmul>
  40672e:	460f      	mov	r7, r1
  406730:	4606      	mov	r6, r0
  406732:	f002 fb53 	bl	408ddc <__aeabi_d2iz>
  406736:	4680      	mov	r8, r0
  406738:	f002 f83a 	bl	4087b0 <__aeabi_i2d>
  40673c:	f108 0830 	add.w	r8, r8, #48	; 0x30
  406740:	4602      	mov	r2, r0
  406742:	460b      	mov	r3, r1
  406744:	4630      	mov	r0, r6
  406746:	4639      	mov	r1, r7
  406748:	f001 fee4 	bl	408514 <__aeabi_dsub>
  40674c:	f805 8b01 	strb.w	r8, [r5], #1
  406750:	454d      	cmp	r5, r9
  406752:	4606      	mov	r6, r0
  406754:	460f      	mov	r7, r1
  406756:	d1e4      	bne.n	406722 <_dtoa_r+0xc82>
  406758:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40675c:	4b3b      	ldr	r3, [pc, #236]	; (40684c <_dtoa_r+0xdac>)
  40675e:	2200      	movs	r2, #0
  406760:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  406764:	f001 fed8 	bl	408518 <__adddf3>
  406768:	4632      	mov	r2, r6
  40676a:	463b      	mov	r3, r7
  40676c:	f002 faf8 	bl	408d60 <__aeabi_dcmplt>
  406770:	2800      	cmp	r0, #0
  406772:	d046      	beq.n	406802 <_dtoa_r+0xd62>
  406774:	9b15      	ldr	r3, [sp, #84]	; 0x54
  406776:	9302      	str	r3, [sp, #8]
  406778:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40677c:	f7ff bb43 	b.w	405e06 <_dtoa_r+0x366>
  406780:	f04f 0800 	mov.w	r8, #0
  406784:	4646      	mov	r6, r8
  406786:	e6a9      	b.n	4064dc <_dtoa_r+0xa3c>
  406788:	9b08      	ldr	r3, [sp, #32]
  40678a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40678c:	1a9d      	subs	r5, r3, r2
  40678e:	2300      	movs	r3, #0
  406790:	f7ff bb71 	b.w	405e76 <_dtoa_r+0x3d6>
  406794:	9b18      	ldr	r3, [sp, #96]	; 0x60
  406796:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  406798:	9d08      	ldr	r5, [sp, #32]
  40679a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40679e:	f7ff bb6a 	b.w	405e76 <_dtoa_r+0x3d6>
  4067a2:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  4067a6:	f04f 0a02 	mov.w	sl, #2
  4067aa:	e56e      	b.n	40628a <_dtoa_r+0x7ea>
  4067ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4067ae:	2b00      	cmp	r3, #0
  4067b0:	f43f aeb8 	beq.w	406524 <_dtoa_r+0xa84>
  4067b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4067b6:	2b00      	cmp	r3, #0
  4067b8:	f77f aede 	ble.w	406578 <_dtoa_r+0xad8>
  4067bc:	2200      	movs	r2, #0
  4067be:	4b24      	ldr	r3, [pc, #144]	; (406850 <_dtoa_r+0xdb0>)
  4067c0:	4638      	mov	r0, r7
  4067c2:	4641      	mov	r1, r8
  4067c4:	f002 f85a 	bl	40887c <__aeabi_dmul>
  4067c8:	4607      	mov	r7, r0
  4067ca:	4688      	mov	r8, r1
  4067cc:	f10a 0001 	add.w	r0, sl, #1
  4067d0:	f001 ffee 	bl	4087b0 <__aeabi_i2d>
  4067d4:	463a      	mov	r2, r7
  4067d6:	4643      	mov	r3, r8
  4067d8:	f002 f850 	bl	40887c <__aeabi_dmul>
  4067dc:	2200      	movs	r2, #0
  4067de:	4b17      	ldr	r3, [pc, #92]	; (40683c <_dtoa_r+0xd9c>)
  4067e0:	f001 fe9a 	bl	408518 <__adddf3>
  4067e4:	9a02      	ldr	r2, [sp, #8]
  4067e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4067e8:	9312      	str	r3, [sp, #72]	; 0x48
  4067ea:	3a01      	subs	r2, #1
  4067ec:	4605      	mov	r5, r0
  4067ee:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4067f2:	9215      	str	r2, [sp, #84]	; 0x54
  4067f4:	e56a      	b.n	4062cc <_dtoa_r+0x82c>
  4067f6:	2239      	movs	r2, #57	; 0x39
  4067f8:	46b3      	mov	fp, r6
  4067fa:	703a      	strb	r2, [r7, #0]
  4067fc:	9e06      	ldr	r6, [sp, #24]
  4067fe:	1c7d      	adds	r5, r7, #1
  406800:	e4c0      	b.n	406184 <_dtoa_r+0x6e4>
  406802:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  406806:	2000      	movs	r0, #0
  406808:	4910      	ldr	r1, [pc, #64]	; (40684c <_dtoa_r+0xdac>)
  40680a:	f001 fe83 	bl	408514 <__aeabi_dsub>
  40680e:	4632      	mov	r2, r6
  406810:	463b      	mov	r3, r7
  406812:	f002 fac3 	bl	408d9c <__aeabi_dcmpgt>
  406816:	b908      	cbnz	r0, 40681c <_dtoa_r+0xd7c>
  406818:	e6ae      	b.n	406578 <_dtoa_r+0xad8>
  40681a:	4615      	mov	r5, r2
  40681c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  406820:	2b30      	cmp	r3, #48	; 0x30
  406822:	f105 32ff 	add.w	r2, r5, #4294967295
  406826:	d0f8      	beq.n	40681a <_dtoa_r+0xd7a>
  406828:	e5d7      	b.n	4063da <_dtoa_r+0x93a>
  40682a:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40682e:	9b15      	ldr	r3, [sp, #84]	; 0x54
  406830:	9302      	str	r3, [sp, #8]
  406832:	f7ff bae8 	b.w	405e06 <_dtoa_r+0x366>
  406836:	970c      	str	r7, [sp, #48]	; 0x30
  406838:	f7ff bba5 	b.w	405f86 <_dtoa_r+0x4e6>
  40683c:	401c0000 	.word	0x401c0000
  406840:	40140000 	.word	0x40140000
  406844:	00409a78 	.word	0x00409a78
  406848:	00409a50 	.word	0x00409a50
  40684c:	3fe00000 	.word	0x3fe00000
  406850:	40240000 	.word	0x40240000
  406854:	2b39      	cmp	r3, #57	; 0x39
  406856:	f8cd b018 	str.w	fp, [sp, #24]
  40685a:	46d0      	mov	r8, sl
  40685c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  406860:	469a      	mov	sl, r3
  406862:	d0c8      	beq.n	4067f6 <_dtoa_r+0xd56>
  406864:	f1bb 0f00 	cmp.w	fp, #0
  406868:	f73f aebf 	bgt.w	4065ea <_dtoa_r+0xb4a>
  40686c:	e6bf      	b.n	4065ee <_dtoa_r+0xb4e>
  40686e:	f47f aebe 	bne.w	4065ee <_dtoa_r+0xb4e>
  406872:	f01a 0f01 	tst.w	sl, #1
  406876:	f43f aeba 	beq.w	4065ee <_dtoa_r+0xb4e>
  40687a:	e6b2      	b.n	4065e2 <_dtoa_r+0xb42>
  40687c:	f04f 0800 	mov.w	r8, #0
  406880:	4646      	mov	r6, r8
  406882:	e5e9      	b.n	406458 <_dtoa_r+0x9b8>
  406884:	4631      	mov	r1, r6
  406886:	2300      	movs	r3, #0
  406888:	220a      	movs	r2, #10
  40688a:	4620      	mov	r0, r4
  40688c:	f000 ff0e 	bl	4076ac <__multadd>
  406890:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406892:	2b00      	cmp	r3, #0
  406894:	4606      	mov	r6, r0
  406896:	dd0a      	ble.n	4068ae <_dtoa_r+0xe0e>
  406898:	930a      	str	r3, [sp, #40]	; 0x28
  40689a:	f7ff bbaa 	b.w	405ff2 <_dtoa_r+0x552>
  40689e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4068a0:	2b02      	cmp	r3, #2
  4068a2:	dc23      	bgt.n	4068ec <_dtoa_r+0xe4c>
  4068a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4068a6:	e43b      	b.n	406120 <_dtoa_r+0x680>
  4068a8:	f04f 0a02 	mov.w	sl, #2
  4068ac:	e4ed      	b.n	40628a <_dtoa_r+0x7ea>
  4068ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4068b0:	2b02      	cmp	r3, #2
  4068b2:	dc1b      	bgt.n	4068ec <_dtoa_r+0xe4c>
  4068b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4068b6:	e7ef      	b.n	406898 <_dtoa_r+0xdf8>
  4068b8:	2500      	movs	r5, #0
  4068ba:	6465      	str	r5, [r4, #68]	; 0x44
  4068bc:	4629      	mov	r1, r5
  4068be:	4620      	mov	r0, r4
  4068c0:	f000 fec4 	bl	40764c <_Balloc>
  4068c4:	f04f 33ff 	mov.w	r3, #4294967295
  4068c8:	930a      	str	r3, [sp, #40]	; 0x28
  4068ca:	930f      	str	r3, [sp, #60]	; 0x3c
  4068cc:	2301      	movs	r3, #1
  4068ce:	9004      	str	r0, [sp, #16]
  4068d0:	9525      	str	r5, [sp, #148]	; 0x94
  4068d2:	6420      	str	r0, [r4, #64]	; 0x40
  4068d4:	930b      	str	r3, [sp, #44]	; 0x2c
  4068d6:	f7ff b9dd 	b.w	405c94 <_dtoa_r+0x1f4>
  4068da:	2501      	movs	r5, #1
  4068dc:	f7ff b9a5 	b.w	405c2a <_dtoa_r+0x18a>
  4068e0:	f43f ab69 	beq.w	405fb6 <_dtoa_r+0x516>
  4068e4:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  4068e8:	f7ff bbf9 	b.w	4060de <_dtoa_r+0x63e>
  4068ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4068ee:	930a      	str	r3, [sp, #40]	; 0x28
  4068f0:	e5e5      	b.n	4064be <_dtoa_r+0xa1e>
  4068f2:	bf00      	nop

004068f4 <__sflush_r>:
  4068f4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  4068f8:	b29a      	uxth	r2, r3
  4068fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4068fe:	460d      	mov	r5, r1
  406900:	0711      	lsls	r1, r2, #28
  406902:	4680      	mov	r8, r0
  406904:	d43a      	bmi.n	40697c <__sflush_r+0x88>
  406906:	686a      	ldr	r2, [r5, #4]
  406908:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40690c:	2a00      	cmp	r2, #0
  40690e:	81ab      	strh	r3, [r5, #12]
  406910:	dd6f      	ble.n	4069f2 <__sflush_r+0xfe>
  406912:	6aac      	ldr	r4, [r5, #40]	; 0x28
  406914:	2c00      	cmp	r4, #0
  406916:	d049      	beq.n	4069ac <__sflush_r+0xb8>
  406918:	2200      	movs	r2, #0
  40691a:	b29b      	uxth	r3, r3
  40691c:	f8d8 6000 	ldr.w	r6, [r8]
  406920:	f8c8 2000 	str.w	r2, [r8]
  406924:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  406928:	d067      	beq.n	4069fa <__sflush_r+0x106>
  40692a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  40692c:	075f      	lsls	r7, r3, #29
  40692e:	d505      	bpl.n	40693c <__sflush_r+0x48>
  406930:	6869      	ldr	r1, [r5, #4]
  406932:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  406934:	1a52      	subs	r2, r2, r1
  406936:	b10b      	cbz	r3, 40693c <__sflush_r+0x48>
  406938:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40693a:	1ad2      	subs	r2, r2, r3
  40693c:	2300      	movs	r3, #0
  40693e:	69e9      	ldr	r1, [r5, #28]
  406940:	4640      	mov	r0, r8
  406942:	47a0      	blx	r4
  406944:	1c44      	adds	r4, r0, #1
  406946:	d03c      	beq.n	4069c2 <__sflush_r+0xce>
  406948:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  40694c:	692a      	ldr	r2, [r5, #16]
  40694e:	602a      	str	r2, [r5, #0]
  406950:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  406954:	2200      	movs	r2, #0
  406956:	81ab      	strh	r3, [r5, #12]
  406958:	04db      	lsls	r3, r3, #19
  40695a:	606a      	str	r2, [r5, #4]
  40695c:	d447      	bmi.n	4069ee <__sflush_r+0xfa>
  40695e:	6b29      	ldr	r1, [r5, #48]	; 0x30
  406960:	f8c8 6000 	str.w	r6, [r8]
  406964:	b311      	cbz	r1, 4069ac <__sflush_r+0xb8>
  406966:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40696a:	4299      	cmp	r1, r3
  40696c:	d002      	beq.n	406974 <__sflush_r+0x80>
  40696e:	4640      	mov	r0, r8
  406970:	f000 f9de 	bl	406d30 <_free_r>
  406974:	2000      	movs	r0, #0
  406976:	6328      	str	r0, [r5, #48]	; 0x30
  406978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40697c:	692e      	ldr	r6, [r5, #16]
  40697e:	b1ae      	cbz	r6, 4069ac <__sflush_r+0xb8>
  406980:	682c      	ldr	r4, [r5, #0]
  406982:	602e      	str	r6, [r5, #0]
  406984:	0791      	lsls	r1, r2, #30
  406986:	bf0c      	ite	eq
  406988:	696b      	ldreq	r3, [r5, #20]
  40698a:	2300      	movne	r3, #0
  40698c:	1ba4      	subs	r4, r4, r6
  40698e:	60ab      	str	r3, [r5, #8]
  406990:	e00a      	b.n	4069a8 <__sflush_r+0xb4>
  406992:	4623      	mov	r3, r4
  406994:	4632      	mov	r2, r6
  406996:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  406998:	69e9      	ldr	r1, [r5, #28]
  40699a:	4640      	mov	r0, r8
  40699c:	47b8      	blx	r7
  40699e:	2800      	cmp	r0, #0
  4069a0:	eba4 0400 	sub.w	r4, r4, r0
  4069a4:	4406      	add	r6, r0
  4069a6:	dd04      	ble.n	4069b2 <__sflush_r+0xbe>
  4069a8:	2c00      	cmp	r4, #0
  4069aa:	dcf2      	bgt.n	406992 <__sflush_r+0x9e>
  4069ac:	2000      	movs	r0, #0
  4069ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4069b2:	89ab      	ldrh	r3, [r5, #12]
  4069b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4069b8:	81ab      	strh	r3, [r5, #12]
  4069ba:	f04f 30ff 	mov.w	r0, #4294967295
  4069be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4069c2:	f8d8 4000 	ldr.w	r4, [r8]
  4069c6:	2c1d      	cmp	r4, #29
  4069c8:	d8f3      	bhi.n	4069b2 <__sflush_r+0xbe>
  4069ca:	4b19      	ldr	r3, [pc, #100]	; (406a30 <__sflush_r+0x13c>)
  4069cc:	40e3      	lsrs	r3, r4
  4069ce:	43db      	mvns	r3, r3
  4069d0:	f013 0301 	ands.w	r3, r3, #1
  4069d4:	d1ed      	bne.n	4069b2 <__sflush_r+0xbe>
  4069d6:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4069da:	606b      	str	r3, [r5, #4]
  4069dc:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  4069e0:	6929      	ldr	r1, [r5, #16]
  4069e2:	81ab      	strh	r3, [r5, #12]
  4069e4:	04da      	lsls	r2, r3, #19
  4069e6:	6029      	str	r1, [r5, #0]
  4069e8:	d5b9      	bpl.n	40695e <__sflush_r+0x6a>
  4069ea:	2c00      	cmp	r4, #0
  4069ec:	d1b7      	bne.n	40695e <__sflush_r+0x6a>
  4069ee:	6528      	str	r0, [r5, #80]	; 0x50
  4069f0:	e7b5      	b.n	40695e <__sflush_r+0x6a>
  4069f2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4069f4:	2a00      	cmp	r2, #0
  4069f6:	dc8c      	bgt.n	406912 <__sflush_r+0x1e>
  4069f8:	e7d8      	b.n	4069ac <__sflush_r+0xb8>
  4069fa:	2301      	movs	r3, #1
  4069fc:	69e9      	ldr	r1, [r5, #28]
  4069fe:	4640      	mov	r0, r8
  406a00:	47a0      	blx	r4
  406a02:	1c43      	adds	r3, r0, #1
  406a04:	4602      	mov	r2, r0
  406a06:	d002      	beq.n	406a0e <__sflush_r+0x11a>
  406a08:	89ab      	ldrh	r3, [r5, #12]
  406a0a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  406a0c:	e78e      	b.n	40692c <__sflush_r+0x38>
  406a0e:	f8d8 3000 	ldr.w	r3, [r8]
  406a12:	2b00      	cmp	r3, #0
  406a14:	d0f8      	beq.n	406a08 <__sflush_r+0x114>
  406a16:	2b1d      	cmp	r3, #29
  406a18:	d001      	beq.n	406a1e <__sflush_r+0x12a>
  406a1a:	2b16      	cmp	r3, #22
  406a1c:	d102      	bne.n	406a24 <__sflush_r+0x130>
  406a1e:	f8c8 6000 	str.w	r6, [r8]
  406a22:	e7c3      	b.n	4069ac <__sflush_r+0xb8>
  406a24:	89ab      	ldrh	r3, [r5, #12]
  406a26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406a2a:	81ab      	strh	r3, [r5, #12]
  406a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406a30:	20400001 	.word	0x20400001

00406a34 <_fflush_r>:
  406a34:	b538      	push	{r3, r4, r5, lr}
  406a36:	460d      	mov	r5, r1
  406a38:	4604      	mov	r4, r0
  406a3a:	b108      	cbz	r0, 406a40 <_fflush_r+0xc>
  406a3c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406a3e:	b1bb      	cbz	r3, 406a70 <_fflush_r+0x3c>
  406a40:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  406a44:	b188      	cbz	r0, 406a6a <_fflush_r+0x36>
  406a46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  406a48:	07db      	lsls	r3, r3, #31
  406a4a:	d401      	bmi.n	406a50 <_fflush_r+0x1c>
  406a4c:	0581      	lsls	r1, r0, #22
  406a4e:	d517      	bpl.n	406a80 <_fflush_r+0x4c>
  406a50:	4620      	mov	r0, r4
  406a52:	4629      	mov	r1, r5
  406a54:	f7ff ff4e 	bl	4068f4 <__sflush_r>
  406a58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  406a5a:	07da      	lsls	r2, r3, #31
  406a5c:	4604      	mov	r4, r0
  406a5e:	d402      	bmi.n	406a66 <_fflush_r+0x32>
  406a60:	89ab      	ldrh	r3, [r5, #12]
  406a62:	059b      	lsls	r3, r3, #22
  406a64:	d507      	bpl.n	406a76 <_fflush_r+0x42>
  406a66:	4620      	mov	r0, r4
  406a68:	bd38      	pop	{r3, r4, r5, pc}
  406a6a:	4604      	mov	r4, r0
  406a6c:	4620      	mov	r0, r4
  406a6e:	bd38      	pop	{r3, r4, r5, pc}
  406a70:	f000 f838 	bl	406ae4 <__sinit>
  406a74:	e7e4      	b.n	406a40 <_fflush_r+0xc>
  406a76:	6da8      	ldr	r0, [r5, #88]	; 0x58
  406a78:	f000 fc04 	bl	407284 <__retarget_lock_release_recursive>
  406a7c:	4620      	mov	r0, r4
  406a7e:	bd38      	pop	{r3, r4, r5, pc}
  406a80:	6da8      	ldr	r0, [r5, #88]	; 0x58
  406a82:	f000 fbfd 	bl	407280 <__retarget_lock_acquire_recursive>
  406a86:	e7e3      	b.n	406a50 <_fflush_r+0x1c>

00406a88 <_cleanup_r>:
  406a88:	4901      	ldr	r1, [pc, #4]	; (406a90 <_cleanup_r+0x8>)
  406a8a:	f000 bbaf 	b.w	4071ec <_fwalk_reent>
  406a8e:	bf00      	nop
  406a90:	004083a5 	.word	0x004083a5

00406a94 <std.isra.0>:
  406a94:	b510      	push	{r4, lr}
  406a96:	2300      	movs	r3, #0
  406a98:	4604      	mov	r4, r0
  406a9a:	8181      	strh	r1, [r0, #12]
  406a9c:	81c2      	strh	r2, [r0, #14]
  406a9e:	6003      	str	r3, [r0, #0]
  406aa0:	6043      	str	r3, [r0, #4]
  406aa2:	6083      	str	r3, [r0, #8]
  406aa4:	6643      	str	r3, [r0, #100]	; 0x64
  406aa6:	6103      	str	r3, [r0, #16]
  406aa8:	6143      	str	r3, [r0, #20]
  406aaa:	6183      	str	r3, [r0, #24]
  406aac:	4619      	mov	r1, r3
  406aae:	2208      	movs	r2, #8
  406ab0:	305c      	adds	r0, #92	; 0x5c
  406ab2:	f7fc fb9d 	bl	4031f0 <memset>
  406ab6:	4807      	ldr	r0, [pc, #28]	; (406ad4 <std.isra.0+0x40>)
  406ab8:	4907      	ldr	r1, [pc, #28]	; (406ad8 <std.isra.0+0x44>)
  406aba:	4a08      	ldr	r2, [pc, #32]	; (406adc <std.isra.0+0x48>)
  406abc:	4b08      	ldr	r3, [pc, #32]	; (406ae0 <std.isra.0+0x4c>)
  406abe:	6220      	str	r0, [r4, #32]
  406ac0:	61e4      	str	r4, [r4, #28]
  406ac2:	6261      	str	r1, [r4, #36]	; 0x24
  406ac4:	62a2      	str	r2, [r4, #40]	; 0x28
  406ac6:	62e3      	str	r3, [r4, #44]	; 0x2c
  406ac8:	f104 0058 	add.w	r0, r4, #88	; 0x58
  406acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  406ad0:	f000 bbd2 	b.w	407278 <__retarget_lock_init_recursive>
  406ad4:	00407f8d 	.word	0x00407f8d
  406ad8:	00407fb1 	.word	0x00407fb1
  406adc:	00407fed 	.word	0x00407fed
  406ae0:	0040800d 	.word	0x0040800d

00406ae4 <__sinit>:
  406ae4:	b510      	push	{r4, lr}
  406ae6:	4604      	mov	r4, r0
  406ae8:	4812      	ldr	r0, [pc, #72]	; (406b34 <__sinit+0x50>)
  406aea:	f000 fbc9 	bl	407280 <__retarget_lock_acquire_recursive>
  406aee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  406af0:	b9d2      	cbnz	r2, 406b28 <__sinit+0x44>
  406af2:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  406af6:	4810      	ldr	r0, [pc, #64]	; (406b38 <__sinit+0x54>)
  406af8:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  406afc:	2103      	movs	r1, #3
  406afe:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  406b02:	63e0      	str	r0, [r4, #60]	; 0x3c
  406b04:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  406b08:	6860      	ldr	r0, [r4, #4]
  406b0a:	2104      	movs	r1, #4
  406b0c:	f7ff ffc2 	bl	406a94 <std.isra.0>
  406b10:	2201      	movs	r2, #1
  406b12:	2109      	movs	r1, #9
  406b14:	68a0      	ldr	r0, [r4, #8]
  406b16:	f7ff ffbd 	bl	406a94 <std.isra.0>
  406b1a:	2202      	movs	r2, #2
  406b1c:	2112      	movs	r1, #18
  406b1e:	68e0      	ldr	r0, [r4, #12]
  406b20:	f7ff ffb8 	bl	406a94 <std.isra.0>
  406b24:	2301      	movs	r3, #1
  406b26:	63a3      	str	r3, [r4, #56]	; 0x38
  406b28:	4802      	ldr	r0, [pc, #8]	; (406b34 <__sinit+0x50>)
  406b2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  406b2e:	f000 bba9 	b.w	407284 <__retarget_lock_release_recursive>
  406b32:	bf00      	nop
  406b34:	20400fbc 	.word	0x20400fbc
  406b38:	00406a89 	.word	0x00406a89

00406b3c <__sfp_lock_acquire>:
  406b3c:	4801      	ldr	r0, [pc, #4]	; (406b44 <__sfp_lock_acquire+0x8>)
  406b3e:	f000 bb9f 	b.w	407280 <__retarget_lock_acquire_recursive>
  406b42:	bf00      	nop
  406b44:	20400fd0 	.word	0x20400fd0

00406b48 <__sfp_lock_release>:
  406b48:	4801      	ldr	r0, [pc, #4]	; (406b50 <__sfp_lock_release+0x8>)
  406b4a:	f000 bb9b 	b.w	407284 <__retarget_lock_release_recursive>
  406b4e:	bf00      	nop
  406b50:	20400fd0 	.word	0x20400fd0

00406b54 <__libc_fini_array>:
  406b54:	b538      	push	{r3, r4, r5, lr}
  406b56:	4c0a      	ldr	r4, [pc, #40]	; (406b80 <__libc_fini_array+0x2c>)
  406b58:	4d0a      	ldr	r5, [pc, #40]	; (406b84 <__libc_fini_array+0x30>)
  406b5a:	1b64      	subs	r4, r4, r5
  406b5c:	10a4      	asrs	r4, r4, #2
  406b5e:	d00a      	beq.n	406b76 <__libc_fini_array+0x22>
  406b60:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  406b64:	3b01      	subs	r3, #1
  406b66:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  406b6a:	3c01      	subs	r4, #1
  406b6c:	f855 3904 	ldr.w	r3, [r5], #-4
  406b70:	4798      	blx	r3
  406b72:	2c00      	cmp	r4, #0
  406b74:	d1f9      	bne.n	406b6a <__libc_fini_array+0x16>
  406b76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  406b7a:	f003 b873 	b.w	409c64 <_fini>
  406b7e:	bf00      	nop
  406b80:	00409c74 	.word	0x00409c74
  406b84:	00409c70 	.word	0x00409c70

00406b88 <__fputwc>:
  406b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406b8c:	b082      	sub	sp, #8
  406b8e:	4680      	mov	r8, r0
  406b90:	4689      	mov	r9, r1
  406b92:	4614      	mov	r4, r2
  406b94:	f000 fb54 	bl	407240 <__locale_mb_cur_max>
  406b98:	2801      	cmp	r0, #1
  406b9a:	d036      	beq.n	406c0a <__fputwc+0x82>
  406b9c:	464a      	mov	r2, r9
  406b9e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  406ba2:	a901      	add	r1, sp, #4
  406ba4:	4640      	mov	r0, r8
  406ba6:	f001 fb0b 	bl	4081c0 <_wcrtomb_r>
  406baa:	1c42      	adds	r2, r0, #1
  406bac:	4606      	mov	r6, r0
  406bae:	d025      	beq.n	406bfc <__fputwc+0x74>
  406bb0:	b3a8      	cbz	r0, 406c1e <__fputwc+0x96>
  406bb2:	f89d e004 	ldrb.w	lr, [sp, #4]
  406bb6:	2500      	movs	r5, #0
  406bb8:	f10d 0a04 	add.w	sl, sp, #4
  406bbc:	e009      	b.n	406bd2 <__fputwc+0x4a>
  406bbe:	6823      	ldr	r3, [r4, #0]
  406bc0:	1c5a      	adds	r2, r3, #1
  406bc2:	6022      	str	r2, [r4, #0]
  406bc4:	f883 e000 	strb.w	lr, [r3]
  406bc8:	3501      	adds	r5, #1
  406bca:	42b5      	cmp	r5, r6
  406bcc:	d227      	bcs.n	406c1e <__fputwc+0x96>
  406bce:	f815 e00a 	ldrb.w	lr, [r5, sl]
  406bd2:	68a3      	ldr	r3, [r4, #8]
  406bd4:	3b01      	subs	r3, #1
  406bd6:	2b00      	cmp	r3, #0
  406bd8:	60a3      	str	r3, [r4, #8]
  406bda:	daf0      	bge.n	406bbe <__fputwc+0x36>
  406bdc:	69a7      	ldr	r7, [r4, #24]
  406bde:	42bb      	cmp	r3, r7
  406be0:	4671      	mov	r1, lr
  406be2:	4622      	mov	r2, r4
  406be4:	4640      	mov	r0, r8
  406be6:	db02      	blt.n	406bee <__fputwc+0x66>
  406be8:	f1be 0f0a 	cmp.w	lr, #10
  406bec:	d1e7      	bne.n	406bbe <__fputwc+0x36>
  406bee:	f001 fa8f 	bl	408110 <__swbuf_r>
  406bf2:	1c43      	adds	r3, r0, #1
  406bf4:	d1e8      	bne.n	406bc8 <__fputwc+0x40>
  406bf6:	b002      	add	sp, #8
  406bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406bfc:	89a3      	ldrh	r3, [r4, #12]
  406bfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406c02:	81a3      	strh	r3, [r4, #12]
  406c04:	b002      	add	sp, #8
  406c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406c0a:	f109 33ff 	add.w	r3, r9, #4294967295
  406c0e:	2bfe      	cmp	r3, #254	; 0xfe
  406c10:	d8c4      	bhi.n	406b9c <__fputwc+0x14>
  406c12:	fa5f fe89 	uxtb.w	lr, r9
  406c16:	4606      	mov	r6, r0
  406c18:	f88d e004 	strb.w	lr, [sp, #4]
  406c1c:	e7cb      	b.n	406bb6 <__fputwc+0x2e>
  406c1e:	4648      	mov	r0, r9
  406c20:	b002      	add	sp, #8
  406c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406c26:	bf00      	nop

00406c28 <_fputwc_r>:
  406c28:	b530      	push	{r4, r5, lr}
  406c2a:	6e53      	ldr	r3, [r2, #100]	; 0x64
  406c2c:	f013 0f01 	tst.w	r3, #1
  406c30:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  406c34:	4614      	mov	r4, r2
  406c36:	b083      	sub	sp, #12
  406c38:	4605      	mov	r5, r0
  406c3a:	b29a      	uxth	r2, r3
  406c3c:	d101      	bne.n	406c42 <_fputwc_r+0x1a>
  406c3e:	0590      	lsls	r0, r2, #22
  406c40:	d51c      	bpl.n	406c7c <_fputwc_r+0x54>
  406c42:	0490      	lsls	r0, r2, #18
  406c44:	d406      	bmi.n	406c54 <_fputwc_r+0x2c>
  406c46:	6e62      	ldr	r2, [r4, #100]	; 0x64
  406c48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  406c4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  406c50:	81a3      	strh	r3, [r4, #12]
  406c52:	6662      	str	r2, [r4, #100]	; 0x64
  406c54:	4628      	mov	r0, r5
  406c56:	4622      	mov	r2, r4
  406c58:	f7ff ff96 	bl	406b88 <__fputwc>
  406c5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406c5e:	07da      	lsls	r2, r3, #31
  406c60:	4605      	mov	r5, r0
  406c62:	d402      	bmi.n	406c6a <_fputwc_r+0x42>
  406c64:	89a3      	ldrh	r3, [r4, #12]
  406c66:	059b      	lsls	r3, r3, #22
  406c68:	d502      	bpl.n	406c70 <_fputwc_r+0x48>
  406c6a:	4628      	mov	r0, r5
  406c6c:	b003      	add	sp, #12
  406c6e:	bd30      	pop	{r4, r5, pc}
  406c70:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406c72:	f000 fb07 	bl	407284 <__retarget_lock_release_recursive>
  406c76:	4628      	mov	r0, r5
  406c78:	b003      	add	sp, #12
  406c7a:	bd30      	pop	{r4, r5, pc}
  406c7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406c7e:	9101      	str	r1, [sp, #4]
  406c80:	f000 fafe 	bl	407280 <__retarget_lock_acquire_recursive>
  406c84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406c88:	9901      	ldr	r1, [sp, #4]
  406c8a:	b29a      	uxth	r2, r3
  406c8c:	e7d9      	b.n	406c42 <_fputwc_r+0x1a>
  406c8e:	bf00      	nop

00406c90 <_malloc_trim_r>:
  406c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406c92:	4f24      	ldr	r7, [pc, #144]	; (406d24 <_malloc_trim_r+0x94>)
  406c94:	460c      	mov	r4, r1
  406c96:	4606      	mov	r6, r0
  406c98:	f7fc faf8 	bl	40328c <__malloc_lock>
  406c9c:	68bb      	ldr	r3, [r7, #8]
  406c9e:	685d      	ldr	r5, [r3, #4]
  406ca0:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  406ca4:	310f      	adds	r1, #15
  406ca6:	f025 0503 	bic.w	r5, r5, #3
  406caa:	4429      	add	r1, r5
  406cac:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  406cb0:	f021 010f 	bic.w	r1, r1, #15
  406cb4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  406cb8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  406cbc:	db07      	blt.n	406cce <_malloc_trim_r+0x3e>
  406cbe:	2100      	movs	r1, #0
  406cc0:	4630      	mov	r0, r6
  406cc2:	f7fc faef 	bl	4032a4 <_sbrk_r>
  406cc6:	68bb      	ldr	r3, [r7, #8]
  406cc8:	442b      	add	r3, r5
  406cca:	4298      	cmp	r0, r3
  406ccc:	d004      	beq.n	406cd8 <_malloc_trim_r+0x48>
  406cce:	4630      	mov	r0, r6
  406cd0:	f7fc fae2 	bl	403298 <__malloc_unlock>
  406cd4:	2000      	movs	r0, #0
  406cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406cd8:	4261      	negs	r1, r4
  406cda:	4630      	mov	r0, r6
  406cdc:	f7fc fae2 	bl	4032a4 <_sbrk_r>
  406ce0:	3001      	adds	r0, #1
  406ce2:	d00d      	beq.n	406d00 <_malloc_trim_r+0x70>
  406ce4:	4b10      	ldr	r3, [pc, #64]	; (406d28 <_malloc_trim_r+0x98>)
  406ce6:	68ba      	ldr	r2, [r7, #8]
  406ce8:	6819      	ldr	r1, [r3, #0]
  406cea:	1b2d      	subs	r5, r5, r4
  406cec:	f045 0501 	orr.w	r5, r5, #1
  406cf0:	4630      	mov	r0, r6
  406cf2:	1b09      	subs	r1, r1, r4
  406cf4:	6055      	str	r5, [r2, #4]
  406cf6:	6019      	str	r1, [r3, #0]
  406cf8:	f7fc face 	bl	403298 <__malloc_unlock>
  406cfc:	2001      	movs	r0, #1
  406cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406d00:	2100      	movs	r1, #0
  406d02:	4630      	mov	r0, r6
  406d04:	f7fc face 	bl	4032a4 <_sbrk_r>
  406d08:	68ba      	ldr	r2, [r7, #8]
  406d0a:	1a83      	subs	r3, r0, r2
  406d0c:	2b0f      	cmp	r3, #15
  406d0e:	ddde      	ble.n	406cce <_malloc_trim_r+0x3e>
  406d10:	4c06      	ldr	r4, [pc, #24]	; (406d2c <_malloc_trim_r+0x9c>)
  406d12:	4905      	ldr	r1, [pc, #20]	; (406d28 <_malloc_trim_r+0x98>)
  406d14:	6824      	ldr	r4, [r4, #0]
  406d16:	f043 0301 	orr.w	r3, r3, #1
  406d1a:	1b00      	subs	r0, r0, r4
  406d1c:	6053      	str	r3, [r2, #4]
  406d1e:	6008      	str	r0, [r1, #0]
  406d20:	e7d5      	b.n	406cce <_malloc_trim_r+0x3e>
  406d22:	bf00      	nop
  406d24:	20400570 	.word	0x20400570
  406d28:	20400f50 	.word	0x20400f50
  406d2c:	20400978 	.word	0x20400978

00406d30 <_free_r>:
  406d30:	2900      	cmp	r1, #0
  406d32:	d044      	beq.n	406dbe <_free_r+0x8e>
  406d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406d38:	460d      	mov	r5, r1
  406d3a:	4680      	mov	r8, r0
  406d3c:	f7fc faa6 	bl	40328c <__malloc_lock>
  406d40:	f855 7c04 	ldr.w	r7, [r5, #-4]
  406d44:	4969      	ldr	r1, [pc, #420]	; (406eec <_free_r+0x1bc>)
  406d46:	f027 0301 	bic.w	r3, r7, #1
  406d4a:	f1a5 0408 	sub.w	r4, r5, #8
  406d4e:	18e2      	adds	r2, r4, r3
  406d50:	688e      	ldr	r6, [r1, #8]
  406d52:	6850      	ldr	r0, [r2, #4]
  406d54:	42b2      	cmp	r2, r6
  406d56:	f020 0003 	bic.w	r0, r0, #3
  406d5a:	d05e      	beq.n	406e1a <_free_r+0xea>
  406d5c:	07fe      	lsls	r6, r7, #31
  406d5e:	6050      	str	r0, [r2, #4]
  406d60:	d40b      	bmi.n	406d7a <_free_r+0x4a>
  406d62:	f855 7c08 	ldr.w	r7, [r5, #-8]
  406d66:	1be4      	subs	r4, r4, r7
  406d68:	f101 0e08 	add.w	lr, r1, #8
  406d6c:	68a5      	ldr	r5, [r4, #8]
  406d6e:	4575      	cmp	r5, lr
  406d70:	443b      	add	r3, r7
  406d72:	d06d      	beq.n	406e50 <_free_r+0x120>
  406d74:	68e7      	ldr	r7, [r4, #12]
  406d76:	60ef      	str	r7, [r5, #12]
  406d78:	60bd      	str	r5, [r7, #8]
  406d7a:	1815      	adds	r5, r2, r0
  406d7c:	686d      	ldr	r5, [r5, #4]
  406d7e:	07ed      	lsls	r5, r5, #31
  406d80:	d53e      	bpl.n	406e00 <_free_r+0xd0>
  406d82:	f043 0201 	orr.w	r2, r3, #1
  406d86:	6062      	str	r2, [r4, #4]
  406d88:	50e3      	str	r3, [r4, r3]
  406d8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406d8e:	d217      	bcs.n	406dc0 <_free_r+0x90>
  406d90:	08db      	lsrs	r3, r3, #3
  406d92:	1c58      	adds	r0, r3, #1
  406d94:	109a      	asrs	r2, r3, #2
  406d96:	684d      	ldr	r5, [r1, #4]
  406d98:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  406d9c:	60a7      	str	r7, [r4, #8]
  406d9e:	2301      	movs	r3, #1
  406da0:	4093      	lsls	r3, r2
  406da2:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  406da6:	432b      	orrs	r3, r5
  406da8:	3a08      	subs	r2, #8
  406daa:	60e2      	str	r2, [r4, #12]
  406dac:	604b      	str	r3, [r1, #4]
  406dae:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  406db2:	60fc      	str	r4, [r7, #12]
  406db4:	4640      	mov	r0, r8
  406db6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406dba:	f7fc ba6d 	b.w	403298 <__malloc_unlock>
  406dbe:	4770      	bx	lr
  406dc0:	0a5a      	lsrs	r2, r3, #9
  406dc2:	2a04      	cmp	r2, #4
  406dc4:	d852      	bhi.n	406e6c <_free_r+0x13c>
  406dc6:	099a      	lsrs	r2, r3, #6
  406dc8:	f102 0739 	add.w	r7, r2, #57	; 0x39
  406dcc:	00ff      	lsls	r7, r7, #3
  406dce:	f102 0538 	add.w	r5, r2, #56	; 0x38
  406dd2:	19c8      	adds	r0, r1, r7
  406dd4:	59ca      	ldr	r2, [r1, r7]
  406dd6:	3808      	subs	r0, #8
  406dd8:	4290      	cmp	r0, r2
  406dda:	d04f      	beq.n	406e7c <_free_r+0x14c>
  406ddc:	6851      	ldr	r1, [r2, #4]
  406dde:	f021 0103 	bic.w	r1, r1, #3
  406de2:	428b      	cmp	r3, r1
  406de4:	d232      	bcs.n	406e4c <_free_r+0x11c>
  406de6:	6892      	ldr	r2, [r2, #8]
  406de8:	4290      	cmp	r0, r2
  406dea:	d1f7      	bne.n	406ddc <_free_r+0xac>
  406dec:	68c3      	ldr	r3, [r0, #12]
  406dee:	60a0      	str	r0, [r4, #8]
  406df0:	60e3      	str	r3, [r4, #12]
  406df2:	609c      	str	r4, [r3, #8]
  406df4:	60c4      	str	r4, [r0, #12]
  406df6:	4640      	mov	r0, r8
  406df8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406dfc:	f7fc ba4c 	b.w	403298 <__malloc_unlock>
  406e00:	6895      	ldr	r5, [r2, #8]
  406e02:	4f3b      	ldr	r7, [pc, #236]	; (406ef0 <_free_r+0x1c0>)
  406e04:	42bd      	cmp	r5, r7
  406e06:	4403      	add	r3, r0
  406e08:	d040      	beq.n	406e8c <_free_r+0x15c>
  406e0a:	68d0      	ldr	r0, [r2, #12]
  406e0c:	60e8      	str	r0, [r5, #12]
  406e0e:	f043 0201 	orr.w	r2, r3, #1
  406e12:	6085      	str	r5, [r0, #8]
  406e14:	6062      	str	r2, [r4, #4]
  406e16:	50e3      	str	r3, [r4, r3]
  406e18:	e7b7      	b.n	406d8a <_free_r+0x5a>
  406e1a:	07ff      	lsls	r7, r7, #31
  406e1c:	4403      	add	r3, r0
  406e1e:	d407      	bmi.n	406e30 <_free_r+0x100>
  406e20:	f855 2c08 	ldr.w	r2, [r5, #-8]
  406e24:	1aa4      	subs	r4, r4, r2
  406e26:	4413      	add	r3, r2
  406e28:	68a0      	ldr	r0, [r4, #8]
  406e2a:	68e2      	ldr	r2, [r4, #12]
  406e2c:	60c2      	str	r2, [r0, #12]
  406e2e:	6090      	str	r0, [r2, #8]
  406e30:	4a30      	ldr	r2, [pc, #192]	; (406ef4 <_free_r+0x1c4>)
  406e32:	6812      	ldr	r2, [r2, #0]
  406e34:	f043 0001 	orr.w	r0, r3, #1
  406e38:	4293      	cmp	r3, r2
  406e3a:	6060      	str	r0, [r4, #4]
  406e3c:	608c      	str	r4, [r1, #8]
  406e3e:	d3b9      	bcc.n	406db4 <_free_r+0x84>
  406e40:	4b2d      	ldr	r3, [pc, #180]	; (406ef8 <_free_r+0x1c8>)
  406e42:	4640      	mov	r0, r8
  406e44:	6819      	ldr	r1, [r3, #0]
  406e46:	f7ff ff23 	bl	406c90 <_malloc_trim_r>
  406e4a:	e7b3      	b.n	406db4 <_free_r+0x84>
  406e4c:	4610      	mov	r0, r2
  406e4e:	e7cd      	b.n	406dec <_free_r+0xbc>
  406e50:	1811      	adds	r1, r2, r0
  406e52:	6849      	ldr	r1, [r1, #4]
  406e54:	07c9      	lsls	r1, r1, #31
  406e56:	d444      	bmi.n	406ee2 <_free_r+0x1b2>
  406e58:	6891      	ldr	r1, [r2, #8]
  406e5a:	68d2      	ldr	r2, [r2, #12]
  406e5c:	60ca      	str	r2, [r1, #12]
  406e5e:	4403      	add	r3, r0
  406e60:	f043 0001 	orr.w	r0, r3, #1
  406e64:	6091      	str	r1, [r2, #8]
  406e66:	6060      	str	r0, [r4, #4]
  406e68:	50e3      	str	r3, [r4, r3]
  406e6a:	e7a3      	b.n	406db4 <_free_r+0x84>
  406e6c:	2a14      	cmp	r2, #20
  406e6e:	d816      	bhi.n	406e9e <_free_r+0x16e>
  406e70:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  406e74:	00ff      	lsls	r7, r7, #3
  406e76:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  406e7a:	e7aa      	b.n	406dd2 <_free_r+0xa2>
  406e7c:	10aa      	asrs	r2, r5, #2
  406e7e:	2301      	movs	r3, #1
  406e80:	684d      	ldr	r5, [r1, #4]
  406e82:	4093      	lsls	r3, r2
  406e84:	432b      	orrs	r3, r5
  406e86:	604b      	str	r3, [r1, #4]
  406e88:	4603      	mov	r3, r0
  406e8a:	e7b0      	b.n	406dee <_free_r+0xbe>
  406e8c:	f043 0201 	orr.w	r2, r3, #1
  406e90:	614c      	str	r4, [r1, #20]
  406e92:	610c      	str	r4, [r1, #16]
  406e94:	60e5      	str	r5, [r4, #12]
  406e96:	60a5      	str	r5, [r4, #8]
  406e98:	6062      	str	r2, [r4, #4]
  406e9a:	50e3      	str	r3, [r4, r3]
  406e9c:	e78a      	b.n	406db4 <_free_r+0x84>
  406e9e:	2a54      	cmp	r2, #84	; 0x54
  406ea0:	d806      	bhi.n	406eb0 <_free_r+0x180>
  406ea2:	0b1a      	lsrs	r2, r3, #12
  406ea4:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  406ea8:	00ff      	lsls	r7, r7, #3
  406eaa:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  406eae:	e790      	b.n	406dd2 <_free_r+0xa2>
  406eb0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406eb4:	d806      	bhi.n	406ec4 <_free_r+0x194>
  406eb6:	0bda      	lsrs	r2, r3, #15
  406eb8:	f102 0778 	add.w	r7, r2, #120	; 0x78
  406ebc:	00ff      	lsls	r7, r7, #3
  406ebe:	f102 0577 	add.w	r5, r2, #119	; 0x77
  406ec2:	e786      	b.n	406dd2 <_free_r+0xa2>
  406ec4:	f240 5054 	movw	r0, #1364	; 0x554
  406ec8:	4282      	cmp	r2, r0
  406eca:	d806      	bhi.n	406eda <_free_r+0x1aa>
  406ecc:	0c9a      	lsrs	r2, r3, #18
  406ece:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  406ed2:	00ff      	lsls	r7, r7, #3
  406ed4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  406ed8:	e77b      	b.n	406dd2 <_free_r+0xa2>
  406eda:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  406ede:	257e      	movs	r5, #126	; 0x7e
  406ee0:	e777      	b.n	406dd2 <_free_r+0xa2>
  406ee2:	f043 0101 	orr.w	r1, r3, #1
  406ee6:	6061      	str	r1, [r4, #4]
  406ee8:	6013      	str	r3, [r2, #0]
  406eea:	e763      	b.n	406db4 <_free_r+0x84>
  406eec:	20400570 	.word	0x20400570
  406ef0:	20400578 	.word	0x20400578
  406ef4:	2040097c 	.word	0x2040097c
  406ef8:	20400f80 	.word	0x20400f80

00406efc <__sfvwrite_r>:
  406efc:	6893      	ldr	r3, [r2, #8]
  406efe:	2b00      	cmp	r3, #0
  406f00:	d073      	beq.n	406fea <__sfvwrite_r+0xee>
  406f02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406f06:	898b      	ldrh	r3, [r1, #12]
  406f08:	b083      	sub	sp, #12
  406f0a:	460c      	mov	r4, r1
  406f0c:	0719      	lsls	r1, r3, #28
  406f0e:	9000      	str	r0, [sp, #0]
  406f10:	4616      	mov	r6, r2
  406f12:	d526      	bpl.n	406f62 <__sfvwrite_r+0x66>
  406f14:	6922      	ldr	r2, [r4, #16]
  406f16:	b322      	cbz	r2, 406f62 <__sfvwrite_r+0x66>
  406f18:	f013 0002 	ands.w	r0, r3, #2
  406f1c:	6835      	ldr	r5, [r6, #0]
  406f1e:	d02c      	beq.n	406f7a <__sfvwrite_r+0x7e>
  406f20:	f04f 0900 	mov.w	r9, #0
  406f24:	4fb0      	ldr	r7, [pc, #704]	; (4071e8 <__sfvwrite_r+0x2ec>)
  406f26:	46c8      	mov	r8, r9
  406f28:	46b2      	mov	sl, r6
  406f2a:	45b8      	cmp	r8, r7
  406f2c:	4643      	mov	r3, r8
  406f2e:	464a      	mov	r2, r9
  406f30:	bf28      	it	cs
  406f32:	463b      	movcs	r3, r7
  406f34:	9800      	ldr	r0, [sp, #0]
  406f36:	f1b8 0f00 	cmp.w	r8, #0
  406f3a:	d050      	beq.n	406fde <__sfvwrite_r+0xe2>
  406f3c:	69e1      	ldr	r1, [r4, #28]
  406f3e:	6a66      	ldr	r6, [r4, #36]	; 0x24
  406f40:	47b0      	blx	r6
  406f42:	2800      	cmp	r0, #0
  406f44:	dd58      	ble.n	406ff8 <__sfvwrite_r+0xfc>
  406f46:	f8da 3008 	ldr.w	r3, [sl, #8]
  406f4a:	1a1b      	subs	r3, r3, r0
  406f4c:	4481      	add	r9, r0
  406f4e:	eba8 0800 	sub.w	r8, r8, r0
  406f52:	f8ca 3008 	str.w	r3, [sl, #8]
  406f56:	2b00      	cmp	r3, #0
  406f58:	d1e7      	bne.n	406f2a <__sfvwrite_r+0x2e>
  406f5a:	2000      	movs	r0, #0
  406f5c:	b003      	add	sp, #12
  406f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406f62:	4621      	mov	r1, r4
  406f64:	9800      	ldr	r0, [sp, #0]
  406f66:	f7fe fc91 	bl	40588c <__swsetup_r>
  406f6a:	2800      	cmp	r0, #0
  406f6c:	f040 8133 	bne.w	4071d6 <__sfvwrite_r+0x2da>
  406f70:	89a3      	ldrh	r3, [r4, #12]
  406f72:	6835      	ldr	r5, [r6, #0]
  406f74:	f013 0002 	ands.w	r0, r3, #2
  406f78:	d1d2      	bne.n	406f20 <__sfvwrite_r+0x24>
  406f7a:	f013 0901 	ands.w	r9, r3, #1
  406f7e:	d145      	bne.n	40700c <__sfvwrite_r+0x110>
  406f80:	464f      	mov	r7, r9
  406f82:	9601      	str	r6, [sp, #4]
  406f84:	b337      	cbz	r7, 406fd4 <__sfvwrite_r+0xd8>
  406f86:	059a      	lsls	r2, r3, #22
  406f88:	f8d4 8008 	ldr.w	r8, [r4, #8]
  406f8c:	f140 8083 	bpl.w	407096 <__sfvwrite_r+0x19a>
  406f90:	4547      	cmp	r7, r8
  406f92:	46c3      	mov	fp, r8
  406f94:	f0c0 80ab 	bcc.w	4070ee <__sfvwrite_r+0x1f2>
  406f98:	f413 6f90 	tst.w	r3, #1152	; 0x480
  406f9c:	f040 80ac 	bne.w	4070f8 <__sfvwrite_r+0x1fc>
  406fa0:	6820      	ldr	r0, [r4, #0]
  406fa2:	46ba      	mov	sl, r7
  406fa4:	465a      	mov	r2, fp
  406fa6:	4649      	mov	r1, r9
  406fa8:	f000 faec 	bl	407584 <memmove>
  406fac:	68a2      	ldr	r2, [r4, #8]
  406fae:	6823      	ldr	r3, [r4, #0]
  406fb0:	eba2 0208 	sub.w	r2, r2, r8
  406fb4:	445b      	add	r3, fp
  406fb6:	60a2      	str	r2, [r4, #8]
  406fb8:	6023      	str	r3, [r4, #0]
  406fba:	9a01      	ldr	r2, [sp, #4]
  406fbc:	6893      	ldr	r3, [r2, #8]
  406fbe:	eba3 030a 	sub.w	r3, r3, sl
  406fc2:	44d1      	add	r9, sl
  406fc4:	eba7 070a 	sub.w	r7, r7, sl
  406fc8:	6093      	str	r3, [r2, #8]
  406fca:	2b00      	cmp	r3, #0
  406fcc:	d0c5      	beq.n	406f5a <__sfvwrite_r+0x5e>
  406fce:	89a3      	ldrh	r3, [r4, #12]
  406fd0:	2f00      	cmp	r7, #0
  406fd2:	d1d8      	bne.n	406f86 <__sfvwrite_r+0x8a>
  406fd4:	f8d5 9000 	ldr.w	r9, [r5]
  406fd8:	686f      	ldr	r7, [r5, #4]
  406fda:	3508      	adds	r5, #8
  406fdc:	e7d2      	b.n	406f84 <__sfvwrite_r+0x88>
  406fde:	f8d5 9000 	ldr.w	r9, [r5]
  406fe2:	f8d5 8004 	ldr.w	r8, [r5, #4]
  406fe6:	3508      	adds	r5, #8
  406fe8:	e79f      	b.n	406f2a <__sfvwrite_r+0x2e>
  406fea:	2000      	movs	r0, #0
  406fec:	4770      	bx	lr
  406fee:	4621      	mov	r1, r4
  406ff0:	9800      	ldr	r0, [sp, #0]
  406ff2:	f7ff fd1f 	bl	406a34 <_fflush_r>
  406ff6:	b370      	cbz	r0, 407056 <__sfvwrite_r+0x15a>
  406ff8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406ffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407000:	f04f 30ff 	mov.w	r0, #4294967295
  407004:	81a3      	strh	r3, [r4, #12]
  407006:	b003      	add	sp, #12
  407008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40700c:	4681      	mov	r9, r0
  40700e:	4633      	mov	r3, r6
  407010:	464e      	mov	r6, r9
  407012:	46a8      	mov	r8, r5
  407014:	469a      	mov	sl, r3
  407016:	464d      	mov	r5, r9
  407018:	b34e      	cbz	r6, 40706e <__sfvwrite_r+0x172>
  40701a:	b380      	cbz	r0, 40707e <__sfvwrite_r+0x182>
  40701c:	6820      	ldr	r0, [r4, #0]
  40701e:	6923      	ldr	r3, [r4, #16]
  407020:	6962      	ldr	r2, [r4, #20]
  407022:	45b1      	cmp	r9, r6
  407024:	46cb      	mov	fp, r9
  407026:	bf28      	it	cs
  407028:	46b3      	movcs	fp, r6
  40702a:	4298      	cmp	r0, r3
  40702c:	465f      	mov	r7, fp
  40702e:	d904      	bls.n	40703a <__sfvwrite_r+0x13e>
  407030:	68a3      	ldr	r3, [r4, #8]
  407032:	4413      	add	r3, r2
  407034:	459b      	cmp	fp, r3
  407036:	f300 80a6 	bgt.w	407186 <__sfvwrite_r+0x28a>
  40703a:	4593      	cmp	fp, r2
  40703c:	db4b      	blt.n	4070d6 <__sfvwrite_r+0x1da>
  40703e:	4613      	mov	r3, r2
  407040:	6a67      	ldr	r7, [r4, #36]	; 0x24
  407042:	69e1      	ldr	r1, [r4, #28]
  407044:	9800      	ldr	r0, [sp, #0]
  407046:	462a      	mov	r2, r5
  407048:	47b8      	blx	r7
  40704a:	1e07      	subs	r7, r0, #0
  40704c:	ddd4      	ble.n	406ff8 <__sfvwrite_r+0xfc>
  40704e:	ebb9 0907 	subs.w	r9, r9, r7
  407052:	d0cc      	beq.n	406fee <__sfvwrite_r+0xf2>
  407054:	2001      	movs	r0, #1
  407056:	f8da 3008 	ldr.w	r3, [sl, #8]
  40705a:	1bdb      	subs	r3, r3, r7
  40705c:	443d      	add	r5, r7
  40705e:	1bf6      	subs	r6, r6, r7
  407060:	f8ca 3008 	str.w	r3, [sl, #8]
  407064:	2b00      	cmp	r3, #0
  407066:	f43f af78 	beq.w	406f5a <__sfvwrite_r+0x5e>
  40706a:	2e00      	cmp	r6, #0
  40706c:	d1d5      	bne.n	40701a <__sfvwrite_r+0x11e>
  40706e:	f108 0308 	add.w	r3, r8, #8
  407072:	e913 0060 	ldmdb	r3, {r5, r6}
  407076:	4698      	mov	r8, r3
  407078:	3308      	adds	r3, #8
  40707a:	2e00      	cmp	r6, #0
  40707c:	d0f9      	beq.n	407072 <__sfvwrite_r+0x176>
  40707e:	4632      	mov	r2, r6
  407080:	210a      	movs	r1, #10
  407082:	4628      	mov	r0, r5
  407084:	f000 f994 	bl	4073b0 <memchr>
  407088:	2800      	cmp	r0, #0
  40708a:	f000 80a1 	beq.w	4071d0 <__sfvwrite_r+0x2d4>
  40708e:	3001      	adds	r0, #1
  407090:	eba0 0905 	sub.w	r9, r0, r5
  407094:	e7c2      	b.n	40701c <__sfvwrite_r+0x120>
  407096:	6820      	ldr	r0, [r4, #0]
  407098:	6923      	ldr	r3, [r4, #16]
  40709a:	4298      	cmp	r0, r3
  40709c:	d802      	bhi.n	4070a4 <__sfvwrite_r+0x1a8>
  40709e:	6963      	ldr	r3, [r4, #20]
  4070a0:	429f      	cmp	r7, r3
  4070a2:	d25d      	bcs.n	407160 <__sfvwrite_r+0x264>
  4070a4:	45b8      	cmp	r8, r7
  4070a6:	bf28      	it	cs
  4070a8:	46b8      	movcs	r8, r7
  4070aa:	4642      	mov	r2, r8
  4070ac:	4649      	mov	r1, r9
  4070ae:	f000 fa69 	bl	407584 <memmove>
  4070b2:	68a3      	ldr	r3, [r4, #8]
  4070b4:	6822      	ldr	r2, [r4, #0]
  4070b6:	eba3 0308 	sub.w	r3, r3, r8
  4070ba:	4442      	add	r2, r8
  4070bc:	60a3      	str	r3, [r4, #8]
  4070be:	6022      	str	r2, [r4, #0]
  4070c0:	b10b      	cbz	r3, 4070c6 <__sfvwrite_r+0x1ca>
  4070c2:	46c2      	mov	sl, r8
  4070c4:	e779      	b.n	406fba <__sfvwrite_r+0xbe>
  4070c6:	4621      	mov	r1, r4
  4070c8:	9800      	ldr	r0, [sp, #0]
  4070ca:	f7ff fcb3 	bl	406a34 <_fflush_r>
  4070ce:	2800      	cmp	r0, #0
  4070d0:	d192      	bne.n	406ff8 <__sfvwrite_r+0xfc>
  4070d2:	46c2      	mov	sl, r8
  4070d4:	e771      	b.n	406fba <__sfvwrite_r+0xbe>
  4070d6:	465a      	mov	r2, fp
  4070d8:	4629      	mov	r1, r5
  4070da:	f000 fa53 	bl	407584 <memmove>
  4070de:	68a2      	ldr	r2, [r4, #8]
  4070e0:	6823      	ldr	r3, [r4, #0]
  4070e2:	eba2 020b 	sub.w	r2, r2, fp
  4070e6:	445b      	add	r3, fp
  4070e8:	60a2      	str	r2, [r4, #8]
  4070ea:	6023      	str	r3, [r4, #0]
  4070ec:	e7af      	b.n	40704e <__sfvwrite_r+0x152>
  4070ee:	6820      	ldr	r0, [r4, #0]
  4070f0:	46b8      	mov	r8, r7
  4070f2:	46ba      	mov	sl, r7
  4070f4:	46bb      	mov	fp, r7
  4070f6:	e755      	b.n	406fa4 <__sfvwrite_r+0xa8>
  4070f8:	6962      	ldr	r2, [r4, #20]
  4070fa:	6820      	ldr	r0, [r4, #0]
  4070fc:	6921      	ldr	r1, [r4, #16]
  4070fe:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  407102:	eba0 0a01 	sub.w	sl, r0, r1
  407106:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40710a:	f10a 0001 	add.w	r0, sl, #1
  40710e:	ea4f 0868 	mov.w	r8, r8, asr #1
  407112:	4438      	add	r0, r7
  407114:	4540      	cmp	r0, r8
  407116:	4642      	mov	r2, r8
  407118:	bf84      	itt	hi
  40711a:	4680      	movhi	r8, r0
  40711c:	4642      	movhi	r2, r8
  40711e:	055b      	lsls	r3, r3, #21
  407120:	d544      	bpl.n	4071ac <__sfvwrite_r+0x2b0>
  407122:	4611      	mov	r1, r2
  407124:	9800      	ldr	r0, [sp, #0]
  407126:	f7fb fdb3 	bl	402c90 <_malloc_r>
  40712a:	4683      	mov	fp, r0
  40712c:	2800      	cmp	r0, #0
  40712e:	d055      	beq.n	4071dc <__sfvwrite_r+0x2e0>
  407130:	4652      	mov	r2, sl
  407132:	6921      	ldr	r1, [r4, #16]
  407134:	f000 f98c 	bl	407450 <memcpy>
  407138:	89a3      	ldrh	r3, [r4, #12]
  40713a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40713e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  407142:	81a3      	strh	r3, [r4, #12]
  407144:	eb0b 000a 	add.w	r0, fp, sl
  407148:	eba8 030a 	sub.w	r3, r8, sl
  40714c:	f8c4 b010 	str.w	fp, [r4, #16]
  407150:	f8c4 8014 	str.w	r8, [r4, #20]
  407154:	6020      	str	r0, [r4, #0]
  407156:	60a3      	str	r3, [r4, #8]
  407158:	46b8      	mov	r8, r7
  40715a:	46ba      	mov	sl, r7
  40715c:	46bb      	mov	fp, r7
  40715e:	e721      	b.n	406fa4 <__sfvwrite_r+0xa8>
  407160:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  407164:	42b9      	cmp	r1, r7
  407166:	bf28      	it	cs
  407168:	4639      	movcs	r1, r7
  40716a:	464a      	mov	r2, r9
  40716c:	fb91 f1f3 	sdiv	r1, r1, r3
  407170:	9800      	ldr	r0, [sp, #0]
  407172:	6a66      	ldr	r6, [r4, #36]	; 0x24
  407174:	fb03 f301 	mul.w	r3, r3, r1
  407178:	69e1      	ldr	r1, [r4, #28]
  40717a:	47b0      	blx	r6
  40717c:	f1b0 0a00 	subs.w	sl, r0, #0
  407180:	f73f af1b 	bgt.w	406fba <__sfvwrite_r+0xbe>
  407184:	e738      	b.n	406ff8 <__sfvwrite_r+0xfc>
  407186:	461a      	mov	r2, r3
  407188:	4629      	mov	r1, r5
  40718a:	9301      	str	r3, [sp, #4]
  40718c:	f000 f9fa 	bl	407584 <memmove>
  407190:	6822      	ldr	r2, [r4, #0]
  407192:	9b01      	ldr	r3, [sp, #4]
  407194:	9800      	ldr	r0, [sp, #0]
  407196:	441a      	add	r2, r3
  407198:	6022      	str	r2, [r4, #0]
  40719a:	4621      	mov	r1, r4
  40719c:	f7ff fc4a 	bl	406a34 <_fflush_r>
  4071a0:	9b01      	ldr	r3, [sp, #4]
  4071a2:	2800      	cmp	r0, #0
  4071a4:	f47f af28 	bne.w	406ff8 <__sfvwrite_r+0xfc>
  4071a8:	461f      	mov	r7, r3
  4071aa:	e750      	b.n	40704e <__sfvwrite_r+0x152>
  4071ac:	9800      	ldr	r0, [sp, #0]
  4071ae:	f000 fd47 	bl	407c40 <_realloc_r>
  4071b2:	4683      	mov	fp, r0
  4071b4:	2800      	cmp	r0, #0
  4071b6:	d1c5      	bne.n	407144 <__sfvwrite_r+0x248>
  4071b8:	9d00      	ldr	r5, [sp, #0]
  4071ba:	6921      	ldr	r1, [r4, #16]
  4071bc:	4628      	mov	r0, r5
  4071be:	f7ff fdb7 	bl	406d30 <_free_r>
  4071c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4071c6:	220c      	movs	r2, #12
  4071c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4071cc:	602a      	str	r2, [r5, #0]
  4071ce:	e715      	b.n	406ffc <__sfvwrite_r+0x100>
  4071d0:	f106 0901 	add.w	r9, r6, #1
  4071d4:	e722      	b.n	40701c <__sfvwrite_r+0x120>
  4071d6:	f04f 30ff 	mov.w	r0, #4294967295
  4071da:	e6bf      	b.n	406f5c <__sfvwrite_r+0x60>
  4071dc:	9a00      	ldr	r2, [sp, #0]
  4071de:	230c      	movs	r3, #12
  4071e0:	6013      	str	r3, [r2, #0]
  4071e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4071e6:	e709      	b.n	406ffc <__sfvwrite_r+0x100>
  4071e8:	7ffffc00 	.word	0x7ffffc00

004071ec <_fwalk_reent>:
  4071ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4071f0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4071f4:	d01f      	beq.n	407236 <_fwalk_reent+0x4a>
  4071f6:	4688      	mov	r8, r1
  4071f8:	4606      	mov	r6, r0
  4071fa:	f04f 0900 	mov.w	r9, #0
  4071fe:	687d      	ldr	r5, [r7, #4]
  407200:	68bc      	ldr	r4, [r7, #8]
  407202:	3d01      	subs	r5, #1
  407204:	d411      	bmi.n	40722a <_fwalk_reent+0x3e>
  407206:	89a3      	ldrh	r3, [r4, #12]
  407208:	2b01      	cmp	r3, #1
  40720a:	f105 35ff 	add.w	r5, r5, #4294967295
  40720e:	d908      	bls.n	407222 <_fwalk_reent+0x36>
  407210:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  407214:	3301      	adds	r3, #1
  407216:	4621      	mov	r1, r4
  407218:	4630      	mov	r0, r6
  40721a:	d002      	beq.n	407222 <_fwalk_reent+0x36>
  40721c:	47c0      	blx	r8
  40721e:	ea49 0900 	orr.w	r9, r9, r0
  407222:	1c6b      	adds	r3, r5, #1
  407224:	f104 0468 	add.w	r4, r4, #104	; 0x68
  407228:	d1ed      	bne.n	407206 <_fwalk_reent+0x1a>
  40722a:	683f      	ldr	r7, [r7, #0]
  40722c:	2f00      	cmp	r7, #0
  40722e:	d1e6      	bne.n	4071fe <_fwalk_reent+0x12>
  407230:	4648      	mov	r0, r9
  407232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407236:	46b9      	mov	r9, r7
  407238:	4648      	mov	r0, r9
  40723a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40723e:	bf00      	nop

00407240 <__locale_mb_cur_max>:
  407240:	4b04      	ldr	r3, [pc, #16]	; (407254 <__locale_mb_cur_max+0x14>)
  407242:	4a05      	ldr	r2, [pc, #20]	; (407258 <__locale_mb_cur_max+0x18>)
  407244:	681b      	ldr	r3, [r3, #0]
  407246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  407248:	2b00      	cmp	r3, #0
  40724a:	bf08      	it	eq
  40724c:	4613      	moveq	r3, r2
  40724e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  407252:	4770      	bx	lr
  407254:	20400144 	.word	0x20400144
  407258:	20400984 	.word	0x20400984

0040725c <_localeconv_r>:
  40725c:	4a04      	ldr	r2, [pc, #16]	; (407270 <_localeconv_r+0x14>)
  40725e:	4b05      	ldr	r3, [pc, #20]	; (407274 <_localeconv_r+0x18>)
  407260:	6812      	ldr	r2, [r2, #0]
  407262:	6b50      	ldr	r0, [r2, #52]	; 0x34
  407264:	2800      	cmp	r0, #0
  407266:	bf08      	it	eq
  407268:	4618      	moveq	r0, r3
  40726a:	30f0      	adds	r0, #240	; 0xf0
  40726c:	4770      	bx	lr
  40726e:	bf00      	nop
  407270:	20400144 	.word	0x20400144
  407274:	20400984 	.word	0x20400984

00407278 <__retarget_lock_init_recursive>:
  407278:	4770      	bx	lr
  40727a:	bf00      	nop

0040727c <__retarget_lock_close_recursive>:
  40727c:	4770      	bx	lr
  40727e:	bf00      	nop

00407280 <__retarget_lock_acquire_recursive>:
  407280:	4770      	bx	lr
  407282:	bf00      	nop

00407284 <__retarget_lock_release_recursive>:
  407284:	4770      	bx	lr
  407286:	bf00      	nop

00407288 <__swhatbuf_r>:
  407288:	b570      	push	{r4, r5, r6, lr}
  40728a:	460c      	mov	r4, r1
  40728c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407290:	2900      	cmp	r1, #0
  407292:	b090      	sub	sp, #64	; 0x40
  407294:	4615      	mov	r5, r2
  407296:	461e      	mov	r6, r3
  407298:	db14      	blt.n	4072c4 <__swhatbuf_r+0x3c>
  40729a:	aa01      	add	r2, sp, #4
  40729c:	f001 f8e4 	bl	408468 <_fstat_r>
  4072a0:	2800      	cmp	r0, #0
  4072a2:	db0f      	blt.n	4072c4 <__swhatbuf_r+0x3c>
  4072a4:	9a02      	ldr	r2, [sp, #8]
  4072a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4072aa:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4072ae:	fab2 f282 	clz	r2, r2
  4072b2:	0952      	lsrs	r2, r2, #5
  4072b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4072b8:	f44f 6000 	mov.w	r0, #2048	; 0x800
  4072bc:	6032      	str	r2, [r6, #0]
  4072be:	602b      	str	r3, [r5, #0]
  4072c0:	b010      	add	sp, #64	; 0x40
  4072c2:	bd70      	pop	{r4, r5, r6, pc}
  4072c4:	89a2      	ldrh	r2, [r4, #12]
  4072c6:	2300      	movs	r3, #0
  4072c8:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  4072cc:	6033      	str	r3, [r6, #0]
  4072ce:	d004      	beq.n	4072da <__swhatbuf_r+0x52>
  4072d0:	2240      	movs	r2, #64	; 0x40
  4072d2:	4618      	mov	r0, r3
  4072d4:	602a      	str	r2, [r5, #0]
  4072d6:	b010      	add	sp, #64	; 0x40
  4072d8:	bd70      	pop	{r4, r5, r6, pc}
  4072da:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4072de:	602b      	str	r3, [r5, #0]
  4072e0:	b010      	add	sp, #64	; 0x40
  4072e2:	bd70      	pop	{r4, r5, r6, pc}

004072e4 <__smakebuf_r>:
  4072e4:	898a      	ldrh	r2, [r1, #12]
  4072e6:	0792      	lsls	r2, r2, #30
  4072e8:	460b      	mov	r3, r1
  4072ea:	d506      	bpl.n	4072fa <__smakebuf_r+0x16>
  4072ec:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4072f0:	2101      	movs	r1, #1
  4072f2:	601a      	str	r2, [r3, #0]
  4072f4:	611a      	str	r2, [r3, #16]
  4072f6:	6159      	str	r1, [r3, #20]
  4072f8:	4770      	bx	lr
  4072fa:	b5f0      	push	{r4, r5, r6, r7, lr}
  4072fc:	b083      	sub	sp, #12
  4072fe:	ab01      	add	r3, sp, #4
  407300:	466a      	mov	r2, sp
  407302:	460c      	mov	r4, r1
  407304:	4606      	mov	r6, r0
  407306:	f7ff ffbf 	bl	407288 <__swhatbuf_r>
  40730a:	9900      	ldr	r1, [sp, #0]
  40730c:	4605      	mov	r5, r0
  40730e:	4630      	mov	r0, r6
  407310:	f7fb fcbe 	bl	402c90 <_malloc_r>
  407314:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407318:	b1d8      	cbz	r0, 407352 <__smakebuf_r+0x6e>
  40731a:	9a01      	ldr	r2, [sp, #4]
  40731c:	4f15      	ldr	r7, [pc, #84]	; (407374 <__smakebuf_r+0x90>)
  40731e:	9900      	ldr	r1, [sp, #0]
  407320:	63f7      	str	r7, [r6, #60]	; 0x3c
  407322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  407326:	81a3      	strh	r3, [r4, #12]
  407328:	6020      	str	r0, [r4, #0]
  40732a:	6120      	str	r0, [r4, #16]
  40732c:	6161      	str	r1, [r4, #20]
  40732e:	b91a      	cbnz	r2, 407338 <__smakebuf_r+0x54>
  407330:	432b      	orrs	r3, r5
  407332:	81a3      	strh	r3, [r4, #12]
  407334:	b003      	add	sp, #12
  407336:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407338:	4630      	mov	r0, r6
  40733a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40733e:	f001 f8a7 	bl	408490 <_isatty_r>
  407342:	b1a0      	cbz	r0, 40736e <__smakebuf_r+0x8a>
  407344:	89a3      	ldrh	r3, [r4, #12]
  407346:	f023 0303 	bic.w	r3, r3, #3
  40734a:	f043 0301 	orr.w	r3, r3, #1
  40734e:	b21b      	sxth	r3, r3
  407350:	e7ee      	b.n	407330 <__smakebuf_r+0x4c>
  407352:	059a      	lsls	r2, r3, #22
  407354:	d4ee      	bmi.n	407334 <__smakebuf_r+0x50>
  407356:	f023 0303 	bic.w	r3, r3, #3
  40735a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40735e:	f043 0302 	orr.w	r3, r3, #2
  407362:	2101      	movs	r1, #1
  407364:	81a3      	strh	r3, [r4, #12]
  407366:	6022      	str	r2, [r4, #0]
  407368:	6122      	str	r2, [r4, #16]
  40736a:	6161      	str	r1, [r4, #20]
  40736c:	e7e2      	b.n	407334 <__smakebuf_r+0x50>
  40736e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407372:	e7dd      	b.n	407330 <__smakebuf_r+0x4c>
  407374:	00406a89 	.word	0x00406a89

00407378 <__ascii_mbtowc>:
  407378:	b082      	sub	sp, #8
  40737a:	b149      	cbz	r1, 407390 <__ascii_mbtowc+0x18>
  40737c:	b15a      	cbz	r2, 407396 <__ascii_mbtowc+0x1e>
  40737e:	b16b      	cbz	r3, 40739c <__ascii_mbtowc+0x24>
  407380:	7813      	ldrb	r3, [r2, #0]
  407382:	600b      	str	r3, [r1, #0]
  407384:	7812      	ldrb	r2, [r2, #0]
  407386:	1c10      	adds	r0, r2, #0
  407388:	bf18      	it	ne
  40738a:	2001      	movne	r0, #1
  40738c:	b002      	add	sp, #8
  40738e:	4770      	bx	lr
  407390:	a901      	add	r1, sp, #4
  407392:	2a00      	cmp	r2, #0
  407394:	d1f3      	bne.n	40737e <__ascii_mbtowc+0x6>
  407396:	4610      	mov	r0, r2
  407398:	b002      	add	sp, #8
  40739a:	4770      	bx	lr
  40739c:	f06f 0001 	mvn.w	r0, #1
  4073a0:	e7f4      	b.n	40738c <__ascii_mbtowc+0x14>
  4073a2:	bf00      	nop
	...

004073b0 <memchr>:
  4073b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4073b4:	2a10      	cmp	r2, #16
  4073b6:	db2b      	blt.n	407410 <memchr+0x60>
  4073b8:	f010 0f07 	tst.w	r0, #7
  4073bc:	d008      	beq.n	4073d0 <memchr+0x20>
  4073be:	f810 3b01 	ldrb.w	r3, [r0], #1
  4073c2:	3a01      	subs	r2, #1
  4073c4:	428b      	cmp	r3, r1
  4073c6:	d02d      	beq.n	407424 <memchr+0x74>
  4073c8:	f010 0f07 	tst.w	r0, #7
  4073cc:	b342      	cbz	r2, 407420 <memchr+0x70>
  4073ce:	d1f6      	bne.n	4073be <memchr+0xe>
  4073d0:	b4f0      	push	{r4, r5, r6, r7}
  4073d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4073d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4073da:	f022 0407 	bic.w	r4, r2, #7
  4073de:	f07f 0700 	mvns.w	r7, #0
  4073e2:	2300      	movs	r3, #0
  4073e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4073e8:	3c08      	subs	r4, #8
  4073ea:	ea85 0501 	eor.w	r5, r5, r1
  4073ee:	ea86 0601 	eor.w	r6, r6, r1
  4073f2:	fa85 f547 	uadd8	r5, r5, r7
  4073f6:	faa3 f587 	sel	r5, r3, r7
  4073fa:	fa86 f647 	uadd8	r6, r6, r7
  4073fe:	faa5 f687 	sel	r6, r5, r7
  407402:	b98e      	cbnz	r6, 407428 <memchr+0x78>
  407404:	d1ee      	bne.n	4073e4 <memchr+0x34>
  407406:	bcf0      	pop	{r4, r5, r6, r7}
  407408:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40740c:	f002 0207 	and.w	r2, r2, #7
  407410:	b132      	cbz	r2, 407420 <memchr+0x70>
  407412:	f810 3b01 	ldrb.w	r3, [r0], #1
  407416:	3a01      	subs	r2, #1
  407418:	ea83 0301 	eor.w	r3, r3, r1
  40741c:	b113      	cbz	r3, 407424 <memchr+0x74>
  40741e:	d1f8      	bne.n	407412 <memchr+0x62>
  407420:	2000      	movs	r0, #0
  407422:	4770      	bx	lr
  407424:	3801      	subs	r0, #1
  407426:	4770      	bx	lr
  407428:	2d00      	cmp	r5, #0
  40742a:	bf06      	itte	eq
  40742c:	4635      	moveq	r5, r6
  40742e:	3803      	subeq	r0, #3
  407430:	3807      	subne	r0, #7
  407432:	f015 0f01 	tst.w	r5, #1
  407436:	d107      	bne.n	407448 <memchr+0x98>
  407438:	3001      	adds	r0, #1
  40743a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40743e:	bf02      	ittt	eq
  407440:	3001      	addeq	r0, #1
  407442:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  407446:	3001      	addeq	r0, #1
  407448:	bcf0      	pop	{r4, r5, r6, r7}
  40744a:	3801      	subs	r0, #1
  40744c:	4770      	bx	lr
  40744e:	bf00      	nop

00407450 <memcpy>:
  407450:	4684      	mov	ip, r0
  407452:	ea41 0300 	orr.w	r3, r1, r0
  407456:	f013 0303 	ands.w	r3, r3, #3
  40745a:	d16d      	bne.n	407538 <memcpy+0xe8>
  40745c:	3a40      	subs	r2, #64	; 0x40
  40745e:	d341      	bcc.n	4074e4 <memcpy+0x94>
  407460:	f851 3b04 	ldr.w	r3, [r1], #4
  407464:	f840 3b04 	str.w	r3, [r0], #4
  407468:	f851 3b04 	ldr.w	r3, [r1], #4
  40746c:	f840 3b04 	str.w	r3, [r0], #4
  407470:	f851 3b04 	ldr.w	r3, [r1], #4
  407474:	f840 3b04 	str.w	r3, [r0], #4
  407478:	f851 3b04 	ldr.w	r3, [r1], #4
  40747c:	f840 3b04 	str.w	r3, [r0], #4
  407480:	f851 3b04 	ldr.w	r3, [r1], #4
  407484:	f840 3b04 	str.w	r3, [r0], #4
  407488:	f851 3b04 	ldr.w	r3, [r1], #4
  40748c:	f840 3b04 	str.w	r3, [r0], #4
  407490:	f851 3b04 	ldr.w	r3, [r1], #4
  407494:	f840 3b04 	str.w	r3, [r0], #4
  407498:	f851 3b04 	ldr.w	r3, [r1], #4
  40749c:	f840 3b04 	str.w	r3, [r0], #4
  4074a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4074a4:	f840 3b04 	str.w	r3, [r0], #4
  4074a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4074ac:	f840 3b04 	str.w	r3, [r0], #4
  4074b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4074b4:	f840 3b04 	str.w	r3, [r0], #4
  4074b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4074bc:	f840 3b04 	str.w	r3, [r0], #4
  4074c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4074c4:	f840 3b04 	str.w	r3, [r0], #4
  4074c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4074cc:	f840 3b04 	str.w	r3, [r0], #4
  4074d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4074d4:	f840 3b04 	str.w	r3, [r0], #4
  4074d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4074dc:	f840 3b04 	str.w	r3, [r0], #4
  4074e0:	3a40      	subs	r2, #64	; 0x40
  4074e2:	d2bd      	bcs.n	407460 <memcpy+0x10>
  4074e4:	3230      	adds	r2, #48	; 0x30
  4074e6:	d311      	bcc.n	40750c <memcpy+0xbc>
  4074e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4074ec:	f840 3b04 	str.w	r3, [r0], #4
  4074f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4074f4:	f840 3b04 	str.w	r3, [r0], #4
  4074f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4074fc:	f840 3b04 	str.w	r3, [r0], #4
  407500:	f851 3b04 	ldr.w	r3, [r1], #4
  407504:	f840 3b04 	str.w	r3, [r0], #4
  407508:	3a10      	subs	r2, #16
  40750a:	d2ed      	bcs.n	4074e8 <memcpy+0x98>
  40750c:	320c      	adds	r2, #12
  40750e:	d305      	bcc.n	40751c <memcpy+0xcc>
  407510:	f851 3b04 	ldr.w	r3, [r1], #4
  407514:	f840 3b04 	str.w	r3, [r0], #4
  407518:	3a04      	subs	r2, #4
  40751a:	d2f9      	bcs.n	407510 <memcpy+0xc0>
  40751c:	3204      	adds	r2, #4
  40751e:	d008      	beq.n	407532 <memcpy+0xe2>
  407520:	07d2      	lsls	r2, r2, #31
  407522:	bf1c      	itt	ne
  407524:	f811 3b01 	ldrbne.w	r3, [r1], #1
  407528:	f800 3b01 	strbne.w	r3, [r0], #1
  40752c:	d301      	bcc.n	407532 <memcpy+0xe2>
  40752e:	880b      	ldrh	r3, [r1, #0]
  407530:	8003      	strh	r3, [r0, #0]
  407532:	4660      	mov	r0, ip
  407534:	4770      	bx	lr
  407536:	bf00      	nop
  407538:	2a08      	cmp	r2, #8
  40753a:	d313      	bcc.n	407564 <memcpy+0x114>
  40753c:	078b      	lsls	r3, r1, #30
  40753e:	d08d      	beq.n	40745c <memcpy+0xc>
  407540:	f010 0303 	ands.w	r3, r0, #3
  407544:	d08a      	beq.n	40745c <memcpy+0xc>
  407546:	f1c3 0304 	rsb	r3, r3, #4
  40754a:	1ad2      	subs	r2, r2, r3
  40754c:	07db      	lsls	r3, r3, #31
  40754e:	bf1c      	itt	ne
  407550:	f811 3b01 	ldrbne.w	r3, [r1], #1
  407554:	f800 3b01 	strbne.w	r3, [r0], #1
  407558:	d380      	bcc.n	40745c <memcpy+0xc>
  40755a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40755e:	f820 3b02 	strh.w	r3, [r0], #2
  407562:	e77b      	b.n	40745c <memcpy+0xc>
  407564:	3a04      	subs	r2, #4
  407566:	d3d9      	bcc.n	40751c <memcpy+0xcc>
  407568:	3a01      	subs	r2, #1
  40756a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40756e:	f800 3b01 	strb.w	r3, [r0], #1
  407572:	d2f9      	bcs.n	407568 <memcpy+0x118>
  407574:	780b      	ldrb	r3, [r1, #0]
  407576:	7003      	strb	r3, [r0, #0]
  407578:	784b      	ldrb	r3, [r1, #1]
  40757a:	7043      	strb	r3, [r0, #1]
  40757c:	788b      	ldrb	r3, [r1, #2]
  40757e:	7083      	strb	r3, [r0, #2]
  407580:	4660      	mov	r0, ip
  407582:	4770      	bx	lr

00407584 <memmove>:
  407584:	4288      	cmp	r0, r1
  407586:	b5f0      	push	{r4, r5, r6, r7, lr}
  407588:	d90d      	bls.n	4075a6 <memmove+0x22>
  40758a:	188b      	adds	r3, r1, r2
  40758c:	4298      	cmp	r0, r3
  40758e:	d20a      	bcs.n	4075a6 <memmove+0x22>
  407590:	1884      	adds	r4, r0, r2
  407592:	2a00      	cmp	r2, #0
  407594:	d051      	beq.n	40763a <memmove+0xb6>
  407596:	4622      	mov	r2, r4
  407598:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40759c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4075a0:	4299      	cmp	r1, r3
  4075a2:	d1f9      	bne.n	407598 <memmove+0x14>
  4075a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4075a6:	2a0f      	cmp	r2, #15
  4075a8:	d948      	bls.n	40763c <memmove+0xb8>
  4075aa:	ea41 0300 	orr.w	r3, r1, r0
  4075ae:	079b      	lsls	r3, r3, #30
  4075b0:	d146      	bne.n	407640 <memmove+0xbc>
  4075b2:	f100 0410 	add.w	r4, r0, #16
  4075b6:	f101 0310 	add.w	r3, r1, #16
  4075ba:	4615      	mov	r5, r2
  4075bc:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4075c0:	f844 6c10 	str.w	r6, [r4, #-16]
  4075c4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4075c8:	f844 6c0c 	str.w	r6, [r4, #-12]
  4075cc:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4075d0:	f844 6c08 	str.w	r6, [r4, #-8]
  4075d4:	3d10      	subs	r5, #16
  4075d6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4075da:	f844 6c04 	str.w	r6, [r4, #-4]
  4075de:	2d0f      	cmp	r5, #15
  4075e0:	f103 0310 	add.w	r3, r3, #16
  4075e4:	f104 0410 	add.w	r4, r4, #16
  4075e8:	d8e8      	bhi.n	4075bc <memmove+0x38>
  4075ea:	f1a2 0310 	sub.w	r3, r2, #16
  4075ee:	f023 030f 	bic.w	r3, r3, #15
  4075f2:	f002 0e0f 	and.w	lr, r2, #15
  4075f6:	3310      	adds	r3, #16
  4075f8:	f1be 0f03 	cmp.w	lr, #3
  4075fc:	4419      	add	r1, r3
  4075fe:	4403      	add	r3, r0
  407600:	d921      	bls.n	407646 <memmove+0xc2>
  407602:	1f1e      	subs	r6, r3, #4
  407604:	460d      	mov	r5, r1
  407606:	4674      	mov	r4, lr
  407608:	3c04      	subs	r4, #4
  40760a:	f855 7b04 	ldr.w	r7, [r5], #4
  40760e:	f846 7f04 	str.w	r7, [r6, #4]!
  407612:	2c03      	cmp	r4, #3
  407614:	d8f8      	bhi.n	407608 <memmove+0x84>
  407616:	f1ae 0404 	sub.w	r4, lr, #4
  40761a:	f024 0403 	bic.w	r4, r4, #3
  40761e:	3404      	adds	r4, #4
  407620:	4421      	add	r1, r4
  407622:	4423      	add	r3, r4
  407624:	f002 0203 	and.w	r2, r2, #3
  407628:	b162      	cbz	r2, 407644 <memmove+0xc0>
  40762a:	3b01      	subs	r3, #1
  40762c:	440a      	add	r2, r1
  40762e:	f811 4b01 	ldrb.w	r4, [r1], #1
  407632:	f803 4f01 	strb.w	r4, [r3, #1]!
  407636:	428a      	cmp	r2, r1
  407638:	d1f9      	bne.n	40762e <memmove+0xaa>
  40763a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40763c:	4603      	mov	r3, r0
  40763e:	e7f3      	b.n	407628 <memmove+0xa4>
  407640:	4603      	mov	r3, r0
  407642:	e7f2      	b.n	40762a <memmove+0xa6>
  407644:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407646:	4672      	mov	r2, lr
  407648:	e7ee      	b.n	407628 <memmove+0xa4>
  40764a:	bf00      	nop

0040764c <_Balloc>:
  40764c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40764e:	b570      	push	{r4, r5, r6, lr}
  407650:	4605      	mov	r5, r0
  407652:	460c      	mov	r4, r1
  407654:	b14b      	cbz	r3, 40766a <_Balloc+0x1e>
  407656:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  40765a:	b180      	cbz	r0, 40767e <_Balloc+0x32>
  40765c:	6802      	ldr	r2, [r0, #0]
  40765e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  407662:	2300      	movs	r3, #0
  407664:	6103      	str	r3, [r0, #16]
  407666:	60c3      	str	r3, [r0, #12]
  407668:	bd70      	pop	{r4, r5, r6, pc}
  40766a:	2221      	movs	r2, #33	; 0x21
  40766c:	2104      	movs	r1, #4
  40766e:	f000 fe57 	bl	408320 <_calloc_r>
  407672:	64e8      	str	r0, [r5, #76]	; 0x4c
  407674:	4603      	mov	r3, r0
  407676:	2800      	cmp	r0, #0
  407678:	d1ed      	bne.n	407656 <_Balloc+0xa>
  40767a:	2000      	movs	r0, #0
  40767c:	bd70      	pop	{r4, r5, r6, pc}
  40767e:	2101      	movs	r1, #1
  407680:	fa01 f604 	lsl.w	r6, r1, r4
  407684:	1d72      	adds	r2, r6, #5
  407686:	4628      	mov	r0, r5
  407688:	0092      	lsls	r2, r2, #2
  40768a:	f000 fe49 	bl	408320 <_calloc_r>
  40768e:	2800      	cmp	r0, #0
  407690:	d0f3      	beq.n	40767a <_Balloc+0x2e>
  407692:	6044      	str	r4, [r0, #4]
  407694:	6086      	str	r6, [r0, #8]
  407696:	e7e4      	b.n	407662 <_Balloc+0x16>

00407698 <_Bfree>:
  407698:	b131      	cbz	r1, 4076a8 <_Bfree+0x10>
  40769a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40769c:	684a      	ldr	r2, [r1, #4]
  40769e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  4076a2:	6008      	str	r0, [r1, #0]
  4076a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4076a8:	4770      	bx	lr
  4076aa:	bf00      	nop

004076ac <__multadd>:
  4076ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  4076ae:	690c      	ldr	r4, [r1, #16]
  4076b0:	b083      	sub	sp, #12
  4076b2:	460d      	mov	r5, r1
  4076b4:	4606      	mov	r6, r0
  4076b6:	f101 0e14 	add.w	lr, r1, #20
  4076ba:	2700      	movs	r7, #0
  4076bc:	f8de 0000 	ldr.w	r0, [lr]
  4076c0:	b281      	uxth	r1, r0
  4076c2:	fb02 3301 	mla	r3, r2, r1, r3
  4076c6:	0c01      	lsrs	r1, r0, #16
  4076c8:	0c18      	lsrs	r0, r3, #16
  4076ca:	fb02 0101 	mla	r1, r2, r1, r0
  4076ce:	b29b      	uxth	r3, r3
  4076d0:	3701      	adds	r7, #1
  4076d2:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  4076d6:	42bc      	cmp	r4, r7
  4076d8:	f84e 3b04 	str.w	r3, [lr], #4
  4076dc:	ea4f 4311 	mov.w	r3, r1, lsr #16
  4076e0:	dcec      	bgt.n	4076bc <__multadd+0x10>
  4076e2:	b13b      	cbz	r3, 4076f4 <__multadd+0x48>
  4076e4:	68aa      	ldr	r2, [r5, #8]
  4076e6:	4294      	cmp	r4, r2
  4076e8:	da07      	bge.n	4076fa <__multadd+0x4e>
  4076ea:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  4076ee:	3401      	adds	r4, #1
  4076f0:	6153      	str	r3, [r2, #20]
  4076f2:	612c      	str	r4, [r5, #16]
  4076f4:	4628      	mov	r0, r5
  4076f6:	b003      	add	sp, #12
  4076f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4076fa:	6869      	ldr	r1, [r5, #4]
  4076fc:	9301      	str	r3, [sp, #4]
  4076fe:	3101      	adds	r1, #1
  407700:	4630      	mov	r0, r6
  407702:	f7ff ffa3 	bl	40764c <_Balloc>
  407706:	692a      	ldr	r2, [r5, #16]
  407708:	3202      	adds	r2, #2
  40770a:	f105 010c 	add.w	r1, r5, #12
  40770e:	4607      	mov	r7, r0
  407710:	0092      	lsls	r2, r2, #2
  407712:	300c      	adds	r0, #12
  407714:	f7ff fe9c 	bl	407450 <memcpy>
  407718:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  40771a:	6869      	ldr	r1, [r5, #4]
  40771c:	9b01      	ldr	r3, [sp, #4]
  40771e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  407722:	6028      	str	r0, [r5, #0]
  407724:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  407728:	463d      	mov	r5, r7
  40772a:	e7de      	b.n	4076ea <__multadd+0x3e>

0040772c <__hi0bits>:
  40772c:	0c02      	lsrs	r2, r0, #16
  40772e:	0412      	lsls	r2, r2, #16
  407730:	4603      	mov	r3, r0
  407732:	b9b2      	cbnz	r2, 407762 <__hi0bits+0x36>
  407734:	0403      	lsls	r3, r0, #16
  407736:	2010      	movs	r0, #16
  407738:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  40773c:	bf04      	itt	eq
  40773e:	021b      	lsleq	r3, r3, #8
  407740:	3008      	addeq	r0, #8
  407742:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  407746:	bf04      	itt	eq
  407748:	011b      	lsleq	r3, r3, #4
  40774a:	3004      	addeq	r0, #4
  40774c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  407750:	bf04      	itt	eq
  407752:	009b      	lsleq	r3, r3, #2
  407754:	3002      	addeq	r0, #2
  407756:	2b00      	cmp	r3, #0
  407758:	db02      	blt.n	407760 <__hi0bits+0x34>
  40775a:	005b      	lsls	r3, r3, #1
  40775c:	d403      	bmi.n	407766 <__hi0bits+0x3a>
  40775e:	2020      	movs	r0, #32
  407760:	4770      	bx	lr
  407762:	2000      	movs	r0, #0
  407764:	e7e8      	b.n	407738 <__hi0bits+0xc>
  407766:	3001      	adds	r0, #1
  407768:	4770      	bx	lr
  40776a:	bf00      	nop

0040776c <__lo0bits>:
  40776c:	6803      	ldr	r3, [r0, #0]
  40776e:	f013 0207 	ands.w	r2, r3, #7
  407772:	4601      	mov	r1, r0
  407774:	d007      	beq.n	407786 <__lo0bits+0x1a>
  407776:	07da      	lsls	r2, r3, #31
  407778:	d421      	bmi.n	4077be <__lo0bits+0x52>
  40777a:	0798      	lsls	r0, r3, #30
  40777c:	d421      	bmi.n	4077c2 <__lo0bits+0x56>
  40777e:	089b      	lsrs	r3, r3, #2
  407780:	600b      	str	r3, [r1, #0]
  407782:	2002      	movs	r0, #2
  407784:	4770      	bx	lr
  407786:	b298      	uxth	r0, r3
  407788:	b198      	cbz	r0, 4077b2 <__lo0bits+0x46>
  40778a:	4610      	mov	r0, r2
  40778c:	f013 0fff 	tst.w	r3, #255	; 0xff
  407790:	bf04      	itt	eq
  407792:	0a1b      	lsreq	r3, r3, #8
  407794:	3008      	addeq	r0, #8
  407796:	071a      	lsls	r2, r3, #28
  407798:	bf04      	itt	eq
  40779a:	091b      	lsreq	r3, r3, #4
  40779c:	3004      	addeq	r0, #4
  40779e:	079a      	lsls	r2, r3, #30
  4077a0:	bf04      	itt	eq
  4077a2:	089b      	lsreq	r3, r3, #2
  4077a4:	3002      	addeq	r0, #2
  4077a6:	07da      	lsls	r2, r3, #31
  4077a8:	d407      	bmi.n	4077ba <__lo0bits+0x4e>
  4077aa:	085b      	lsrs	r3, r3, #1
  4077ac:	d104      	bne.n	4077b8 <__lo0bits+0x4c>
  4077ae:	2020      	movs	r0, #32
  4077b0:	4770      	bx	lr
  4077b2:	0c1b      	lsrs	r3, r3, #16
  4077b4:	2010      	movs	r0, #16
  4077b6:	e7e9      	b.n	40778c <__lo0bits+0x20>
  4077b8:	3001      	adds	r0, #1
  4077ba:	600b      	str	r3, [r1, #0]
  4077bc:	4770      	bx	lr
  4077be:	2000      	movs	r0, #0
  4077c0:	4770      	bx	lr
  4077c2:	085b      	lsrs	r3, r3, #1
  4077c4:	600b      	str	r3, [r1, #0]
  4077c6:	2001      	movs	r0, #1
  4077c8:	4770      	bx	lr
  4077ca:	bf00      	nop

004077cc <__i2b>:
  4077cc:	b510      	push	{r4, lr}
  4077ce:	460c      	mov	r4, r1
  4077d0:	2101      	movs	r1, #1
  4077d2:	f7ff ff3b 	bl	40764c <_Balloc>
  4077d6:	2201      	movs	r2, #1
  4077d8:	6144      	str	r4, [r0, #20]
  4077da:	6102      	str	r2, [r0, #16]
  4077dc:	bd10      	pop	{r4, pc}
  4077de:	bf00      	nop

004077e0 <__multiply>:
  4077e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4077e4:	690c      	ldr	r4, [r1, #16]
  4077e6:	6915      	ldr	r5, [r2, #16]
  4077e8:	42ac      	cmp	r4, r5
  4077ea:	b083      	sub	sp, #12
  4077ec:	468b      	mov	fp, r1
  4077ee:	4616      	mov	r6, r2
  4077f0:	da04      	bge.n	4077fc <__multiply+0x1c>
  4077f2:	4622      	mov	r2, r4
  4077f4:	46b3      	mov	fp, r6
  4077f6:	462c      	mov	r4, r5
  4077f8:	460e      	mov	r6, r1
  4077fa:	4615      	mov	r5, r2
  4077fc:	f8db 3008 	ldr.w	r3, [fp, #8]
  407800:	f8db 1004 	ldr.w	r1, [fp, #4]
  407804:	eb04 0805 	add.w	r8, r4, r5
  407808:	4598      	cmp	r8, r3
  40780a:	bfc8      	it	gt
  40780c:	3101      	addgt	r1, #1
  40780e:	f7ff ff1d 	bl	40764c <_Balloc>
  407812:	f100 0914 	add.w	r9, r0, #20
  407816:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  40781a:	45d1      	cmp	r9, sl
  40781c:	9000      	str	r0, [sp, #0]
  40781e:	d205      	bcs.n	40782c <__multiply+0x4c>
  407820:	464b      	mov	r3, r9
  407822:	2100      	movs	r1, #0
  407824:	f843 1b04 	str.w	r1, [r3], #4
  407828:	459a      	cmp	sl, r3
  40782a:	d8fb      	bhi.n	407824 <__multiply+0x44>
  40782c:	f106 0c14 	add.w	ip, r6, #20
  407830:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  407834:	f10b 0b14 	add.w	fp, fp, #20
  407838:	459c      	cmp	ip, r3
  40783a:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40783e:	d24c      	bcs.n	4078da <__multiply+0xfa>
  407840:	f8cd a004 	str.w	sl, [sp, #4]
  407844:	469a      	mov	sl, r3
  407846:	f8dc 5000 	ldr.w	r5, [ip]
  40784a:	b2af      	uxth	r7, r5
  40784c:	b1ef      	cbz	r7, 40788a <__multiply+0xaa>
  40784e:	2100      	movs	r1, #0
  407850:	464d      	mov	r5, r9
  407852:	465e      	mov	r6, fp
  407854:	460c      	mov	r4, r1
  407856:	f856 2b04 	ldr.w	r2, [r6], #4
  40785a:	6828      	ldr	r0, [r5, #0]
  40785c:	b293      	uxth	r3, r2
  40785e:	b281      	uxth	r1, r0
  407860:	fb07 1303 	mla	r3, r7, r3, r1
  407864:	0c12      	lsrs	r2, r2, #16
  407866:	0c01      	lsrs	r1, r0, #16
  407868:	4423      	add	r3, r4
  40786a:	fb07 1102 	mla	r1, r7, r2, r1
  40786e:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  407872:	b29b      	uxth	r3, r3
  407874:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  407878:	45b6      	cmp	lr, r6
  40787a:	f845 3b04 	str.w	r3, [r5], #4
  40787e:	ea4f 4411 	mov.w	r4, r1, lsr #16
  407882:	d8e8      	bhi.n	407856 <__multiply+0x76>
  407884:	602c      	str	r4, [r5, #0]
  407886:	f8dc 5000 	ldr.w	r5, [ip]
  40788a:	0c2d      	lsrs	r5, r5, #16
  40788c:	d01d      	beq.n	4078ca <__multiply+0xea>
  40788e:	f8d9 3000 	ldr.w	r3, [r9]
  407892:	4648      	mov	r0, r9
  407894:	461c      	mov	r4, r3
  407896:	4659      	mov	r1, fp
  407898:	2200      	movs	r2, #0
  40789a:	880e      	ldrh	r6, [r1, #0]
  40789c:	0c24      	lsrs	r4, r4, #16
  40789e:	fb05 4406 	mla	r4, r5, r6, r4
  4078a2:	4422      	add	r2, r4
  4078a4:	b29b      	uxth	r3, r3
  4078a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4078aa:	f840 3b04 	str.w	r3, [r0], #4
  4078ae:	f851 3b04 	ldr.w	r3, [r1], #4
  4078b2:	6804      	ldr	r4, [r0, #0]
  4078b4:	0c1b      	lsrs	r3, r3, #16
  4078b6:	b2a6      	uxth	r6, r4
  4078b8:	fb05 6303 	mla	r3, r5, r3, r6
  4078bc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  4078c0:	458e      	cmp	lr, r1
  4078c2:	ea4f 4213 	mov.w	r2, r3, lsr #16
  4078c6:	d8e8      	bhi.n	40789a <__multiply+0xba>
  4078c8:	6003      	str	r3, [r0, #0]
  4078ca:	f10c 0c04 	add.w	ip, ip, #4
  4078ce:	45e2      	cmp	sl, ip
  4078d0:	f109 0904 	add.w	r9, r9, #4
  4078d4:	d8b7      	bhi.n	407846 <__multiply+0x66>
  4078d6:	f8dd a004 	ldr.w	sl, [sp, #4]
  4078da:	f1b8 0f00 	cmp.w	r8, #0
  4078de:	dd0b      	ble.n	4078f8 <__multiply+0x118>
  4078e0:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  4078e4:	f1aa 0a04 	sub.w	sl, sl, #4
  4078e8:	b11b      	cbz	r3, 4078f2 <__multiply+0x112>
  4078ea:	e005      	b.n	4078f8 <__multiply+0x118>
  4078ec:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  4078f0:	b913      	cbnz	r3, 4078f8 <__multiply+0x118>
  4078f2:	f1b8 0801 	subs.w	r8, r8, #1
  4078f6:	d1f9      	bne.n	4078ec <__multiply+0x10c>
  4078f8:	9800      	ldr	r0, [sp, #0]
  4078fa:	f8c0 8010 	str.w	r8, [r0, #16]
  4078fe:	b003      	add	sp, #12
  407900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00407904 <__pow5mult>:
  407904:	f012 0303 	ands.w	r3, r2, #3
  407908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40790c:	4614      	mov	r4, r2
  40790e:	4607      	mov	r7, r0
  407910:	d12e      	bne.n	407970 <__pow5mult+0x6c>
  407912:	460d      	mov	r5, r1
  407914:	10a4      	asrs	r4, r4, #2
  407916:	d01c      	beq.n	407952 <__pow5mult+0x4e>
  407918:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  40791a:	b396      	cbz	r6, 407982 <__pow5mult+0x7e>
  40791c:	07e3      	lsls	r3, r4, #31
  40791e:	f04f 0800 	mov.w	r8, #0
  407922:	d406      	bmi.n	407932 <__pow5mult+0x2e>
  407924:	1064      	asrs	r4, r4, #1
  407926:	d014      	beq.n	407952 <__pow5mult+0x4e>
  407928:	6830      	ldr	r0, [r6, #0]
  40792a:	b1a8      	cbz	r0, 407958 <__pow5mult+0x54>
  40792c:	4606      	mov	r6, r0
  40792e:	07e3      	lsls	r3, r4, #31
  407930:	d5f8      	bpl.n	407924 <__pow5mult+0x20>
  407932:	4632      	mov	r2, r6
  407934:	4629      	mov	r1, r5
  407936:	4638      	mov	r0, r7
  407938:	f7ff ff52 	bl	4077e0 <__multiply>
  40793c:	b1b5      	cbz	r5, 40796c <__pow5mult+0x68>
  40793e:	686a      	ldr	r2, [r5, #4]
  407940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  407942:	1064      	asrs	r4, r4, #1
  407944:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  407948:	6029      	str	r1, [r5, #0]
  40794a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40794e:	4605      	mov	r5, r0
  407950:	d1ea      	bne.n	407928 <__pow5mult+0x24>
  407952:	4628      	mov	r0, r5
  407954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407958:	4632      	mov	r2, r6
  40795a:	4631      	mov	r1, r6
  40795c:	4638      	mov	r0, r7
  40795e:	f7ff ff3f 	bl	4077e0 <__multiply>
  407962:	6030      	str	r0, [r6, #0]
  407964:	f8c0 8000 	str.w	r8, [r0]
  407968:	4606      	mov	r6, r0
  40796a:	e7e0      	b.n	40792e <__pow5mult+0x2a>
  40796c:	4605      	mov	r5, r0
  40796e:	e7d9      	b.n	407924 <__pow5mult+0x20>
  407970:	1e5a      	subs	r2, r3, #1
  407972:	4d0b      	ldr	r5, [pc, #44]	; (4079a0 <__pow5mult+0x9c>)
  407974:	2300      	movs	r3, #0
  407976:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40797a:	f7ff fe97 	bl	4076ac <__multadd>
  40797e:	4605      	mov	r5, r0
  407980:	e7c8      	b.n	407914 <__pow5mult+0x10>
  407982:	2101      	movs	r1, #1
  407984:	4638      	mov	r0, r7
  407986:	f7ff fe61 	bl	40764c <_Balloc>
  40798a:	f240 2171 	movw	r1, #625	; 0x271
  40798e:	2201      	movs	r2, #1
  407990:	2300      	movs	r3, #0
  407992:	6141      	str	r1, [r0, #20]
  407994:	6102      	str	r2, [r0, #16]
  407996:	4606      	mov	r6, r0
  407998:	64b8      	str	r0, [r7, #72]	; 0x48
  40799a:	6003      	str	r3, [r0, #0]
  40799c:	e7be      	b.n	40791c <__pow5mult+0x18>
  40799e:	bf00      	nop
  4079a0:	00409b40 	.word	0x00409b40

004079a4 <__lshift>:
  4079a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4079a8:	4691      	mov	r9, r2
  4079aa:	690a      	ldr	r2, [r1, #16]
  4079ac:	688b      	ldr	r3, [r1, #8]
  4079ae:	ea4f 1469 	mov.w	r4, r9, asr #5
  4079b2:	eb04 0802 	add.w	r8, r4, r2
  4079b6:	f108 0501 	add.w	r5, r8, #1
  4079ba:	429d      	cmp	r5, r3
  4079bc:	460e      	mov	r6, r1
  4079be:	4607      	mov	r7, r0
  4079c0:	6849      	ldr	r1, [r1, #4]
  4079c2:	dd04      	ble.n	4079ce <__lshift+0x2a>
  4079c4:	005b      	lsls	r3, r3, #1
  4079c6:	429d      	cmp	r5, r3
  4079c8:	f101 0101 	add.w	r1, r1, #1
  4079cc:	dcfa      	bgt.n	4079c4 <__lshift+0x20>
  4079ce:	4638      	mov	r0, r7
  4079d0:	f7ff fe3c 	bl	40764c <_Balloc>
  4079d4:	2c00      	cmp	r4, #0
  4079d6:	f100 0314 	add.w	r3, r0, #20
  4079da:	dd06      	ble.n	4079ea <__lshift+0x46>
  4079dc:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  4079e0:	2100      	movs	r1, #0
  4079e2:	f843 1b04 	str.w	r1, [r3], #4
  4079e6:	429a      	cmp	r2, r3
  4079e8:	d1fb      	bne.n	4079e2 <__lshift+0x3e>
  4079ea:	6934      	ldr	r4, [r6, #16]
  4079ec:	f106 0114 	add.w	r1, r6, #20
  4079f0:	f019 091f 	ands.w	r9, r9, #31
  4079f4:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  4079f8:	d01d      	beq.n	407a36 <__lshift+0x92>
  4079fa:	f1c9 0c20 	rsb	ip, r9, #32
  4079fe:	2200      	movs	r2, #0
  407a00:	680c      	ldr	r4, [r1, #0]
  407a02:	fa04 f409 	lsl.w	r4, r4, r9
  407a06:	4314      	orrs	r4, r2
  407a08:	f843 4b04 	str.w	r4, [r3], #4
  407a0c:	f851 2b04 	ldr.w	r2, [r1], #4
  407a10:	458e      	cmp	lr, r1
  407a12:	fa22 f20c 	lsr.w	r2, r2, ip
  407a16:	d8f3      	bhi.n	407a00 <__lshift+0x5c>
  407a18:	601a      	str	r2, [r3, #0]
  407a1a:	b10a      	cbz	r2, 407a20 <__lshift+0x7c>
  407a1c:	f108 0502 	add.w	r5, r8, #2
  407a20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  407a22:	6872      	ldr	r2, [r6, #4]
  407a24:	3d01      	subs	r5, #1
  407a26:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  407a2a:	6105      	str	r5, [r0, #16]
  407a2c:	6031      	str	r1, [r6, #0]
  407a2e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  407a32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407a36:	3b04      	subs	r3, #4
  407a38:	f851 2b04 	ldr.w	r2, [r1], #4
  407a3c:	f843 2f04 	str.w	r2, [r3, #4]!
  407a40:	458e      	cmp	lr, r1
  407a42:	d8f9      	bhi.n	407a38 <__lshift+0x94>
  407a44:	e7ec      	b.n	407a20 <__lshift+0x7c>
  407a46:	bf00      	nop

00407a48 <__mcmp>:
  407a48:	b430      	push	{r4, r5}
  407a4a:	690b      	ldr	r3, [r1, #16]
  407a4c:	4605      	mov	r5, r0
  407a4e:	6900      	ldr	r0, [r0, #16]
  407a50:	1ac0      	subs	r0, r0, r3
  407a52:	d10f      	bne.n	407a74 <__mcmp+0x2c>
  407a54:	009b      	lsls	r3, r3, #2
  407a56:	3514      	adds	r5, #20
  407a58:	3114      	adds	r1, #20
  407a5a:	4419      	add	r1, r3
  407a5c:	442b      	add	r3, r5
  407a5e:	e001      	b.n	407a64 <__mcmp+0x1c>
  407a60:	429d      	cmp	r5, r3
  407a62:	d207      	bcs.n	407a74 <__mcmp+0x2c>
  407a64:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  407a68:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  407a6c:	4294      	cmp	r4, r2
  407a6e:	d0f7      	beq.n	407a60 <__mcmp+0x18>
  407a70:	d302      	bcc.n	407a78 <__mcmp+0x30>
  407a72:	2001      	movs	r0, #1
  407a74:	bc30      	pop	{r4, r5}
  407a76:	4770      	bx	lr
  407a78:	f04f 30ff 	mov.w	r0, #4294967295
  407a7c:	e7fa      	b.n	407a74 <__mcmp+0x2c>
  407a7e:	bf00      	nop

00407a80 <__mdiff>:
  407a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407a84:	690f      	ldr	r7, [r1, #16]
  407a86:	460e      	mov	r6, r1
  407a88:	6911      	ldr	r1, [r2, #16]
  407a8a:	1a7f      	subs	r7, r7, r1
  407a8c:	2f00      	cmp	r7, #0
  407a8e:	4690      	mov	r8, r2
  407a90:	d117      	bne.n	407ac2 <__mdiff+0x42>
  407a92:	0089      	lsls	r1, r1, #2
  407a94:	f106 0514 	add.w	r5, r6, #20
  407a98:	f102 0e14 	add.w	lr, r2, #20
  407a9c:	186b      	adds	r3, r5, r1
  407a9e:	4471      	add	r1, lr
  407aa0:	e001      	b.n	407aa6 <__mdiff+0x26>
  407aa2:	429d      	cmp	r5, r3
  407aa4:	d25c      	bcs.n	407b60 <__mdiff+0xe0>
  407aa6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  407aaa:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  407aae:	42a2      	cmp	r2, r4
  407ab0:	d0f7      	beq.n	407aa2 <__mdiff+0x22>
  407ab2:	d25e      	bcs.n	407b72 <__mdiff+0xf2>
  407ab4:	4633      	mov	r3, r6
  407ab6:	462c      	mov	r4, r5
  407ab8:	4646      	mov	r6, r8
  407aba:	4675      	mov	r5, lr
  407abc:	4698      	mov	r8, r3
  407abe:	2701      	movs	r7, #1
  407ac0:	e005      	b.n	407ace <__mdiff+0x4e>
  407ac2:	db58      	blt.n	407b76 <__mdiff+0xf6>
  407ac4:	f106 0514 	add.w	r5, r6, #20
  407ac8:	f108 0414 	add.w	r4, r8, #20
  407acc:	2700      	movs	r7, #0
  407ace:	6871      	ldr	r1, [r6, #4]
  407ad0:	f7ff fdbc 	bl	40764c <_Balloc>
  407ad4:	f8d8 3010 	ldr.w	r3, [r8, #16]
  407ad8:	6936      	ldr	r6, [r6, #16]
  407ada:	60c7      	str	r7, [r0, #12]
  407adc:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  407ae0:	46a6      	mov	lr, r4
  407ae2:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  407ae6:	f100 0414 	add.w	r4, r0, #20
  407aea:	2300      	movs	r3, #0
  407aec:	f85e 1b04 	ldr.w	r1, [lr], #4
  407af0:	f855 8b04 	ldr.w	r8, [r5], #4
  407af4:	b28a      	uxth	r2, r1
  407af6:	fa13 f388 	uxtah	r3, r3, r8
  407afa:	0c09      	lsrs	r1, r1, #16
  407afc:	1a9a      	subs	r2, r3, r2
  407afe:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  407b02:	eb03 4322 	add.w	r3, r3, r2, asr #16
  407b06:	b292      	uxth	r2, r2
  407b08:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  407b0c:	45f4      	cmp	ip, lr
  407b0e:	f844 2b04 	str.w	r2, [r4], #4
  407b12:	ea4f 4323 	mov.w	r3, r3, asr #16
  407b16:	d8e9      	bhi.n	407aec <__mdiff+0x6c>
  407b18:	42af      	cmp	r7, r5
  407b1a:	d917      	bls.n	407b4c <__mdiff+0xcc>
  407b1c:	46a4      	mov	ip, r4
  407b1e:	46ae      	mov	lr, r5
  407b20:	f85e 2b04 	ldr.w	r2, [lr], #4
  407b24:	fa13 f382 	uxtah	r3, r3, r2
  407b28:	1419      	asrs	r1, r3, #16
  407b2a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  407b2e:	b29b      	uxth	r3, r3
  407b30:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  407b34:	4577      	cmp	r7, lr
  407b36:	f84c 2b04 	str.w	r2, [ip], #4
  407b3a:	ea4f 4321 	mov.w	r3, r1, asr #16
  407b3e:	d8ef      	bhi.n	407b20 <__mdiff+0xa0>
  407b40:	43ed      	mvns	r5, r5
  407b42:	442f      	add	r7, r5
  407b44:	f027 0703 	bic.w	r7, r7, #3
  407b48:	3704      	adds	r7, #4
  407b4a:	443c      	add	r4, r7
  407b4c:	3c04      	subs	r4, #4
  407b4e:	b922      	cbnz	r2, 407b5a <__mdiff+0xda>
  407b50:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  407b54:	3e01      	subs	r6, #1
  407b56:	2b00      	cmp	r3, #0
  407b58:	d0fa      	beq.n	407b50 <__mdiff+0xd0>
  407b5a:	6106      	str	r6, [r0, #16]
  407b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407b60:	2100      	movs	r1, #0
  407b62:	f7ff fd73 	bl	40764c <_Balloc>
  407b66:	2201      	movs	r2, #1
  407b68:	2300      	movs	r3, #0
  407b6a:	6102      	str	r2, [r0, #16]
  407b6c:	6143      	str	r3, [r0, #20]
  407b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407b72:	4674      	mov	r4, lr
  407b74:	e7ab      	b.n	407ace <__mdiff+0x4e>
  407b76:	4633      	mov	r3, r6
  407b78:	f106 0414 	add.w	r4, r6, #20
  407b7c:	f102 0514 	add.w	r5, r2, #20
  407b80:	4616      	mov	r6, r2
  407b82:	2701      	movs	r7, #1
  407b84:	4698      	mov	r8, r3
  407b86:	e7a2      	b.n	407ace <__mdiff+0x4e>

00407b88 <__d2b>:
  407b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407b8c:	b082      	sub	sp, #8
  407b8e:	2101      	movs	r1, #1
  407b90:	461c      	mov	r4, r3
  407b92:	f3c3 570a 	ubfx	r7, r3, #20, #11
  407b96:	4615      	mov	r5, r2
  407b98:	9e08      	ldr	r6, [sp, #32]
  407b9a:	f7ff fd57 	bl	40764c <_Balloc>
  407b9e:	f3c4 0413 	ubfx	r4, r4, #0, #20
  407ba2:	4680      	mov	r8, r0
  407ba4:	b10f      	cbz	r7, 407baa <__d2b+0x22>
  407ba6:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  407baa:	9401      	str	r4, [sp, #4]
  407bac:	b31d      	cbz	r5, 407bf6 <__d2b+0x6e>
  407bae:	a802      	add	r0, sp, #8
  407bb0:	f840 5d08 	str.w	r5, [r0, #-8]!
  407bb4:	f7ff fdda 	bl	40776c <__lo0bits>
  407bb8:	2800      	cmp	r0, #0
  407bba:	d134      	bne.n	407c26 <__d2b+0x9e>
  407bbc:	e89d 000c 	ldmia.w	sp, {r2, r3}
  407bc0:	f8c8 2014 	str.w	r2, [r8, #20]
  407bc4:	2b00      	cmp	r3, #0
  407bc6:	bf0c      	ite	eq
  407bc8:	2101      	moveq	r1, #1
  407bca:	2102      	movne	r1, #2
  407bcc:	f8c8 3018 	str.w	r3, [r8, #24]
  407bd0:	f8c8 1010 	str.w	r1, [r8, #16]
  407bd4:	b9df      	cbnz	r7, 407c0e <__d2b+0x86>
  407bd6:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  407bda:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  407bde:	6030      	str	r0, [r6, #0]
  407be0:	6918      	ldr	r0, [r3, #16]
  407be2:	f7ff fda3 	bl	40772c <__hi0bits>
  407be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407be8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  407bec:	6018      	str	r0, [r3, #0]
  407bee:	4640      	mov	r0, r8
  407bf0:	b002      	add	sp, #8
  407bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407bf6:	a801      	add	r0, sp, #4
  407bf8:	f7ff fdb8 	bl	40776c <__lo0bits>
  407bfc:	9b01      	ldr	r3, [sp, #4]
  407bfe:	f8c8 3014 	str.w	r3, [r8, #20]
  407c02:	2101      	movs	r1, #1
  407c04:	3020      	adds	r0, #32
  407c06:	f8c8 1010 	str.w	r1, [r8, #16]
  407c0a:	2f00      	cmp	r7, #0
  407c0c:	d0e3      	beq.n	407bd6 <__d2b+0x4e>
  407c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407c10:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  407c14:	4407      	add	r7, r0
  407c16:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  407c1a:	6037      	str	r7, [r6, #0]
  407c1c:	6018      	str	r0, [r3, #0]
  407c1e:	4640      	mov	r0, r8
  407c20:	b002      	add	sp, #8
  407c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407c26:	e89d 000a 	ldmia.w	sp, {r1, r3}
  407c2a:	f1c0 0220 	rsb	r2, r0, #32
  407c2e:	fa03 f202 	lsl.w	r2, r3, r2
  407c32:	430a      	orrs	r2, r1
  407c34:	40c3      	lsrs	r3, r0
  407c36:	9301      	str	r3, [sp, #4]
  407c38:	f8c8 2014 	str.w	r2, [r8, #20]
  407c3c:	e7c2      	b.n	407bc4 <__d2b+0x3c>
  407c3e:	bf00      	nop

00407c40 <_realloc_r>:
  407c40:	2900      	cmp	r1, #0
  407c42:	f000 8095 	beq.w	407d70 <_realloc_r+0x130>
  407c46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407c4a:	460d      	mov	r5, r1
  407c4c:	4616      	mov	r6, r2
  407c4e:	b083      	sub	sp, #12
  407c50:	4680      	mov	r8, r0
  407c52:	f106 070b 	add.w	r7, r6, #11
  407c56:	f7fb fb19 	bl	40328c <__malloc_lock>
  407c5a:	f855 ec04 	ldr.w	lr, [r5, #-4]
  407c5e:	2f16      	cmp	r7, #22
  407c60:	f02e 0403 	bic.w	r4, lr, #3
  407c64:	f1a5 0908 	sub.w	r9, r5, #8
  407c68:	d83c      	bhi.n	407ce4 <_realloc_r+0xa4>
  407c6a:	2210      	movs	r2, #16
  407c6c:	4617      	mov	r7, r2
  407c6e:	42be      	cmp	r6, r7
  407c70:	d83d      	bhi.n	407cee <_realloc_r+0xae>
  407c72:	4294      	cmp	r4, r2
  407c74:	da43      	bge.n	407cfe <_realloc_r+0xbe>
  407c76:	4bc4      	ldr	r3, [pc, #784]	; (407f88 <_realloc_r+0x348>)
  407c78:	6899      	ldr	r1, [r3, #8]
  407c7a:	eb09 0004 	add.w	r0, r9, r4
  407c7e:	4288      	cmp	r0, r1
  407c80:	f000 80b4 	beq.w	407dec <_realloc_r+0x1ac>
  407c84:	6843      	ldr	r3, [r0, #4]
  407c86:	f023 0101 	bic.w	r1, r3, #1
  407c8a:	4401      	add	r1, r0
  407c8c:	6849      	ldr	r1, [r1, #4]
  407c8e:	07c9      	lsls	r1, r1, #31
  407c90:	d54c      	bpl.n	407d2c <_realloc_r+0xec>
  407c92:	f01e 0f01 	tst.w	lr, #1
  407c96:	f000 809b 	beq.w	407dd0 <_realloc_r+0x190>
  407c9a:	4631      	mov	r1, r6
  407c9c:	4640      	mov	r0, r8
  407c9e:	f7fa fff7 	bl	402c90 <_malloc_r>
  407ca2:	4606      	mov	r6, r0
  407ca4:	2800      	cmp	r0, #0
  407ca6:	d03a      	beq.n	407d1e <_realloc_r+0xde>
  407ca8:	f855 3c04 	ldr.w	r3, [r5, #-4]
  407cac:	f023 0301 	bic.w	r3, r3, #1
  407cb0:	444b      	add	r3, r9
  407cb2:	f1a0 0208 	sub.w	r2, r0, #8
  407cb6:	429a      	cmp	r2, r3
  407cb8:	f000 8121 	beq.w	407efe <_realloc_r+0x2be>
  407cbc:	1f22      	subs	r2, r4, #4
  407cbe:	2a24      	cmp	r2, #36	; 0x24
  407cc0:	f200 8107 	bhi.w	407ed2 <_realloc_r+0x292>
  407cc4:	2a13      	cmp	r2, #19
  407cc6:	f200 80db 	bhi.w	407e80 <_realloc_r+0x240>
  407cca:	4603      	mov	r3, r0
  407ccc:	462a      	mov	r2, r5
  407cce:	6811      	ldr	r1, [r2, #0]
  407cd0:	6019      	str	r1, [r3, #0]
  407cd2:	6851      	ldr	r1, [r2, #4]
  407cd4:	6059      	str	r1, [r3, #4]
  407cd6:	6892      	ldr	r2, [r2, #8]
  407cd8:	609a      	str	r2, [r3, #8]
  407cda:	4629      	mov	r1, r5
  407cdc:	4640      	mov	r0, r8
  407cde:	f7ff f827 	bl	406d30 <_free_r>
  407ce2:	e01c      	b.n	407d1e <_realloc_r+0xde>
  407ce4:	f027 0707 	bic.w	r7, r7, #7
  407ce8:	2f00      	cmp	r7, #0
  407cea:	463a      	mov	r2, r7
  407cec:	dabf      	bge.n	407c6e <_realloc_r+0x2e>
  407cee:	2600      	movs	r6, #0
  407cf0:	230c      	movs	r3, #12
  407cf2:	4630      	mov	r0, r6
  407cf4:	f8c8 3000 	str.w	r3, [r8]
  407cf8:	b003      	add	sp, #12
  407cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407cfe:	462e      	mov	r6, r5
  407d00:	1be3      	subs	r3, r4, r7
  407d02:	2b0f      	cmp	r3, #15
  407d04:	d81e      	bhi.n	407d44 <_realloc_r+0x104>
  407d06:	f8d9 3004 	ldr.w	r3, [r9, #4]
  407d0a:	f003 0301 	and.w	r3, r3, #1
  407d0e:	4323      	orrs	r3, r4
  407d10:	444c      	add	r4, r9
  407d12:	f8c9 3004 	str.w	r3, [r9, #4]
  407d16:	6863      	ldr	r3, [r4, #4]
  407d18:	f043 0301 	orr.w	r3, r3, #1
  407d1c:	6063      	str	r3, [r4, #4]
  407d1e:	4640      	mov	r0, r8
  407d20:	f7fb faba 	bl	403298 <__malloc_unlock>
  407d24:	4630      	mov	r0, r6
  407d26:	b003      	add	sp, #12
  407d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407d2c:	f023 0303 	bic.w	r3, r3, #3
  407d30:	18e1      	adds	r1, r4, r3
  407d32:	4291      	cmp	r1, r2
  407d34:	db1f      	blt.n	407d76 <_realloc_r+0x136>
  407d36:	68c3      	ldr	r3, [r0, #12]
  407d38:	6882      	ldr	r2, [r0, #8]
  407d3a:	462e      	mov	r6, r5
  407d3c:	60d3      	str	r3, [r2, #12]
  407d3e:	460c      	mov	r4, r1
  407d40:	609a      	str	r2, [r3, #8]
  407d42:	e7dd      	b.n	407d00 <_realloc_r+0xc0>
  407d44:	f8d9 2004 	ldr.w	r2, [r9, #4]
  407d48:	eb09 0107 	add.w	r1, r9, r7
  407d4c:	f002 0201 	and.w	r2, r2, #1
  407d50:	444c      	add	r4, r9
  407d52:	f043 0301 	orr.w	r3, r3, #1
  407d56:	4317      	orrs	r7, r2
  407d58:	f8c9 7004 	str.w	r7, [r9, #4]
  407d5c:	604b      	str	r3, [r1, #4]
  407d5e:	6863      	ldr	r3, [r4, #4]
  407d60:	f043 0301 	orr.w	r3, r3, #1
  407d64:	3108      	adds	r1, #8
  407d66:	6063      	str	r3, [r4, #4]
  407d68:	4640      	mov	r0, r8
  407d6a:	f7fe ffe1 	bl	406d30 <_free_r>
  407d6e:	e7d6      	b.n	407d1e <_realloc_r+0xde>
  407d70:	4611      	mov	r1, r2
  407d72:	f7fa bf8d 	b.w	402c90 <_malloc_r>
  407d76:	f01e 0f01 	tst.w	lr, #1
  407d7a:	d18e      	bne.n	407c9a <_realloc_r+0x5a>
  407d7c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  407d80:	eba9 0a01 	sub.w	sl, r9, r1
  407d84:	f8da 1004 	ldr.w	r1, [sl, #4]
  407d88:	f021 0103 	bic.w	r1, r1, #3
  407d8c:	440b      	add	r3, r1
  407d8e:	4423      	add	r3, r4
  407d90:	4293      	cmp	r3, r2
  407d92:	db25      	blt.n	407de0 <_realloc_r+0x1a0>
  407d94:	68c2      	ldr	r2, [r0, #12]
  407d96:	6881      	ldr	r1, [r0, #8]
  407d98:	4656      	mov	r6, sl
  407d9a:	60ca      	str	r2, [r1, #12]
  407d9c:	6091      	str	r1, [r2, #8]
  407d9e:	f8da 100c 	ldr.w	r1, [sl, #12]
  407da2:	f856 0f08 	ldr.w	r0, [r6, #8]!
  407da6:	1f22      	subs	r2, r4, #4
  407da8:	2a24      	cmp	r2, #36	; 0x24
  407daa:	60c1      	str	r1, [r0, #12]
  407dac:	6088      	str	r0, [r1, #8]
  407dae:	f200 8094 	bhi.w	407eda <_realloc_r+0x29a>
  407db2:	2a13      	cmp	r2, #19
  407db4:	d96f      	bls.n	407e96 <_realloc_r+0x256>
  407db6:	6829      	ldr	r1, [r5, #0]
  407db8:	f8ca 1008 	str.w	r1, [sl, #8]
  407dbc:	6869      	ldr	r1, [r5, #4]
  407dbe:	f8ca 100c 	str.w	r1, [sl, #12]
  407dc2:	2a1b      	cmp	r2, #27
  407dc4:	f200 80a2 	bhi.w	407f0c <_realloc_r+0x2cc>
  407dc8:	3508      	adds	r5, #8
  407dca:	f10a 0210 	add.w	r2, sl, #16
  407dce:	e063      	b.n	407e98 <_realloc_r+0x258>
  407dd0:	f855 3c08 	ldr.w	r3, [r5, #-8]
  407dd4:	eba9 0a03 	sub.w	sl, r9, r3
  407dd8:	f8da 1004 	ldr.w	r1, [sl, #4]
  407ddc:	f021 0103 	bic.w	r1, r1, #3
  407de0:	1863      	adds	r3, r4, r1
  407de2:	4293      	cmp	r3, r2
  407de4:	f6ff af59 	blt.w	407c9a <_realloc_r+0x5a>
  407de8:	4656      	mov	r6, sl
  407dea:	e7d8      	b.n	407d9e <_realloc_r+0x15e>
  407dec:	6841      	ldr	r1, [r0, #4]
  407dee:	f021 0b03 	bic.w	fp, r1, #3
  407df2:	44a3      	add	fp, r4
  407df4:	f107 0010 	add.w	r0, r7, #16
  407df8:	4583      	cmp	fp, r0
  407dfa:	da56      	bge.n	407eaa <_realloc_r+0x26a>
  407dfc:	f01e 0f01 	tst.w	lr, #1
  407e00:	f47f af4b 	bne.w	407c9a <_realloc_r+0x5a>
  407e04:	f855 1c08 	ldr.w	r1, [r5, #-8]
  407e08:	eba9 0a01 	sub.w	sl, r9, r1
  407e0c:	f8da 1004 	ldr.w	r1, [sl, #4]
  407e10:	f021 0103 	bic.w	r1, r1, #3
  407e14:	448b      	add	fp, r1
  407e16:	4558      	cmp	r0, fp
  407e18:	dce2      	bgt.n	407de0 <_realloc_r+0x1a0>
  407e1a:	4656      	mov	r6, sl
  407e1c:	f8da 100c 	ldr.w	r1, [sl, #12]
  407e20:	f856 0f08 	ldr.w	r0, [r6, #8]!
  407e24:	1f22      	subs	r2, r4, #4
  407e26:	2a24      	cmp	r2, #36	; 0x24
  407e28:	60c1      	str	r1, [r0, #12]
  407e2a:	6088      	str	r0, [r1, #8]
  407e2c:	f200 808f 	bhi.w	407f4e <_realloc_r+0x30e>
  407e30:	2a13      	cmp	r2, #19
  407e32:	f240 808a 	bls.w	407f4a <_realloc_r+0x30a>
  407e36:	6829      	ldr	r1, [r5, #0]
  407e38:	f8ca 1008 	str.w	r1, [sl, #8]
  407e3c:	6869      	ldr	r1, [r5, #4]
  407e3e:	f8ca 100c 	str.w	r1, [sl, #12]
  407e42:	2a1b      	cmp	r2, #27
  407e44:	f200 808a 	bhi.w	407f5c <_realloc_r+0x31c>
  407e48:	3508      	adds	r5, #8
  407e4a:	f10a 0210 	add.w	r2, sl, #16
  407e4e:	6829      	ldr	r1, [r5, #0]
  407e50:	6011      	str	r1, [r2, #0]
  407e52:	6869      	ldr	r1, [r5, #4]
  407e54:	6051      	str	r1, [r2, #4]
  407e56:	68a9      	ldr	r1, [r5, #8]
  407e58:	6091      	str	r1, [r2, #8]
  407e5a:	eb0a 0107 	add.w	r1, sl, r7
  407e5e:	ebab 0207 	sub.w	r2, fp, r7
  407e62:	f042 0201 	orr.w	r2, r2, #1
  407e66:	6099      	str	r1, [r3, #8]
  407e68:	604a      	str	r2, [r1, #4]
  407e6a:	f8da 3004 	ldr.w	r3, [sl, #4]
  407e6e:	f003 0301 	and.w	r3, r3, #1
  407e72:	431f      	orrs	r7, r3
  407e74:	4640      	mov	r0, r8
  407e76:	f8ca 7004 	str.w	r7, [sl, #4]
  407e7a:	f7fb fa0d 	bl	403298 <__malloc_unlock>
  407e7e:	e751      	b.n	407d24 <_realloc_r+0xe4>
  407e80:	682b      	ldr	r3, [r5, #0]
  407e82:	6003      	str	r3, [r0, #0]
  407e84:	686b      	ldr	r3, [r5, #4]
  407e86:	6043      	str	r3, [r0, #4]
  407e88:	2a1b      	cmp	r2, #27
  407e8a:	d82d      	bhi.n	407ee8 <_realloc_r+0x2a8>
  407e8c:	f100 0308 	add.w	r3, r0, #8
  407e90:	f105 0208 	add.w	r2, r5, #8
  407e94:	e71b      	b.n	407cce <_realloc_r+0x8e>
  407e96:	4632      	mov	r2, r6
  407e98:	6829      	ldr	r1, [r5, #0]
  407e9a:	6011      	str	r1, [r2, #0]
  407e9c:	6869      	ldr	r1, [r5, #4]
  407e9e:	6051      	str	r1, [r2, #4]
  407ea0:	68a9      	ldr	r1, [r5, #8]
  407ea2:	6091      	str	r1, [r2, #8]
  407ea4:	461c      	mov	r4, r3
  407ea6:	46d1      	mov	r9, sl
  407ea8:	e72a      	b.n	407d00 <_realloc_r+0xc0>
  407eaa:	eb09 0107 	add.w	r1, r9, r7
  407eae:	ebab 0b07 	sub.w	fp, fp, r7
  407eb2:	f04b 0201 	orr.w	r2, fp, #1
  407eb6:	6099      	str	r1, [r3, #8]
  407eb8:	604a      	str	r2, [r1, #4]
  407eba:	f855 3c04 	ldr.w	r3, [r5, #-4]
  407ebe:	f003 0301 	and.w	r3, r3, #1
  407ec2:	431f      	orrs	r7, r3
  407ec4:	4640      	mov	r0, r8
  407ec6:	f845 7c04 	str.w	r7, [r5, #-4]
  407eca:	f7fb f9e5 	bl	403298 <__malloc_unlock>
  407ece:	462e      	mov	r6, r5
  407ed0:	e728      	b.n	407d24 <_realloc_r+0xe4>
  407ed2:	4629      	mov	r1, r5
  407ed4:	f7ff fb56 	bl	407584 <memmove>
  407ed8:	e6ff      	b.n	407cda <_realloc_r+0x9a>
  407eda:	4629      	mov	r1, r5
  407edc:	4630      	mov	r0, r6
  407ede:	461c      	mov	r4, r3
  407ee0:	46d1      	mov	r9, sl
  407ee2:	f7ff fb4f 	bl	407584 <memmove>
  407ee6:	e70b      	b.n	407d00 <_realloc_r+0xc0>
  407ee8:	68ab      	ldr	r3, [r5, #8]
  407eea:	6083      	str	r3, [r0, #8]
  407eec:	68eb      	ldr	r3, [r5, #12]
  407eee:	60c3      	str	r3, [r0, #12]
  407ef0:	2a24      	cmp	r2, #36	; 0x24
  407ef2:	d017      	beq.n	407f24 <_realloc_r+0x2e4>
  407ef4:	f100 0310 	add.w	r3, r0, #16
  407ef8:	f105 0210 	add.w	r2, r5, #16
  407efc:	e6e7      	b.n	407cce <_realloc_r+0x8e>
  407efe:	f850 3c04 	ldr.w	r3, [r0, #-4]
  407f02:	f023 0303 	bic.w	r3, r3, #3
  407f06:	441c      	add	r4, r3
  407f08:	462e      	mov	r6, r5
  407f0a:	e6f9      	b.n	407d00 <_realloc_r+0xc0>
  407f0c:	68a9      	ldr	r1, [r5, #8]
  407f0e:	f8ca 1010 	str.w	r1, [sl, #16]
  407f12:	68e9      	ldr	r1, [r5, #12]
  407f14:	f8ca 1014 	str.w	r1, [sl, #20]
  407f18:	2a24      	cmp	r2, #36	; 0x24
  407f1a:	d00c      	beq.n	407f36 <_realloc_r+0x2f6>
  407f1c:	3510      	adds	r5, #16
  407f1e:	f10a 0218 	add.w	r2, sl, #24
  407f22:	e7b9      	b.n	407e98 <_realloc_r+0x258>
  407f24:	692b      	ldr	r3, [r5, #16]
  407f26:	6103      	str	r3, [r0, #16]
  407f28:	696b      	ldr	r3, [r5, #20]
  407f2a:	6143      	str	r3, [r0, #20]
  407f2c:	f105 0218 	add.w	r2, r5, #24
  407f30:	f100 0318 	add.w	r3, r0, #24
  407f34:	e6cb      	b.n	407cce <_realloc_r+0x8e>
  407f36:	692a      	ldr	r2, [r5, #16]
  407f38:	f8ca 2018 	str.w	r2, [sl, #24]
  407f3c:	696a      	ldr	r2, [r5, #20]
  407f3e:	f8ca 201c 	str.w	r2, [sl, #28]
  407f42:	3518      	adds	r5, #24
  407f44:	f10a 0220 	add.w	r2, sl, #32
  407f48:	e7a6      	b.n	407e98 <_realloc_r+0x258>
  407f4a:	4632      	mov	r2, r6
  407f4c:	e77f      	b.n	407e4e <_realloc_r+0x20e>
  407f4e:	4629      	mov	r1, r5
  407f50:	4630      	mov	r0, r6
  407f52:	9301      	str	r3, [sp, #4]
  407f54:	f7ff fb16 	bl	407584 <memmove>
  407f58:	9b01      	ldr	r3, [sp, #4]
  407f5a:	e77e      	b.n	407e5a <_realloc_r+0x21a>
  407f5c:	68a9      	ldr	r1, [r5, #8]
  407f5e:	f8ca 1010 	str.w	r1, [sl, #16]
  407f62:	68e9      	ldr	r1, [r5, #12]
  407f64:	f8ca 1014 	str.w	r1, [sl, #20]
  407f68:	2a24      	cmp	r2, #36	; 0x24
  407f6a:	d003      	beq.n	407f74 <_realloc_r+0x334>
  407f6c:	3510      	adds	r5, #16
  407f6e:	f10a 0218 	add.w	r2, sl, #24
  407f72:	e76c      	b.n	407e4e <_realloc_r+0x20e>
  407f74:	692a      	ldr	r2, [r5, #16]
  407f76:	f8ca 2018 	str.w	r2, [sl, #24]
  407f7a:	696a      	ldr	r2, [r5, #20]
  407f7c:	f8ca 201c 	str.w	r2, [sl, #28]
  407f80:	3518      	adds	r5, #24
  407f82:	f10a 0220 	add.w	r2, sl, #32
  407f86:	e762      	b.n	407e4e <_realloc_r+0x20e>
  407f88:	20400570 	.word	0x20400570

00407f8c <__sread>:
  407f8c:	b510      	push	{r4, lr}
  407f8e:	460c      	mov	r4, r1
  407f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407f94:	f000 faa4 	bl	4084e0 <_read_r>
  407f98:	2800      	cmp	r0, #0
  407f9a:	db03      	blt.n	407fa4 <__sread+0x18>
  407f9c:	6d23      	ldr	r3, [r4, #80]	; 0x50
  407f9e:	4403      	add	r3, r0
  407fa0:	6523      	str	r3, [r4, #80]	; 0x50
  407fa2:	bd10      	pop	{r4, pc}
  407fa4:	89a3      	ldrh	r3, [r4, #12]
  407fa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  407faa:	81a3      	strh	r3, [r4, #12]
  407fac:	bd10      	pop	{r4, pc}
  407fae:	bf00      	nop

00407fb0 <__swrite>:
  407fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407fb4:	4616      	mov	r6, r2
  407fb6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  407fba:	461f      	mov	r7, r3
  407fbc:	05d3      	lsls	r3, r2, #23
  407fbe:	460c      	mov	r4, r1
  407fc0:	4605      	mov	r5, r0
  407fc2:	d507      	bpl.n	407fd4 <__swrite+0x24>
  407fc4:	2200      	movs	r2, #0
  407fc6:	2302      	movs	r3, #2
  407fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407fcc:	f000 fa72 	bl	4084b4 <_lseek_r>
  407fd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407fd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  407fd8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  407fdc:	81a2      	strh	r2, [r4, #12]
  407fde:	463b      	mov	r3, r7
  407fe0:	4632      	mov	r2, r6
  407fe2:	4628      	mov	r0, r5
  407fe4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407fe8:	f000 b922 	b.w	408230 <_write_r>

00407fec <__sseek>:
  407fec:	b510      	push	{r4, lr}
  407fee:	460c      	mov	r4, r1
  407ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407ff4:	f000 fa5e 	bl	4084b4 <_lseek_r>
  407ff8:	89a3      	ldrh	r3, [r4, #12]
  407ffa:	1c42      	adds	r2, r0, #1
  407ffc:	bf0e      	itee	eq
  407ffe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  408002:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  408006:	6520      	strne	r0, [r4, #80]	; 0x50
  408008:	81a3      	strh	r3, [r4, #12]
  40800a:	bd10      	pop	{r4, pc}

0040800c <__sclose>:
  40800c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408010:	f000 b9b6 	b.w	408380 <_close_r>

00408014 <__ssprint_r>:
  408014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408018:	6893      	ldr	r3, [r2, #8]
  40801a:	b083      	sub	sp, #12
  40801c:	4690      	mov	r8, r2
  40801e:	2b00      	cmp	r3, #0
  408020:	d070      	beq.n	408104 <__ssprint_r+0xf0>
  408022:	4682      	mov	sl, r0
  408024:	460c      	mov	r4, r1
  408026:	6817      	ldr	r7, [r2, #0]
  408028:	688d      	ldr	r5, [r1, #8]
  40802a:	6808      	ldr	r0, [r1, #0]
  40802c:	e042      	b.n	4080b4 <__ssprint_r+0xa0>
  40802e:	89a3      	ldrh	r3, [r4, #12]
  408030:	f413 6f90 	tst.w	r3, #1152	; 0x480
  408034:	d02e      	beq.n	408094 <__ssprint_r+0x80>
  408036:	6965      	ldr	r5, [r4, #20]
  408038:	6921      	ldr	r1, [r4, #16]
  40803a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  40803e:	eba0 0b01 	sub.w	fp, r0, r1
  408042:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  408046:	f10b 0001 	add.w	r0, fp, #1
  40804a:	106d      	asrs	r5, r5, #1
  40804c:	4430      	add	r0, r6
  40804e:	42a8      	cmp	r0, r5
  408050:	462a      	mov	r2, r5
  408052:	bf84      	itt	hi
  408054:	4605      	movhi	r5, r0
  408056:	462a      	movhi	r2, r5
  408058:	055b      	lsls	r3, r3, #21
  40805a:	d538      	bpl.n	4080ce <__ssprint_r+0xba>
  40805c:	4611      	mov	r1, r2
  40805e:	4650      	mov	r0, sl
  408060:	f7fa fe16 	bl	402c90 <_malloc_r>
  408064:	2800      	cmp	r0, #0
  408066:	d03c      	beq.n	4080e2 <__ssprint_r+0xce>
  408068:	465a      	mov	r2, fp
  40806a:	6921      	ldr	r1, [r4, #16]
  40806c:	9001      	str	r0, [sp, #4]
  40806e:	f7ff f9ef 	bl	407450 <memcpy>
  408072:	89a2      	ldrh	r2, [r4, #12]
  408074:	9b01      	ldr	r3, [sp, #4]
  408076:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40807a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40807e:	81a2      	strh	r2, [r4, #12]
  408080:	eba5 020b 	sub.w	r2, r5, fp
  408084:	eb03 000b 	add.w	r0, r3, fp
  408088:	6165      	str	r5, [r4, #20]
  40808a:	6123      	str	r3, [r4, #16]
  40808c:	6020      	str	r0, [r4, #0]
  40808e:	60a2      	str	r2, [r4, #8]
  408090:	4635      	mov	r5, r6
  408092:	46b3      	mov	fp, r6
  408094:	465a      	mov	r2, fp
  408096:	4649      	mov	r1, r9
  408098:	f7ff fa74 	bl	407584 <memmove>
  40809c:	f8d8 3008 	ldr.w	r3, [r8, #8]
  4080a0:	68a2      	ldr	r2, [r4, #8]
  4080a2:	6820      	ldr	r0, [r4, #0]
  4080a4:	1b55      	subs	r5, r2, r5
  4080a6:	4458      	add	r0, fp
  4080a8:	1b9e      	subs	r6, r3, r6
  4080aa:	60a5      	str	r5, [r4, #8]
  4080ac:	6020      	str	r0, [r4, #0]
  4080ae:	f8c8 6008 	str.w	r6, [r8, #8]
  4080b2:	b33e      	cbz	r6, 408104 <__ssprint_r+0xf0>
  4080b4:	687e      	ldr	r6, [r7, #4]
  4080b6:	463b      	mov	r3, r7
  4080b8:	3708      	adds	r7, #8
  4080ba:	2e00      	cmp	r6, #0
  4080bc:	d0fa      	beq.n	4080b4 <__ssprint_r+0xa0>
  4080be:	42ae      	cmp	r6, r5
  4080c0:	f8d3 9000 	ldr.w	r9, [r3]
  4080c4:	46ab      	mov	fp, r5
  4080c6:	d2b2      	bcs.n	40802e <__ssprint_r+0x1a>
  4080c8:	4635      	mov	r5, r6
  4080ca:	46b3      	mov	fp, r6
  4080cc:	e7e2      	b.n	408094 <__ssprint_r+0x80>
  4080ce:	4650      	mov	r0, sl
  4080d0:	f7ff fdb6 	bl	407c40 <_realloc_r>
  4080d4:	4603      	mov	r3, r0
  4080d6:	2800      	cmp	r0, #0
  4080d8:	d1d2      	bne.n	408080 <__ssprint_r+0x6c>
  4080da:	6921      	ldr	r1, [r4, #16]
  4080dc:	4650      	mov	r0, sl
  4080de:	f7fe fe27 	bl	406d30 <_free_r>
  4080e2:	230c      	movs	r3, #12
  4080e4:	f8ca 3000 	str.w	r3, [sl]
  4080e8:	89a3      	ldrh	r3, [r4, #12]
  4080ea:	2200      	movs	r2, #0
  4080ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4080f0:	f04f 30ff 	mov.w	r0, #4294967295
  4080f4:	81a3      	strh	r3, [r4, #12]
  4080f6:	f8c8 2008 	str.w	r2, [r8, #8]
  4080fa:	f8c8 2004 	str.w	r2, [r8, #4]
  4080fe:	b003      	add	sp, #12
  408100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408104:	2000      	movs	r0, #0
  408106:	f8c8 0004 	str.w	r0, [r8, #4]
  40810a:	b003      	add	sp, #12
  40810c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00408110 <__swbuf_r>:
  408110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408112:	460d      	mov	r5, r1
  408114:	4614      	mov	r4, r2
  408116:	4606      	mov	r6, r0
  408118:	b110      	cbz	r0, 408120 <__swbuf_r+0x10>
  40811a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40811c:	2b00      	cmp	r3, #0
  40811e:	d04b      	beq.n	4081b8 <__swbuf_r+0xa8>
  408120:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408124:	69a3      	ldr	r3, [r4, #24]
  408126:	60a3      	str	r3, [r4, #8]
  408128:	b291      	uxth	r1, r2
  40812a:	0708      	lsls	r0, r1, #28
  40812c:	d539      	bpl.n	4081a2 <__swbuf_r+0x92>
  40812e:	6923      	ldr	r3, [r4, #16]
  408130:	2b00      	cmp	r3, #0
  408132:	d036      	beq.n	4081a2 <__swbuf_r+0x92>
  408134:	b2ed      	uxtb	r5, r5
  408136:	0489      	lsls	r1, r1, #18
  408138:	462f      	mov	r7, r5
  40813a:	d515      	bpl.n	408168 <__swbuf_r+0x58>
  40813c:	6822      	ldr	r2, [r4, #0]
  40813e:	6961      	ldr	r1, [r4, #20]
  408140:	1ad3      	subs	r3, r2, r3
  408142:	428b      	cmp	r3, r1
  408144:	da1c      	bge.n	408180 <__swbuf_r+0x70>
  408146:	3301      	adds	r3, #1
  408148:	68a1      	ldr	r1, [r4, #8]
  40814a:	1c50      	adds	r0, r2, #1
  40814c:	3901      	subs	r1, #1
  40814e:	60a1      	str	r1, [r4, #8]
  408150:	6020      	str	r0, [r4, #0]
  408152:	7015      	strb	r5, [r2, #0]
  408154:	6962      	ldr	r2, [r4, #20]
  408156:	429a      	cmp	r2, r3
  408158:	d01a      	beq.n	408190 <__swbuf_r+0x80>
  40815a:	89a3      	ldrh	r3, [r4, #12]
  40815c:	07db      	lsls	r3, r3, #31
  40815e:	d501      	bpl.n	408164 <__swbuf_r+0x54>
  408160:	2d0a      	cmp	r5, #10
  408162:	d015      	beq.n	408190 <__swbuf_r+0x80>
  408164:	4638      	mov	r0, r7
  408166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408168:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40816a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40816e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  408172:	81a2      	strh	r2, [r4, #12]
  408174:	6822      	ldr	r2, [r4, #0]
  408176:	6661      	str	r1, [r4, #100]	; 0x64
  408178:	6961      	ldr	r1, [r4, #20]
  40817a:	1ad3      	subs	r3, r2, r3
  40817c:	428b      	cmp	r3, r1
  40817e:	dbe2      	blt.n	408146 <__swbuf_r+0x36>
  408180:	4621      	mov	r1, r4
  408182:	4630      	mov	r0, r6
  408184:	f7fe fc56 	bl	406a34 <_fflush_r>
  408188:	b940      	cbnz	r0, 40819c <__swbuf_r+0x8c>
  40818a:	6822      	ldr	r2, [r4, #0]
  40818c:	2301      	movs	r3, #1
  40818e:	e7db      	b.n	408148 <__swbuf_r+0x38>
  408190:	4621      	mov	r1, r4
  408192:	4630      	mov	r0, r6
  408194:	f7fe fc4e 	bl	406a34 <_fflush_r>
  408198:	2800      	cmp	r0, #0
  40819a:	d0e3      	beq.n	408164 <__swbuf_r+0x54>
  40819c:	f04f 37ff 	mov.w	r7, #4294967295
  4081a0:	e7e0      	b.n	408164 <__swbuf_r+0x54>
  4081a2:	4621      	mov	r1, r4
  4081a4:	4630      	mov	r0, r6
  4081a6:	f7fd fb71 	bl	40588c <__swsetup_r>
  4081aa:	2800      	cmp	r0, #0
  4081ac:	d1f6      	bne.n	40819c <__swbuf_r+0x8c>
  4081ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4081b2:	6923      	ldr	r3, [r4, #16]
  4081b4:	b291      	uxth	r1, r2
  4081b6:	e7bd      	b.n	408134 <__swbuf_r+0x24>
  4081b8:	f7fe fc94 	bl	406ae4 <__sinit>
  4081bc:	e7b0      	b.n	408120 <__swbuf_r+0x10>
  4081be:	bf00      	nop

004081c0 <_wcrtomb_r>:
  4081c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4081c2:	4606      	mov	r6, r0
  4081c4:	b085      	sub	sp, #20
  4081c6:	461f      	mov	r7, r3
  4081c8:	b189      	cbz	r1, 4081ee <_wcrtomb_r+0x2e>
  4081ca:	4c10      	ldr	r4, [pc, #64]	; (40820c <_wcrtomb_r+0x4c>)
  4081cc:	4d10      	ldr	r5, [pc, #64]	; (408210 <_wcrtomb_r+0x50>)
  4081ce:	6824      	ldr	r4, [r4, #0]
  4081d0:	6b64      	ldr	r4, [r4, #52]	; 0x34
  4081d2:	2c00      	cmp	r4, #0
  4081d4:	bf08      	it	eq
  4081d6:	462c      	moveq	r4, r5
  4081d8:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  4081dc:	47a0      	blx	r4
  4081de:	1c43      	adds	r3, r0, #1
  4081e0:	d103      	bne.n	4081ea <_wcrtomb_r+0x2a>
  4081e2:	2200      	movs	r2, #0
  4081e4:	238a      	movs	r3, #138	; 0x8a
  4081e6:	603a      	str	r2, [r7, #0]
  4081e8:	6033      	str	r3, [r6, #0]
  4081ea:	b005      	add	sp, #20
  4081ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4081ee:	460c      	mov	r4, r1
  4081f0:	4906      	ldr	r1, [pc, #24]	; (40820c <_wcrtomb_r+0x4c>)
  4081f2:	4a07      	ldr	r2, [pc, #28]	; (408210 <_wcrtomb_r+0x50>)
  4081f4:	6809      	ldr	r1, [r1, #0]
  4081f6:	6b49      	ldr	r1, [r1, #52]	; 0x34
  4081f8:	2900      	cmp	r1, #0
  4081fa:	bf08      	it	eq
  4081fc:	4611      	moveq	r1, r2
  4081fe:	4622      	mov	r2, r4
  408200:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  408204:	a901      	add	r1, sp, #4
  408206:	47a0      	blx	r4
  408208:	e7e9      	b.n	4081de <_wcrtomb_r+0x1e>
  40820a:	bf00      	nop
  40820c:	20400144 	.word	0x20400144
  408210:	20400984 	.word	0x20400984

00408214 <__ascii_wctomb>:
  408214:	b121      	cbz	r1, 408220 <__ascii_wctomb+0xc>
  408216:	2aff      	cmp	r2, #255	; 0xff
  408218:	d804      	bhi.n	408224 <__ascii_wctomb+0x10>
  40821a:	700a      	strb	r2, [r1, #0]
  40821c:	2001      	movs	r0, #1
  40821e:	4770      	bx	lr
  408220:	4608      	mov	r0, r1
  408222:	4770      	bx	lr
  408224:	238a      	movs	r3, #138	; 0x8a
  408226:	6003      	str	r3, [r0, #0]
  408228:	f04f 30ff 	mov.w	r0, #4294967295
  40822c:	4770      	bx	lr
  40822e:	bf00      	nop

00408230 <_write_r>:
  408230:	b570      	push	{r4, r5, r6, lr}
  408232:	460d      	mov	r5, r1
  408234:	4c08      	ldr	r4, [pc, #32]	; (408258 <_write_r+0x28>)
  408236:	4611      	mov	r1, r2
  408238:	4606      	mov	r6, r0
  40823a:	461a      	mov	r2, r3
  40823c:	4628      	mov	r0, r5
  40823e:	2300      	movs	r3, #0
  408240:	6023      	str	r3, [r4, #0]
  408242:	f7f8 fb8f 	bl	400964 <_write>
  408246:	1c43      	adds	r3, r0, #1
  408248:	d000      	beq.n	40824c <_write_r+0x1c>
  40824a:	bd70      	pop	{r4, r5, r6, pc}
  40824c:	6823      	ldr	r3, [r4, #0]
  40824e:	2b00      	cmp	r3, #0
  408250:	d0fb      	beq.n	40824a <_write_r+0x1a>
  408252:	6033      	str	r3, [r6, #0]
  408254:	bd70      	pop	{r4, r5, r6, pc}
  408256:	bf00      	nop
  408258:	20400fd4 	.word	0x20400fd4

0040825c <__register_exitproc>:
  40825c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  408260:	4d2c      	ldr	r5, [pc, #176]	; (408314 <__register_exitproc+0xb8>)
  408262:	4606      	mov	r6, r0
  408264:	6828      	ldr	r0, [r5, #0]
  408266:	4698      	mov	r8, r3
  408268:	460f      	mov	r7, r1
  40826a:	4691      	mov	r9, r2
  40826c:	f7ff f808 	bl	407280 <__retarget_lock_acquire_recursive>
  408270:	4b29      	ldr	r3, [pc, #164]	; (408318 <__register_exitproc+0xbc>)
  408272:	681c      	ldr	r4, [r3, #0]
  408274:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  408278:	2b00      	cmp	r3, #0
  40827a:	d03e      	beq.n	4082fa <__register_exitproc+0x9e>
  40827c:	685a      	ldr	r2, [r3, #4]
  40827e:	2a1f      	cmp	r2, #31
  408280:	dc1c      	bgt.n	4082bc <__register_exitproc+0x60>
  408282:	f102 0e01 	add.w	lr, r2, #1
  408286:	b176      	cbz	r6, 4082a6 <__register_exitproc+0x4a>
  408288:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  40828c:	2401      	movs	r4, #1
  40828e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  408292:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  408296:	4094      	lsls	r4, r2
  408298:	4320      	orrs	r0, r4
  40829a:	2e02      	cmp	r6, #2
  40829c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4082a0:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4082a4:	d023      	beq.n	4082ee <__register_exitproc+0x92>
  4082a6:	3202      	adds	r2, #2
  4082a8:	f8c3 e004 	str.w	lr, [r3, #4]
  4082ac:	6828      	ldr	r0, [r5, #0]
  4082ae:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4082b2:	f7fe ffe7 	bl	407284 <__retarget_lock_release_recursive>
  4082b6:	2000      	movs	r0, #0
  4082b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4082bc:	4b17      	ldr	r3, [pc, #92]	; (40831c <__register_exitproc+0xc0>)
  4082be:	b30b      	cbz	r3, 408304 <__register_exitproc+0xa8>
  4082c0:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4082c4:	f7fa fcdc 	bl	402c80 <malloc>
  4082c8:	4603      	mov	r3, r0
  4082ca:	b1d8      	cbz	r0, 408304 <__register_exitproc+0xa8>
  4082cc:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4082d0:	6002      	str	r2, [r0, #0]
  4082d2:	2100      	movs	r1, #0
  4082d4:	6041      	str	r1, [r0, #4]
  4082d6:	460a      	mov	r2, r1
  4082d8:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4082dc:	f04f 0e01 	mov.w	lr, #1
  4082e0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4082e4:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4082e8:	2e00      	cmp	r6, #0
  4082ea:	d0dc      	beq.n	4082a6 <__register_exitproc+0x4a>
  4082ec:	e7cc      	b.n	408288 <__register_exitproc+0x2c>
  4082ee:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4082f2:	430c      	orrs	r4, r1
  4082f4:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4082f8:	e7d5      	b.n	4082a6 <__register_exitproc+0x4a>
  4082fa:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4082fe:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  408302:	e7bb      	b.n	40827c <__register_exitproc+0x20>
  408304:	6828      	ldr	r0, [r5, #0]
  408306:	f7fe ffbd 	bl	407284 <__retarget_lock_release_recursive>
  40830a:	f04f 30ff 	mov.w	r0, #4294967295
  40830e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408312:	bf00      	nop
  408314:	20400980 	.word	0x20400980
  408318:	004099a8 	.word	0x004099a8
  40831c:	00402c81 	.word	0x00402c81

00408320 <_calloc_r>:
  408320:	b510      	push	{r4, lr}
  408322:	fb02 f101 	mul.w	r1, r2, r1
  408326:	f7fa fcb3 	bl	402c90 <_malloc_r>
  40832a:	4604      	mov	r4, r0
  40832c:	b1d8      	cbz	r0, 408366 <_calloc_r+0x46>
  40832e:	f850 2c04 	ldr.w	r2, [r0, #-4]
  408332:	f022 0203 	bic.w	r2, r2, #3
  408336:	3a04      	subs	r2, #4
  408338:	2a24      	cmp	r2, #36	; 0x24
  40833a:	d818      	bhi.n	40836e <_calloc_r+0x4e>
  40833c:	2a13      	cmp	r2, #19
  40833e:	d914      	bls.n	40836a <_calloc_r+0x4a>
  408340:	2300      	movs	r3, #0
  408342:	2a1b      	cmp	r2, #27
  408344:	6003      	str	r3, [r0, #0]
  408346:	6043      	str	r3, [r0, #4]
  408348:	d916      	bls.n	408378 <_calloc_r+0x58>
  40834a:	2a24      	cmp	r2, #36	; 0x24
  40834c:	6083      	str	r3, [r0, #8]
  40834e:	60c3      	str	r3, [r0, #12]
  408350:	bf11      	iteee	ne
  408352:	f100 0210 	addne.w	r2, r0, #16
  408356:	6103      	streq	r3, [r0, #16]
  408358:	6143      	streq	r3, [r0, #20]
  40835a:	f100 0218 	addeq.w	r2, r0, #24
  40835e:	2300      	movs	r3, #0
  408360:	6013      	str	r3, [r2, #0]
  408362:	6053      	str	r3, [r2, #4]
  408364:	6093      	str	r3, [r2, #8]
  408366:	4620      	mov	r0, r4
  408368:	bd10      	pop	{r4, pc}
  40836a:	4602      	mov	r2, r0
  40836c:	e7f7      	b.n	40835e <_calloc_r+0x3e>
  40836e:	2100      	movs	r1, #0
  408370:	f7fa ff3e 	bl	4031f0 <memset>
  408374:	4620      	mov	r0, r4
  408376:	bd10      	pop	{r4, pc}
  408378:	f100 0208 	add.w	r2, r0, #8
  40837c:	e7ef      	b.n	40835e <_calloc_r+0x3e>
  40837e:	bf00      	nop

00408380 <_close_r>:
  408380:	b538      	push	{r3, r4, r5, lr}
  408382:	4c07      	ldr	r4, [pc, #28]	; (4083a0 <_close_r+0x20>)
  408384:	2300      	movs	r3, #0
  408386:	4605      	mov	r5, r0
  408388:	4608      	mov	r0, r1
  40838a:	6023      	str	r3, [r4, #0]
  40838c:	f7f9 ff42 	bl	402214 <_close>
  408390:	1c43      	adds	r3, r0, #1
  408392:	d000      	beq.n	408396 <_close_r+0x16>
  408394:	bd38      	pop	{r3, r4, r5, pc}
  408396:	6823      	ldr	r3, [r4, #0]
  408398:	2b00      	cmp	r3, #0
  40839a:	d0fb      	beq.n	408394 <_close_r+0x14>
  40839c:	602b      	str	r3, [r5, #0]
  40839e:	bd38      	pop	{r3, r4, r5, pc}
  4083a0:	20400fd4 	.word	0x20400fd4

004083a4 <_fclose_r>:
  4083a4:	b570      	push	{r4, r5, r6, lr}
  4083a6:	b159      	cbz	r1, 4083c0 <_fclose_r+0x1c>
  4083a8:	4605      	mov	r5, r0
  4083aa:	460c      	mov	r4, r1
  4083ac:	b110      	cbz	r0, 4083b4 <_fclose_r+0x10>
  4083ae:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4083b0:	2b00      	cmp	r3, #0
  4083b2:	d03c      	beq.n	40842e <_fclose_r+0x8a>
  4083b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4083b6:	07d8      	lsls	r0, r3, #31
  4083b8:	d505      	bpl.n	4083c6 <_fclose_r+0x22>
  4083ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4083be:	b92b      	cbnz	r3, 4083cc <_fclose_r+0x28>
  4083c0:	2600      	movs	r6, #0
  4083c2:	4630      	mov	r0, r6
  4083c4:	bd70      	pop	{r4, r5, r6, pc}
  4083c6:	89a3      	ldrh	r3, [r4, #12]
  4083c8:	0599      	lsls	r1, r3, #22
  4083ca:	d53c      	bpl.n	408446 <_fclose_r+0xa2>
  4083cc:	4621      	mov	r1, r4
  4083ce:	4628      	mov	r0, r5
  4083d0:	f7fe fa90 	bl	4068f4 <__sflush_r>
  4083d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4083d6:	4606      	mov	r6, r0
  4083d8:	b133      	cbz	r3, 4083e8 <_fclose_r+0x44>
  4083da:	69e1      	ldr	r1, [r4, #28]
  4083dc:	4628      	mov	r0, r5
  4083de:	4798      	blx	r3
  4083e0:	2800      	cmp	r0, #0
  4083e2:	bfb8      	it	lt
  4083e4:	f04f 36ff 	movlt.w	r6, #4294967295
  4083e8:	89a3      	ldrh	r3, [r4, #12]
  4083ea:	061a      	lsls	r2, r3, #24
  4083ec:	d422      	bmi.n	408434 <_fclose_r+0x90>
  4083ee:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4083f0:	b141      	cbz	r1, 408404 <_fclose_r+0x60>
  4083f2:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4083f6:	4299      	cmp	r1, r3
  4083f8:	d002      	beq.n	408400 <_fclose_r+0x5c>
  4083fa:	4628      	mov	r0, r5
  4083fc:	f7fe fc98 	bl	406d30 <_free_r>
  408400:	2300      	movs	r3, #0
  408402:	6323      	str	r3, [r4, #48]	; 0x30
  408404:	6c61      	ldr	r1, [r4, #68]	; 0x44
  408406:	b121      	cbz	r1, 408412 <_fclose_r+0x6e>
  408408:	4628      	mov	r0, r5
  40840a:	f7fe fc91 	bl	406d30 <_free_r>
  40840e:	2300      	movs	r3, #0
  408410:	6463      	str	r3, [r4, #68]	; 0x44
  408412:	f7fe fb93 	bl	406b3c <__sfp_lock_acquire>
  408416:	6e63      	ldr	r3, [r4, #100]	; 0x64
  408418:	2200      	movs	r2, #0
  40841a:	07db      	lsls	r3, r3, #31
  40841c:	81a2      	strh	r2, [r4, #12]
  40841e:	d50e      	bpl.n	40843e <_fclose_r+0x9a>
  408420:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408422:	f7fe ff2b 	bl	40727c <__retarget_lock_close_recursive>
  408426:	f7fe fb8f 	bl	406b48 <__sfp_lock_release>
  40842a:	4630      	mov	r0, r6
  40842c:	bd70      	pop	{r4, r5, r6, pc}
  40842e:	f7fe fb59 	bl	406ae4 <__sinit>
  408432:	e7bf      	b.n	4083b4 <_fclose_r+0x10>
  408434:	6921      	ldr	r1, [r4, #16]
  408436:	4628      	mov	r0, r5
  408438:	f7fe fc7a 	bl	406d30 <_free_r>
  40843c:	e7d7      	b.n	4083ee <_fclose_r+0x4a>
  40843e:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408440:	f7fe ff20 	bl	407284 <__retarget_lock_release_recursive>
  408444:	e7ec      	b.n	408420 <_fclose_r+0x7c>
  408446:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408448:	f7fe ff1a 	bl	407280 <__retarget_lock_acquire_recursive>
  40844c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408450:	2b00      	cmp	r3, #0
  408452:	d1bb      	bne.n	4083cc <_fclose_r+0x28>
  408454:	6e66      	ldr	r6, [r4, #100]	; 0x64
  408456:	f016 0601 	ands.w	r6, r6, #1
  40845a:	d1b1      	bne.n	4083c0 <_fclose_r+0x1c>
  40845c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40845e:	f7fe ff11 	bl	407284 <__retarget_lock_release_recursive>
  408462:	4630      	mov	r0, r6
  408464:	bd70      	pop	{r4, r5, r6, pc}
  408466:	bf00      	nop

00408468 <_fstat_r>:
  408468:	b538      	push	{r3, r4, r5, lr}
  40846a:	460b      	mov	r3, r1
  40846c:	4c07      	ldr	r4, [pc, #28]	; (40848c <_fstat_r+0x24>)
  40846e:	4605      	mov	r5, r0
  408470:	4611      	mov	r1, r2
  408472:	4618      	mov	r0, r3
  408474:	2300      	movs	r3, #0
  408476:	6023      	str	r3, [r4, #0]
  408478:	f7f9 fecf 	bl	40221a <_fstat>
  40847c:	1c43      	adds	r3, r0, #1
  40847e:	d000      	beq.n	408482 <_fstat_r+0x1a>
  408480:	bd38      	pop	{r3, r4, r5, pc}
  408482:	6823      	ldr	r3, [r4, #0]
  408484:	2b00      	cmp	r3, #0
  408486:	d0fb      	beq.n	408480 <_fstat_r+0x18>
  408488:	602b      	str	r3, [r5, #0]
  40848a:	bd38      	pop	{r3, r4, r5, pc}
  40848c:	20400fd4 	.word	0x20400fd4

00408490 <_isatty_r>:
  408490:	b538      	push	{r3, r4, r5, lr}
  408492:	4c07      	ldr	r4, [pc, #28]	; (4084b0 <_isatty_r+0x20>)
  408494:	2300      	movs	r3, #0
  408496:	4605      	mov	r5, r0
  408498:	4608      	mov	r0, r1
  40849a:	6023      	str	r3, [r4, #0]
  40849c:	f7f9 fec2 	bl	402224 <_isatty>
  4084a0:	1c43      	adds	r3, r0, #1
  4084a2:	d000      	beq.n	4084a6 <_isatty_r+0x16>
  4084a4:	bd38      	pop	{r3, r4, r5, pc}
  4084a6:	6823      	ldr	r3, [r4, #0]
  4084a8:	2b00      	cmp	r3, #0
  4084aa:	d0fb      	beq.n	4084a4 <_isatty_r+0x14>
  4084ac:	602b      	str	r3, [r5, #0]
  4084ae:	bd38      	pop	{r3, r4, r5, pc}
  4084b0:	20400fd4 	.word	0x20400fd4

004084b4 <_lseek_r>:
  4084b4:	b570      	push	{r4, r5, r6, lr}
  4084b6:	460d      	mov	r5, r1
  4084b8:	4c08      	ldr	r4, [pc, #32]	; (4084dc <_lseek_r+0x28>)
  4084ba:	4611      	mov	r1, r2
  4084bc:	4606      	mov	r6, r0
  4084be:	461a      	mov	r2, r3
  4084c0:	4628      	mov	r0, r5
  4084c2:	2300      	movs	r3, #0
  4084c4:	6023      	str	r3, [r4, #0]
  4084c6:	f7f9 feaf 	bl	402228 <_lseek>
  4084ca:	1c43      	adds	r3, r0, #1
  4084cc:	d000      	beq.n	4084d0 <_lseek_r+0x1c>
  4084ce:	bd70      	pop	{r4, r5, r6, pc}
  4084d0:	6823      	ldr	r3, [r4, #0]
  4084d2:	2b00      	cmp	r3, #0
  4084d4:	d0fb      	beq.n	4084ce <_lseek_r+0x1a>
  4084d6:	6033      	str	r3, [r6, #0]
  4084d8:	bd70      	pop	{r4, r5, r6, pc}
  4084da:	bf00      	nop
  4084dc:	20400fd4 	.word	0x20400fd4

004084e0 <_read_r>:
  4084e0:	b570      	push	{r4, r5, r6, lr}
  4084e2:	460d      	mov	r5, r1
  4084e4:	4c08      	ldr	r4, [pc, #32]	; (408508 <_read_r+0x28>)
  4084e6:	4611      	mov	r1, r2
  4084e8:	4606      	mov	r6, r0
  4084ea:	461a      	mov	r2, r3
  4084ec:	4628      	mov	r0, r5
  4084ee:	2300      	movs	r3, #0
  4084f0:	6023      	str	r3, [r4, #0]
  4084f2:	f7f8 fa19 	bl	400928 <_read>
  4084f6:	1c43      	adds	r3, r0, #1
  4084f8:	d000      	beq.n	4084fc <_read_r+0x1c>
  4084fa:	bd70      	pop	{r4, r5, r6, pc}
  4084fc:	6823      	ldr	r3, [r4, #0]
  4084fe:	2b00      	cmp	r3, #0
  408500:	d0fb      	beq.n	4084fa <_read_r+0x1a>
  408502:	6033      	str	r3, [r6, #0]
  408504:	bd70      	pop	{r4, r5, r6, pc}
  408506:	bf00      	nop
  408508:	20400fd4 	.word	0x20400fd4

0040850c <__aeabi_drsub>:
  40850c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  408510:	e002      	b.n	408518 <__adddf3>
  408512:	bf00      	nop

00408514 <__aeabi_dsub>:
  408514:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00408518 <__adddf3>:
  408518:	b530      	push	{r4, r5, lr}
  40851a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40851e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  408522:	ea94 0f05 	teq	r4, r5
  408526:	bf08      	it	eq
  408528:	ea90 0f02 	teqeq	r0, r2
  40852c:	bf1f      	itttt	ne
  40852e:	ea54 0c00 	orrsne.w	ip, r4, r0
  408532:	ea55 0c02 	orrsne.w	ip, r5, r2
  408536:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40853a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40853e:	f000 80e2 	beq.w	408706 <__adddf3+0x1ee>
  408542:	ea4f 5454 	mov.w	r4, r4, lsr #21
  408546:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40854a:	bfb8      	it	lt
  40854c:	426d      	neglt	r5, r5
  40854e:	dd0c      	ble.n	40856a <__adddf3+0x52>
  408550:	442c      	add	r4, r5
  408552:	ea80 0202 	eor.w	r2, r0, r2
  408556:	ea81 0303 	eor.w	r3, r1, r3
  40855a:	ea82 0000 	eor.w	r0, r2, r0
  40855e:	ea83 0101 	eor.w	r1, r3, r1
  408562:	ea80 0202 	eor.w	r2, r0, r2
  408566:	ea81 0303 	eor.w	r3, r1, r3
  40856a:	2d36      	cmp	r5, #54	; 0x36
  40856c:	bf88      	it	hi
  40856e:	bd30      	pophi	{r4, r5, pc}
  408570:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  408574:	ea4f 3101 	mov.w	r1, r1, lsl #12
  408578:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40857c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  408580:	d002      	beq.n	408588 <__adddf3+0x70>
  408582:	4240      	negs	r0, r0
  408584:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  408588:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40858c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  408590:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  408594:	d002      	beq.n	40859c <__adddf3+0x84>
  408596:	4252      	negs	r2, r2
  408598:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40859c:	ea94 0f05 	teq	r4, r5
  4085a0:	f000 80a7 	beq.w	4086f2 <__adddf3+0x1da>
  4085a4:	f1a4 0401 	sub.w	r4, r4, #1
  4085a8:	f1d5 0e20 	rsbs	lr, r5, #32
  4085ac:	db0d      	blt.n	4085ca <__adddf3+0xb2>
  4085ae:	fa02 fc0e 	lsl.w	ip, r2, lr
  4085b2:	fa22 f205 	lsr.w	r2, r2, r5
  4085b6:	1880      	adds	r0, r0, r2
  4085b8:	f141 0100 	adc.w	r1, r1, #0
  4085bc:	fa03 f20e 	lsl.w	r2, r3, lr
  4085c0:	1880      	adds	r0, r0, r2
  4085c2:	fa43 f305 	asr.w	r3, r3, r5
  4085c6:	4159      	adcs	r1, r3
  4085c8:	e00e      	b.n	4085e8 <__adddf3+0xd0>
  4085ca:	f1a5 0520 	sub.w	r5, r5, #32
  4085ce:	f10e 0e20 	add.w	lr, lr, #32
  4085d2:	2a01      	cmp	r2, #1
  4085d4:	fa03 fc0e 	lsl.w	ip, r3, lr
  4085d8:	bf28      	it	cs
  4085da:	f04c 0c02 	orrcs.w	ip, ip, #2
  4085de:	fa43 f305 	asr.w	r3, r3, r5
  4085e2:	18c0      	adds	r0, r0, r3
  4085e4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  4085e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4085ec:	d507      	bpl.n	4085fe <__adddf3+0xe6>
  4085ee:	f04f 0e00 	mov.w	lr, #0
  4085f2:	f1dc 0c00 	rsbs	ip, ip, #0
  4085f6:	eb7e 0000 	sbcs.w	r0, lr, r0
  4085fa:	eb6e 0101 	sbc.w	r1, lr, r1
  4085fe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  408602:	d31b      	bcc.n	40863c <__adddf3+0x124>
  408604:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  408608:	d30c      	bcc.n	408624 <__adddf3+0x10c>
  40860a:	0849      	lsrs	r1, r1, #1
  40860c:	ea5f 0030 	movs.w	r0, r0, rrx
  408610:	ea4f 0c3c 	mov.w	ip, ip, rrx
  408614:	f104 0401 	add.w	r4, r4, #1
  408618:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40861c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  408620:	f080 809a 	bcs.w	408758 <__adddf3+0x240>
  408624:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  408628:	bf08      	it	eq
  40862a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40862e:	f150 0000 	adcs.w	r0, r0, #0
  408632:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  408636:	ea41 0105 	orr.w	r1, r1, r5
  40863a:	bd30      	pop	{r4, r5, pc}
  40863c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  408640:	4140      	adcs	r0, r0
  408642:	eb41 0101 	adc.w	r1, r1, r1
  408646:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40864a:	f1a4 0401 	sub.w	r4, r4, #1
  40864e:	d1e9      	bne.n	408624 <__adddf3+0x10c>
  408650:	f091 0f00 	teq	r1, #0
  408654:	bf04      	itt	eq
  408656:	4601      	moveq	r1, r0
  408658:	2000      	moveq	r0, #0
  40865a:	fab1 f381 	clz	r3, r1
  40865e:	bf08      	it	eq
  408660:	3320      	addeq	r3, #32
  408662:	f1a3 030b 	sub.w	r3, r3, #11
  408666:	f1b3 0220 	subs.w	r2, r3, #32
  40866a:	da0c      	bge.n	408686 <__adddf3+0x16e>
  40866c:	320c      	adds	r2, #12
  40866e:	dd08      	ble.n	408682 <__adddf3+0x16a>
  408670:	f102 0c14 	add.w	ip, r2, #20
  408674:	f1c2 020c 	rsb	r2, r2, #12
  408678:	fa01 f00c 	lsl.w	r0, r1, ip
  40867c:	fa21 f102 	lsr.w	r1, r1, r2
  408680:	e00c      	b.n	40869c <__adddf3+0x184>
  408682:	f102 0214 	add.w	r2, r2, #20
  408686:	bfd8      	it	le
  408688:	f1c2 0c20 	rsble	ip, r2, #32
  40868c:	fa01 f102 	lsl.w	r1, r1, r2
  408690:	fa20 fc0c 	lsr.w	ip, r0, ip
  408694:	bfdc      	itt	le
  408696:	ea41 010c 	orrle.w	r1, r1, ip
  40869a:	4090      	lslle	r0, r2
  40869c:	1ae4      	subs	r4, r4, r3
  40869e:	bfa2      	ittt	ge
  4086a0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4086a4:	4329      	orrge	r1, r5
  4086a6:	bd30      	popge	{r4, r5, pc}
  4086a8:	ea6f 0404 	mvn.w	r4, r4
  4086ac:	3c1f      	subs	r4, #31
  4086ae:	da1c      	bge.n	4086ea <__adddf3+0x1d2>
  4086b0:	340c      	adds	r4, #12
  4086b2:	dc0e      	bgt.n	4086d2 <__adddf3+0x1ba>
  4086b4:	f104 0414 	add.w	r4, r4, #20
  4086b8:	f1c4 0220 	rsb	r2, r4, #32
  4086bc:	fa20 f004 	lsr.w	r0, r0, r4
  4086c0:	fa01 f302 	lsl.w	r3, r1, r2
  4086c4:	ea40 0003 	orr.w	r0, r0, r3
  4086c8:	fa21 f304 	lsr.w	r3, r1, r4
  4086cc:	ea45 0103 	orr.w	r1, r5, r3
  4086d0:	bd30      	pop	{r4, r5, pc}
  4086d2:	f1c4 040c 	rsb	r4, r4, #12
  4086d6:	f1c4 0220 	rsb	r2, r4, #32
  4086da:	fa20 f002 	lsr.w	r0, r0, r2
  4086de:	fa01 f304 	lsl.w	r3, r1, r4
  4086e2:	ea40 0003 	orr.w	r0, r0, r3
  4086e6:	4629      	mov	r1, r5
  4086e8:	bd30      	pop	{r4, r5, pc}
  4086ea:	fa21 f004 	lsr.w	r0, r1, r4
  4086ee:	4629      	mov	r1, r5
  4086f0:	bd30      	pop	{r4, r5, pc}
  4086f2:	f094 0f00 	teq	r4, #0
  4086f6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  4086fa:	bf06      	itte	eq
  4086fc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  408700:	3401      	addeq	r4, #1
  408702:	3d01      	subne	r5, #1
  408704:	e74e      	b.n	4085a4 <__adddf3+0x8c>
  408706:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40870a:	bf18      	it	ne
  40870c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  408710:	d029      	beq.n	408766 <__adddf3+0x24e>
  408712:	ea94 0f05 	teq	r4, r5
  408716:	bf08      	it	eq
  408718:	ea90 0f02 	teqeq	r0, r2
  40871c:	d005      	beq.n	40872a <__adddf3+0x212>
  40871e:	ea54 0c00 	orrs.w	ip, r4, r0
  408722:	bf04      	itt	eq
  408724:	4619      	moveq	r1, r3
  408726:	4610      	moveq	r0, r2
  408728:	bd30      	pop	{r4, r5, pc}
  40872a:	ea91 0f03 	teq	r1, r3
  40872e:	bf1e      	ittt	ne
  408730:	2100      	movne	r1, #0
  408732:	2000      	movne	r0, #0
  408734:	bd30      	popne	{r4, r5, pc}
  408736:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40873a:	d105      	bne.n	408748 <__adddf3+0x230>
  40873c:	0040      	lsls	r0, r0, #1
  40873e:	4149      	adcs	r1, r1
  408740:	bf28      	it	cs
  408742:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  408746:	bd30      	pop	{r4, r5, pc}
  408748:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40874c:	bf3c      	itt	cc
  40874e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  408752:	bd30      	popcc	{r4, r5, pc}
  408754:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  408758:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40875c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  408760:	f04f 0000 	mov.w	r0, #0
  408764:	bd30      	pop	{r4, r5, pc}
  408766:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40876a:	bf1a      	itte	ne
  40876c:	4619      	movne	r1, r3
  40876e:	4610      	movne	r0, r2
  408770:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  408774:	bf1c      	itt	ne
  408776:	460b      	movne	r3, r1
  408778:	4602      	movne	r2, r0
  40877a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40877e:	bf06      	itte	eq
  408780:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  408784:	ea91 0f03 	teqeq	r1, r3
  408788:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40878c:	bd30      	pop	{r4, r5, pc}
  40878e:	bf00      	nop

00408790 <__aeabi_ui2d>:
  408790:	f090 0f00 	teq	r0, #0
  408794:	bf04      	itt	eq
  408796:	2100      	moveq	r1, #0
  408798:	4770      	bxeq	lr
  40879a:	b530      	push	{r4, r5, lr}
  40879c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4087a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4087a4:	f04f 0500 	mov.w	r5, #0
  4087a8:	f04f 0100 	mov.w	r1, #0
  4087ac:	e750      	b.n	408650 <__adddf3+0x138>
  4087ae:	bf00      	nop

004087b0 <__aeabi_i2d>:
  4087b0:	f090 0f00 	teq	r0, #0
  4087b4:	bf04      	itt	eq
  4087b6:	2100      	moveq	r1, #0
  4087b8:	4770      	bxeq	lr
  4087ba:	b530      	push	{r4, r5, lr}
  4087bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4087c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4087c4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  4087c8:	bf48      	it	mi
  4087ca:	4240      	negmi	r0, r0
  4087cc:	f04f 0100 	mov.w	r1, #0
  4087d0:	e73e      	b.n	408650 <__adddf3+0x138>
  4087d2:	bf00      	nop

004087d4 <__aeabi_f2d>:
  4087d4:	0042      	lsls	r2, r0, #1
  4087d6:	ea4f 01e2 	mov.w	r1, r2, asr #3
  4087da:	ea4f 0131 	mov.w	r1, r1, rrx
  4087de:	ea4f 7002 	mov.w	r0, r2, lsl #28
  4087e2:	bf1f      	itttt	ne
  4087e4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  4087e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4087ec:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  4087f0:	4770      	bxne	lr
  4087f2:	f092 0f00 	teq	r2, #0
  4087f6:	bf14      	ite	ne
  4087f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4087fc:	4770      	bxeq	lr
  4087fe:	b530      	push	{r4, r5, lr}
  408800:	f44f 7460 	mov.w	r4, #896	; 0x380
  408804:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  408808:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40880c:	e720      	b.n	408650 <__adddf3+0x138>
  40880e:	bf00      	nop

00408810 <__aeabi_ul2d>:
  408810:	ea50 0201 	orrs.w	r2, r0, r1
  408814:	bf08      	it	eq
  408816:	4770      	bxeq	lr
  408818:	b530      	push	{r4, r5, lr}
  40881a:	f04f 0500 	mov.w	r5, #0
  40881e:	e00a      	b.n	408836 <__aeabi_l2d+0x16>

00408820 <__aeabi_l2d>:
  408820:	ea50 0201 	orrs.w	r2, r0, r1
  408824:	bf08      	it	eq
  408826:	4770      	bxeq	lr
  408828:	b530      	push	{r4, r5, lr}
  40882a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40882e:	d502      	bpl.n	408836 <__aeabi_l2d+0x16>
  408830:	4240      	negs	r0, r0
  408832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  408836:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40883a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40883e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  408842:	f43f aedc 	beq.w	4085fe <__adddf3+0xe6>
  408846:	f04f 0203 	mov.w	r2, #3
  40884a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40884e:	bf18      	it	ne
  408850:	3203      	addne	r2, #3
  408852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  408856:	bf18      	it	ne
  408858:	3203      	addne	r2, #3
  40885a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40885e:	f1c2 0320 	rsb	r3, r2, #32
  408862:	fa00 fc03 	lsl.w	ip, r0, r3
  408866:	fa20 f002 	lsr.w	r0, r0, r2
  40886a:	fa01 fe03 	lsl.w	lr, r1, r3
  40886e:	ea40 000e 	orr.w	r0, r0, lr
  408872:	fa21 f102 	lsr.w	r1, r1, r2
  408876:	4414      	add	r4, r2
  408878:	e6c1      	b.n	4085fe <__adddf3+0xe6>
  40887a:	bf00      	nop

0040887c <__aeabi_dmul>:
  40887c:	b570      	push	{r4, r5, r6, lr}
  40887e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  408882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  408886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40888a:	bf1d      	ittte	ne
  40888c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  408890:	ea94 0f0c 	teqne	r4, ip
  408894:	ea95 0f0c 	teqne	r5, ip
  408898:	f000 f8de 	bleq	408a58 <__aeabi_dmul+0x1dc>
  40889c:	442c      	add	r4, r5
  40889e:	ea81 0603 	eor.w	r6, r1, r3
  4088a2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4088a6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4088aa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4088ae:	bf18      	it	ne
  4088b0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4088b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4088b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4088bc:	d038      	beq.n	408930 <__aeabi_dmul+0xb4>
  4088be:	fba0 ce02 	umull	ip, lr, r0, r2
  4088c2:	f04f 0500 	mov.w	r5, #0
  4088c6:	fbe1 e502 	umlal	lr, r5, r1, r2
  4088ca:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  4088ce:	fbe0 e503 	umlal	lr, r5, r0, r3
  4088d2:	f04f 0600 	mov.w	r6, #0
  4088d6:	fbe1 5603 	umlal	r5, r6, r1, r3
  4088da:	f09c 0f00 	teq	ip, #0
  4088de:	bf18      	it	ne
  4088e0:	f04e 0e01 	orrne.w	lr, lr, #1
  4088e4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  4088e8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  4088ec:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  4088f0:	d204      	bcs.n	4088fc <__aeabi_dmul+0x80>
  4088f2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  4088f6:	416d      	adcs	r5, r5
  4088f8:	eb46 0606 	adc.w	r6, r6, r6
  4088fc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  408900:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  408904:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  408908:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40890c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  408910:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  408914:	bf88      	it	hi
  408916:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40891a:	d81e      	bhi.n	40895a <__aeabi_dmul+0xde>
  40891c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  408920:	bf08      	it	eq
  408922:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  408926:	f150 0000 	adcs.w	r0, r0, #0
  40892a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40892e:	bd70      	pop	{r4, r5, r6, pc}
  408930:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  408934:	ea46 0101 	orr.w	r1, r6, r1
  408938:	ea40 0002 	orr.w	r0, r0, r2
  40893c:	ea81 0103 	eor.w	r1, r1, r3
  408940:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  408944:	bfc2      	ittt	gt
  408946:	ebd4 050c 	rsbsgt	r5, r4, ip
  40894a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40894e:	bd70      	popgt	{r4, r5, r6, pc}
  408950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408954:	f04f 0e00 	mov.w	lr, #0
  408958:	3c01      	subs	r4, #1
  40895a:	f300 80ab 	bgt.w	408ab4 <__aeabi_dmul+0x238>
  40895e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  408962:	bfde      	ittt	le
  408964:	2000      	movle	r0, #0
  408966:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40896a:	bd70      	pople	{r4, r5, r6, pc}
  40896c:	f1c4 0400 	rsb	r4, r4, #0
  408970:	3c20      	subs	r4, #32
  408972:	da35      	bge.n	4089e0 <__aeabi_dmul+0x164>
  408974:	340c      	adds	r4, #12
  408976:	dc1b      	bgt.n	4089b0 <__aeabi_dmul+0x134>
  408978:	f104 0414 	add.w	r4, r4, #20
  40897c:	f1c4 0520 	rsb	r5, r4, #32
  408980:	fa00 f305 	lsl.w	r3, r0, r5
  408984:	fa20 f004 	lsr.w	r0, r0, r4
  408988:	fa01 f205 	lsl.w	r2, r1, r5
  40898c:	ea40 0002 	orr.w	r0, r0, r2
  408990:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  408994:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  408998:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40899c:	fa21 f604 	lsr.w	r6, r1, r4
  4089a0:	eb42 0106 	adc.w	r1, r2, r6
  4089a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4089a8:	bf08      	it	eq
  4089aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4089ae:	bd70      	pop	{r4, r5, r6, pc}
  4089b0:	f1c4 040c 	rsb	r4, r4, #12
  4089b4:	f1c4 0520 	rsb	r5, r4, #32
  4089b8:	fa00 f304 	lsl.w	r3, r0, r4
  4089bc:	fa20 f005 	lsr.w	r0, r0, r5
  4089c0:	fa01 f204 	lsl.w	r2, r1, r4
  4089c4:	ea40 0002 	orr.w	r0, r0, r2
  4089c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4089cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4089d0:	f141 0100 	adc.w	r1, r1, #0
  4089d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4089d8:	bf08      	it	eq
  4089da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4089de:	bd70      	pop	{r4, r5, r6, pc}
  4089e0:	f1c4 0520 	rsb	r5, r4, #32
  4089e4:	fa00 f205 	lsl.w	r2, r0, r5
  4089e8:	ea4e 0e02 	orr.w	lr, lr, r2
  4089ec:	fa20 f304 	lsr.w	r3, r0, r4
  4089f0:	fa01 f205 	lsl.w	r2, r1, r5
  4089f4:	ea43 0302 	orr.w	r3, r3, r2
  4089f8:	fa21 f004 	lsr.w	r0, r1, r4
  4089fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408a00:	fa21 f204 	lsr.w	r2, r1, r4
  408a04:	ea20 0002 	bic.w	r0, r0, r2
  408a08:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  408a0c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  408a10:	bf08      	it	eq
  408a12:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  408a16:	bd70      	pop	{r4, r5, r6, pc}
  408a18:	f094 0f00 	teq	r4, #0
  408a1c:	d10f      	bne.n	408a3e <__aeabi_dmul+0x1c2>
  408a1e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  408a22:	0040      	lsls	r0, r0, #1
  408a24:	eb41 0101 	adc.w	r1, r1, r1
  408a28:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408a2c:	bf08      	it	eq
  408a2e:	3c01      	subeq	r4, #1
  408a30:	d0f7      	beq.n	408a22 <__aeabi_dmul+0x1a6>
  408a32:	ea41 0106 	orr.w	r1, r1, r6
  408a36:	f095 0f00 	teq	r5, #0
  408a3a:	bf18      	it	ne
  408a3c:	4770      	bxne	lr
  408a3e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  408a42:	0052      	lsls	r2, r2, #1
  408a44:	eb43 0303 	adc.w	r3, r3, r3
  408a48:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  408a4c:	bf08      	it	eq
  408a4e:	3d01      	subeq	r5, #1
  408a50:	d0f7      	beq.n	408a42 <__aeabi_dmul+0x1c6>
  408a52:	ea43 0306 	orr.w	r3, r3, r6
  408a56:	4770      	bx	lr
  408a58:	ea94 0f0c 	teq	r4, ip
  408a5c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  408a60:	bf18      	it	ne
  408a62:	ea95 0f0c 	teqne	r5, ip
  408a66:	d00c      	beq.n	408a82 <__aeabi_dmul+0x206>
  408a68:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  408a6c:	bf18      	it	ne
  408a6e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  408a72:	d1d1      	bne.n	408a18 <__aeabi_dmul+0x19c>
  408a74:	ea81 0103 	eor.w	r1, r1, r3
  408a78:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408a7c:	f04f 0000 	mov.w	r0, #0
  408a80:	bd70      	pop	{r4, r5, r6, pc}
  408a82:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  408a86:	bf06      	itte	eq
  408a88:	4610      	moveq	r0, r2
  408a8a:	4619      	moveq	r1, r3
  408a8c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  408a90:	d019      	beq.n	408ac6 <__aeabi_dmul+0x24a>
  408a92:	ea94 0f0c 	teq	r4, ip
  408a96:	d102      	bne.n	408a9e <__aeabi_dmul+0x222>
  408a98:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  408a9c:	d113      	bne.n	408ac6 <__aeabi_dmul+0x24a>
  408a9e:	ea95 0f0c 	teq	r5, ip
  408aa2:	d105      	bne.n	408ab0 <__aeabi_dmul+0x234>
  408aa4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  408aa8:	bf1c      	itt	ne
  408aaa:	4610      	movne	r0, r2
  408aac:	4619      	movne	r1, r3
  408aae:	d10a      	bne.n	408ac6 <__aeabi_dmul+0x24a>
  408ab0:	ea81 0103 	eor.w	r1, r1, r3
  408ab4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408ab8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  408abc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  408ac0:	f04f 0000 	mov.w	r0, #0
  408ac4:	bd70      	pop	{r4, r5, r6, pc}
  408ac6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  408aca:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  408ace:	bd70      	pop	{r4, r5, r6, pc}

00408ad0 <__aeabi_ddiv>:
  408ad0:	b570      	push	{r4, r5, r6, lr}
  408ad2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  408ad6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  408ada:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  408ade:	bf1d      	ittte	ne
  408ae0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  408ae4:	ea94 0f0c 	teqne	r4, ip
  408ae8:	ea95 0f0c 	teqne	r5, ip
  408aec:	f000 f8a7 	bleq	408c3e <__aeabi_ddiv+0x16e>
  408af0:	eba4 0405 	sub.w	r4, r4, r5
  408af4:	ea81 0e03 	eor.w	lr, r1, r3
  408af8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  408afc:	ea4f 3101 	mov.w	r1, r1, lsl #12
  408b00:	f000 8088 	beq.w	408c14 <__aeabi_ddiv+0x144>
  408b04:	ea4f 3303 	mov.w	r3, r3, lsl #12
  408b08:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  408b0c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  408b10:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  408b14:	ea4f 2202 	mov.w	r2, r2, lsl #8
  408b18:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  408b1c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  408b20:	ea4f 2600 	mov.w	r6, r0, lsl #8
  408b24:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  408b28:	429d      	cmp	r5, r3
  408b2a:	bf08      	it	eq
  408b2c:	4296      	cmpeq	r6, r2
  408b2e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  408b32:	f504 7440 	add.w	r4, r4, #768	; 0x300
  408b36:	d202      	bcs.n	408b3e <__aeabi_ddiv+0x6e>
  408b38:	085b      	lsrs	r3, r3, #1
  408b3a:	ea4f 0232 	mov.w	r2, r2, rrx
  408b3e:	1ab6      	subs	r6, r6, r2
  408b40:	eb65 0503 	sbc.w	r5, r5, r3
  408b44:	085b      	lsrs	r3, r3, #1
  408b46:	ea4f 0232 	mov.w	r2, r2, rrx
  408b4a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  408b4e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  408b52:	ebb6 0e02 	subs.w	lr, r6, r2
  408b56:	eb75 0e03 	sbcs.w	lr, r5, r3
  408b5a:	bf22      	ittt	cs
  408b5c:	1ab6      	subcs	r6, r6, r2
  408b5e:	4675      	movcs	r5, lr
  408b60:	ea40 000c 	orrcs.w	r0, r0, ip
  408b64:	085b      	lsrs	r3, r3, #1
  408b66:	ea4f 0232 	mov.w	r2, r2, rrx
  408b6a:	ebb6 0e02 	subs.w	lr, r6, r2
  408b6e:	eb75 0e03 	sbcs.w	lr, r5, r3
  408b72:	bf22      	ittt	cs
  408b74:	1ab6      	subcs	r6, r6, r2
  408b76:	4675      	movcs	r5, lr
  408b78:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  408b7c:	085b      	lsrs	r3, r3, #1
  408b7e:	ea4f 0232 	mov.w	r2, r2, rrx
  408b82:	ebb6 0e02 	subs.w	lr, r6, r2
  408b86:	eb75 0e03 	sbcs.w	lr, r5, r3
  408b8a:	bf22      	ittt	cs
  408b8c:	1ab6      	subcs	r6, r6, r2
  408b8e:	4675      	movcs	r5, lr
  408b90:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  408b94:	085b      	lsrs	r3, r3, #1
  408b96:	ea4f 0232 	mov.w	r2, r2, rrx
  408b9a:	ebb6 0e02 	subs.w	lr, r6, r2
  408b9e:	eb75 0e03 	sbcs.w	lr, r5, r3
  408ba2:	bf22      	ittt	cs
  408ba4:	1ab6      	subcs	r6, r6, r2
  408ba6:	4675      	movcs	r5, lr
  408ba8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  408bac:	ea55 0e06 	orrs.w	lr, r5, r6
  408bb0:	d018      	beq.n	408be4 <__aeabi_ddiv+0x114>
  408bb2:	ea4f 1505 	mov.w	r5, r5, lsl #4
  408bb6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  408bba:	ea4f 1606 	mov.w	r6, r6, lsl #4
  408bbe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  408bc2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  408bc6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  408bca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  408bce:	d1c0      	bne.n	408b52 <__aeabi_ddiv+0x82>
  408bd0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408bd4:	d10b      	bne.n	408bee <__aeabi_ddiv+0x11e>
  408bd6:	ea41 0100 	orr.w	r1, r1, r0
  408bda:	f04f 0000 	mov.w	r0, #0
  408bde:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  408be2:	e7b6      	b.n	408b52 <__aeabi_ddiv+0x82>
  408be4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408be8:	bf04      	itt	eq
  408bea:	4301      	orreq	r1, r0
  408bec:	2000      	moveq	r0, #0
  408bee:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  408bf2:	bf88      	it	hi
  408bf4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  408bf8:	f63f aeaf 	bhi.w	40895a <__aeabi_dmul+0xde>
  408bfc:	ebb5 0c03 	subs.w	ip, r5, r3
  408c00:	bf04      	itt	eq
  408c02:	ebb6 0c02 	subseq.w	ip, r6, r2
  408c06:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  408c0a:	f150 0000 	adcs.w	r0, r0, #0
  408c0e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  408c12:	bd70      	pop	{r4, r5, r6, pc}
  408c14:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  408c18:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  408c1c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  408c20:	bfc2      	ittt	gt
  408c22:	ebd4 050c 	rsbsgt	r5, r4, ip
  408c26:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  408c2a:	bd70      	popgt	{r4, r5, r6, pc}
  408c2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408c30:	f04f 0e00 	mov.w	lr, #0
  408c34:	3c01      	subs	r4, #1
  408c36:	e690      	b.n	40895a <__aeabi_dmul+0xde>
  408c38:	ea45 0e06 	orr.w	lr, r5, r6
  408c3c:	e68d      	b.n	40895a <__aeabi_dmul+0xde>
  408c3e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  408c42:	ea94 0f0c 	teq	r4, ip
  408c46:	bf08      	it	eq
  408c48:	ea95 0f0c 	teqeq	r5, ip
  408c4c:	f43f af3b 	beq.w	408ac6 <__aeabi_dmul+0x24a>
  408c50:	ea94 0f0c 	teq	r4, ip
  408c54:	d10a      	bne.n	408c6c <__aeabi_ddiv+0x19c>
  408c56:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  408c5a:	f47f af34 	bne.w	408ac6 <__aeabi_dmul+0x24a>
  408c5e:	ea95 0f0c 	teq	r5, ip
  408c62:	f47f af25 	bne.w	408ab0 <__aeabi_dmul+0x234>
  408c66:	4610      	mov	r0, r2
  408c68:	4619      	mov	r1, r3
  408c6a:	e72c      	b.n	408ac6 <__aeabi_dmul+0x24a>
  408c6c:	ea95 0f0c 	teq	r5, ip
  408c70:	d106      	bne.n	408c80 <__aeabi_ddiv+0x1b0>
  408c72:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  408c76:	f43f aefd 	beq.w	408a74 <__aeabi_dmul+0x1f8>
  408c7a:	4610      	mov	r0, r2
  408c7c:	4619      	mov	r1, r3
  408c7e:	e722      	b.n	408ac6 <__aeabi_dmul+0x24a>
  408c80:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  408c84:	bf18      	it	ne
  408c86:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  408c8a:	f47f aec5 	bne.w	408a18 <__aeabi_dmul+0x19c>
  408c8e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  408c92:	f47f af0d 	bne.w	408ab0 <__aeabi_dmul+0x234>
  408c96:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  408c9a:	f47f aeeb 	bne.w	408a74 <__aeabi_dmul+0x1f8>
  408c9e:	e712      	b.n	408ac6 <__aeabi_dmul+0x24a>

00408ca0 <__gedf2>:
  408ca0:	f04f 3cff 	mov.w	ip, #4294967295
  408ca4:	e006      	b.n	408cb4 <__cmpdf2+0x4>
  408ca6:	bf00      	nop

00408ca8 <__ledf2>:
  408ca8:	f04f 0c01 	mov.w	ip, #1
  408cac:	e002      	b.n	408cb4 <__cmpdf2+0x4>
  408cae:	bf00      	nop

00408cb0 <__cmpdf2>:
  408cb0:	f04f 0c01 	mov.w	ip, #1
  408cb4:	f84d cd04 	str.w	ip, [sp, #-4]!
  408cb8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408cbc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408cc0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408cc4:	bf18      	it	ne
  408cc6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  408cca:	d01b      	beq.n	408d04 <__cmpdf2+0x54>
  408ccc:	b001      	add	sp, #4
  408cce:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  408cd2:	bf0c      	ite	eq
  408cd4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  408cd8:	ea91 0f03 	teqne	r1, r3
  408cdc:	bf02      	ittt	eq
  408cde:	ea90 0f02 	teqeq	r0, r2
  408ce2:	2000      	moveq	r0, #0
  408ce4:	4770      	bxeq	lr
  408ce6:	f110 0f00 	cmn.w	r0, #0
  408cea:	ea91 0f03 	teq	r1, r3
  408cee:	bf58      	it	pl
  408cf0:	4299      	cmppl	r1, r3
  408cf2:	bf08      	it	eq
  408cf4:	4290      	cmpeq	r0, r2
  408cf6:	bf2c      	ite	cs
  408cf8:	17d8      	asrcs	r0, r3, #31
  408cfa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  408cfe:	f040 0001 	orr.w	r0, r0, #1
  408d02:	4770      	bx	lr
  408d04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408d08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408d0c:	d102      	bne.n	408d14 <__cmpdf2+0x64>
  408d0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  408d12:	d107      	bne.n	408d24 <__cmpdf2+0x74>
  408d14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408d18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408d1c:	d1d6      	bne.n	408ccc <__cmpdf2+0x1c>
  408d1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  408d22:	d0d3      	beq.n	408ccc <__cmpdf2+0x1c>
  408d24:	f85d 0b04 	ldr.w	r0, [sp], #4
  408d28:	4770      	bx	lr
  408d2a:	bf00      	nop

00408d2c <__aeabi_cdrcmple>:
  408d2c:	4684      	mov	ip, r0
  408d2e:	4610      	mov	r0, r2
  408d30:	4662      	mov	r2, ip
  408d32:	468c      	mov	ip, r1
  408d34:	4619      	mov	r1, r3
  408d36:	4663      	mov	r3, ip
  408d38:	e000      	b.n	408d3c <__aeabi_cdcmpeq>
  408d3a:	bf00      	nop

00408d3c <__aeabi_cdcmpeq>:
  408d3c:	b501      	push	{r0, lr}
  408d3e:	f7ff ffb7 	bl	408cb0 <__cmpdf2>
  408d42:	2800      	cmp	r0, #0
  408d44:	bf48      	it	mi
  408d46:	f110 0f00 	cmnmi.w	r0, #0
  408d4a:	bd01      	pop	{r0, pc}

00408d4c <__aeabi_dcmpeq>:
  408d4c:	f84d ed08 	str.w	lr, [sp, #-8]!
  408d50:	f7ff fff4 	bl	408d3c <__aeabi_cdcmpeq>
  408d54:	bf0c      	ite	eq
  408d56:	2001      	moveq	r0, #1
  408d58:	2000      	movne	r0, #0
  408d5a:	f85d fb08 	ldr.w	pc, [sp], #8
  408d5e:	bf00      	nop

00408d60 <__aeabi_dcmplt>:
  408d60:	f84d ed08 	str.w	lr, [sp, #-8]!
  408d64:	f7ff ffea 	bl	408d3c <__aeabi_cdcmpeq>
  408d68:	bf34      	ite	cc
  408d6a:	2001      	movcc	r0, #1
  408d6c:	2000      	movcs	r0, #0
  408d6e:	f85d fb08 	ldr.w	pc, [sp], #8
  408d72:	bf00      	nop

00408d74 <__aeabi_dcmple>:
  408d74:	f84d ed08 	str.w	lr, [sp, #-8]!
  408d78:	f7ff ffe0 	bl	408d3c <__aeabi_cdcmpeq>
  408d7c:	bf94      	ite	ls
  408d7e:	2001      	movls	r0, #1
  408d80:	2000      	movhi	r0, #0
  408d82:	f85d fb08 	ldr.w	pc, [sp], #8
  408d86:	bf00      	nop

00408d88 <__aeabi_dcmpge>:
  408d88:	f84d ed08 	str.w	lr, [sp, #-8]!
  408d8c:	f7ff ffce 	bl	408d2c <__aeabi_cdrcmple>
  408d90:	bf94      	ite	ls
  408d92:	2001      	movls	r0, #1
  408d94:	2000      	movhi	r0, #0
  408d96:	f85d fb08 	ldr.w	pc, [sp], #8
  408d9a:	bf00      	nop

00408d9c <__aeabi_dcmpgt>:
  408d9c:	f84d ed08 	str.w	lr, [sp, #-8]!
  408da0:	f7ff ffc4 	bl	408d2c <__aeabi_cdrcmple>
  408da4:	bf34      	ite	cc
  408da6:	2001      	movcc	r0, #1
  408da8:	2000      	movcs	r0, #0
  408daa:	f85d fb08 	ldr.w	pc, [sp], #8
  408dae:	bf00      	nop

00408db0 <__aeabi_dcmpun>:
  408db0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408db4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408db8:	d102      	bne.n	408dc0 <__aeabi_dcmpun+0x10>
  408dba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  408dbe:	d10a      	bne.n	408dd6 <__aeabi_dcmpun+0x26>
  408dc0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408dc4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408dc8:	d102      	bne.n	408dd0 <__aeabi_dcmpun+0x20>
  408dca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  408dce:	d102      	bne.n	408dd6 <__aeabi_dcmpun+0x26>
  408dd0:	f04f 0000 	mov.w	r0, #0
  408dd4:	4770      	bx	lr
  408dd6:	f04f 0001 	mov.w	r0, #1
  408dda:	4770      	bx	lr

00408ddc <__aeabi_d2iz>:
  408ddc:	ea4f 0241 	mov.w	r2, r1, lsl #1
  408de0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  408de4:	d215      	bcs.n	408e12 <__aeabi_d2iz+0x36>
  408de6:	d511      	bpl.n	408e0c <__aeabi_d2iz+0x30>
  408de8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  408dec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  408df0:	d912      	bls.n	408e18 <__aeabi_d2iz+0x3c>
  408df2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  408df6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  408dfa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  408dfe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  408e02:	fa23 f002 	lsr.w	r0, r3, r2
  408e06:	bf18      	it	ne
  408e08:	4240      	negne	r0, r0
  408e0a:	4770      	bx	lr
  408e0c:	f04f 0000 	mov.w	r0, #0
  408e10:	4770      	bx	lr
  408e12:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  408e16:	d105      	bne.n	408e24 <__aeabi_d2iz+0x48>
  408e18:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  408e1c:	bf08      	it	eq
  408e1e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  408e22:	4770      	bx	lr
  408e24:	f04f 0000 	mov.w	r0, #0
  408e28:	4770      	bx	lr
  408e2a:	bf00      	nop

00408e2c <__aeabi_uldivmod>:
  408e2c:	b953      	cbnz	r3, 408e44 <__aeabi_uldivmod+0x18>
  408e2e:	b94a      	cbnz	r2, 408e44 <__aeabi_uldivmod+0x18>
  408e30:	2900      	cmp	r1, #0
  408e32:	bf08      	it	eq
  408e34:	2800      	cmpeq	r0, #0
  408e36:	bf1c      	itt	ne
  408e38:	f04f 31ff 	movne.w	r1, #4294967295
  408e3c:	f04f 30ff 	movne.w	r0, #4294967295
  408e40:	f000 b97a 	b.w	409138 <__aeabi_idiv0>
  408e44:	f1ad 0c08 	sub.w	ip, sp, #8
  408e48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  408e4c:	f000 f806 	bl	408e5c <__udivmoddi4>
  408e50:	f8dd e004 	ldr.w	lr, [sp, #4]
  408e54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  408e58:	b004      	add	sp, #16
  408e5a:	4770      	bx	lr

00408e5c <__udivmoddi4>:
  408e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408e60:	468c      	mov	ip, r1
  408e62:	460d      	mov	r5, r1
  408e64:	4604      	mov	r4, r0
  408e66:	9e08      	ldr	r6, [sp, #32]
  408e68:	2b00      	cmp	r3, #0
  408e6a:	d151      	bne.n	408f10 <__udivmoddi4+0xb4>
  408e6c:	428a      	cmp	r2, r1
  408e6e:	4617      	mov	r7, r2
  408e70:	d96d      	bls.n	408f4e <__udivmoddi4+0xf2>
  408e72:	fab2 fe82 	clz	lr, r2
  408e76:	f1be 0f00 	cmp.w	lr, #0
  408e7a:	d00b      	beq.n	408e94 <__udivmoddi4+0x38>
  408e7c:	f1ce 0c20 	rsb	ip, lr, #32
  408e80:	fa01 f50e 	lsl.w	r5, r1, lr
  408e84:	fa20 fc0c 	lsr.w	ip, r0, ip
  408e88:	fa02 f70e 	lsl.w	r7, r2, lr
  408e8c:	ea4c 0c05 	orr.w	ip, ip, r5
  408e90:	fa00 f40e 	lsl.w	r4, r0, lr
  408e94:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  408e98:	0c25      	lsrs	r5, r4, #16
  408e9a:	fbbc f8fa 	udiv	r8, ip, sl
  408e9e:	fa1f f987 	uxth.w	r9, r7
  408ea2:	fb0a cc18 	mls	ip, sl, r8, ip
  408ea6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  408eaa:	fb08 f309 	mul.w	r3, r8, r9
  408eae:	42ab      	cmp	r3, r5
  408eb0:	d90a      	bls.n	408ec8 <__udivmoddi4+0x6c>
  408eb2:	19ed      	adds	r5, r5, r7
  408eb4:	f108 32ff 	add.w	r2, r8, #4294967295
  408eb8:	f080 8123 	bcs.w	409102 <__udivmoddi4+0x2a6>
  408ebc:	42ab      	cmp	r3, r5
  408ebe:	f240 8120 	bls.w	409102 <__udivmoddi4+0x2a6>
  408ec2:	f1a8 0802 	sub.w	r8, r8, #2
  408ec6:	443d      	add	r5, r7
  408ec8:	1aed      	subs	r5, r5, r3
  408eca:	b2a4      	uxth	r4, r4
  408ecc:	fbb5 f0fa 	udiv	r0, r5, sl
  408ed0:	fb0a 5510 	mls	r5, sl, r0, r5
  408ed4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  408ed8:	fb00 f909 	mul.w	r9, r0, r9
  408edc:	45a1      	cmp	r9, r4
  408ede:	d909      	bls.n	408ef4 <__udivmoddi4+0x98>
  408ee0:	19e4      	adds	r4, r4, r7
  408ee2:	f100 33ff 	add.w	r3, r0, #4294967295
  408ee6:	f080 810a 	bcs.w	4090fe <__udivmoddi4+0x2a2>
  408eea:	45a1      	cmp	r9, r4
  408eec:	f240 8107 	bls.w	4090fe <__udivmoddi4+0x2a2>
  408ef0:	3802      	subs	r0, #2
  408ef2:	443c      	add	r4, r7
  408ef4:	eba4 0409 	sub.w	r4, r4, r9
  408ef8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  408efc:	2100      	movs	r1, #0
  408efe:	2e00      	cmp	r6, #0
  408f00:	d061      	beq.n	408fc6 <__udivmoddi4+0x16a>
  408f02:	fa24 f40e 	lsr.w	r4, r4, lr
  408f06:	2300      	movs	r3, #0
  408f08:	6034      	str	r4, [r6, #0]
  408f0a:	6073      	str	r3, [r6, #4]
  408f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408f10:	428b      	cmp	r3, r1
  408f12:	d907      	bls.n	408f24 <__udivmoddi4+0xc8>
  408f14:	2e00      	cmp	r6, #0
  408f16:	d054      	beq.n	408fc2 <__udivmoddi4+0x166>
  408f18:	2100      	movs	r1, #0
  408f1a:	e886 0021 	stmia.w	r6, {r0, r5}
  408f1e:	4608      	mov	r0, r1
  408f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408f24:	fab3 f183 	clz	r1, r3
  408f28:	2900      	cmp	r1, #0
  408f2a:	f040 808e 	bne.w	40904a <__udivmoddi4+0x1ee>
  408f2e:	42ab      	cmp	r3, r5
  408f30:	d302      	bcc.n	408f38 <__udivmoddi4+0xdc>
  408f32:	4282      	cmp	r2, r0
  408f34:	f200 80fa 	bhi.w	40912c <__udivmoddi4+0x2d0>
  408f38:	1a84      	subs	r4, r0, r2
  408f3a:	eb65 0503 	sbc.w	r5, r5, r3
  408f3e:	2001      	movs	r0, #1
  408f40:	46ac      	mov	ip, r5
  408f42:	2e00      	cmp	r6, #0
  408f44:	d03f      	beq.n	408fc6 <__udivmoddi4+0x16a>
  408f46:	e886 1010 	stmia.w	r6, {r4, ip}
  408f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408f4e:	b912      	cbnz	r2, 408f56 <__udivmoddi4+0xfa>
  408f50:	2701      	movs	r7, #1
  408f52:	fbb7 f7f2 	udiv	r7, r7, r2
  408f56:	fab7 fe87 	clz	lr, r7
  408f5a:	f1be 0f00 	cmp.w	lr, #0
  408f5e:	d134      	bne.n	408fca <__udivmoddi4+0x16e>
  408f60:	1beb      	subs	r3, r5, r7
  408f62:	0c3a      	lsrs	r2, r7, #16
  408f64:	fa1f fc87 	uxth.w	ip, r7
  408f68:	2101      	movs	r1, #1
  408f6a:	fbb3 f8f2 	udiv	r8, r3, r2
  408f6e:	0c25      	lsrs	r5, r4, #16
  408f70:	fb02 3318 	mls	r3, r2, r8, r3
  408f74:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  408f78:	fb0c f308 	mul.w	r3, ip, r8
  408f7c:	42ab      	cmp	r3, r5
  408f7e:	d907      	bls.n	408f90 <__udivmoddi4+0x134>
  408f80:	19ed      	adds	r5, r5, r7
  408f82:	f108 30ff 	add.w	r0, r8, #4294967295
  408f86:	d202      	bcs.n	408f8e <__udivmoddi4+0x132>
  408f88:	42ab      	cmp	r3, r5
  408f8a:	f200 80d1 	bhi.w	409130 <__udivmoddi4+0x2d4>
  408f8e:	4680      	mov	r8, r0
  408f90:	1aed      	subs	r5, r5, r3
  408f92:	b2a3      	uxth	r3, r4
  408f94:	fbb5 f0f2 	udiv	r0, r5, r2
  408f98:	fb02 5510 	mls	r5, r2, r0, r5
  408f9c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  408fa0:	fb0c fc00 	mul.w	ip, ip, r0
  408fa4:	45a4      	cmp	ip, r4
  408fa6:	d907      	bls.n	408fb8 <__udivmoddi4+0x15c>
  408fa8:	19e4      	adds	r4, r4, r7
  408faa:	f100 33ff 	add.w	r3, r0, #4294967295
  408fae:	d202      	bcs.n	408fb6 <__udivmoddi4+0x15a>
  408fb0:	45a4      	cmp	ip, r4
  408fb2:	f200 80b8 	bhi.w	409126 <__udivmoddi4+0x2ca>
  408fb6:	4618      	mov	r0, r3
  408fb8:	eba4 040c 	sub.w	r4, r4, ip
  408fbc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  408fc0:	e79d      	b.n	408efe <__udivmoddi4+0xa2>
  408fc2:	4631      	mov	r1, r6
  408fc4:	4630      	mov	r0, r6
  408fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408fca:	f1ce 0420 	rsb	r4, lr, #32
  408fce:	fa05 f30e 	lsl.w	r3, r5, lr
  408fd2:	fa07 f70e 	lsl.w	r7, r7, lr
  408fd6:	fa20 f804 	lsr.w	r8, r0, r4
  408fda:	0c3a      	lsrs	r2, r7, #16
  408fdc:	fa25 f404 	lsr.w	r4, r5, r4
  408fe0:	ea48 0803 	orr.w	r8, r8, r3
  408fe4:	fbb4 f1f2 	udiv	r1, r4, r2
  408fe8:	ea4f 4518 	mov.w	r5, r8, lsr #16
  408fec:	fb02 4411 	mls	r4, r2, r1, r4
  408ff0:	fa1f fc87 	uxth.w	ip, r7
  408ff4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  408ff8:	fb01 f30c 	mul.w	r3, r1, ip
  408ffc:	42ab      	cmp	r3, r5
  408ffe:	fa00 f40e 	lsl.w	r4, r0, lr
  409002:	d909      	bls.n	409018 <__udivmoddi4+0x1bc>
  409004:	19ed      	adds	r5, r5, r7
  409006:	f101 30ff 	add.w	r0, r1, #4294967295
  40900a:	f080 808a 	bcs.w	409122 <__udivmoddi4+0x2c6>
  40900e:	42ab      	cmp	r3, r5
  409010:	f240 8087 	bls.w	409122 <__udivmoddi4+0x2c6>
  409014:	3902      	subs	r1, #2
  409016:	443d      	add	r5, r7
  409018:	1aeb      	subs	r3, r5, r3
  40901a:	fa1f f588 	uxth.w	r5, r8
  40901e:	fbb3 f0f2 	udiv	r0, r3, r2
  409022:	fb02 3310 	mls	r3, r2, r0, r3
  409026:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40902a:	fb00 f30c 	mul.w	r3, r0, ip
  40902e:	42ab      	cmp	r3, r5
  409030:	d907      	bls.n	409042 <__udivmoddi4+0x1e6>
  409032:	19ed      	adds	r5, r5, r7
  409034:	f100 38ff 	add.w	r8, r0, #4294967295
  409038:	d26f      	bcs.n	40911a <__udivmoddi4+0x2be>
  40903a:	42ab      	cmp	r3, r5
  40903c:	d96d      	bls.n	40911a <__udivmoddi4+0x2be>
  40903e:	3802      	subs	r0, #2
  409040:	443d      	add	r5, r7
  409042:	1aeb      	subs	r3, r5, r3
  409044:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  409048:	e78f      	b.n	408f6a <__udivmoddi4+0x10e>
  40904a:	f1c1 0720 	rsb	r7, r1, #32
  40904e:	fa22 f807 	lsr.w	r8, r2, r7
  409052:	408b      	lsls	r3, r1
  409054:	fa05 f401 	lsl.w	r4, r5, r1
  409058:	ea48 0303 	orr.w	r3, r8, r3
  40905c:	fa20 fe07 	lsr.w	lr, r0, r7
  409060:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  409064:	40fd      	lsrs	r5, r7
  409066:	ea4e 0e04 	orr.w	lr, lr, r4
  40906a:	fbb5 f9fc 	udiv	r9, r5, ip
  40906e:	ea4f 441e 	mov.w	r4, lr, lsr #16
  409072:	fb0c 5519 	mls	r5, ip, r9, r5
  409076:	fa1f f883 	uxth.w	r8, r3
  40907a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40907e:	fb09 f408 	mul.w	r4, r9, r8
  409082:	42ac      	cmp	r4, r5
  409084:	fa02 f201 	lsl.w	r2, r2, r1
  409088:	fa00 fa01 	lsl.w	sl, r0, r1
  40908c:	d908      	bls.n	4090a0 <__udivmoddi4+0x244>
  40908e:	18ed      	adds	r5, r5, r3
  409090:	f109 30ff 	add.w	r0, r9, #4294967295
  409094:	d243      	bcs.n	40911e <__udivmoddi4+0x2c2>
  409096:	42ac      	cmp	r4, r5
  409098:	d941      	bls.n	40911e <__udivmoddi4+0x2c2>
  40909a:	f1a9 0902 	sub.w	r9, r9, #2
  40909e:	441d      	add	r5, r3
  4090a0:	1b2d      	subs	r5, r5, r4
  4090a2:	fa1f fe8e 	uxth.w	lr, lr
  4090a6:	fbb5 f0fc 	udiv	r0, r5, ip
  4090aa:	fb0c 5510 	mls	r5, ip, r0, r5
  4090ae:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  4090b2:	fb00 f808 	mul.w	r8, r0, r8
  4090b6:	45a0      	cmp	r8, r4
  4090b8:	d907      	bls.n	4090ca <__udivmoddi4+0x26e>
  4090ba:	18e4      	adds	r4, r4, r3
  4090bc:	f100 35ff 	add.w	r5, r0, #4294967295
  4090c0:	d229      	bcs.n	409116 <__udivmoddi4+0x2ba>
  4090c2:	45a0      	cmp	r8, r4
  4090c4:	d927      	bls.n	409116 <__udivmoddi4+0x2ba>
  4090c6:	3802      	subs	r0, #2
  4090c8:	441c      	add	r4, r3
  4090ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4090ce:	eba4 0408 	sub.w	r4, r4, r8
  4090d2:	fba0 8902 	umull	r8, r9, r0, r2
  4090d6:	454c      	cmp	r4, r9
  4090d8:	46c6      	mov	lr, r8
  4090da:	464d      	mov	r5, r9
  4090dc:	d315      	bcc.n	40910a <__udivmoddi4+0x2ae>
  4090de:	d012      	beq.n	409106 <__udivmoddi4+0x2aa>
  4090e0:	b156      	cbz	r6, 4090f8 <__udivmoddi4+0x29c>
  4090e2:	ebba 030e 	subs.w	r3, sl, lr
  4090e6:	eb64 0405 	sbc.w	r4, r4, r5
  4090ea:	fa04 f707 	lsl.w	r7, r4, r7
  4090ee:	40cb      	lsrs	r3, r1
  4090f0:	431f      	orrs	r7, r3
  4090f2:	40cc      	lsrs	r4, r1
  4090f4:	6037      	str	r7, [r6, #0]
  4090f6:	6074      	str	r4, [r6, #4]
  4090f8:	2100      	movs	r1, #0
  4090fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4090fe:	4618      	mov	r0, r3
  409100:	e6f8      	b.n	408ef4 <__udivmoddi4+0x98>
  409102:	4690      	mov	r8, r2
  409104:	e6e0      	b.n	408ec8 <__udivmoddi4+0x6c>
  409106:	45c2      	cmp	sl, r8
  409108:	d2ea      	bcs.n	4090e0 <__udivmoddi4+0x284>
  40910a:	ebb8 0e02 	subs.w	lr, r8, r2
  40910e:	eb69 0503 	sbc.w	r5, r9, r3
  409112:	3801      	subs	r0, #1
  409114:	e7e4      	b.n	4090e0 <__udivmoddi4+0x284>
  409116:	4628      	mov	r0, r5
  409118:	e7d7      	b.n	4090ca <__udivmoddi4+0x26e>
  40911a:	4640      	mov	r0, r8
  40911c:	e791      	b.n	409042 <__udivmoddi4+0x1e6>
  40911e:	4681      	mov	r9, r0
  409120:	e7be      	b.n	4090a0 <__udivmoddi4+0x244>
  409122:	4601      	mov	r1, r0
  409124:	e778      	b.n	409018 <__udivmoddi4+0x1bc>
  409126:	3802      	subs	r0, #2
  409128:	443c      	add	r4, r7
  40912a:	e745      	b.n	408fb8 <__udivmoddi4+0x15c>
  40912c:	4608      	mov	r0, r1
  40912e:	e708      	b.n	408f42 <__udivmoddi4+0xe6>
  409130:	f1a8 0802 	sub.w	r8, r8, #2
  409134:	443d      	add	r5, r7
  409136:	e72b      	b.n	408f90 <__udivmoddi4+0x134>

00409138 <__aeabi_idiv0>:
  409138:	4770      	bx	lr
  40913a:	bf00      	nop

0040913c <p_uc_charset10x14>:
	...
  409158:	ccff ccff 0000 0000 0000 0000 0000 0000     ................
  409168:	00f0 00f0 0000 0000 00f0 00f0 0000 0000     ................
  409178:	c00c c00c fcff fcff c00c c00c fcff fcff     ................
  409188:	c00c c00c 600c 701e 303f 3033 fcff fcff     .....`.p?030....
  409198:	3033 f033 e039 c018 0060 0cf0 3cf0 f060     303.9...`....<`.
  4091a8:	c003 000f 183c 3cf0 3cc0 1800 f03c f87f     ....<..<.<..<...
  4091b8:	1cc3 8cc7 cccf ecdc 7878 3030 fc00 cc00     ........xx00....
  4091c8:	0000 0000 0000 0044 00ec 00f8 0070 0000     ......D.....p...
	...
  4091e0:	c00f f03f 7878 1860 0cc0 0cc0 0000 0000     ..?.xx`.........
  4091f0:	0000 0000 0cc0 0cc0 1860 7878 f03f c00f     ........`.xx?...
  409200:	0000 0000 600c e00e c007 8003 f83f f83f     .....`......?.?.
  409210:	8003 c007 e00e 600c 0003 0003 0003 0003     .......`........
  409220:	f03f f03f 0003 0003 0003 0003 4400 ec00     ?.?..........D..
  409230:	f800 7000 0000 0000 0000 0000 0000 0000     ...p............
  409240:	0003 0003 0003 0003 0003 0003 0003 0003     ................
  409250:	0003 0003 1800 3c00 3c00 1800 0000 0000     .......<.<......
	...
  409268:	0000 0c00 3c00 f000 c003 000f 003c 00f0     .....<......<...
  409278:	00c0 0000 f03f f87f fce0 ccc1 8cc3 0cc7     ....?...........
  409288:	0cce 1cfc f87f f03f 0000 0000 0c30 0c70     ......?.....0.p.
  409298:	fcff fcff 0c00 0c00 0000 0000 0c30 1c70     ............0.p.
  4092a8:	3ce0 7cc0 ecc0 ccc1 8cc3 0ce7 0c7e 0c3c     .<.|........~.<.
  4092b8:	3030 3870 1ce0 0cc0 0cc0 0cc3 0cc3 1ce3     00p8............
  4092c8:	f87f f03c c003 c007 c00e c01c c038 c070     ..<.........8.p.
  4092d8:	fcff fcff c000 c000 30fc 38fc 1ccc 0ccc     .........0.8....
  4092e8:	0ccc 0ccc 0ccc 1cce f8c7 f0c3 f03f f87f     ............?...
  4092f8:	1ce3 0cc3 0cc3 0cc3 0cc3 9ce3 f871 f030     ............q.0.
  409308:	00c0 00c0 00c0 00c0 fcc3 fcc7 00ce 00dc     ................
  409318:	00f8 00f0 f03c f87f 9ce7 0cc3 0cc3 0cc3     ....<...........
  409328:	0cc3 9ce7 f87f f03c 003c 007e 0ce7 0cc3     ......<.<.~.....
  409338:	1cc3 38c3 70c3 e0e7 c07f 803f 0000 0000     ...8.p....?.....
  409348:	0000 6018 f03c f03c 6018 0000 0000 0000     ...`<.<..`......
  409358:	0000 0000 0000 4418 ec3c f83c 7018 0000     .......D<.<..p..
  409368:	0000 0000 0000 0003 8007 c00f e01c 7038     ..............8p
  409378:	3870 1ce0 0cc0 0000 c00c c00c c00c c00c     p8..............
  409388:	c00c c00c c00c c00c c00c c00c 0000 0cc0     ................
  409398:	1ce0 3870 7038 e01c c00f 8007 0003 0000     ..p88p..........
  4093a8:	0030 0070 00e0 00c0 ecc1 ecc3 00c3 00e6     0.p.............
  4093b8:	007e 003c f030 f871 9ce3 0cc3 fcc3 fcc3     ~.<.0.q.........
  4093c8:	0cc0 1ce0 f87f f03f fc3f fc7f c0e0 c0c0     ......?.?.......
  4093d8:	c0c0 c0c0 c0c0 c0e0 fc7f fc3f fcff fcff     ..........?.....
  4093e8:	0cc3 0cc3 0cc3 0cc3 0cc3 9ce7 f87f f03c     ..............<.
  4093f8:	f03f f87f 1ce0 0cc0 0cc0 0cc0 0cc0 1ce0     ?...............
  409408:	3870 3030 fcff fcff 0cc0 0cc0 0cc0 0cc0     p800............
  409418:	0cc0 1ce0 f87f f03f fcff fcff 0cc3 0cc3     ......?.........
  409428:	0cc3 0cc3 0cc3 0cc3 0cc0 0cc0 fcff fcff     ................
  409438:	00c3 00c3 00c3 00c3 00c3 00c3 00c0 00c0     ................
  409448:	f03f f87f 1ce0 0cc0 0cc0 0cc3 0cc3 1ce3     ?...............
  409458:	f873 f033 fcff fcff 0003 0003 0003 0003     s.3.............
  409468:	0003 0003 fcff fcff 0000 0000 0cc0 0cc0     ................
  409478:	fcff fcff 0cc0 0cc0 0000 0000 3000 3800     .............0.8
  409488:	1cc0 0cc0 0cc0 1cc0 f8ff f0ff 00c0 00c0     ................
  409498:	fcff fcff 8007 8007 c00f e01c 7038 3870     ............8pp8
  4094a8:	1ce0 0cc0 fcff fcff 0c00 0c00 0c00 0c00     ................
  4094b8:	0c00 0c00 0c00 0c00 fcff fcff 0070 0038     ............p.8.
  4094c8:	001f 001f 0038 0070 fcff fcff fcff fcff     ....8.p.........
  4094d8:	001c 000e 0007 8003 c001 e000 fcff fcff     ................
  4094e8:	f03f f87f 1ce0 0cc0 0cc0 0cc0 0cc0 1ce0     ?...............
  4094f8:	f87f f03f fcff fcff 00c3 00c3 00c3 00c3     ..?.............
  409508:	00c3 00e7 007e 003c f03f f87f 1ce0 0cc0     ....~.<.?.......
  409518:	ccc0 ecc0 7cc0 38e0 fc7f ec3f fcff fcff     .....|.8..?.....
  409528:	00c3 80c3 80c3 c0c3 c0c3 70e7 3c7e 1c3c     ...........p~<<.
  409538:	183c 1c7e 0ce7 0cc3 0cc3 0cc3 0cc3 9cc3     <.~.............
  409548:	f8e1 f060 00c0 00c0 00c0 00c0 fcff fcff     ..`.............
  409558:	00c0 00c0 00c0 00c0 f0ff f8ff 1c00 0c00     ................
  409568:	0c00 0c00 0c00 1c00 f8ff f0ff c0ff e0ff     ................
  409578:	7000 3800 1c00 1c00 3800 7000 e0ff c0ff     .p.8.....8.p....
  409588:	f0ff f8ff 1c00 3c00 f800 f800 3c00 1c00     .......<.....<..
  409598:	f8ff f0ff 3cf0 7cf8 e01c c00f 8007 8007     .....<.|........
  4095a8:	c00f e01c 7cf8 3cf0 00fc 00fe 0007 8003     .....|.<........
  4095b8:	fc01 fc01 8003 0007 00fe 00fc 3cc0 7cc0     .............<.|
  4095c8:	ecc0 ccc1 8cc3 0cc7 0cce 0cdc 0cf8 0cf0     ................
  4095d8:	0000 0000 fcff fcff 0cc0 0cc0 0cc0 0000     ................
  4095e8:	0000 0000 0030 0030 000c 000c 0003 0003     ....0.0.........
  4095f8:	c000 c000 3000 3000 0000 0000 0cc0 0cc0     .....0.0........
  409608:	0cc0 fcff fcff 0000 0000 0000 000c 001c     ................
  409618:	0038 0070 00e0 00e0 0070 0038 001c 000c     8.p.....p.8.....
  409628:	0c00 0c00 0c00 0c00 0c00 0c00 0c00 0c00     ................
  409638:	0c00 0c00 0000 0000 00c0 00e0 0070 0038     ............p.8.
  409648:	0018 0000 0000 0000 3000 7806 fc0e cc0c     .........0.x....
  409658:	cc0c cc0c cc0c cc0e fc07 f803 fcff fcff     ................
  409668:	0c03 0c03 0c03 0c03 0c03 9c03 f801 f000     ................
  409678:	f003 f807 1c0e 0c0c 0c0c 0c0c 0c0c 1c0e     ................
  409688:	3807 3003 f000 f801 9c03 0c03 0c03 0c03     .8.0............
  409698:	0c03 0c03 fcff fcff f003 f807 dc0e cc0c     ................
  4096a8:	cc0c cc0c cc0c dc0e d807 9003 0000 0003     ................
  4096b8:	fc3f fc7f 00e3 00e3 0070 0030 0000 0000     ?.......p.0.....
  4096c8:	1803 9c07 cc0f cc0c cc0c cc0c cc0c dc0c     ................
  4096d8:	f80f f007 fcff fcff 0003 0003 0003 0003     ................
  4096e8:	8003 fc01 fc00 0000 0000 0000 0000 0000     ................
  4096f8:	fc1b fc1b 0000 0000 0000 0000 0000 3000     ...............0
  409708:	3800 1c00 0c00 0c00 1c00 f8cf f0cf 0000     .8..............
  409718:	0000 fcff fcff e000 e001 f003 3807 1c0e     .............8..
  409728:	0c0c 0000 0000 0000 0cc0 0cc0 fcff fcff     ................
  409738:	0c00 0c00 0000 0000 fc0f fc0f 000e 0007     ................
  409748:	c003 c003 0007 000e fc0f fc0f fc0f fc0f     ................
  409758:	0003 0007 000e 000c 000c 000e fc07 fc03     ................
  409768:	f003 f807 1c0e 0c0c 0c0c 0c0c 0c0c 1c0e     ................
  409778:	f807 f003 fc0f fc0f c00c c00c c00c c00c     ................
  409788:	c00c c00f 8007 0003 0003 8007 c00f c00c     ................
  409798:	c00c c00c c00c c00c fc0f fc0f fc0f fc0f     ................
  4097a8:	8003 0007 000e 000c 000c 000e 0007 0003     ................
  4097b8:	1803 9c07 cc0f cc0c cc0c cc0c cc0c fc0c     ................
  4097c8:	780e 3006 0000 000c 000c f0ff f8ff 1c0c     .x.0............
  4097d8:	1c0c 380c 300c 0000 f00f f80f 1c00 0c00     ...8.0..........
  4097e8:	0c00 0c00 0c00 1c00 f80f f00f c00f e00f     ................
  4097f8:	7000 3800 1c00 1c00 3800 7000 e00f c00f     .p.8.....8.p....
  409808:	f00f f80f 1c00 1c00 f800 f800 1c00 1c00     ................
  409818:	f80f f00f 0c0c 1c0e 3807 f003 e001 e001     .........8......
  409828:	f003 3807 1c0e 0c0c 000c 000e 0c07 9c03     ...8............
  409838:	f801 f001 8003 0007 000e 000c 0c0c 1c0c     ................
  409848:	3c0c 7c0c ec0c cc0d 8c0f 0c0f 0c0e 0c0c     .<.|............
  409858:	0000 0003 8007 f03f f87c 1ce0 0cc0 0cc0     ......?.|.......
  409868:	0cc0 0000 0c03 0c03 fc3f fc7f 0ce3 0cc3     ........?.......
  409878:	0cc0 0ce0 0c70 0c30 0000 0cc0 0cc0 0cc0     ....p.0.........
  409888:	1ce0 f87c f03f 8007 0003 0000 00c0 00c0     ..|.?...........
  409898:	00c0 00c0 00c0 00c0 00c0 00c0 00c0 00c0     ................
  4098a8:	fcff fcff fcff fcff fcff fcff fcff fcff     ................
  4098b8:	fcff fcff 000d 0a05 004b 0000 1932 0000     ........K...2...
  4098c8:	008b 0e00 0008 3280 0205 030a 2003 0f02     .......2..... ..
  4098d8:	0a0f 0000 0000 1818 2020 0000 0000 0a00     ........  ......
  4098e8:	0000 0202 0000 1818 0000 0003 0000 0000     ................
  4098f8:	0002 1801 1e1e 1e1e 1e1e 1e1e 1e1e 1e1e     ................
  409908:	1e1e 0000 0000 0000 0000 0000 0000 0000     ................
  409918:	0000 0000 6425 3a20 6425 6420 2065 6425     ....%d :%d de %d
  409928:	6d20 6e69 002e 0000 4341 4241 554f 4120      min....ACABOU A
  409938:	4c20 5641 4741 4d45 5320 5545 4320 524f      LAVAGEM SEU COR
  409948:	4f4e 0000 0d0a 616d 5458 756f 6863 6420     NO....maXTouch d
  409958:	7461 2061 5355 5241 2054 7274 6e61 6d73     ata USART transm
  409968:	7469 6574 0a72 000d 724e 203a 3125 2c64     itter...Nr: %1d,
  409978:	5820 253a 6434 202c 3a59 3425 2c64 5320      X:%4d, Y:%4d, S
  409988:	6174 7574 3a73 7830 3225 2078 6f63 766e     tatus:0x%2x conv
  409998:	5820 253a 6433 5920 253a 6433 0d0a 0000      X:%3d Y:%3d....

004099a8 <_global_impure_ptr>:
  4099a8:	0148 2040 4e49 0046 6e69 0066 414e 004e     H.@ INF.inf.NAN.
  4099b8:	616e 006e 3130 3332 3534 3736 3938 4241     nan.0123456789AB
  4099c8:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  4099d8:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  4099e8:	296c 0000 0030 0000                         l)..0...

004099f0 <blanks.7223>:
  4099f0:	2020 2020 2020 2020 2020 2020 2020 2020                     

00409a00 <zeroes.7224>:
  409a00:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

00409a10 <blanks.7217>:
  409a10:	2020 2020 2020 2020 2020 2020 2020 2020                     

00409a20 <zeroes.7218>:
  409a20:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  409a30:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
  409a40:	0043 0000 4f50 4953 0058 0000 0000 0000     C...POSIX.......

00409a50 <__mprec_bigtens>:
  409a50:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  409a60:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  409a70:	bf3c 7f73 4fdd 7515                         <.s..O.u

00409a78 <__mprec_tens>:
  409a78:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  409a88:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  409a98:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  409aa8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  409ab8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  409ac8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  409ad8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  409ae8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  409af8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  409b08:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  409b18:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  409b28:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  409b38:	9db4 79d9 7843 44ea                         ...yCx.D

00409b40 <p05.6055>:
  409b40:	0005 0000 0019 0000 007d 0000               ........}...

00409b4c <_ctype_>:
  409b4c:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  409b5c:	2020 2020 2020 2020 2020 2020 2020 2020                     
  409b6c:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  409b7c:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  409b8c:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  409b9c:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  409bac:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  409bbc:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  409bcc:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00409c50 <_init>:
  409c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409c52:	bf00      	nop
  409c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
  409c56:	bc08      	pop	{r3}
  409c58:	469e      	mov	lr, r3
  409c5a:	4770      	bx	lr

00409c5c <__init_array_start>:
  409c5c:	00405955 	.word	0x00405955

00409c60 <__frame_dummy_init_array_entry>:
  409c60:	0040018d                                ..@.

00409c64 <_fini>:
  409c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409c66:	bf00      	nop
  409c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
  409c6a:	bc08      	pop	{r3}
  409c6c:	469e      	mov	lr, r3
  409c6e:	4770      	bx	lr

00409c70 <__fini_array_start>:
  409c70:	00400169 	.word	0x00400169

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <c_centrifuga>:
20400010:	6543 746e 6972 7566 6167 0000 0000 0000     Centrifuga......
	...
20400038:	04b0 0000 000a 0000 0000 0000 0000 0000     ................
20400048:	0000 0000                                   ....

2040004c <c_diario>:
2040004c:	6944 7261 6f69 0000 0000 0000 0000 0000     Diario..........
	...
2040006c:	000f 0000 0002 0000 04b0 0000 0008 0000     ................
2040007c:	0100 0000 0000 0000 0000 0000               ............

20400088 <c_enxague>:
20400088:	6e45 6178 7567 0065 0000 0000 0000 0000     Enxague.........
	...
204000a8:	000a 0000 0001 0000 0000 0000 0000 0000     ................
	...

204000c4 <c_pesado>:
204000c4:	6550 6173 6f64 0000 0000 0000 0000 0000     Pesado..........
	...
204000e4:	000a 0000 0003 0000 04b0 0000 000a 0000     ................
204000f4:	0101 0000 0000 0000 0000 0000               ............

20400100 <c_rapido>:
20400100:	6152 6970 6f64 0000 0000 0000 0000 0000     Rapido..........
	...
20400120:	0005 0000 0003 0000 0384 0000 0005 0000     ................
20400130:	0100 0000 0000 0000 0000 0000               ............

2040013c <last_state.11321>:
2040013c:	00ff 0000                                   ....

20400140 <selection>:
20400140:	0001 0000                                   ....

20400144 <_impure_ptr>:
20400144:	0148 2040                                   H.@ 

20400148 <impure_data>:
20400148:	0000 0000 0434 2040 049c 2040 0504 2040     ....4.@ ..@ ..@ 
	...
204001f0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20400200:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400570 <__malloc_av_>:
	...
20400578:	0570 2040 0570 2040 0578 2040 0578 2040     p.@ p.@ x.@ x.@ 
20400588:	0580 2040 0580 2040 0588 2040 0588 2040     ..@ ..@ ..@ ..@ 
20400598:	0590 2040 0590 2040 0598 2040 0598 2040     ..@ ..@ ..@ ..@ 
204005a8:	05a0 2040 05a0 2040 05a8 2040 05a8 2040     ..@ ..@ ..@ ..@ 
204005b8:	05b0 2040 05b0 2040 05b8 2040 05b8 2040     ..@ ..@ ..@ ..@ 
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 
20400848:	0840 2040 0840 2040 0848 2040 0848 2040     @.@ @.@ H.@ H.@ 
20400858:	0850 2040 0850 2040 0858 2040 0858 2040     P.@ P.@ X.@ X.@ 
20400868:	0860 2040 0860 2040 0868 2040 0868 2040     `.@ `.@ h.@ h.@ 
20400878:	0870 2040 0870 2040 0878 2040 0878 2040     p.@ p.@ x.@ x.@ 
20400888:	0880 2040 0880 2040 0888 2040 0888 2040     ..@ ..@ ..@ ..@ 
20400898:	0890 2040 0890 2040 0898 2040 0898 2040     ..@ ..@ ..@ ..@ 
204008a8:	08a0 2040 08a0 2040 08a8 2040 08a8 2040     ..@ ..@ ..@ ..@ 
204008b8:	08b0 2040 08b0 2040 08b8 2040 08b8 2040     ..@ ..@ ..@ ..@ 
204008c8:	08c0 2040 08c0 2040 08c8 2040 08c8 2040     ..@ ..@ ..@ ..@ 
204008d8:	08d0 2040 08d0 2040 08d8 2040 08d8 2040     ..@ ..@ ..@ ..@ 
204008e8:	08e0 2040 08e0 2040 08e8 2040 08e8 2040     ..@ ..@ ..@ ..@ 
204008f8:	08f0 2040 08f0 2040 08f8 2040 08f8 2040     ..@ ..@ ..@ ..@ 
20400908:	0900 2040 0900 2040 0908 2040 0908 2040     ..@ ..@ ..@ ..@ 
20400918:	0910 2040 0910 2040 0918 2040 0918 2040     ..@ ..@ ..@ ..@ 
20400928:	0920 2040 0920 2040 0928 2040 0928 2040      .@  .@ (.@ (.@ 
20400938:	0930 2040 0930 2040 0938 2040 0938 2040     0.@ 0.@ 8.@ 8.@ 
20400948:	0940 2040 0940 2040 0948 2040 0948 2040     @.@ @.@ H.@ H.@ 
20400958:	0950 2040 0950 2040 0958 2040 0958 2040     P.@ P.@ X.@ X.@ 
20400968:	0960 2040 0960 2040 0968 2040 0968 2040     `.@ `.@ h.@ h.@ 

20400978 <__malloc_sbrk_base>:
20400978:	ffff ffff                                   ....

2040097c <__malloc_trim_threshold>:
2040097c:	0000 0002                                   ....

20400980 <__atexit_recursive_mutex>:
20400980:	0fb0 2040                                   ..@ 

20400984 <__global_locale>:
20400984:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204009a4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204009c4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204009e4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400a04:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400a24:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400a44:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400a64:	8215 0040 7379 0040 0000 0000 9b4c 0040     ..@.ys@.....L.@.
20400a74:	992c 0040 99cc 0040 99cc 0040 99cc 0040     ,.@...@...@...@.
20400a84:	99cc 0040 99cc 0040 99cc 0040 99cc 0040     ..@...@...@...@.
20400a94:	99cc 0040 99cc 0040 ffff ffff ffff ffff     ..@...@.........
20400aa4:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
20400acc:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
