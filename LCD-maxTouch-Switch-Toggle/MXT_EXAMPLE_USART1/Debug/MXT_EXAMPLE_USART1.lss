
MXT_EXAMPLE_USART1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009cfc  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00409cfc  00409cfc  00019cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000af0  20400000  00409d04  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000004ec  20400af0  0040a7f4  00020af0  2**2
                  ALLOC
  4 .stack        00002004  20400fdc  0040ace0  00020af0  2**0
                  ALLOC
  5 .heap         00000200  20402fe0  0040cce4  00020af0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020af0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020b1e  2**0
                  CONTENTS, READONLY
  8 .debug_info   00020dcb  00000000  00000000  00020b77  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004638  00000000  00000000  00041942  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000990e  00000000  00000000  00045f7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000ed8  00000000  00000000  0004f888  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001048  00000000  00000000  00050760  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00023d97  00000000  00000000  000517a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00011866  00000000  00000000  0007553f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000958dd  00000000  00000000  00086da5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000036c4  00000000  00000000  0011c684  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	e0 2f 40 20 7d 1f 40 00 7b 1f 40 00 7b 1f 40 00     ./@ }.@.{.@.{.@.
  400010:	7b 1f 40 00 7b 1f 40 00 7b 1f 40 00 00 00 00 00     {.@.{.@.{.@.....
	...
  40002c:	7b 1f 40 00 7b 1f 40 00 00 00 00 00 7b 1f 40 00     {.@.{.@.....{.@.
  40003c:	7b 1f 40 00 7b 1f 40 00 7b 1f 40 00 7b 1f 40 00     {.@.{.@.{.@.{.@.
  40004c:	11 24 40 00 7b 1f 40 00 7b 1f 40 00 7b 1f 40 00     .$@.{.@.{.@.{.@.
  40005c:	7b 1f 40 00 7b 1f 40 00 00 00 00 00 75 16 40 00     {.@.{.@.....u.@.
  40006c:	89 16 40 00 9d 16 40 00 7b 1f 40 00 7b 1f 40 00     ..@...@.{.@.{.@.
  40007c:	7b 1f 40 00 b1 16 40 00 c5 16 40 00 7b 1f 40 00     {.@...@...@.{.@.
  40008c:	7b 1f 40 00 7b 1f 40 00 7b 1f 40 00 7b 1f 40 00     {.@.{.@.{.@.{.@.
  40009c:	7b 1f 40 00 7b 1f 40 00 7b 1f 40 00 7b 1f 40 00     {.@.{.@.{.@.{.@.
  4000ac:	7b 1f 40 00 7b 1f 40 00 7b 1f 40 00 7b 1f 40 00     {.@.{.@.{.@.{.@.
  4000bc:	7b 1f 40 00 7b 1f 40 00 7b 1f 40 00 7b 1f 40 00     {.@.{.@.{.@.{.@.
  4000cc:	7b 1f 40 00 7b 1f 40 00 7b 1f 40 00 7b 1f 40 00     {.@.{.@.{.@.{.@.
  4000dc:	7b 1f 40 00 7b 1f 40 00 7b 1f 40 00 7b 1f 40 00     {.@.{.@.{.@.{.@.
  4000ec:	7b 1f 40 00 7b 1f 40 00 7b 1f 40 00 7b 1f 40 00     {.@.{.@.{.@.{.@.
  4000fc:	7b 1f 40 00 7b 1f 40 00 7b 1f 40 00 7b 1f 40 00     {.@.{.@.{.@.{.@.
  40010c:	7b 1f 40 00 7b 1f 40 00 00 00 00 00 00 00 00 00     {.@.{.@.........
  40011c:	00 00 00 00 7b 1f 40 00 7b 1f 40 00 7b 1f 40 00     ....{.@.{.@.{.@.
  40012c:	7b 1f 40 00 7b 1f 40 00 7b 1f 40 00 7b 1f 40 00     {.@.{.@.{.@.{.@.
  40013c:	7b 1f 40 00 7b 1f 40 00 7b 1f 40 00 7b 1f 40 00     {.@.{.@.{.@.{.@.
  40014c:	7b 1f 40 00 7b 1f 40 00 7b 1f 40 00 7b 1f 40 00     {.@.{.@.{.@.{.@.
  40015c:	7b 1f 40 00 7b 1f 40 00 7b 1f 40 00                 {.@.{.@.{.@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400af0 	.word	0x20400af0
  400184:	00000000 	.word	0x00000000
  400188:	00409d04 	.word	0x00409d04

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00409d04 	.word	0x00409d04
  4001c8:	20400af4 	.word	0x20400af4
  4001cc:	00409d04 	.word	0x00409d04
  4001d0:	00000000 	.word	0x00000000

004001d4 <mxt_init_device>:
 * \param chgpin IOPORT pin instance attached to the maXTouch device's /CHG pin
 * \return Operation result status code
 */
status_code_t mxt_init_device(struct mxt_device *device,
		twihs_master_t interface, uint8_t chip_adr, uint32_t chgpin)
{
  4001d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4001d6:	b087      	sub	sp, #28
  4001d8:	4604      	mov	r4, r0
  4001da:	460e      	mov	r6, r1
  4001dc:	4617      	mov	r7, r2
	int8_t status;

	/* Set TWI interface, TWI address and CHG-pin of the maXTouch device. */
	device->interface = interface;
  4001de:	6081      	str	r1, [r0, #8]
	device->mxt_chip_adr = chip_adr;
  4001e0:	7302      	strb	r2, [r0, #12]
	device->chgpin = chgpin;
  4001e2:	6183      	str	r3, [r0, #24]
	device->handler = NULL;
  4001e4:	2500      	movs	r5, #0
  4001e6:	6105      	str	r5, [r0, #16]
			malloc(sizeof(struct mxt_info_object));
  4001e8:	2007      	movs	r0, #7
  4001ea:	4b9d      	ldr	r3, [pc, #628]	; (400460 <mxt_init_device+0x28c>)
  4001ec:	4798      	blx	r3
	device->info_object = (struct mxt_info_object *)
  4001ee:	6020      	str	r0, [r4, #0]
	twihs_package_t packet = {
  4001f0:	9501      	str	r5, [sp, #4]
  4001f2:	9505      	str	r5, [sp, #20]
  4001f4:	2302      	movs	r3, #2
  4001f6:	9302      	str	r3, [sp, #8]
  4001f8:	9003      	str	r0, [sp, #12]
  4001fa:	2307      	movs	r3, #7
  4001fc:	9304      	str	r3, [sp, #16]
  4001fe:	f88d 7014 	strb.w	r7, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  400202:	a901      	add	r1, sp, #4
  400204:	4630      	mov	r0, r6
  400206:	4b97      	ldr	r3, [pc, #604]	; (400464 <mxt_init_device+0x290>)
  400208:	4798      	blx	r3
  40020a:	1b40      	subs	r0, r0, r5
  40020c:	bf18      	it	ne
  40020e:	2001      	movne	r0, #1
  400210:	4240      	negs	r0, r0
	if ((status = mxt_read_id_block(device)) != STATUS_OK) {
  400212:	b108      	cbz	r0, 400218 <mxt_init_device+0x44>
	}

	device->multitouch_report_offset = status;

	return STATUS_OK;
}
  400214:	b007      	add	sp, #28
  400216:	bdf0      	pop	{r4, r5, r6, r7, pc}
			malloc(device->info_object->obj_count *
  400218:	6825      	ldr	r5, [r4, #0]
  40021a:	79a8      	ldrb	r0, [r5, #6]
  40021c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  400220:	0040      	lsls	r0, r0, #1
  400222:	4b8f      	ldr	r3, [pc, #572]	; (400460 <mxt_init_device+0x28c>)
  400224:	4798      	blx	r3
	device->object_list = (struct mxt_object *)
  400226:	6060      	str	r0, [r4, #4]
	twihs_package_t packet = {
  400228:	2300      	movs	r3, #0
  40022a:	9301      	str	r3, [sp, #4]
  40022c:	9304      	str	r3, [sp, #16]
  40022e:	9305      	str	r3, [sp, #20]
  400230:	2307      	movs	r3, #7
  400232:	f88d 3004 	strb.w	r3, [sp, #4]
  400236:	2302      	movs	r3, #2
  400238:	9302      	str	r3, [sp, #8]
  40023a:	9003      	str	r0, [sp, #12]
		.length       = device->info_object->obj_count *
  40023c:	79ab      	ldrb	r3, [r5, #6]
  40023e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  400242:	005b      	lsls	r3, r3, #1
	twihs_package_t packet = {
  400244:	9304      	str	r3, [sp, #16]
  400246:	7b23      	ldrb	r3, [r4, #12]
  400248:	f88d 3014 	strb.w	r3, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  40024c:	a901      	add	r1, sp, #4
  40024e:	68a0      	ldr	r0, [r4, #8]
  400250:	4b84      	ldr	r3, [pc, #528]	; (400464 <mxt_init_device+0x290>)
  400252:	4798      	blx	r3
  400254:	3000      	adds	r0, #0
  400256:	bf18      	it	ne
  400258:	2001      	movne	r0, #1
  40025a:	4240      	negs	r0, r0
	if (status != STATUS_OK) {
  40025c:	2800      	cmp	r0, #0
  40025e:	d1d9      	bne.n	400214 <mxt_init_device+0x40>
	uint8_t *id_pointer = (uint8_t *)device->info_object;
  400260:	6827      	ldr	r7, [r4, #0]
	uint8_t *objects_pointer = (uint8_t *)device->object_list;
  400262:	6860      	ldr	r0, [r4, #4]
			(device->info_object->obj_count *
  400264:	79bb      	ldrb	r3, [r7, #6]
  400266:	eb03 0643 	add.w	r6, r3, r3, lsl #1
  40026a:	0076      	lsls	r6, r6, #1
	crc_area_size = MXT_ID_BLOCK_SIZE +
  40026c:	3607      	adds	r6, #7
  40026e:	b2b6      	uxth	r6, r6
  400270:	463a      	mov	r2, r7
  400272:	3706      	adds	r7, #6
	uint32_t crc_tmp = 0;
  400274:	2100      	movs	r1, #0
		result ^= crcpoly;
  400276:	f8df c1f0 	ldr.w	ip, [pc, #496]	; 400468 <mxt_init_device+0x294>
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  40027a:	f892 e001 	ldrb.w	lr, [r2, #1]
  40027e:	7815      	ldrb	r5, [r2, #0]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  400280:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
  400284:	ea85 0141 	eor.w	r1, r5, r1, lsl #1
	if (result & 0x1000000) {
  400288:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
		result ^= crcpoly;
  40028c:	bf18      	it	ne
  40028e:	ea81 010c 	eorne.w	r1, r1, ip
  400292:	3202      	adds	r2, #2
	for (i = 0; i < MXT_ID_BLOCK_SIZE - 1; i += 2) {
  400294:	42ba      	cmp	r2, r7
  400296:	d1f0      	bne.n	40027a <mxt_init_device+0xa6>
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  400298:	7802      	ldrb	r2, [r0, #0]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  40029a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  40029e:	ea83 0241 	eor.w	r2, r3, r1, lsl #1
	if (result & 0x1000000) {
  4002a2:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
  4002a6:	d003      	beq.n	4002b0 <mxt_init_device+0xdc>
		result ^= crcpoly;
  4002a8:	f482 0200 	eor.w	r2, r2, #8388608	; 0x800000
  4002ac:	f082 021b 	eor.w	r2, r2, #27
	for (i = 1; i < (crc_area_size - MXT_ID_BLOCK_SIZE - 1); i += 2) {
  4002b0:	f1a6 0708 	sub.w	r7, r6, #8
  4002b4:	2f01      	cmp	r7, #1
  4002b6:	dd12      	ble.n	4002de <mxt_init_device+0x10a>
  4002b8:	2301      	movs	r3, #1
		result ^= crcpoly;
  4002ba:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 400468 <mxt_init_device+0x294>
		crc_tmp = mxt_crc_24(crc_tmp, objects_pointer[i],
  4002be:	18c1      	adds	r1, r0, r3
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  4002c0:	784d      	ldrb	r5, [r1, #1]
  4002c2:	5cc1      	ldrb	r1, [r0, r3]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  4002c4:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  4002c8:	ea81 0242 	eor.w	r2, r1, r2, lsl #1
	if (result & 0x1000000) {
  4002cc:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		result ^= crcpoly;
  4002d0:	bf18      	it	ne
  4002d2:	ea82 020e 	eorne.w	r2, r2, lr
	for (i = 1; i < (crc_area_size - MXT_ID_BLOCK_SIZE - 1); i += 2) {
  4002d6:	3302      	adds	r3, #2
  4002d8:	b29b      	uxth	r3, r3
  4002da:	42bb      	cmp	r3, r7
  4002dc:	dbef      	blt.n	4002be <mxt_init_device+0xea>
	crc_tmp = mxt_crc_24(crc_tmp,
  4002de:	4430      	add	r0, r6
	result = ((crc << 1u) ^ (uint32_t)data_word);
  4002e0:	f810 3c08 	ldrb.w	r3, [r0, #-8]
  4002e4:	ea83 0242 	eor.w	r2, r3, r2, lsl #1
	if (result & 0x1000000) {
  4002e8:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
  4002ec:	d003      	beq.n	4002f6 <mxt_init_device+0x122>
		result ^= crcpoly;
  4002ee:	f482 0200 	eor.w	r2, r2, #8388608	; 0x800000
  4002f2:	f082 021b 	eor.w	r2, r2, #27
	*crc = (crc_tmp & 0x00FFFFFF);
  4002f6:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	twihs_package_t packet = {
  4002fa:	2300      	movs	r3, #0
  4002fc:	9301      	str	r3, [sp, #4]
  4002fe:	9305      	str	r3, [sp, #20]
  400300:	f88d 6004 	strb.w	r6, [sp, #4]
  400304:	0a36      	lsrs	r6, r6, #8
  400306:	f88d 6005 	strb.w	r6, [sp, #5]
  40030a:	2302      	movs	r3, #2
  40030c:	9302      	str	r3, [sp, #8]
  40030e:	f8cd d00c 	str.w	sp, [sp, #12]
  400312:	2303      	movs	r3, #3
  400314:	9304      	str	r3, [sp, #16]
  400316:	7b23      	ldrb	r3, [r4, #12]
  400318:	f88d 3014 	strb.w	r3, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  40031c:	a901      	add	r1, sp, #4
  40031e:	68a0      	ldr	r0, [r4, #8]
  400320:	4b50      	ldr	r3, [pc, #320]	; (400464 <mxt_init_device+0x290>)
  400322:	4798      	blx	r3
  400324:	b328      	cbz	r0, 400372 <mxt_init_device+0x19e>
		return ERR_IO_ERROR;
  400326:	f04f 33ff 	mov.w	r3, #4294967295
	if (crc_calculated != crc_read) {
  40032a:	42ab      	cmp	r3, r5
  40032c:	f040 808b 	bne.w	400446 <mxt_init_device+0x272>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  400330:	6825      	ldr	r5, [r4, #0]
  400332:	79a8      	ldrb	r0, [r5, #6]
  400334:	b198      	cbz	r0, 40035e <mxt_init_device+0x18a>
  400336:	2300      	movs	r3, #0
  400338:	3301      	adds	r3, #1
  40033a:	b2da      	uxtb	r2, r3
  40033c:	4290      	cmp	r0, r2
  40033e:	d8fb      	bhi.n	400338 <mxt_init_device+0x164>
		tot_report_ids += (device->object_list[i].num_report_ids);
  400340:	6862      	ldr	r2, [r4, #4]
  400342:	1e43      	subs	r3, r0, #1
  400344:	b2db      	uxtb	r3, r3
  400346:	3301      	adds	r3, #1
  400348:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40034c:	eb02 0143 	add.w	r1, r2, r3, lsl #1
  400350:	2000      	movs	r0, #0
  400352:	7953      	ldrb	r3, [r2, #5]
  400354:	4418      	add	r0, r3
  400356:	b2c0      	uxtb	r0, r0
  400358:	3206      	adds	r2, #6
	for (i = 0; i < device->info_object->obj_count; ++i) {
  40035a:	4291      	cmp	r1, r2
  40035c:	d1f9      	bne.n	400352 <mxt_init_device+0x17e>
			malloc(sizeof(struct mxt_report_id_map) *
  40035e:	0040      	lsls	r0, r0, #1
  400360:	4b3f      	ldr	r3, [pc, #252]	; (400460 <mxt_init_device+0x28c>)
  400362:	4798      	blx	r3
	device->report_id_map = (struct mxt_report_id_map *)
  400364:	6160      	str	r0, [r4, #20]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  400366:	79ab      	ldrb	r3, [r5, #6]
  400368:	b173      	cbz	r3, 400388 <mxt_init_device+0x1b4>
  40036a:	2700      	movs	r7, #0
  40036c:	2601      	movs	r6, #1
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  40036e:	46be      	mov	lr, r7
  400370:	e037      	b.n	4003e2 <mxt_init_device+0x20e>
		return ((uint32_t)crc[2] << 16) | ((uint16_t)crc[1] << 8) | crc[0];
  400372:	f89d 2002 	ldrb.w	r2, [sp, #2]
  400376:	f89d 3000 	ldrb.w	r3, [sp]
  40037a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40037e:	f89d 2001 	ldrb.w	r2, [sp, #1]
  400382:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400386:	e7d0      	b.n	40032a <mxt_init_device+0x156>
		return ERR_BAD_DATA;
  400388:	f06f 0003 	mvn.w	r0, #3
  40038c:	e742      	b.n	400214 <mxt_init_device+0x40>
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  40038e:	3001      	adds	r0, #1
  400390:	b2c0      	uxtb	r0, r0
  400392:	6862      	ldr	r2, [r4, #4]
  400394:	1953      	adds	r3, r2, r5
  400396:	7919      	ldrb	r1, [r3, #4]
  400398:	4281      	cmp	r1, r0
  40039a:	d31c      	bcc.n	4003d6 <mxt_init_device+0x202>
			if (device->object_list[i].num_report_ids != 0) {
  40039c:	795b      	ldrb	r3, [r3, #5]
  40039e:	2b00      	cmp	r3, #0
  4003a0:	d0f5      	beq.n	40038e <mxt_init_device+0x1ba>
				for (k = 0; k < device->object_list[i].num_report_ids; ++k) {
  4003a2:	6862      	ldr	r2, [r4, #4]
  4003a4:	442a      	add	r2, r5
  4003a6:	7953      	ldrb	r3, [r2, #5]
  4003a8:	2b00      	cmp	r3, #0
  4003aa:	d0f0      	beq.n	40038e <mxt_init_device+0x1ba>
  4003ac:	4633      	mov	r3, r6
							device->object_list[i].type;
  4003ae:	7811      	ldrb	r1, [r2, #0]
					device->report_id_map[id_index].object_type =
  4003b0:	6962      	ldr	r2, [r4, #20]
  4003b2:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
					device->report_id_map[id_index].instance = j;
  4003b6:	6962      	ldr	r2, [r4, #20]
  4003b8:	eb02 0243 	add.w	r2, r2, r3, lsl #1
  4003bc:	7050      	strb	r0, [r2, #1]
					id_index++;
  4003be:	3301      	adds	r3, #1
  4003c0:	b2db      	uxtb	r3, r3
				for (k = 0; k < device->object_list[i].num_report_ids; ++k) {
  4003c2:	6862      	ldr	r2, [r4, #4]
  4003c4:	442a      	add	r2, r5
  4003c6:	1b99      	subs	r1, r3, r6
  4003c8:	f892 c005 	ldrb.w	ip, [r2, #5]
  4003cc:	b2c9      	uxtb	r1, r1
  4003ce:	458c      	cmp	ip, r1
  4003d0:	d8ed      	bhi.n	4003ae <mxt_init_device+0x1da>
					id_index++;
  4003d2:	461e      	mov	r6, r3
  4003d4:	e7db      	b.n	40038e <mxt_init_device+0x1ba>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4003d6:	3701      	adds	r7, #1
  4003d8:	b2ff      	uxtb	r7, r7
  4003da:	6823      	ldr	r3, [r4, #0]
  4003dc:	799b      	ldrb	r3, [r3, #6]
  4003de:	429f      	cmp	r7, r3
  4003e0:	d207      	bcs.n	4003f2 <mxt_init_device+0x21e>
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  4003e2:	eb07 0347 	add.w	r3, r7, r7, lsl #1
  4003e6:	005a      	lsls	r2, r3, #1
  4003e8:	4615      	mov	r5, r2
  4003ea:	6863      	ldr	r3, [r4, #4]
  4003ec:	4413      	add	r3, r2
  4003ee:	4670      	mov	r0, lr
  4003f0:	e7d4      	b.n	40039c <mxt_init_device+0x1c8>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4003f2:	b35b      	cbz	r3, 40044c <mxt_init_device+0x278>
  4003f4:	4610      	mov	r0, r2
  4003f6:	3b01      	subs	r3, #1
  4003f8:	b2db      	uxtb	r3, r3
  4003fa:	3301      	adds	r3, #1
  4003fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  400400:	eb02 0243 	add.w	r2, r2, r3, lsl #1
  400404:	2100      	movs	r1, #0
		tot_report_ids += (device->object_list[i].num_report_ids);
  400406:	7943      	ldrb	r3, [r0, #5]
  400408:	4419      	add	r1, r3
  40040a:	b2c9      	uxtb	r1, r1
  40040c:	3006      	adds	r0, #6
	for (i = 0; i < device->info_object->obj_count; ++i) {
  40040e:	4282      	cmp	r2, r0
  400410:	d1f9      	bne.n	400406 <mxt_init_device+0x232>
	for (i = 0; i < tot_rpt_id; ++i) {
  400412:	b1f1      	cbz	r1, 400452 <mxt_init_device+0x27e>
		if (device->report_id_map[i].object_type == object_type) {
  400414:	6962      	ldr	r2, [r4, #20]
  400416:	7813      	ldrb	r3, [r2, #0]
  400418:	2b09      	cmp	r3, #9
  40041a:	d00f      	beq.n	40043c <mxt_init_device+0x268>
  40041c:	2300      	movs	r3, #0
	for (i = 0; i < tot_rpt_id; ++i) {
  40041e:	3301      	adds	r3, #1
  400420:	b2db      	uxtb	r3, r3
  400422:	428b      	cmp	r3, r1
  400424:	d00c      	beq.n	400440 <mxt_init_device+0x26c>
		if (device->report_id_map[i].object_type == object_type) {
  400426:	f812 0f02 	ldrb.w	r0, [r2, #2]!
  40042a:	2809      	cmp	r0, #9
  40042c:	d1f7      	bne.n	40041e <mxt_init_device+0x24a>
			return i;
  40042e:	b25b      	sxtb	r3, r3
	if (status == -1) {
  400430:	f1b3 3fff 	cmp.w	r3, #4294967295
  400434:	d010      	beq.n	400458 <mxt_init_device+0x284>
	device->multitouch_report_offset = status;
  400436:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
  400438:	2000      	movs	r0, #0
  40043a:	e6eb      	b.n	400214 <mxt_init_device+0x40>
		if (device->report_id_map[i].object_type == object_type) {
  40043c:	2300      	movs	r3, #0
  40043e:	e7f6      	b.n	40042e <mxt_init_device+0x25a>
		return ERR_BAD_DATA;
  400440:	f06f 0003 	mvn.w	r0, #3
  400444:	e6e6      	b.n	400214 <mxt_init_device+0x40>
		return ERR_BAD_DATA;
  400446:	f06f 0003 	mvn.w	r0, #3
  40044a:	e6e3      	b.n	400214 <mxt_init_device+0x40>
		return ERR_BAD_DATA;
  40044c:	f06f 0003 	mvn.w	r0, #3
  400450:	e6e0      	b.n	400214 <mxt_init_device+0x40>
  400452:	f06f 0003 	mvn.w	r0, #3
  400456:	e6dd      	b.n	400214 <mxt_init_device+0x40>
  400458:	f06f 0003 	mvn.w	r0, #3
  40045c:	e6da      	b.n	400214 <mxt_init_device+0x40>
  40045e:	bf00      	nop
  400460:	00402cfd 	.word	0x00402cfd
  400464:	00401cf9 	.word	0x00401cf9
  400468:	0080001b 	.word	0x0080001b

0040046c <mxt_get_object_address>:
uint16_t mxt_get_object_address(struct mxt_device *device, uint8_t object_id,
		uint8_t instance)
{
	uint8_t i;

	for (i = 0; i < device->info_object->obj_count; i++) {
  40046c:	6803      	ldr	r3, [r0, #0]
  40046e:	799a      	ldrb	r2, [r3, #6]
  400470:	b1d2      	cbz	r2, 4004a8 <mxt_get_object_address+0x3c>
{
  400472:	b410      	push	{r4}
		if (object_id == device->object_list[i].type) {
  400474:	6844      	ldr	r4, [r0, #4]
  400476:	7823      	ldrb	r3, [r4, #0]
  400478:	428b      	cmp	r3, r1
  40047a:	d00e      	beq.n	40049a <mxt_get_object_address+0x2e>
  40047c:	1da3      	adds	r3, r4, #6
  40047e:	3a01      	subs	r2, #1
  400480:	b2d2      	uxtb	r2, r2
  400482:	3201      	adds	r2, #1
  400484:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  400488:	eb04 0242 	add.w	r2, r4, r2, lsl #1
	for (i = 0; i < device->info_object->obj_count; i++) {
  40048c:	4293      	cmp	r3, r2
  40048e:	d009      	beq.n	4004a4 <mxt_get_object_address+0x38>
		if (object_id == device->object_list[i].type) {
  400490:	461c      	mov	r4, r3
  400492:	f813 0b06 	ldrb.w	r0, [r3], #6
  400496:	4288      	cmp	r0, r1
  400498:	d1f8      	bne.n	40048c <mxt_get_object_address+0x20>
			return device->object_list[i].start_address;
  40049a:	f8b4 0001 	ldrh.w	r0, [r4, #1]
		}
	}

	return 0;
}
  40049e:	f85d 4b04 	ldr.w	r4, [sp], #4
  4004a2:	4770      	bx	lr
	return 0;
  4004a4:	2000      	movs	r0, #0
  4004a6:	e7fa      	b.n	40049e <mxt_get_object_address+0x32>
  4004a8:	2000      	movs	r0, #0
  4004aa:	4770      	bx	lr

004004ac <mxt_write_config_object>:
 * \param *obj_data Pointer to memory buffer containing object data
 * \result Operation result status code
 */
status_code_t mxt_write_config_object(struct mxt_device *device,
		mxt_memory_adr memory_adr, void *obj_data)
{
  4004ac:	b530      	push	{r4, r5, lr}
  4004ae:	b087      	sub	sp, #28
	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  4004b0:	2300      	movs	r3, #0
  4004b2:	9301      	str	r3, [sp, #4]
  4004b4:	9304      	str	r3, [sp, #16]
  4004b6:	9305      	str	r3, [sp, #20]
  4004b8:	f88d 1004 	strb.w	r1, [sp, #4]
  4004bc:	0a0b      	lsrs	r3, r1, #8
  4004be:	f88d 3005 	strb.w	r3, [sp, #5]
  4004c2:	2302      	movs	r3, #2
  4004c4:	9302      	str	r3, [sp, #8]
  4004c6:	9203      	str	r2, [sp, #12]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4004c8:	6803      	ldr	r3, [r0, #0]
  4004ca:	799a      	ldrb	r2, [r3, #6]
  4004cc:	b1ba      	cbz	r2, 4004fe <mxt_write_config_object+0x52>
		if (device->object_list[i].start_address == mem_adr) {
  4004ce:	6844      	ldr	r4, [r0, #4]
  4004d0:	f8b4 3001 	ldrh.w	r3, [r4, #1]
  4004d4:	428b      	cmp	r3, r1
  4004d6:	d00f      	beq.n	4004f8 <mxt_write_config_object+0x4c>
  4004d8:	1da3      	adds	r3, r4, #6
  4004da:	3a01      	subs	r2, #1
  4004dc:	b2d2      	uxtb	r2, r2
  4004de:	3201      	adds	r2, #1
  4004e0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  4004e4:	eb04 0242 	add.w	r2, r4, r2, lsl #1
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4004e8:	4293      	cmp	r3, r2
  4004ea:	d016      	beq.n	40051a <mxt_write_config_object+0x6e>
		if (device->object_list[i].start_address == mem_adr) {
  4004ec:	461c      	mov	r4, r3
  4004ee:	3306      	adds	r3, #6
  4004f0:	f8b4 5001 	ldrh.w	r5, [r4, #1]
  4004f4:	428d      	cmp	r5, r1
  4004f6:	d1f7      	bne.n	4004e8 <mxt_write_config_object+0x3c>
			return (device->object_list[i].size + 1);
  4004f8:	78e2      	ldrb	r2, [r4, #3]
  4004fa:	3201      	adds	r2, #1
  4004fc:	b2d2      	uxtb	r2, r2
		.addr[0]      = memory_adr,
		.addr[1]      = memory_adr >> 8,
		.addr_length  = sizeof(mxt_memory_adr),
		.chip         = device->mxt_chip_adr,
		.buffer       = obj_data,
		.length       = mxt_get_object_size(device, memory_adr)
  4004fe:	9204      	str	r2, [sp, #16]
	twihs_package_t packet = {
  400500:	7b03      	ldrb	r3, [r0, #12]
  400502:	f88d 3014 	strb.w	r3, [sp, #20]
	};

	if (twihs_master_write(device->interface, &packet) != STATUS_OK) {
  400506:	a901      	add	r1, sp, #4
  400508:	6880      	ldr	r0, [r0, #8]
  40050a:	4b05      	ldr	r3, [pc, #20]	; (400520 <mxt_write_config_object+0x74>)
  40050c:	4798      	blx	r3
  40050e:	3000      	adds	r0, #0
  400510:	bf18      	it	ne
  400512:	2001      	movne	r0, #1
		return ERR_IO_ERROR;
	} else {
		return STATUS_OK;
	}

}
  400514:	4240      	negs	r0, r0
  400516:	b007      	add	sp, #28
  400518:	bd30      	pop	{r4, r5, pc}
	return 0;
  40051a:	2200      	movs	r2, #0
  40051c:	e7ef      	b.n	4004fe <mxt_write_config_object+0x52>
  40051e:	bf00      	nop
  400520:	00401da5 	.word	0x00401da5

00400524 <mxt_write_config_reg>:
 * \param value Value to be written to register
 * \result Operation result status code
 */
status_code_t mxt_write_config_reg(struct mxt_device *device,
		mxt_memory_adr memory_adr, uint8_t value)
{
  400524:	b500      	push	{lr}
  400526:	b089      	sub	sp, #36	; 0x24
  400528:	f88d 2007 	strb.w	r2, [sp, #7]
	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  40052c:	2300      	movs	r3, #0
  40052e:	9303      	str	r3, [sp, #12]
  400530:	9307      	str	r3, [sp, #28]
  400532:	f88d 100c 	strb.w	r1, [sp, #12]
  400536:	0a09      	lsrs	r1, r1, #8
  400538:	f88d 100d 	strb.w	r1, [sp, #13]
  40053c:	2302      	movs	r3, #2
  40053e:	9304      	str	r3, [sp, #16]
  400540:	f10d 0307 	add.w	r3, sp, #7
  400544:	9305      	str	r3, [sp, #20]
  400546:	2301      	movs	r3, #1
  400548:	9306      	str	r3, [sp, #24]
  40054a:	7b03      	ldrb	r3, [r0, #12]
  40054c:	f88d 301c 	strb.w	r3, [sp, #28]
		.chip         = device->mxt_chip_adr,
		.buffer       = &value,
		.length       = sizeof(value)
	};

	if (twihs_master_write(device->interface, &packet) != STATUS_OK) {
  400550:	a903      	add	r1, sp, #12
  400552:	6880      	ldr	r0, [r0, #8]
  400554:	4b04      	ldr	r3, [pc, #16]	; (400568 <mxt_write_config_reg+0x44>)
  400556:	4798      	blx	r3
  400558:	3000      	adds	r0, #0
  40055a:	bf18      	it	ne
  40055c:	2001      	movne	r0, #1
		return ERR_IO_ERROR;
	} else {
		return STATUS_OK;
	}
}
  40055e:	4240      	negs	r0, r0
  400560:	b009      	add	sp, #36	; 0x24
  400562:	f85d fb04 	ldr.w	pc, [sp], #4
  400566:	bf00      	nop
  400568:	00401da5 	.word	0x00401da5

0040056c <mxt_is_message_pending>:
 * \param *device Pointer to mxt_device instance
 * \return Return /CHG pin status
 */
bool mxt_is_message_pending(struct mxt_device *device)
{
	if (ioport_get_pin_level(device->chgpin) == false) {
  40056c:	6982      	ldr	r2, [r0, #24]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40056e:	4b07      	ldr	r3, [pc, #28]	; (40058c <mxt_is_message_pending+0x20>)
  400570:	eb03 1352 	add.w	r3, r3, r2, lsr #5
  400574:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  400576:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
	return 1U << (pin & 0x1F);
  400578:	f002 021f 	and.w	r2, r2, #31
  40057c:	2301      	movs	r3, #1
  40057e:	fa03 f202 	lsl.w	r2, r3, r2
  400582:	420a      	tst	r2, r1
		return true;
	} else {
		return false;
	}
}
  400584:	bf0c      	ite	eq
  400586:	4618      	moveq	r0, r3
  400588:	2000      	movne	r0, #0
  40058a:	4770      	bx	lr
  40058c:	00200707 	.word	0x00200707

00400590 <mxt_read_message>:
 * \param *message Pointer to mxt_message instance
 * \return Operation result status code
 */
status_code_t mxt_read_message(struct mxt_device *device,
		struct mxt_conf_messageprocessor_t5 *message)
{
  400590:	b530      	push	{r4, r5, lr}
  400592:	b087      	sub	sp, #28
  400594:	4604      	mov	r4, r0
  400596:	460d      	mov	r5, r1
	uint16_t obj_adr = mxt_get_object_address(device,
  400598:	2200      	movs	r2, #0
  40059a:	2105      	movs	r1, #5
  40059c:	4b0d      	ldr	r3, [pc, #52]	; (4005d4 <mxt_read_message+0x44>)
  40059e:	4798      	blx	r3
			MXT_GEN_MESSAGEPROCESSOR_T5, 0);

	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  4005a0:	2300      	movs	r3, #0
  4005a2:	9301      	str	r3, [sp, #4]
  4005a4:	9305      	str	r3, [sp, #20]
  4005a6:	f88d 0004 	strb.w	r0, [sp, #4]
  4005aa:	0a00      	lsrs	r0, r0, #8
  4005ac:	f88d 0005 	strb.w	r0, [sp, #5]
  4005b0:	2302      	movs	r3, #2
  4005b2:	9302      	str	r3, [sp, #8]
  4005b4:	9503      	str	r5, [sp, #12]
  4005b6:	2309      	movs	r3, #9
  4005b8:	9304      	str	r3, [sp, #16]
  4005ba:	7b23      	ldrb	r3, [r4, #12]
  4005bc:	f88d 3014 	strb.w	r3, [sp, #20]
		.buffer       = message,
		.length       = MXT_TWI_MSG_SIZE_T5
	};

	/* Read information from the slave */
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  4005c0:	a901      	add	r1, sp, #4
  4005c2:	68a0      	ldr	r0, [r4, #8]
  4005c4:	4b04      	ldr	r3, [pc, #16]	; (4005d8 <mxt_read_message+0x48>)
  4005c6:	4798      	blx	r3
  4005c8:	3000      	adds	r0, #0
  4005ca:	bf18      	it	ne
  4005cc:	2001      	movne	r0, #1
		return mxt_validate_message(&packet);
#else
		return STATUS_OK;
#endif
	}
}
  4005ce:	4240      	negs	r0, r0
  4005d0:	b007      	add	sp, #28
  4005d2:	bd30      	pop	{r4, r5, pc}
  4005d4:	0040046d 	.word	0x0040046d
  4005d8:	00401cf9 	.word	0x00401cf9

004005dc <mxt_read_touch_event>:
 * \param *touch_event Pointer to mxt_touch_event instance
 * \return Operation result status code
 */
status_code_t mxt_read_touch_event(struct mxt_device *device,
		struct mxt_touch_event *touch_event)
{
  4005dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4005de:	b085      	sub	sp, #20
  4005e0:	4604      	mov	r4, r0
  4005e2:	460e      	mov	r6, r1
	uint8_t obj_type, status;
	struct mxt_conf_messageprocessor_t5 message;

	while (mxt_is_message_pending(device)) {
  4005e4:	4d17      	ldr	r5, [pc, #92]	; (400644 <mxt_read_touch_event+0x68>)
		if((status = mxt_read_message(device, &message)) != STATUS_OK) {
  4005e6:	4f18      	ldr	r7, [pc, #96]	; (400648 <mxt_read_touch_event+0x6c>)
	while (mxt_is_message_pending(device)) {
  4005e8:	4620      	mov	r0, r4
  4005ea:	47a8      	blx	r5
  4005ec:	b328      	cbz	r0, 40063a <mxt_read_touch_event+0x5e>
		if((status = mxt_read_message(device, &message)) != STATUS_OK) {
  4005ee:	a901      	add	r1, sp, #4
  4005f0:	4620      	mov	r0, r4
  4005f2:	47b8      	blx	r7
  4005f4:	4603      	mov	r3, r0
  4005f6:	bb10      	cbnz	r0, 40063e <mxt_read_touch_event+0x62>
 * \return Operation
 */
enum mxt_object_type mxt_get_object_type(struct mxt_device *device,
		struct mxt_conf_messageprocessor_t5 *message)
{
	return (enum mxt_object_type)(device->report_id_map[message->reportid].object_type);
  4005f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
  4005fc:	6962      	ldr	r2, [r4, #20]
		if (obj_type == MXT_TOUCH_MULTITOUCHSCREEN_T9) {
  4005fe:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
  400602:	2a09      	cmp	r2, #9
  400604:	d1f0      	bne.n	4005e8 <mxt_read_touch_event+0xc>
			touch_event->id = (message.reportid -
  400606:	7f22      	ldrb	r2, [r4, #28]
  400608:	1a9b      	subs	r3, r3, r2
  40060a:	7033      	strb	r3, [r6, #0]
			touch_event->status = message.message[0];
  40060c:	f89d 3005 	ldrb.w	r3, [sp, #5]
  400610:	7073      	strb	r3, [r6, #1]
					((message.message[3] & 0xf0) >> 4);
  400612:	f89d 3008 	ldrb.w	r3, [sp, #8]
			touch_event->x = (message.message[1] << 4) |
  400616:	f89d 1006 	ldrb.w	r1, [sp, #6]
					((message.message[3] & 0xf0) >> 4);
  40061a:	091a      	lsrs	r2, r3, #4
			touch_event->x = (message.message[1] << 4) |
  40061c:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
  400620:	8072      	strh	r2, [r6, #2]
			touch_event->y = (message.message[2] << 4) |
  400622:	f89d 2007 	ldrb.w	r2, [sp, #7]
					(message.message[3] & 0x0f);
  400626:	f003 030f 	and.w	r3, r3, #15
			touch_event->y = (message.message[2] << 4) |
  40062a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  40062e:	80b3      	strh	r3, [r6, #4]
			touch_event->size = message.message[4];
  400630:	f89d 3009 	ldrb.w	r3, [sp, #9]
  400634:	71b3      	strb	r3, [r6, #6]
			return STATUS_OK;
  400636:	2300      	movs	r3, #0
  400638:	e001      	b.n	40063e <mxt_read_touch_event+0x62>
	return ERR_BAD_DATA;
  40063a:	f06f 0303 	mvn.w	r3, #3
}
  40063e:	4618      	mov	r0, r3
  400640:	b005      	add	sp, #20
  400642:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400644:	0040056d 	.word	0x0040056d
  400648:	00400591 	.word	0x00400591

0040064c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40064c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40064e:	4810      	ldr	r0, [pc, #64]	; (400690 <sysclk_init+0x44>)
  400650:	4b10      	ldr	r3, [pc, #64]	; (400694 <sysclk_init+0x48>)
  400652:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400654:	213e      	movs	r1, #62	; 0x3e
  400656:	2000      	movs	r0, #0
  400658:	4b0f      	ldr	r3, [pc, #60]	; (400698 <sysclk_init+0x4c>)
  40065a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40065c:	4c0f      	ldr	r4, [pc, #60]	; (40069c <sysclk_init+0x50>)
  40065e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400660:	2800      	cmp	r0, #0
  400662:	d0fc      	beq.n	40065e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400664:	4b0e      	ldr	r3, [pc, #56]	; (4006a0 <sysclk_init+0x54>)
  400666:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400668:	4a0e      	ldr	r2, [pc, #56]	; (4006a4 <sysclk_init+0x58>)
  40066a:	4b0f      	ldr	r3, [pc, #60]	; (4006a8 <sysclk_init+0x5c>)
  40066c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  40066e:	4c0f      	ldr	r4, [pc, #60]	; (4006ac <sysclk_init+0x60>)
  400670:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400672:	2800      	cmp	r0, #0
  400674:	d0fc      	beq.n	400670 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400676:	2002      	movs	r0, #2
  400678:	4b0d      	ldr	r3, [pc, #52]	; (4006b0 <sysclk_init+0x64>)
  40067a:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40067c:	2000      	movs	r0, #0
  40067e:	4b0d      	ldr	r3, [pc, #52]	; (4006b4 <sysclk_init+0x68>)
  400680:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400682:	4b0d      	ldr	r3, [pc, #52]	; (4006b8 <sysclk_init+0x6c>)
  400684:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400686:	480d      	ldr	r0, [pc, #52]	; (4006bc <sysclk_init+0x70>)
  400688:	4b02      	ldr	r3, [pc, #8]	; (400694 <sysclk_init+0x48>)
  40068a:	4798      	blx	r3
  40068c:	bd10      	pop	{r4, pc}
  40068e:	bf00      	nop
  400690:	07270e00 	.word	0x07270e00
  400694:	00402151 	.word	0x00402151
  400698:	00401775 	.word	0x00401775
  40069c:	004017c9 	.word	0x004017c9
  4006a0:	004017d9 	.word	0x004017d9
  4006a4:	20183f01 	.word	0x20183f01
  4006a8:	400e0600 	.word	0x400e0600
  4006ac:	004017e9 	.word	0x004017e9
  4006b0:	004016d9 	.word	0x004016d9
  4006b4:	00401711 	.word	0x00401711
  4006b8:	00402045 	.word	0x00402045
  4006bc:	11e1a300 	.word	0x11e1a300

004006c0 <usart_serial_write_packet>:
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
	while (len) {
  4006c0:	2a00      	cmp	r2, #0
  4006c2:	d054      	beq.n	40076e <usart_serial_write_packet+0xae>
{
  4006c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4006c8:	4692      	mov	sl, r2
  4006ca:	4606      	mov	r6, r0
  4006cc:	460f      	mov	r7, r1
  4006ce:	448a      	add	sl, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4006d0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 40078c <usart_serial_write_packet+0xcc>
		while (uart_write((Uart*)p_usart, c)!=0);
  4006d4:	4d27      	ldr	r5, [pc, #156]	; (400774 <usart_serial_write_packet+0xb4>)
		return 1;
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4006d6:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 400790 <usart_serial_write_packet+0xd0>
  4006da:	e006      	b.n	4006ea <usart_serial_write_packet+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  4006dc:	4621      	mov	r1, r4
  4006de:	4640      	mov	r0, r8
  4006e0:	47a8      	blx	r5
  4006e2:	2800      	cmp	r0, #0
  4006e4:	d1fa      	bne.n	4006dc <usart_serial_write_packet+0x1c>
	while (len) {
  4006e6:	45ba      	cmp	sl, r7
  4006e8:	d03e      	beq.n	400768 <usart_serial_write_packet+0xa8>
		usart_serial_putchar(usart, *data);
  4006ea:	f817 4b01 	ldrb.w	r4, [r7], #1
	if (UART0 == (Uart*)p_usart) {
  4006ee:	4546      	cmp	r6, r8
  4006f0:	d0f4      	beq.n	4006dc <usart_serial_write_packet+0x1c>
	if (UART1 == (Uart*)p_usart) {
  4006f2:	454e      	cmp	r6, r9
  4006f4:	d016      	beq.n	400724 <usart_serial_write_packet+0x64>
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4006f6:	4b20      	ldr	r3, [pc, #128]	; (400778 <usart_serial_write_packet+0xb8>)
  4006f8:	429e      	cmp	r6, r3
  4006fa:	d019      	beq.n	400730 <usart_serial_write_packet+0x70>
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4006fc:	4b1f      	ldr	r3, [pc, #124]	; (40077c <usart_serial_write_packet+0xbc>)
  4006fe:	429e      	cmp	r6, r3
  400700:	d01c      	beq.n	40073c <usart_serial_write_packet+0x7c>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400702:	4b1f      	ldr	r3, [pc, #124]	; (400780 <usart_serial_write_packet+0xc0>)
  400704:	429e      	cmp	r6, r3
  400706:	d01f      	beq.n	400748 <usart_serial_write_packet+0x88>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400708:	4b1e      	ldr	r3, [pc, #120]	; (400784 <usart_serial_write_packet+0xc4>)
  40070a:	429e      	cmp	r6, r3
  40070c:	d024      	beq.n	400758 <usart_serial_write_packet+0x98>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  40070e:	4b1e      	ldr	r3, [pc, #120]	; (400788 <usart_serial_write_packet+0xc8>)
  400710:	429e      	cmp	r6, r3
  400712:	d1e8      	bne.n	4006e6 <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  400714:	f8df b07c 	ldr.w	fp, [pc, #124]	; 400794 <usart_serial_write_packet+0xd4>
  400718:	4621      	mov	r1, r4
  40071a:	481b      	ldr	r0, [pc, #108]	; (400788 <usart_serial_write_packet+0xc8>)
  40071c:	47d8      	blx	fp
  40071e:	2800      	cmp	r0, #0
  400720:	d1fa      	bne.n	400718 <usart_serial_write_packet+0x58>
  400722:	e7e0      	b.n	4006e6 <usart_serial_write_packet+0x26>
		while (uart_write((Uart*)p_usart, c)!=0);
  400724:	4621      	mov	r1, r4
  400726:	4648      	mov	r0, r9
  400728:	47a8      	blx	r5
  40072a:	2800      	cmp	r0, #0
  40072c:	d1fa      	bne.n	400724 <usart_serial_write_packet+0x64>
  40072e:	e7da      	b.n	4006e6 <usart_serial_write_packet+0x26>
		while (uart_write((Uart*)p_usart, c)!=0);
  400730:	4621      	mov	r1, r4
  400732:	4811      	ldr	r0, [pc, #68]	; (400778 <usart_serial_write_packet+0xb8>)
  400734:	47a8      	blx	r5
  400736:	2800      	cmp	r0, #0
  400738:	d1fa      	bne.n	400730 <usart_serial_write_packet+0x70>
  40073a:	e7d4      	b.n	4006e6 <usart_serial_write_packet+0x26>
		while (uart_write((Uart*)p_usart, c)!=0);
  40073c:	4621      	mov	r1, r4
  40073e:	480f      	ldr	r0, [pc, #60]	; (40077c <usart_serial_write_packet+0xbc>)
  400740:	47a8      	blx	r5
  400742:	2800      	cmp	r0, #0
  400744:	d1fa      	bne.n	40073c <usart_serial_write_packet+0x7c>
  400746:	e7ce      	b.n	4006e6 <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  400748:	f8df b048 	ldr.w	fp, [pc, #72]	; 400794 <usart_serial_write_packet+0xd4>
  40074c:	4621      	mov	r1, r4
  40074e:	480c      	ldr	r0, [pc, #48]	; (400780 <usart_serial_write_packet+0xc0>)
  400750:	47d8      	blx	fp
  400752:	2800      	cmp	r0, #0
  400754:	d1fa      	bne.n	40074c <usart_serial_write_packet+0x8c>
  400756:	e7c6      	b.n	4006e6 <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  400758:	f8df b038 	ldr.w	fp, [pc, #56]	; 400794 <usart_serial_write_packet+0xd4>
  40075c:	4621      	mov	r1, r4
  40075e:	4809      	ldr	r0, [pc, #36]	; (400784 <usart_serial_write_packet+0xc4>)
  400760:	47d8      	blx	fp
  400762:	2800      	cmp	r0, #0
  400764:	d1fa      	bne.n	40075c <usart_serial_write_packet+0x9c>
  400766:	e7be      	b.n	4006e6 <usart_serial_write_packet+0x26>
		len--;
		data++;
	}
	return STATUS_OK;
}
  400768:	2000      	movs	r0, #0
  40076a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40076e:	2000      	movs	r0, #0
  400770:	4770      	bx	lr
  400772:	bf00      	nop
  400774:	00401e45 	.word	0x00401e45
  400778:	400e1a00 	.word	0x400e1a00
  40077c:	400e1c00 	.word	0x400e1c00
  400780:	40024000 	.word	0x40024000
  400784:	40028000 	.word	0x40028000
  400788:	4002c000 	.word	0x4002c000
  40078c:	400e0800 	.word	0x400e0800
  400790:	400e0a00 	.word	0x400e0a00
  400794:	00401f4d 	.word	0x00401f4d

00400798 <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
  400798:	b510      	push	{r4, lr}
  40079a:	4604      	mov	r4, r0
#if SAMG55
	flexcom_enable(BOARD_FLEXCOM_SPI);
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
#else
	spi_enable_clock(p_spi);
  40079c:	4b10      	ldr	r3, [pc, #64]	; (4007e0 <spi_master_init+0x48>)
  40079e:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
  4007a0:	2380      	movs	r3, #128	; 0x80
  4007a2:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  4007a4:	6863      	ldr	r3, [r4, #4]
  4007a6:	f043 0301 	orr.w	r3, r3, #1
  4007aa:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  4007ac:	6863      	ldr	r3, [r4, #4]
  4007ae:	f043 0310 	orr.w	r3, r3, #16
  4007b2:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  4007b4:	6863      	ldr	r3, [r4, #4]
  4007b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4007ba:	6063      	str	r3, [r4, #4]
#endif
	spi_reset(p_spi);
	spi_set_master_mode(p_spi);
	spi_disable_mode_fault_detect(p_spi);
	spi_disable_loopback(p_spi);
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
  4007bc:	2100      	movs	r1, #0
  4007be:	4620      	mov	r0, r4
  4007c0:	4b08      	ldr	r3, [pc, #32]	; (4007e4 <spi_master_init+0x4c>)
  4007c2:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  4007c4:	6863      	ldr	r3, [r4, #4]
  4007c6:	f023 0302 	bic.w	r3, r3, #2
  4007ca:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
  4007cc:	6863      	ldr	r3, [r4, #4]
  4007ce:	f023 0304 	bic.w	r3, r3, #4
  4007d2:	6063      	str	r3, [r4, #4]
	spi_set_fixed_peripheral_select(p_spi);
	spi_disable_peripheral_select_decode(p_spi);
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
  4007d4:	2100      	movs	r1, #0
  4007d6:	4620      	mov	r0, r4
  4007d8:	4b03      	ldr	r3, [pc, #12]	; (4007e8 <spi_master_init+0x50>)
  4007da:	4798      	blx	r3
  4007dc:	bd10      	pop	{r4, pc}
  4007de:	bf00      	nop
  4007e0:	00401a99 	.word	0x00401a99
  4007e4:	00401ac5 	.word	0x00401ac5
  4007e8:	00401adb 	.word	0x00401adb

004007ec <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
  4007ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4007f0:	4604      	mov	r4, r0
  4007f2:	460d      	mov	r5, r1
  4007f4:	4616      	mov	r6, r2
#if (SAM4L)
    int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_pba_hz());
#else
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_peripheral_hz());
  4007f6:	4915      	ldr	r1, [pc, #84]	; (40084c <spi_master_setup_device+0x60>)
  4007f8:	4618      	mov	r0, r3
  4007fa:	4b15      	ldr	r3, [pc, #84]	; (400850 <spi_master_setup_device+0x64>)
  4007fc:	4798      	blx	r3
  4007fe:	4607      	mov	r7, r0
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
  400800:	2300      	movs	r3, #0
  400802:	461a      	mov	r2, r3
  400804:	6829      	ldr	r1, [r5, #0]
  400806:	4620      	mov	r0, r4
  400808:	f8df 805c 	ldr.w	r8, [pc, #92]	; 400868 <spi_master_setup_device+0x7c>
  40080c:	47c0      	blx	r8
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
  40080e:	2208      	movs	r2, #8
  400810:	6829      	ldr	r1, [r5, #0]
  400812:	4620      	mov	r0, r4
  400814:	4b0f      	ldr	r3, [pc, #60]	; (400854 <spi_master_setup_device+0x68>)
  400816:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
  400818:	b2fa      	uxtb	r2, r7
  40081a:	6829      	ldr	r1, [r5, #0]
  40081c:	4620      	mov	r0, r4
  40081e:	4b0e      	ldr	r3, [pc, #56]	; (400858 <spi_master_setup_device+0x6c>)
  400820:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
  400822:	2208      	movs	r2, #8
  400824:	6829      	ldr	r1, [r5, #0]
  400826:	4620      	mov	r0, r4
  400828:	4b0c      	ldr	r3, [pc, #48]	; (40085c <spi_master_setup_device+0x70>)
  40082a:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
  40082c:	0872      	lsrs	r2, r6, #1
  40082e:	6829      	ldr	r1, [r5, #0]
  400830:	4620      	mov	r0, r4
  400832:	4b0b      	ldr	r3, [pc, #44]	; (400860 <spi_master_setup_device+0x74>)
  400834:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
  400836:	f086 0201 	eor.w	r2, r6, #1
  40083a:	f002 0201 	and.w	r2, r2, #1
  40083e:	6829      	ldr	r1, [r5, #0]
  400840:	4620      	mov	r0, r4
  400842:	4b08      	ldr	r3, [pc, #32]	; (400864 <spi_master_setup_device+0x78>)
  400844:	4798      	blx	r3
  400846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40084a:	bf00      	nop
  40084c:	08f0d180 	.word	0x08f0d180
  400850:	00401bb7 	.word	0x00401bb7
  400854:	00401ba3 	.word	0x00401ba3
  400858:	00401bcd 	.word	0x00401bcd
  40085c:	00401b5d 	.word	0x00401b5d
  400860:	00401b21 	.word	0x00401b21
  400864:	00401b3f 	.word	0x00401b3f
  400868:	00401bf5 	.word	0x00401bf5

0040086c <spi_select_device>:
 * \param p_spi   Base address of the SPI instance.
 * \param device  SPI device.
 *
 */
void spi_select_device(Spi *p_spi, struct spi_device *device)
{
  40086c:	b508      	push	{r3, lr}
	if (p_spi->SPI_MR & SPI_MR_PCSDEC) {
  40086e:	6843      	ldr	r3, [r0, #4]
	if (spi_get_peripheral_select_decode_setting(p_spi)) {
  400870:	f013 0f04 	tst.w	r3, #4
  400874:	d006      	beq.n	400884 <spi_select_device+0x18>
		if (device->id < MAX_NUM_WITH_DECODER) {
  400876:	6809      	ldr	r1, [r1, #0]
  400878:	290f      	cmp	r1, #15
  40087a:	d900      	bls.n	40087e <spi_select_device+0x12>
  40087c:	bd08      	pop	{r3, pc}
			spi_set_peripheral_chip_select_value(p_spi, device->id);
  40087e:	4b06      	ldr	r3, [pc, #24]	; (400898 <spi_select_device+0x2c>)
  400880:	4798      	blx	r3
  400882:	bd08      	pop	{r3, pc}
		}
	} else {
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
  400884:	6809      	ldr	r1, [r1, #0]
  400886:	2903      	cmp	r1, #3
  400888:	d8f8      	bhi.n	40087c <spi_select_device+0x10>
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
  40088a:	2301      	movs	r3, #1
  40088c:	fa03 f101 	lsl.w	r1, r3, r1
  400890:	43c9      	mvns	r1, r1
  400892:	4b01      	ldr	r3, [pc, #4]	; (400898 <spi_select_device+0x2c>)
  400894:	4798      	blx	r3
		}
	}
}
  400896:	e7f1      	b.n	40087c <spi_select_device+0x10>
  400898:	00401ac5 	.word	0x00401ac5

0040089c <spi_write_packet>:
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t i = 0;
	uint8_t val;

	while (len) {
  40089c:	b11a      	cbz	r2, 4008a6 <spi_write_packet+0xa>
{
  40089e:	b410      	push	{r4}
  4008a0:	460c      	mov	r4, r1
  4008a2:	4411      	add	r1, r2
  4008a4:	e006      	b.n	4008b4 <spi_write_packet+0x18>
		spi_write_single(p_spi, val);
		i++;
		len--;
	}

	return STATUS_OK;
  4008a6:	2000      	movs	r0, #0
  4008a8:	4770      	bx	lr
		val = data[i];
  4008aa:	f814 3b01 	ldrb.w	r3, [r4], #1
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4008ae:	60c3      	str	r3, [r0, #12]
	while (len) {
  4008b0:	42a1      	cmp	r1, r4
  4008b2:	d00c      	beq.n	4008ce <spi_write_packet+0x32>
{
  4008b4:	f643 2399 	movw	r3, #15001	; 0x3a99
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_ready(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
  4008b8:	6902      	ldr	r2, [r0, #16]
		while (!spi_is_tx_ready(p_spi)) {
  4008ba:	f012 0f02 	tst.w	r2, #2
  4008be:	d1f4      	bne.n	4008aa <spi_write_packet+0xe>
			if (!timeout--) {
  4008c0:	3b01      	subs	r3, #1
  4008c2:	d1f9      	bne.n	4008b8 <spi_write_packet+0x1c>
				return ERR_TIMEOUT;
  4008c4:	f06f 0002 	mvn.w	r0, #2
}
  4008c8:	f85d 4b04 	ldr.w	r4, [sp], #4
  4008cc:	4770      	bx	lr
	return STATUS_OK;
  4008ce:	2000      	movs	r0, #0
  4008d0:	e7fa      	b.n	4008c8 <spi_write_packet+0x2c>

004008d2 <spi_read_packet>:
{
	uint32_t timeout = SPI_TIMEOUT;
	uint8_t val;
	uint32_t i = 0;

	while (len) {
  4008d2:	b13a      	cbz	r2, 4008e4 <spi_read_packet+0x12>
{
  4008d4:	b470      	push	{r4, r5, r6}
  4008d6:	4615      	mov	r5, r2
  4008d8:	460c      	mov	r4, r1
  4008da:	440d      	add	r5, r1
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4008dc:	26ff      	movs	r6, #255	; 0xff
 *
 * \return 1 if the SPI Receiver is ready, otherwise 0.
 */
static inline uint32_t spi_is_rx_ready(Spi *p_spi)
{
	if ((p_spi->SPI_SR & (SPI_SR_RDRF | SPI_SR_TXEMPTY))
  4008de:	f240 2101 	movw	r1, #513	; 0x201
  4008e2:	e012      	b.n	40090a <spi_read_packet+0x38>
		data[i] = val;
		i++;
		len--;
	}

	return STATUS_OK;
  4008e4:	2000      	movs	r0, #0
  4008e6:	4770      	bx	lr
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4008e8:	60c6      	str	r6, [r0, #12]
		while (!spi_is_rx_ready(p_spi)) {
  4008ea:	f643 2399 	movw	r3, #15001	; 0x3a99
	if ((p_spi->SPI_SR & (SPI_SR_RDRF | SPI_SR_TXEMPTY))
  4008ee:	6902      	ldr	r2, [r0, #16]
  4008f0:	ea31 0202 	bics.w	r2, r1, r2
  4008f4:	d004      	beq.n	400900 <spi_read_packet+0x2e>
			if (!timeout--) {
  4008f6:	3b01      	subs	r3, #1
  4008f8:	d1f9      	bne.n	4008ee <spi_read_packet+0x1c>
				return ERR_TIMEOUT;
  4008fa:	f06f 0002 	mvn.w	r0, #2
  4008fe:	e00e      	b.n	40091e <spi_read_packet+0x4c>
	return (p_spi->SPI_RDR & SPI_RDR_RD_Msk);
  400900:	6883      	ldr	r3, [r0, #8]
 * \param data      Data to read.
 *
 */
static inline void spi_read_single(Spi *p_spi, uint8_t *data)
{
	*data = (uint8_t)spi_get(p_spi);
  400902:	f804 3b01 	strb.w	r3, [r4], #1
	while (len) {
  400906:	42a5      	cmp	r5, r4
  400908:	d00b      	beq.n	400922 <spi_read_packet+0x50>
{
  40090a:	f643 2399 	movw	r3, #15001	; 0x3a99
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
  40090e:	6902      	ldr	r2, [r0, #16]
		while (!spi_is_tx_ready(p_spi)) {
  400910:	f012 0f02 	tst.w	r2, #2
  400914:	d1e8      	bne.n	4008e8 <spi_read_packet+0x16>
			if (!timeout--) {
  400916:	3b01      	subs	r3, #1
  400918:	d1f9      	bne.n	40090e <spi_read_packet+0x3c>
				return ERR_TIMEOUT;
  40091a:	f06f 0002 	mvn.w	r0, #2
}
  40091e:	bc70      	pop	{r4, r5, r6}
  400920:	4770      	bx	lr
	return STATUS_OK;
  400922:	2000      	movs	r0, #0
  400924:	e7fb      	b.n	40091e <spi_read_packet+0x4c>
	...

00400928 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  40092c:	b980      	cbnz	r0, 400950 <_read+0x28>
  40092e:	460c      	mov	r4, r1
  400930:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400932:	2a00      	cmp	r2, #0
  400934:	dd0f      	ble.n	400956 <_read+0x2e>
  400936:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400938:	4e08      	ldr	r6, [pc, #32]	; (40095c <_read+0x34>)
  40093a:	4d09      	ldr	r5, [pc, #36]	; (400960 <_read+0x38>)
  40093c:	6830      	ldr	r0, [r6, #0]
  40093e:	4621      	mov	r1, r4
  400940:	682b      	ldr	r3, [r5, #0]
  400942:	4798      	blx	r3
		ptr++;
  400944:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400946:	42bc      	cmp	r4, r7
  400948:	d1f8      	bne.n	40093c <_read+0x14>
		nChars++;
	}
	return nChars;
}
  40094a:	4640      	mov	r0, r8
  40094c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400950:	f04f 38ff 	mov.w	r8, #4294967295
  400954:	e7f9      	b.n	40094a <_read+0x22>
	for (; len > 0; --len) {
  400956:	4680      	mov	r8, r0
  400958:	e7f7      	b.n	40094a <_read+0x22>
  40095a:	bf00      	nop
  40095c:	20400f90 	.word	0x20400f90
  400960:	20400f88 	.word	0x20400f88

00400964 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400964:	3801      	subs	r0, #1
  400966:	2802      	cmp	r0, #2
  400968:	d815      	bhi.n	400996 <_write+0x32>
{
  40096a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40096e:	460e      	mov	r6, r1
  400970:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400972:	b19a      	cbz	r2, 40099c <_write+0x38>
  400974:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400976:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4009b0 <_write+0x4c>
  40097a:	4f0c      	ldr	r7, [pc, #48]	; (4009ac <_write+0x48>)
  40097c:	f8d8 0000 	ldr.w	r0, [r8]
  400980:	f815 1b01 	ldrb.w	r1, [r5], #1
  400984:	683b      	ldr	r3, [r7, #0]
  400986:	4798      	blx	r3
  400988:	2800      	cmp	r0, #0
  40098a:	db0a      	blt.n	4009a2 <_write+0x3e>
  40098c:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  40098e:	3c01      	subs	r4, #1
  400990:	d1f4      	bne.n	40097c <_write+0x18>
  400992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400996:	f04f 30ff 	mov.w	r0, #4294967295
  40099a:	4770      	bx	lr
	for (; len != 0; --len) {
  40099c:	4610      	mov	r0, r2
  40099e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  4009a2:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4009a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4009aa:	bf00      	nop
  4009ac:	20400f8c 	.word	0x20400f8c
  4009b0:	20400f90 	.word	0x20400f90

004009b4 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  4009b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4009b8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4009bc:	4b9e      	ldr	r3, [pc, #632]	; (400c38 <board_init+0x284>)
  4009be:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4009c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4009c4:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4009c8:	4b9c      	ldr	r3, [pc, #624]	; (400c3c <board_init+0x288>)
  4009ca:	2200      	movs	r2, #0
  4009cc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  4009d0:	695a      	ldr	r2, [r3, #20]
  4009d2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4009d6:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  4009d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4009dc:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  4009e0:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  4009e4:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4009e8:	f007 0007 	and.w	r0, r7, #7
  4009ec:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  4009ee:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4009f2:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  4009f6:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  4009fa:	f3bf 8f4f 	dsb	sy
  4009fe:	f04f 34ff 	mov.w	r4, #4294967295
  400a02:	fa04 fc00 	lsl.w	ip, r4, r0
  400a06:	fa06 f000 	lsl.w	r0, r6, r0
  400a0a:	fa04 f40e 	lsl.w	r4, r4, lr
  400a0e:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400a12:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  400a14:	463a      	mov	r2, r7
  400a16:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400a18:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400a1c:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400a20:	3a01      	subs	r2, #1
  400a22:	4423      	add	r3, r4
  400a24:	f1b2 3fff 	cmp.w	r2, #4294967295
  400a28:	d1f6      	bne.n	400a18 <board_init+0x64>
        } while(sets--);
  400a2a:	3e01      	subs	r6, #1
  400a2c:	4460      	add	r0, ip
  400a2e:	f1b6 3fff 	cmp.w	r6, #4294967295
  400a32:	d1ef      	bne.n	400a14 <board_init+0x60>
  400a34:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400a38:	4b80      	ldr	r3, [pc, #512]	; (400c3c <board_init+0x288>)
  400a3a:	695a      	ldr	r2, [r3, #20]
  400a3c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400a40:	615a      	str	r2, [r3, #20]
  400a42:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400a46:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400a4a:	4a7d      	ldr	r2, [pc, #500]	; (400c40 <board_init+0x28c>)
  400a4c:	497d      	ldr	r1, [pc, #500]	; (400c44 <board_init+0x290>)
  400a4e:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400a50:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400a54:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400a56:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400a5a:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400a5e:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400a62:	f022 0201 	bic.w	r2, r2, #1
  400a66:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400a6a:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400a6e:	f022 0201 	bic.w	r2, r2, #1
  400a72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400a76:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400a7a:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400a7e:	200a      	movs	r0, #10
  400a80:	4c71      	ldr	r4, [pc, #452]	; (400c48 <board_init+0x294>)
  400a82:	47a0      	blx	r4
  400a84:	200b      	movs	r0, #11
  400a86:	47a0      	blx	r4
  400a88:	200c      	movs	r0, #12
  400a8a:	47a0      	blx	r4
  400a8c:	2010      	movs	r0, #16
  400a8e:	47a0      	blx	r4
  400a90:	2011      	movs	r0, #17
  400a92:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400a94:	4e6d      	ldr	r6, [pc, #436]	; (400c4c <board_init+0x298>)
  400a96:	f44f 7880 	mov.w	r8, #256	; 0x100
  400a9a:	f8c6 8010 	str.w	r8, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400a9e:	f8c6 80a0 	str.w	r8, [r6, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400aa2:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400aa6:	4c6a      	ldr	r4, [pc, #424]	; (400c50 <board_init+0x29c>)
  400aa8:	f44f 6500 	mov.w	r5, #2048	; 0x800
  400aac:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400aae:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  400ab2:	6665      	str	r5, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400ab4:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400ab8:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFER = mask;
  400aba:	6225      	str	r5, [r4, #32]
		base->PIO_IFSCER = mask;
  400abc:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400ac0:	6f23      	ldr	r3, [r4, #112]	; 0x70
  400ac2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  400ac6:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400ac8:	6f63      	ldr	r3, [r4, #116]	; 0x74
  400aca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  400ace:	6763      	str	r3, [r4, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400ad0:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400ad4:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400ad8:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
		base->PIO_PUDR = mask;
  400adc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  400ae0:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400ae2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400ae6:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  400ae8:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400aea:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400aee:	6f22      	ldr	r2, [r4, #112]	; 0x70
  400af0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400af4:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400af6:	6f62      	ldr	r2, [r4, #116]	; 0x74
  400af8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400afc:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400afe:	6063      	str	r3, [r4, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400b00:	4a54      	ldr	r2, [pc, #336]	; (400c54 <board_init+0x2a0>)
  400b02:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400b06:	f043 0310 	orr.w	r3, r3, #16
  400b0a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  400b0e:	f502 22b2 	add.w	r2, r2, #364544	; 0x59000
  400b12:	2310      	movs	r3, #16
  400b14:	6613      	str	r3, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400b16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  400b1a:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  400b1c:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400b1e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400b22:	6f11      	ldr	r1, [r2, #112]	; 0x70
  400b24:	4319      	orrs	r1, r3
  400b26:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400b28:	6f51      	ldr	r1, [r2, #116]	; 0x74
  400b2a:	4319      	orrs	r1, r3
  400b2c:	6751      	str	r1, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400b2e:	6053      	str	r3, [r2, #4]
		base->PIO_PUDR = mask;
  400b30:	2208      	movs	r2, #8
  400b32:	6622      	str	r2, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400b34:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400b38:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  400b3a:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400b3c:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400b40:	6f21      	ldr	r1, [r4, #112]	; 0x70
  400b42:	f021 0108 	bic.w	r1, r1, #8
  400b46:	6721      	str	r1, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400b48:	6f61      	ldr	r1, [r4, #116]	; 0x74
  400b4a:	f021 0108 	bic.w	r1, r1, #8
  400b4e:	6761      	str	r1, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400b50:	6062      	str	r2, [r4, #4]
		base->PIO_PUDR = mask;
  400b52:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400b54:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400b58:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  400b5a:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400b5c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400b60:	6f22      	ldr	r2, [r4, #112]	; 0x70
  400b62:	f022 0210 	bic.w	r2, r2, #16
  400b66:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400b68:	6f62      	ldr	r2, [r4, #116]	; 0x74
  400b6a:	f022 0210 	bic.w	r2, r2, #16
  400b6e:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400b70:	6063      	str	r3, [r4, #4]
	ioport_set_pin_mode(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on EBI*/
	pio_configure(PIN_EBI_RESET_PIO, PIN_EBI_RESET_TYPE, PIN_EBI_RESET_MASK, PIN_EBI_RESET_ATTRI);
  400b72:	2300      	movs	r3, #0
  400b74:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400b78:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400b7c:	4630      	mov	r0, r6
  400b7e:	4f36      	ldr	r7, [pc, #216]	; (400c58 <board_init+0x2a4>)
  400b80:	47b8      	blx	r7
	pio_configure(PIN_EBI_CDS_PIO, PIN_EBI_CDS_TYPE, PIN_EBI_CDS_MASK, PIN_EBI_CDS_ATTRI);
  400b82:	2300      	movs	r3, #0
  400b84:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400b88:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400b8c:	4630      	mov	r0, r6
  400b8e:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAL_PIO, PIN_EBI_DATAL_TYPE, PIN_EBI_DATAL_MASK, PIN_EBI_DATAL_ATTRI);
  400b90:	2301      	movs	r3, #1
  400b92:	22ff      	movs	r2, #255	; 0xff
  400b94:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400b98:	4630      	mov	r0, r6
  400b9a:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_0_PIO, PIN_EBI_DATAH_0_TYPE, PIN_EBI_DATAH_0_MASK, PIN_EBI_DATAH_0_ATTRI);
  400b9c:	2301      	movs	r3, #1
  400b9e:	223f      	movs	r2, #63	; 0x3f
  400ba0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400ba4:	482d      	ldr	r0, [pc, #180]	; (400c5c <board_init+0x2a8>)
  400ba6:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_1_PIO, PIN_EBI_DATAH_1_TYPE, PIN_EBI_DATAH_1_MASK, PIN_EBI_DATAH_1_ATTRI);
  400ba8:	2301      	movs	r3, #1
  400baa:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  400bae:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400bb2:	4620      	mov	r0, r4
  400bb4:	47b8      	blx	r7
	pio_configure(PIN_EBI_NWE_PIO, PIN_EBI_NWE_TYPE, PIN_EBI_NWE_MASK, PIN_EBI_NWE_ATTRI);
  400bb6:	2301      	movs	r3, #1
  400bb8:	4642      	mov	r2, r8
  400bba:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400bbe:	4630      	mov	r0, r6
  400bc0:	47b8      	blx	r7
	pio_configure(PIN_EBI_NRD_PIO, PIN_EBI_NRD_TYPE, PIN_EBI_NRD_MASK, PIN_EBI_NRD_ATTRI);
  400bc2:	2301      	movs	r3, #1
  400bc4:	462a      	mov	r2, r5
  400bc6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400bca:	4630      	mov	r0, r6
  400bcc:	47b8      	blx	r7
	pio_configure(PIN_EBI_CS_PIO, PIN_EBI_CS_TYPE, PIN_EBI_CS_MASK, PIN_EBI_CS_ATTRI);
  400bce:	2301      	movs	r3, #1
  400bd0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400bd4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400bd8:	4821      	ldr	r0, [pc, #132]	; (400c60 <board_init+0x2ac>)
  400bda:	47b8      	blx	r7
	pio_configure(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_TYPE, PIN_EBI_BACKLIGHT_MASK, PIN_EBI_BACKLIGHT_ATTRI);
  400bdc:	2300      	movs	r3, #0
  400bde:	f44f 7200 	mov.w	r2, #512	; 0x200
  400be2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400be6:	4630      	mov	r0, r6
  400be8:	47b8      	blx	r7
	pio_set(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_MASK);
  400bea:	f44f 7100 	mov.w	r1, #512	; 0x200
  400bee:	4630      	mov	r0, r6
  400bf0:	4b1c      	ldr	r3, [pc, #112]	; (400c64 <board_init+0x2b0>)
  400bf2:	4798      	blx	r3
	MATRIX->CCFG_SMCNFCS = CCFG_SMCNFCS_SDRAMEN;
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on SPI*/
	pio_configure_pin(LCD_SPI_MISO_PIO, LCD_SPI_MISO_FLAGS);
  400bf4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400bf8:	2074      	movs	r0, #116	; 0x74
  400bfa:	4c1b      	ldr	r4, [pc, #108]	; (400c68 <board_init+0x2b4>)
  400bfc:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_MOSI_PIO, LCD_SPI_MOSI_FLAGS);
  400bfe:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400c02:	2075      	movs	r0, #117	; 0x75
  400c04:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_SPCK_PIO, LCD_SPI_SPCK_FLAGS);
  400c06:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400c0a:	2076      	movs	r0, #118	; 0x76
  400c0c:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_NPCS_PIO, LCD_SPI_NPCS_FLAGS);
  400c0e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400c12:	207b      	movs	r0, #123	; 0x7b
  400c14:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_RESET_PIO, LCD_SPI_RESET_FLAGS);
  400c16:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400c1a:	2018      	movs	r0, #24
  400c1c:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
  400c1e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400c22:	2006      	movs	r0, #6
  400c24:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
  400c26:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400c2a:	2053      	movs	r0, #83	; 0x53
  400c2c:	47a0      	blx	r4
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);
  400c2e:	2053      	movs	r0, #83	; 0x53
  400c30:	4b0e      	ldr	r3, [pc, #56]	; (400c6c <board_init+0x2b8>)
  400c32:	4798      	blx	r3
  400c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400c38:	400e1850 	.word	0x400e1850
  400c3c:	e000ed00 	.word	0xe000ed00
  400c40:	400e0c00 	.word	0x400e0c00
  400c44:	5a00080c 	.word	0x5a00080c
  400c48:	004017f9 	.word	0x004017f9
  400c4c:	400e1200 	.word	0x400e1200
  400c50:	400e0e00 	.word	0x400e0e00
  400c54:	40088000 	.word	0x40088000
  400c58:	00401425 	.word	0x00401425
  400c5c:	400e1600 	.word	0x400e1600
  400c60:	400e1400 	.word	0x400e1400
  400c64:	00401331 	.word	0x00401331
  400c68:	004014f5 	.word	0x004014f5
  400c6c:	004014bd 	.word	0x004014bd

00400c70 <ili9488_check_box_coordinates>:
 * \param p_ul_x2 X coordinate of lower-right corner on LCD.
 * \param p_ul_y2 Y coordinate of lower-right corner on LCD.
 */
static void ili9488_check_box_coordinates(uint32_t *p_ul_x1, uint32_t *p_ul_y1,
		uint32_t *p_ul_x2, uint32_t *p_ul_y2)
{
  400c70:	b430      	push	{r4, r5}
	uint32_t dw;

	if (*p_ul_x1 >= ILI9488_LCD_WIDTH) {
  400c72:	6804      	ldr	r4, [r0, #0]
  400c74:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
  400c78:	d302      	bcc.n	400c80 <ili9488_check_box_coordinates+0x10>
		*p_ul_x1 = ILI9488_LCD_WIDTH - 1;
  400c7a:	f240 143f 	movw	r4, #319	; 0x13f
  400c7e:	6004      	str	r4, [r0, #0]
	}

	if (*p_ul_x2 >= ILI9488_LCD_WIDTH) {
  400c80:	6814      	ldr	r4, [r2, #0]
  400c82:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
  400c86:	d302      	bcc.n	400c8e <ili9488_check_box_coordinates+0x1e>
		*p_ul_x2 = ILI9488_LCD_WIDTH - 1;
  400c88:	f240 143f 	movw	r4, #319	; 0x13f
  400c8c:	6014      	str	r4, [r2, #0]
	}

	if (*p_ul_y1 >= ILI9488_LCD_HEIGHT) {
  400c8e:	680c      	ldr	r4, [r1, #0]
  400c90:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
  400c94:	d302      	bcc.n	400c9c <ili9488_check_box_coordinates+0x2c>
		*p_ul_y1 = ILI9488_LCD_HEIGHT - 1;
  400c96:	f240 14df 	movw	r4, #479	; 0x1df
  400c9a:	600c      	str	r4, [r1, #0]
	}

	if (*p_ul_y2 >= ILI9488_LCD_HEIGHT) {
  400c9c:	681c      	ldr	r4, [r3, #0]
  400c9e:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
  400ca2:	d302      	bcc.n	400caa <ili9488_check_box_coordinates+0x3a>
		*p_ul_y2 = ILI9488_LCD_HEIGHT - 1;
  400ca4:	f240 14df 	movw	r4, #479	; 0x1df
  400ca8:	601c      	str	r4, [r3, #0]
	}

	if (*p_ul_x1 > *p_ul_x2) {
  400caa:	6804      	ldr	r4, [r0, #0]
  400cac:	6815      	ldr	r5, [r2, #0]
  400cae:	42ac      	cmp	r4, r5
  400cb0:	d901      	bls.n	400cb6 <ili9488_check_box_coordinates+0x46>
		dw = *p_ul_x1;
		*p_ul_x1 = *p_ul_x2;
  400cb2:	6005      	str	r5, [r0, #0]
		*p_ul_x2 = dw;
  400cb4:	6014      	str	r4, [r2, #0]
	}

	if (*p_ul_y1 > *p_ul_y2) {
  400cb6:	680a      	ldr	r2, [r1, #0]
  400cb8:	6818      	ldr	r0, [r3, #0]
  400cba:	4282      	cmp	r2, r0
  400cbc:	d901      	bls.n	400cc2 <ili9488_check_box_coordinates+0x52>
		dw = *p_ul_y1;
		*p_ul_y1 = *p_ul_y2;
  400cbe:	6008      	str	r0, [r1, #0]
		*p_ul_y2 = dw;
  400cc0:	601a      	str	r2, [r3, #0]
	}
}
  400cc2:	bc30      	pop	{r4, r5}
  400cc4:	4770      	bx	lr
	...

00400cc8 <ili9488_write_ram_prepare>:
{
  400cc8:	b510      	push	{r4, lr}
  400cca:	b082      	sub	sp, #8
	pio_set_pin_low(LCD_SPI_CDS_PIO);
  400ccc:	2006      	movs	r0, #6
  400cce:	4b0a      	ldr	r3, [pc, #40]	; (400cf8 <ili9488_write_ram_prepare+0x30>)
  400cd0:	4798      	blx	r3
	spi_write(BOARD_ILI9488_SPI, ILI9488_CMD_MEMORY_WRITE, BOARD_ILI9488_SPI_NPCS, 0);
  400cd2:	2300      	movs	r3, #0
  400cd4:	2203      	movs	r2, #3
  400cd6:	212c      	movs	r1, #44	; 0x2c
  400cd8:	4808      	ldr	r0, [pc, #32]	; (400cfc <ili9488_write_ram_prepare+0x34>)
  400cda:	4c09      	ldr	r4, [pc, #36]	; (400d00 <ili9488_write_ram_prepare+0x38>)
  400cdc:	47a0      	blx	r4
	for(i = 0; i < 0xFF; i++);
  400cde:	2300      	movs	r3, #0
  400ce0:	9301      	str	r3, [sp, #4]
  400ce2:	9b01      	ldr	r3, [sp, #4]
  400ce4:	2bfe      	cmp	r3, #254	; 0xfe
  400ce6:	d805      	bhi.n	400cf4 <ili9488_write_ram_prepare+0x2c>
  400ce8:	9b01      	ldr	r3, [sp, #4]
  400cea:	3301      	adds	r3, #1
  400cec:	9301      	str	r3, [sp, #4]
  400cee:	9b01      	ldr	r3, [sp, #4]
  400cf0:	2bfe      	cmp	r3, #254	; 0xfe
  400cf2:	d9f9      	bls.n	400ce8 <ili9488_write_ram_prepare+0x20>
}
  400cf4:	b002      	add	sp, #8
  400cf6:	bd10      	pop	{r4, pc}
  400cf8:	004014d9 	.word	0x004014d9
  400cfc:	40008000 	.word	0x40008000
  400d00:	00401aed 	.word	0x00401aed

00400d04 <ili9488_write_register>:
{
  400d04:	b570      	push	{r4, r5, r6, lr}
  400d06:	b082      	sub	sp, #8
  400d08:	4605      	mov	r5, r0
  400d0a:	460e      	mov	r6, r1
  400d0c:	4614      	mov	r4, r2
	pio_set_pin_low(LCD_SPI_CDS_PIO);
  400d0e:	2006      	movs	r0, #6
  400d10:	4b14      	ldr	r3, [pc, #80]	; (400d64 <ili9488_write_register+0x60>)
  400d12:	4798      	blx	r3
	spi_write(BOARD_ILI9488_SPI, uc_reg, BOARD_ILI9488_SPI_NPCS, 0);
  400d14:	2300      	movs	r3, #0
  400d16:	2203      	movs	r2, #3
  400d18:	4629      	mov	r1, r5
  400d1a:	4813      	ldr	r0, [pc, #76]	; (400d68 <ili9488_write_register+0x64>)
  400d1c:	4d13      	ldr	r5, [pc, #76]	; (400d6c <ili9488_write_register+0x68>)
  400d1e:	47a8      	blx	r5
	for(i = 0; i < 0xFF; i++);
  400d20:	2300      	movs	r3, #0
  400d22:	9301      	str	r3, [sp, #4]
  400d24:	9b01      	ldr	r3, [sp, #4]
  400d26:	2bfe      	cmp	r3, #254	; 0xfe
  400d28:	d805      	bhi.n	400d36 <ili9488_write_register+0x32>
  400d2a:	9b01      	ldr	r3, [sp, #4]
  400d2c:	3301      	adds	r3, #1
  400d2e:	9301      	str	r3, [sp, #4]
  400d30:	9b01      	ldr	r3, [sp, #4]
  400d32:	2bfe      	cmp	r3, #254	; 0xfe
  400d34:	d9f9      	bls.n	400d2a <ili9488_write_register+0x26>
	if(size > 0) {
  400d36:	b90c      	cbnz	r4, 400d3c <ili9488_write_register+0x38>
}
  400d38:	b002      	add	sp, #8
  400d3a:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_pin_high(LCD_SPI_CDS_PIO);
  400d3c:	2006      	movs	r0, #6
  400d3e:	4b0c      	ldr	r3, [pc, #48]	; (400d70 <ili9488_write_register+0x6c>)
  400d40:	4798      	blx	r3
		spi_write_packet(BOARD_ILI9488_SPI, us_data, size);
  400d42:	4622      	mov	r2, r4
  400d44:	4631      	mov	r1, r6
  400d46:	4808      	ldr	r0, [pc, #32]	; (400d68 <ili9488_write_register+0x64>)
  400d48:	4b0a      	ldr	r3, [pc, #40]	; (400d74 <ili9488_write_register+0x70>)
  400d4a:	4798      	blx	r3
		for(i = 0; i < 0x5F; i++);
  400d4c:	2300      	movs	r3, #0
  400d4e:	9301      	str	r3, [sp, #4]
  400d50:	9b01      	ldr	r3, [sp, #4]
  400d52:	2b5e      	cmp	r3, #94	; 0x5e
  400d54:	d8f0      	bhi.n	400d38 <ili9488_write_register+0x34>
  400d56:	9b01      	ldr	r3, [sp, #4]
  400d58:	3301      	adds	r3, #1
  400d5a:	9301      	str	r3, [sp, #4]
  400d5c:	9b01      	ldr	r3, [sp, #4]
  400d5e:	2b5e      	cmp	r3, #94	; 0x5e
  400d60:	d9f9      	bls.n	400d56 <ili9488_write_register+0x52>
  400d62:	e7e9      	b.n	400d38 <ili9488_write_register+0x34>
  400d64:	004014d9 	.word	0x004014d9
  400d68:	40008000 	.word	0x40008000
  400d6c:	00401aed 	.word	0x00401aed
  400d70:	004014bd 	.word	0x004014bd
  400d74:	0040089d 	.word	0x0040089d

00400d78 <ili9488_write_ram_buffer>:
{
  400d78:	b530      	push	{r4, r5, lr}
  400d7a:	b083      	sub	sp, #12
  400d7c:	4604      	mov	r4, r0
  400d7e:	460d      	mov	r5, r1
	pio_set_pin_high(LCD_SPI_CDS_PIO);
  400d80:	2006      	movs	r0, #6
  400d82:	4b0a      	ldr	r3, [pc, #40]	; (400dac <ili9488_write_ram_buffer+0x34>)
  400d84:	4798      	blx	r3
	spi_write_packet(BOARD_ILI9488_SPI, p_ul_buf, ul_size);
  400d86:	462a      	mov	r2, r5
  400d88:	4621      	mov	r1, r4
  400d8a:	4809      	ldr	r0, [pc, #36]	; (400db0 <ili9488_write_ram_buffer+0x38>)
  400d8c:	4b09      	ldr	r3, [pc, #36]	; (400db4 <ili9488_write_ram_buffer+0x3c>)
  400d8e:	4798      	blx	r3
	for(i = 0; i < 0xFF; i++);
  400d90:	2300      	movs	r3, #0
  400d92:	9301      	str	r3, [sp, #4]
  400d94:	9b01      	ldr	r3, [sp, #4]
  400d96:	2bfe      	cmp	r3, #254	; 0xfe
  400d98:	d805      	bhi.n	400da6 <ili9488_write_ram_buffer+0x2e>
  400d9a:	9b01      	ldr	r3, [sp, #4]
  400d9c:	3301      	adds	r3, #1
  400d9e:	9301      	str	r3, [sp, #4]
  400da0:	9b01      	ldr	r3, [sp, #4]
  400da2:	2bfe      	cmp	r3, #254	; 0xfe
  400da4:	d9f9      	bls.n	400d9a <ili9488_write_ram_buffer+0x22>
}
  400da6:	b003      	add	sp, #12
  400da8:	bd30      	pop	{r4, r5, pc}
  400daa:	bf00      	nop
  400dac:	004014bd 	.word	0x004014bd
  400db0:	40008000 	.word	0x40008000
  400db4:	0040089d 	.word	0x0040089d

00400db8 <ili9488_delay>:
	for(i = 0; i < ul_ms; i++) {
  400db8:	4601      	mov	r1, r0
  400dba:	b130      	cbz	r0, 400dca <ili9488_delay+0x12>
  400dbc:	4a03      	ldr	r2, [pc, #12]	; (400dcc <ili9488_delay+0x14>)
{
  400dbe:	4b04      	ldr	r3, [pc, #16]	; (400dd0 <ili9488_delay+0x18>)
		for(i = 0; i < 100000; i++) {
  400dc0:	3b01      	subs	r3, #1
  400dc2:	d1fd      	bne.n	400dc0 <ili9488_delay+0x8>
	for(i = 0; i < ul_ms; i++) {
  400dc4:	4291      	cmp	r1, r2
  400dc6:	d8fa      	bhi.n	400dbe <ili9488_delay+0x6>
  400dc8:	4770      	bx	lr
  400dca:	4770      	bx	lr
  400dcc:	000186a1 	.word	0x000186a1
  400dd0:	000186a0 	.word	0x000186a0

00400dd4 <ili9488_set_display_direction>:
 * \brief ILI9488 configure landscape.
 *
 * \Param LandscaprMode Landscape Mode.
 */
void ili9488_set_display_direction(enum ili9488_display_direction direction )
{
  400dd4:	b500      	push	{lr}
  400dd6:	b083      	sub	sp, #12
	ili9488_color_t value;
	if(direction) {
  400dd8:	b958      	cbnz	r0, 400df2 <ili9488_set_display_direction+0x1e>
		value = 0xE8;
	} else {
		value = 0x48;
  400dda:	2348      	movs	r3, #72	; 0x48
  400ddc:	f88d 3007 	strb.w	r3, [sp, #7]
	}
	ili9488_write_register(ILI9488_CMD_MEMORY_ACCESS_CONTROL, &value, 1);
  400de0:	2201      	movs	r2, #1
  400de2:	f10d 0107 	add.w	r1, sp, #7
  400de6:	2036      	movs	r0, #54	; 0x36
  400de8:	4b04      	ldr	r3, [pc, #16]	; (400dfc <ili9488_set_display_direction+0x28>)
  400dea:	4798      	blx	r3
}
  400dec:	b003      	add	sp, #12
  400dee:	f85d fb04 	ldr.w	pc, [sp], #4
		value = 0xE8;
  400df2:	23e8      	movs	r3, #232	; 0xe8
  400df4:	f88d 3007 	strb.w	r3, [sp, #7]
  400df8:	e7f2      	b.n	400de0 <ili9488_set_display_direction+0xc>
  400dfa:	bf00      	nop
  400dfc:	00400d05 	.word	0x00400d05

00400e00 <ili9488_set_window>:
 * \Param y start position.
 * \Param width  Width of window.
 * \Param height Height of window.
 */
void ili9488_set_window(uint16_t x, uint16_t y, uint16_t width, uint16_t height )
{
  400e00:	b510      	push	{r4, lr}
  400e02:	b084      	sub	sp, #16
	uint32_t cnt = 0;
	ili9488_color_t buf[4];

	cnt = sizeof(buf)/sizeof(ili9488_color_t);

	col_start  =  x ;
  400e04:	f8ad 000e 	strh.w	r0, [sp, #14]
	col_end    =  width + x - 1;
  400e08:	3a01      	subs	r2, #1
  400e0a:	4402      	add	r2, r0
  400e0c:	f8ad 200c 	strh.w	r2, [sp, #12]

	row_start = y ;
  400e10:	f8ad 100a 	strh.w	r1, [sp, #10]
	row_end   = height + y - 1;
  400e14:	3b01      	subs	r3, #1
  400e16:	4419      	add	r1, r3
  400e18:	f8ad 1008 	strh.w	r1, [sp, #8]

	buf[0] = get_8b_to_16b(col_start);
  400e1c:	0a03      	lsrs	r3, r0, #8
  400e1e:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = get_0b_to_8b(col_start);
  400e22:	f88d 0005 	strb.w	r0, [sp, #5]
	buf[2] = get_8b_to_16b(col_end);
  400e26:	f3c2 2307 	ubfx	r3, r2, #8, #8
  400e2a:	f88d 3006 	strb.w	r3, [sp, #6]
	buf[3] = get_0b_to_8b(col_end);
  400e2e:	f88d 2007 	strb.w	r2, [sp, #7]
	ili9488_write_register(ILI9488_CMD_COLUMN_ADDRESS_SET, buf, cnt);
  400e32:	2204      	movs	r2, #4
  400e34:	eb0d 0102 	add.w	r1, sp, r2
  400e38:	202a      	movs	r0, #42	; 0x2a
  400e3a:	4c10      	ldr	r4, [pc, #64]	; (400e7c <ili9488_set_window+0x7c>)
  400e3c:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  400e3e:	2200      	movs	r2, #0
  400e40:	4611      	mov	r1, r2
  400e42:	4610      	mov	r0, r2
  400e44:	47a0      	blx	r4

	/* Set Horizontal Address End Position */
	buf[0] = get_8b_to_16b(row_start);
  400e46:	f89d 300b 	ldrb.w	r3, [sp, #11]
  400e4a:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = get_0b_to_8b(row_start);
  400e4e:	f89d 300a 	ldrb.w	r3, [sp, #10]
  400e52:	f88d 3005 	strb.w	r3, [sp, #5]
	buf[2] = get_8b_to_16b(row_end);
  400e56:	f89d 3009 	ldrb.w	r3, [sp, #9]
  400e5a:	f88d 3006 	strb.w	r3, [sp, #6]
	buf[3] = get_0b_to_8b(row_end);
  400e5e:	f89d 3008 	ldrb.w	r3, [sp, #8]
  400e62:	f88d 3007 	strb.w	r3, [sp, #7]
	ili9488_write_register(ILI9488_CMD_PAGE_ADDRESS_SET, buf, cnt);
  400e66:	2204      	movs	r2, #4
  400e68:	eb0d 0102 	add.w	r1, sp, r2
  400e6c:	202b      	movs	r0, #43	; 0x2b
  400e6e:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  400e70:	2200      	movs	r2, #0
  400e72:	4611      	mov	r1, r2
  400e74:	4610      	mov	r0, r2
  400e76:	47a0      	blx	r4
}
  400e78:	b004      	add	sp, #16
  400e7a:	bd10      	pop	{r4, pc}
  400e7c:	00400d05 	.word	0x00400d05

00400e80 <ili9488_display_on>:

/**
 * \brief Turn on the LCD.
 */
void ili9488_display_on(void)
{
  400e80:	b508      	push	{r3, lr}
	ili9488_write_register(ILI9488_CMD_DISPLAY_ON, 0, 0);
  400e82:	2200      	movs	r2, #0
  400e84:	4611      	mov	r1, r2
  400e86:	2029      	movs	r0, #41	; 0x29
  400e88:	4b01      	ldr	r3, [pc, #4]	; (400e90 <ili9488_display_on+0x10>)
  400e8a:	4798      	blx	r3
  400e8c:	bd08      	pop	{r3, pc}
  400e8e:	bf00      	nop
  400e90:	00400d05 	.word	0x00400d05

00400e94 <ili9488_set_foreground_color>:
 * \brief Set foreground color.
 *
 * \param ul_color foreground color.
 */
void ili9488_set_foreground_color(uint32_t ul_color)
{
  400e94:	b410      	push	{r4}
		g_ul_pixel_cache[i] = ul_color;
	}
#endif
#ifdef ILI9488_SPIMODE
	for (i = 0; i < LCD_DATA_CACHE_SIZE * LCD_DATA_COLOR_UNIT; ) {
		g_ul_pixel_cache[i++] = ul_color>>16;
  400e96:	f3c0 4407 	ubfx	r4, r0, #16, #8
		g_ul_pixel_cache[i++] = ul_color>>8;
  400e9a:	f3c0 2107 	ubfx	r1, r0, #8, #8
  400e9e:	4b06      	ldr	r3, [pc, #24]	; (400eb8 <ili9488_set_foreground_color+0x24>)
  400ea0:	f503 7270 	add.w	r2, r3, #960	; 0x3c0
		g_ul_pixel_cache[i++] = ul_color>>16;
  400ea4:	701c      	strb	r4, [r3, #0]
		g_ul_pixel_cache[i++] = ul_color>>8;
  400ea6:	7059      	strb	r1, [r3, #1]
		g_ul_pixel_cache[i++] = ul_color&0xFF;
  400ea8:	7098      	strb	r0, [r3, #2]
  400eaa:	3303      	adds	r3, #3
	for (i = 0; i < LCD_DATA_CACHE_SIZE * LCD_DATA_COLOR_UNIT; ) {
  400eac:	4293      	cmp	r3, r2
  400eae:	d1f9      	bne.n	400ea4 <ili9488_set_foreground_color+0x10>
	}
#endif
}
  400eb0:	f85d 4b04 	ldr.w	r4, [sp], #4
  400eb4:	4770      	bx	lr
  400eb6:	bf00      	nop
  400eb8:	20400b0c 	.word	0x20400b0c

00400ebc <ili9488_set_cursor_position>:
 *
 * \param x X coordinate of upper-left corner on LCD.
 * \param y Y coordinate of upper-left corner on LCD.
 */
void ili9488_set_cursor_position(uint16_t x, uint16_t y)
{
  400ebc:	b510      	push	{r4, lr}
  400ebe:	b084      	sub	sp, #16
  400ec0:	f8ad 0006 	strh.w	r0, [sp, #6]
  400ec4:	f8ad 1004 	strh.w	r1, [sp, #4]
	uint32_t cnt = 0;

	ili9488_color_t buf[4];
	cnt = sizeof(buf)/sizeof(ili9488_color_t);

	buf[0] = get_8b_to_16b(x);
  400ec8:	0a03      	lsrs	r3, r0, #8
  400eca:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[1] = get_0b_to_8b(x);
  400ece:	b2c0      	uxtb	r0, r0
  400ed0:	f88d 000d 	strb.w	r0, [sp, #13]
	buf[2] = get_8b_to_16b(x);
  400ed4:	f88d 300e 	strb.w	r3, [sp, #14]
	buf[3] = get_0b_to_8b(x);
  400ed8:	f88d 000f 	strb.w	r0, [sp, #15]
	ili9488_write_register(ILI9488_CMD_COLUMN_ADDRESS_SET, buf, cnt);
  400edc:	2204      	movs	r2, #4
  400ede:	a903      	add	r1, sp, #12
  400ee0:	202a      	movs	r0, #42	; 0x2a
  400ee2:	4c0e      	ldr	r4, [pc, #56]	; (400f1c <ili9488_set_cursor_position+0x60>)
  400ee4:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  400ee6:	2200      	movs	r2, #0
  400ee8:	4611      	mov	r1, r2
  400eea:	4610      	mov	r0, r2
  400eec:	47a0      	blx	r4


	/* Set Horizontal Address End Position */
	buf[0] = get_8b_to_16b(y);
  400eee:	f89d 2005 	ldrb.w	r2, [sp, #5]
  400ef2:	f88d 200c 	strb.w	r2, [sp, #12]
	buf[1] = get_0b_to_8b(y);
  400ef6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  400efa:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[2] = get_8b_to_16b(y);
  400efe:	f88d 200e 	strb.w	r2, [sp, #14]
	buf[3] = get_0b_to_8b(y);
  400f02:	f88d 300f 	strb.w	r3, [sp, #15]
	ili9488_write_register(ILI9488_CMD_PAGE_ADDRESS_SET, buf, cnt);
  400f06:	2204      	movs	r2, #4
  400f08:	a903      	add	r1, sp, #12
  400f0a:	202b      	movs	r0, #43	; 0x2b
  400f0c:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  400f0e:	2200      	movs	r2, #0
  400f10:	4611      	mov	r1, r2
  400f12:	4610      	mov	r0, r2
  400f14:	47a0      	blx	r4
}
  400f16:	b004      	add	sp, #16
  400f18:	bd10      	pop	{r4, pc}
  400f1a:	bf00      	nop
  400f1c:	00400d05 	.word	0x00400d05

00400f20 <ili9488_init>:
{
  400f20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400f24:	b087      	sub	sp, #28
  400f26:	4681      	mov	r9, r0
	struct spi_device ILI9488_SPI_DEVICE = {
  400f28:	2703      	movs	r7, #3
  400f2a:	ae06      	add	r6, sp, #24
  400f2c:	f846 7d08 	str.w	r7, [r6, #-8]!
	spi_master_init(BOARD_ILI9488_SPI);
  400f30:	4d5d      	ldr	r5, [pc, #372]	; (4010a8 <ili9488_init+0x188>)
  400f32:	4628      	mov	r0, r5
  400f34:	4b5d      	ldr	r3, [pc, #372]	; (4010ac <ili9488_init+0x18c>)
  400f36:	4798      	blx	r3
	spi_master_setup_device(BOARD_ILI9488_SPI, &ILI9488_SPI_DEVICE, SPI_MODE_3, ILI9488_SPI_BAUDRATE, 0);
  400f38:	2400      	movs	r4, #0
  400f3a:	9400      	str	r4, [sp, #0]
  400f3c:	4b5c      	ldr	r3, [pc, #368]	; (4010b0 <ili9488_init+0x190>)
  400f3e:	463a      	mov	r2, r7
  400f40:	4631      	mov	r1, r6
  400f42:	4628      	mov	r0, r5
  400f44:	f8df 8198 	ldr.w	r8, [pc, #408]	; 4010e0 <ili9488_init+0x1c0>
  400f48:	47c0      	blx	r8
	spi_configure_cs_behavior(BOARD_ILI9488_SPI, BOARD_ILI9488_SPI_NPCS, SPI_CS_RISE_NO_TX);
  400f4a:	4622      	mov	r2, r4
  400f4c:	4639      	mov	r1, r7
  400f4e:	4628      	mov	r0, r5
  400f50:	4b58      	ldr	r3, [pc, #352]	; (4010b4 <ili9488_init+0x194>)
  400f52:	4798      	blx	r3
	spi_select_device(BOARD_ILI9488_SPI, &ILI9488_SPI_DEVICE);
  400f54:	4631      	mov	r1, r6
  400f56:	4628      	mov	r0, r5
  400f58:	4b57      	ldr	r3, [pc, #348]	; (4010b8 <ili9488_init+0x198>)
  400f5a:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400f5c:	2001      	movs	r0, #1
  400f5e:	6028      	str	r0, [r5, #0]
 * \param p_spi Pointer to an SPI instance.
 * \param ul_sources Interrupts to be enabled.
 */
static inline void spi_enable_interrupt(Spi *p_spi, uint32_t ul_sources)
{
	p_spi->SPI_IER = ul_sources;
  400f60:	6168      	str	r0, [r5, #20]
	ili9488_write_register(ILI9488_CMD_SOFTWARE_RESET, 0x0000, 0);
  400f62:	4622      	mov	r2, r4
  400f64:	4621      	mov	r1, r4
  400f66:	4e55      	ldr	r6, [pc, #340]	; (4010bc <ili9488_init+0x19c>)
  400f68:	47b0      	blx	r6
	ili9488_delay(200);
  400f6a:	20c8      	movs	r0, #200	; 0xc8
  400f6c:	4d54      	ldr	r5, [pc, #336]	; (4010c0 <ili9488_init+0x1a0>)
  400f6e:	47a8      	blx	r5
	ili9488_write_register(ILI9488_CMD_SLEEP_OUT, 0x0000, 0);
  400f70:	4622      	mov	r2, r4
  400f72:	4621      	mov	r1, r4
  400f74:	2011      	movs	r0, #17
  400f76:	47b0      	blx	r6
	ili9488_delay(200);
  400f78:	20c8      	movs	r0, #200	; 0xc8
  400f7a:	47a8      	blx	r5
	reg = 0x81;
  400f7c:	2381      	movs	r3, #129	; 0x81
  400f7e:	f88d 300a 	strb.w	r3, [sp, #10]
	param = 0x0;
  400f82:	f88d 400b 	strb.w	r4, [sp, #11]
  400f86:	2610      	movs	r6, #16
		ili9488_write_register(ILI9488_CMD_SPI_READ_SETTINGS, &reg, 1);
  400f88:	f04f 0801 	mov.w	r8, #1
  400f8c:	4f4b      	ldr	r7, [pc, #300]	; (4010bc <ili9488_init+0x19c>)
		for(j = 0; j < 0xFF; j++);
  400f8e:	4625      	mov	r5, r4
		ili9488_write_register(ILI9488_CMD_SPI_READ_SETTINGS, &reg, 1);
  400f90:	4642      	mov	r2, r8
  400f92:	f10d 010a 	add.w	r1, sp, #10
  400f96:	20fb      	movs	r0, #251	; 0xfb
  400f98:	47b8      	blx	r7
		reg++;
  400f9a:	f89d 300a 	ldrb.w	r3, [sp, #10]
  400f9e:	3301      	adds	r3, #1
  400fa0:	f88d 300a 	strb.w	r3, [sp, #10]
		for(j = 0; j < 0xFF; j++);
  400fa4:	9503      	str	r5, [sp, #12]
  400fa6:	9b03      	ldr	r3, [sp, #12]
  400fa8:	2bfe      	cmp	r3, #254	; 0xfe
  400faa:	d805      	bhi.n	400fb8 <ili9488_init+0x98>
  400fac:	9b03      	ldr	r3, [sp, #12]
  400fae:	3301      	adds	r3, #1
  400fb0:	9303      	str	r3, [sp, #12]
  400fb2:	9b03      	ldr	r3, [sp, #12]
  400fb4:	2bfe      	cmp	r3, #254	; 0xfe
  400fb6:	d9f9      	bls.n	400fac <ili9488_init+0x8c>
		ili9488_write_register(ILI9488_CMD_READ_ID4, 0, 0);
  400fb8:	462a      	mov	r2, r5
  400fba:	4629      	mov	r1, r5
  400fbc:	20d3      	movs	r0, #211	; 0xd3
  400fbe:	47b8      	blx	r7
			pio_set_pin_high(LCD_SPI_CDS_PIO);
  400fc0:	2006      	movs	r0, #6
  400fc2:	4b40      	ldr	r3, [pc, #256]	; (4010c4 <ili9488_init+0x1a4>)
  400fc4:	4798      	blx	r3
			spi_read_packet(BOARD_ILI9488_SPI, &chipidBuf, 1);
  400fc6:	4642      	mov	r2, r8
  400fc8:	f10d 0109 	add.w	r1, sp, #9
  400fcc:	4836      	ldr	r0, [pc, #216]	; (4010a8 <ili9488_init+0x188>)
  400fce:	4b3e      	ldr	r3, [pc, #248]	; (4010c8 <ili9488_init+0x1a8>)
  400fd0:	4798      	blx	r3
			for(j = 0; j < 0xFF; j++);
  400fd2:	9503      	str	r5, [sp, #12]
  400fd4:	9b03      	ldr	r3, [sp, #12]
  400fd6:	2bfe      	cmp	r3, #254	; 0xfe
  400fd8:	d805      	bhi.n	400fe6 <ili9488_init+0xc6>
  400fda:	9b03      	ldr	r3, [sp, #12]
  400fdc:	3301      	adds	r3, #1
  400fde:	9303      	str	r3, [sp, #12]
  400fe0:	9b03      	ldr	r3, [sp, #12]
  400fe2:	2bfe      	cmp	r3, #254	; 0xfe
  400fe4:	d9f9      	bls.n	400fda <ili9488_init+0xba>
		chipid |= (chipidBuf & 0xFF) << ((i - 1) << 3);
  400fe6:	f89d 3009 	ldrb.w	r3, [sp, #9]
  400fea:	40b3      	lsls	r3, r6
  400fec:	431c      	orrs	r4, r3
		ili9488_write_register(ILI9488_CMD_SPI_READ_SETTINGS, &param, 1);
  400fee:	4642      	mov	r2, r8
  400ff0:	f10d 010b 	add.w	r1, sp, #11
  400ff4:	20fb      	movs	r0, #251	; 0xfb
  400ff6:	47b8      	blx	r7
		for(j = 0; j < 0xFFF; j++);
  400ff8:	9503      	str	r5, [sp, #12]
  400ffa:	9a03      	ldr	r2, [sp, #12]
  400ffc:	f640 73fe 	movw	r3, #4094	; 0xffe
  401000:	429a      	cmp	r2, r3
  401002:	d806      	bhi.n	401012 <ili9488_init+0xf2>
  401004:	461a      	mov	r2, r3
  401006:	9b03      	ldr	r3, [sp, #12]
  401008:	3301      	adds	r3, #1
  40100a:	9303      	str	r3, [sp, #12]
  40100c:	9b03      	ldr	r3, [sp, #12]
  40100e:	4293      	cmp	r3, r2
  401010:	d9f9      	bls.n	401006 <ili9488_init+0xe6>
  401012:	3e08      	subs	r6, #8
	for (i = 3; i > 0; i--) {
  401014:	f116 0f08 	cmn.w	r6, #8
  401018:	d1ba      	bne.n	400f90 <ili9488_init+0x70>
	if (chipid != ILI9488_DEVICE_CODE) {
  40101a:	f249 4388 	movw	r3, #38024	; 0x9488
  40101e:	429c      	cmp	r4, r3
  401020:	d003      	beq.n	40102a <ili9488_init+0x10a>
		return 1;
  401022:	2001      	movs	r0, #1
}
  401024:	b007      	add	sp, #28
  401026:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	param = 0x48;
  40102a:	ad06      	add	r5, sp, #24
  40102c:	2348      	movs	r3, #72	; 0x48
  40102e:	f805 3d01 	strb.w	r3, [r5, #-1]!
	ili9488_write_register(ILI9488_CMD_MEMORY_ACCESS_CONTROL, &param, 1);
  401032:	2201      	movs	r2, #1
  401034:	4629      	mov	r1, r5
  401036:	2036      	movs	r0, #54	; 0x36
  401038:	4e20      	ldr	r6, [pc, #128]	; (4010bc <ili9488_init+0x19c>)
  40103a:	47b0      	blx	r6
	ili9488_delay(100);
  40103c:	2064      	movs	r0, #100	; 0x64
  40103e:	4c20      	ldr	r4, [pc, #128]	; (4010c0 <ili9488_init+0x1a0>)
  401040:	47a0      	blx	r4
	param = 0x04;
  401042:	2304      	movs	r3, #4
  401044:	f88d 3017 	strb.w	r3, [sp, #23]
	ili9488_write_register(ILI9488_CMD_CABC_CONTROL_9, &param, 1);
  401048:	2201      	movs	r2, #1
  40104a:	4629      	mov	r1, r5
  40104c:	20cf      	movs	r0, #207	; 0xcf
  40104e:	47b0      	blx	r6
	ili9488_delay(100);
  401050:	2064      	movs	r0, #100	; 0x64
  401052:	47a0      	blx	r4
	param = 0x06;
  401054:	2306      	movs	r3, #6
  401056:	f88d 3017 	strb.w	r3, [sp, #23]
	ili9488_write_register(ILI9488_CMD_COLMOD_PIXEL_FORMAT_SET, &param, 1);
  40105a:	2201      	movs	r2, #1
  40105c:	4629      	mov	r1, r5
  40105e:	203a      	movs	r0, #58	; 0x3a
  401060:	47b0      	blx	r6
	ili9488_delay(100);
  401062:	2064      	movs	r0, #100	; 0x64
  401064:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NORMAL_DISP_MODE_ON, 0, 0);
  401066:	2200      	movs	r2, #0
  401068:	4611      	mov	r1, r2
  40106a:	2013      	movs	r0, #19
  40106c:	47b0      	blx	r6
	ili9488_delay(100);
  40106e:	2064      	movs	r0, #100	; 0x64
  401070:	47a0      	blx	r4
	ili9488_display_on();
  401072:	4b16      	ldr	r3, [pc, #88]	; (4010cc <ili9488_init+0x1ac>)
  401074:	4798      	blx	r3
	ili9488_delay(100);
  401076:	2064      	movs	r0, #100	; 0x64
  401078:	47a0      	blx	r4
	ili9488_set_display_direction(LANDSCAPE);
  40107a:	2000      	movs	r0, #0
  40107c:	4b14      	ldr	r3, [pc, #80]	; (4010d0 <ili9488_init+0x1b0>)
  40107e:	4798      	blx	r3
	ili9488_delay(100);
  401080:	2064      	movs	r0, #100	; 0x64
  401082:	47a0      	blx	r4
	ili9488_set_window(0, 0,p_opt->ul_width,p_opt->ul_height);
  401084:	f8b9 3004 	ldrh.w	r3, [r9, #4]
  401088:	f8b9 2000 	ldrh.w	r2, [r9]
  40108c:	2100      	movs	r1, #0
  40108e:	4608      	mov	r0, r1
  401090:	4c10      	ldr	r4, [pc, #64]	; (4010d4 <ili9488_init+0x1b4>)
  401092:	47a0      	blx	r4
	ili9488_set_foreground_color(p_opt->foreground_color);
  401094:	f8d9 0008 	ldr.w	r0, [r9, #8]
  401098:	4b0f      	ldr	r3, [pc, #60]	; (4010d8 <ili9488_init+0x1b8>)
  40109a:	4798      	blx	r3
	ili9488_set_cursor_position(0, 0);
  40109c:	2100      	movs	r1, #0
  40109e:	4608      	mov	r0, r1
  4010a0:	4b0e      	ldr	r3, [pc, #56]	; (4010dc <ili9488_init+0x1bc>)
  4010a2:	4798      	blx	r3
	return 0;
  4010a4:	2000      	movs	r0, #0
  4010a6:	e7bd      	b.n	401024 <ili9488_init+0x104>
  4010a8:	40008000 	.word	0x40008000
  4010ac:	00400799 	.word	0x00400799
  4010b0:	01312d00 	.word	0x01312d00
  4010b4:	00401b5d 	.word	0x00401b5d
  4010b8:	0040086d 	.word	0x0040086d
  4010bc:	00400d05 	.word	0x00400d05
  4010c0:	00400db9 	.word	0x00400db9
  4010c4:	004014bd 	.word	0x004014bd
  4010c8:	004008d3 	.word	0x004008d3
  4010cc:	00400e81 	.word	0x00400e81
  4010d0:	00400dd5 	.word	0x00400dd5
  4010d4:	00400e01 	.word	0x00400e01
  4010d8:	00400e95 	.word	0x00400e95
  4010dc:	00400ebd 	.word	0x00400ebd
  4010e0:	004007ed 	.word	0x004007ed

004010e4 <ili9488_draw_pixel>:
 *
 * \return 0 if succeeds, otherwise fails.
 */
uint32_t ili9488_draw_pixel(uint32_t ul_x, uint32_t ul_y)
{
	if ((ul_x >= ILI9488_LCD_WIDTH) || (ul_y >= ILI9488_LCD_HEIGHT)) {
  4010e4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4010e8:	d20f      	bcs.n	40110a <ili9488_draw_pixel+0x26>
  4010ea:	f5b1 7ff0 	cmp.w	r1, #480	; 0x1e0
  4010ee:	d20c      	bcs.n	40110a <ili9488_draw_pixel+0x26>
{
  4010f0:	b508      	push	{r3, lr}
		return 1;
	}

	/* Set cursor */
	ili9488_set_cursor_position(ul_x, ul_y);
  4010f2:	b289      	uxth	r1, r1
  4010f4:	b280      	uxth	r0, r0
  4010f6:	4b06      	ldr	r3, [pc, #24]	; (401110 <ili9488_draw_pixel+0x2c>)
  4010f8:	4798      	blx	r3

	/* Prepare to write in GRAM */
	ili9488_write_ram_prepare();
  4010fa:	4b06      	ldr	r3, [pc, #24]	; (401114 <ili9488_draw_pixel+0x30>)
  4010fc:	4798      	blx	r3
	ili9488_write_ram_buffer(g_ul_pixel_cache, LCD_DATA_COLOR_UNIT);
  4010fe:	2103      	movs	r1, #3
  401100:	4805      	ldr	r0, [pc, #20]	; (401118 <ili9488_draw_pixel+0x34>)
  401102:	4b06      	ldr	r3, [pc, #24]	; (40111c <ili9488_draw_pixel+0x38>)
  401104:	4798      	blx	r3
	return 0;
  401106:	2000      	movs	r0, #0
  401108:	bd08      	pop	{r3, pc}
		return 1;
  40110a:	2001      	movs	r0, #1
  40110c:	4770      	bx	lr
  40110e:	bf00      	nop
  401110:	00400ebd 	.word	0x00400ebd
  401114:	00400cc9 	.word	0x00400cc9
  401118:	20400b0c 	.word	0x20400b0c
  40111c:	00400d79 	.word	0x00400d79

00401120 <ili9488_draw_filled_rectangle>:
 * \param ul_x2 X coordinate of lower-right corner on LCD.
 * \param ul_y2 Y coordinate of lower-right corner on LCD.
 */
void ili9488_draw_filled_rectangle(uint32_t ul_x1, uint32_t ul_y1,
		uint32_t ul_x2, uint32_t ul_y2)
{
  401120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401124:	b084      	sub	sp, #16
  401126:	9003      	str	r0, [sp, #12]
  401128:	9102      	str	r1, [sp, #8]
  40112a:	9201      	str	r2, [sp, #4]
  40112c:	aa04      	add	r2, sp, #16
  40112e:	f842 3d10 	str.w	r3, [r2, #-16]!
	uint32_t size, blocks;

	/* Swap coordinates if necessary */
	ili9488_check_box_coordinates(&ul_x1, &ul_y1, &ul_x2, &ul_y2);
  401132:	4613      	mov	r3, r2
  401134:	aa01      	add	r2, sp, #4
  401136:	a902      	add	r1, sp, #8
  401138:	a803      	add	r0, sp, #12
  40113a:	4c22      	ldr	r4, [pc, #136]	; (4011c4 <ili9488_draw_filled_rectangle+0xa4>)
  40113c:	47a0      	blx	r4

	/* Determine the refresh window area */
	ili9488_set_window(ul_x1, ul_y1, (ul_x2 - ul_x1) + 1, (ul_y2 - ul_y1) + 1);
  40113e:	f8bd 000c 	ldrh.w	r0, [sp, #12]
  401142:	f8bd 1008 	ldrh.w	r1, [sp, #8]
  401146:	9b00      	ldr	r3, [sp, #0]
  401148:	3301      	adds	r3, #1
  40114a:	1a5b      	subs	r3, r3, r1
  40114c:	9a01      	ldr	r2, [sp, #4]
  40114e:	3201      	adds	r2, #1
  401150:	1a12      	subs	r2, r2, r0
  401152:	b29b      	uxth	r3, r3
  401154:	b292      	uxth	r2, r2
  401156:	4c1c      	ldr	r4, [pc, #112]	; (4011c8 <ili9488_draw_filled_rectangle+0xa8>)
  401158:	47a0      	blx	r4

	/* Prepare to write in GRAM */
	ili9488_write_ram_prepare();
  40115a:	4b1c      	ldr	r3, [pc, #112]	; (4011cc <ili9488_draw_filled_rectangle+0xac>)
  40115c:	4798      	blx	r3

	size = (ul_x2 - ul_x1 + 1) * (ul_y2 - ul_y1 + 1);
  40115e:	9903      	ldr	r1, [sp, #12]
  401160:	9d01      	ldr	r5, [sp, #4]
  401162:	1a69      	subs	r1, r5, r1
  401164:	9d00      	ldr	r5, [sp, #0]
  401166:	3501      	adds	r5, #1
  401168:	9b02      	ldr	r3, [sp, #8]
  40116a:	1aed      	subs	r5, r5, r3
  40116c:	fb01 5505 	mla	r5, r1, r5, r5
	/* Send pixels blocks => one SPI IT / block */
	blocks = size / LCD_DATA_CACHE_SIZE;
  401170:	4b17      	ldr	r3, [pc, #92]	; (4011d0 <ili9488_draw_filled_rectangle+0xb0>)
  401172:	fba3 2305 	umull	r2, r3, r3, r5
  401176:	0a1b      	lsrs	r3, r3, #8
	while (blocks--) {
  401178:	b163      	cbz	r3, 401194 <ili9488_draw_filled_rectangle+0x74>
  40117a:	1e5c      	subs	r4, r3, #1
		ili9488_write_ram_buffer(g_ul_pixel_cache, LCD_DATA_CACHE_SIZE * LCD_DATA_COLOR_UNIT);
  40117c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 4011d8 <ili9488_draw_filled_rectangle+0xb8>
  401180:	f44f 7770 	mov.w	r7, #960	; 0x3c0
  401184:	4e13      	ldr	r6, [pc, #76]	; (4011d4 <ili9488_draw_filled_rectangle+0xb4>)
  401186:	4639      	mov	r1, r7
  401188:	4640      	mov	r0, r8
  40118a:	47b0      	blx	r6
	while (blocks--) {
  40118c:	3c01      	subs	r4, #1
  40118e:	f1b4 3fff 	cmp.w	r4, #4294967295
  401192:	d1f8      	bne.n	401186 <ili9488_draw_filled_rectangle+0x66>
	}

	/* Send remaining pixels */
	ili9488_write_ram_buffer(g_ul_pixel_cache, (size % LCD_DATA_CACHE_SIZE) * LCD_DATA_COLOR_UNIT);
  401194:	490e      	ldr	r1, [pc, #56]	; (4011d0 <ili9488_draw_filled_rectangle+0xb0>)
  401196:	fba1 3105 	umull	r3, r1, r1, r5
  40119a:	0a09      	lsrs	r1, r1, #8
  40119c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  4011a0:	eba5 1181 	sub.w	r1, r5, r1, lsl #6
  4011a4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  4011a8:	480b      	ldr	r0, [pc, #44]	; (4011d8 <ili9488_draw_filled_rectangle+0xb8>)
  4011aa:	4b0a      	ldr	r3, [pc, #40]	; (4011d4 <ili9488_draw_filled_rectangle+0xb4>)
  4011ac:	4798      	blx	r3

	/* Reset the refresh window area */
	ili9488_set_window(0, 0, ILI9488_LCD_WIDTH, ILI9488_LCD_HEIGHT);
  4011ae:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  4011b2:	f44f 72a0 	mov.w	r2, #320	; 0x140
  4011b6:	2100      	movs	r1, #0
  4011b8:	4608      	mov	r0, r1
  4011ba:	4c03      	ldr	r4, [pc, #12]	; (4011c8 <ili9488_draw_filled_rectangle+0xa8>)
  4011bc:	47a0      	blx	r4

}
  4011be:	b004      	add	sp, #16
  4011c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4011c4:	00400c71 	.word	0x00400c71
  4011c8:	00400e01 	.word	0x00400e01
  4011cc:	00400cc9 	.word	0x00400cc9
  4011d0:	cccccccd 	.word	0xcccccccd
  4011d4:	00400d79 	.word	0x00400d79
  4011d8:	20400b0c 	.word	0x20400b0c

004011dc <ili9488_draw_filled_circle>:
	signed int d;       /* Decision Variable */
	uint32_t dwCurX;    /* Current X Value */
	uint32_t dwCurY;    /* Current Y Value */
	uint32_t dwXmin, dwYmin;

	if (ul_r == 0) {
  4011dc:	2a00      	cmp	r2, #0
  4011de:	d04a      	beq.n	401276 <ili9488_draw_filled_circle+0x9a>
{
  4011e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4011e4:	4607      	mov	r7, r0
  4011e6:	4688      	mov	r8, r1
  4011e8:	4615      	mov	r5, r2
		return 1;
	}

	d = 3 - (ul_r << 1);
  4011ea:	0056      	lsls	r6, r2, #1
  4011ec:	f1c6 0603 	rsb	r6, r6, #3
	dwCurX = 0;
  4011f0:	2400      	movs	r4, #0
	dwCurY = ul_r;

	while (dwCurX <= dwCurY) {
		dwXmin = (dwCurX > ul_x) ? 0 : ul_x - dwCurX;
		dwYmin = (dwCurY > ul_y) ? 0 : ul_y - dwCurY;
		ili9488_draw_filled_rectangle(dwXmin, dwYmin, ul_x + dwCurX, dwYmin);
  4011f2:	f8df a088 	ldr.w	sl, [pc, #136]	; 40127c <ili9488_draw_filled_circle+0xa0>
  4011f6:	e005      	b.n	401204 <ili9488_draw_filled_circle+0x28>
		dwYmin = (dwCurX > ul_y) ? 0 : ul_y - dwCurX;
		ili9488_draw_filled_rectangle(dwXmin, dwYmin, ul_x + dwCurY, dwYmin);
		ili9488_draw_filled_rectangle(dwXmin, ul_y + dwCurX, ul_x + dwCurY, ul_y + dwCurX);

		if (d < 0) {
			d += (dwCurX << 2) + 6;
  4011f8:	3606      	adds	r6, #6
  4011fa:	eb06 0684 	add.w	r6, r6, r4, lsl #2
		} else {
			d += ((dwCurX - dwCurY) << 2) + 10;
			dwCurY--;
		}

		dwCurX++;
  4011fe:	3401      	adds	r4, #1
	while (dwCurX <= dwCurY) {
  401200:	42a5      	cmp	r5, r4
  401202:	d335      	bcc.n	401270 <ili9488_draw_filled_circle+0x94>
		dwXmin = (dwCurX > ul_x) ? 0 : ul_x - dwCurX;
  401204:	42a7      	cmp	r7, r4
  401206:	bf2c      	ite	cs
  401208:	eba7 0b04 	subcs.w	fp, r7, r4
  40120c:	f04f 0b00 	movcc.w	fp, #0
		dwYmin = (dwCurY > ul_y) ? 0 : ul_y - dwCurY;
  401210:	45a8      	cmp	r8, r5
  401212:	bf2c      	ite	cs
  401214:	eba8 0105 	subcs.w	r1, r8, r5
  401218:	2100      	movcc	r1, #0
		ili9488_draw_filled_rectangle(dwXmin, dwYmin, ul_x + dwCurX, dwYmin);
  40121a:	eb07 0904 	add.w	r9, r7, r4
  40121e:	460b      	mov	r3, r1
  401220:	464a      	mov	r2, r9
  401222:	4658      	mov	r0, fp
  401224:	47d0      	blx	sl
		ili9488_draw_filled_rectangle(dwXmin, ul_y + dwCurY, ul_x + dwCurX, ul_y + dwCurY);
  401226:	eb08 0105 	add.w	r1, r8, r5
  40122a:	460b      	mov	r3, r1
  40122c:	464a      	mov	r2, r9
  40122e:	4658      	mov	r0, fp
  401230:	47d0      	blx	sl
		dwXmin = (dwCurY > ul_x) ? 0 : ul_x - dwCurY;
  401232:	42af      	cmp	r7, r5
  401234:	bf2c      	ite	cs
  401236:	eba7 0b05 	subcs.w	fp, r7, r5
  40123a:	f04f 0b00 	movcc.w	fp, #0
		dwYmin = (dwCurX > ul_y) ? 0 : ul_y - dwCurX;
  40123e:	45a0      	cmp	r8, r4
  401240:	bf2c      	ite	cs
  401242:	eba8 0104 	subcs.w	r1, r8, r4
  401246:	2100      	movcc	r1, #0
		ili9488_draw_filled_rectangle(dwXmin, dwYmin, ul_x + dwCurY, dwYmin);
  401248:	eb07 0905 	add.w	r9, r7, r5
  40124c:	460b      	mov	r3, r1
  40124e:	464a      	mov	r2, r9
  401250:	4658      	mov	r0, fp
  401252:	47d0      	blx	sl
		ili9488_draw_filled_rectangle(dwXmin, ul_y + dwCurX, ul_x + dwCurY, ul_y + dwCurX);
  401254:	eb08 0104 	add.w	r1, r8, r4
  401258:	460b      	mov	r3, r1
  40125a:	464a      	mov	r2, r9
  40125c:	4658      	mov	r0, fp
  40125e:	47d0      	blx	sl
		if (d < 0) {
  401260:	2e00      	cmp	r6, #0
  401262:	dbc9      	blt.n	4011f8 <ili9488_draw_filled_circle+0x1c>
			d += ((dwCurX - dwCurY) << 2) + 10;
  401264:	1b63      	subs	r3, r4, r5
  401266:	360a      	adds	r6, #10
  401268:	eb06 0683 	add.w	r6, r6, r3, lsl #2
			dwCurY--;
  40126c:	3d01      	subs	r5, #1
  40126e:	e7c6      	b.n	4011fe <ili9488_draw_filled_circle+0x22>
	}

	return 0;
  401270:	2000      	movs	r0, #0
  401272:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 1;
  401276:	2001      	movs	r0, #1
  401278:	4770      	bx	lr
  40127a:	bf00      	nop
  40127c:	00401121 	.word	0x00401121

00401280 <ili9488_draw_string>:
 * \param ul_x X coordinate of string top-left corner.
 * \param ul_y Y coordinate of string top-left corner.
 * \param p_str String to display.
 */
void ili9488_draw_string(uint32_t ul_x, uint32_t ul_y, const uint8_t *p_str)
{
  401280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401284:	b085      	sub	sp, #20
  401286:	9003      	str	r0, [sp, #12]
  401288:	9202      	str	r2, [sp, #8]
	uint32_t xorg = ul_x;

	while (*p_str != 0) {
  40128a:	7813      	ldrb	r3, [r2, #0]
  40128c:	2b00      	cmp	r3, #0
  40128e:	d048      	beq.n	401322 <ili9488_draw_string+0xa2>
  401290:	468b      	mov	fp, r1
  401292:	9001      	str	r0, [sp, #4]
				ili9488_draw_pixel(ul_x + col, ul_y + row);
  401294:	f8df 8094 	ldr.w	r8, [pc, #148]	; 40132c <ili9488_draw_string+0xac>
  401298:	e033      	b.n	401302 <ili9488_draw_string+0x82>
		/* If newline, jump to the next line (font height + 2) */
		if (*p_str == '\n') {
			ul_y += gfont.height + 2;
  40129a:	f10b 0b10 	add.w	fp, fp, #16
			ul_x = xorg;
  40129e:	9b03      	ldr	r3, [sp, #12]
  4012a0:	9301      	str	r3, [sp, #4]
  4012a2:	e029      	b.n	4012f8 <ili9488_draw_string+0x78>
  4012a4:	3c01      	subs	r4, #1
		for (row = 0; row < 8; row++) {
  4012a6:	f1b4 3fff 	cmp.w	r4, #4294967295
  4012aa:	d009      	beq.n	4012c0 <ili9488_draw_string+0x40>
			if ((p_uc_charset10x14[offset0] >> (7 - row)) & 0x1) {
  4012ac:	782b      	ldrb	r3, [r5, #0]
  4012ae:	4123      	asrs	r3, r4
  4012b0:	f013 0f01 	tst.w	r3, #1
  4012b4:	d0f6      	beq.n	4012a4 <ili9488_draw_string+0x24>
				ili9488_draw_pixel(ul_x + col, ul_y + row);
  4012b6:	ebaa 0104 	sub.w	r1, sl, r4
  4012ba:	4630      	mov	r0, r6
  4012bc:	47c0      	blx	r8
  4012be:	e7f1      	b.n	4012a4 <ili9488_draw_string+0x24>
		for (row = 0; row < 8; row++) {
  4012c0:	2407      	movs	r4, #7
				ili9488_draw_pixel(ul_x + col, ul_y + row + 8);
  4012c2:	f10b 090f 	add.w	r9, fp, #15
  4012c6:	e002      	b.n	4012ce <ili9488_draw_string+0x4e>
  4012c8:	3c01      	subs	r4, #1
		for (row = 0; row < 6; row++) {
  4012ca:	2c01      	cmp	r4, #1
  4012cc:	d009      	beq.n	4012e2 <ili9488_draw_string+0x62>
			if ((p_uc_charset10x14[offset1] >> (7 - row)) & 0x1) {
  4012ce:	787b      	ldrb	r3, [r7, #1]
  4012d0:	4123      	asrs	r3, r4
  4012d2:	f013 0f01 	tst.w	r3, #1
  4012d6:	d0f7      	beq.n	4012c8 <ili9488_draw_string+0x48>
				ili9488_draw_pixel(ul_x + col, ul_y + row + 8);
  4012d8:	eba9 0104 	sub.w	r1, r9, r4
  4012dc:	4630      	mov	r0, r6
  4012de:	47c0      	blx	r8
  4012e0:	e7f2      	b.n	4012c8 <ili9488_draw_string+0x48>
  4012e2:	3502      	adds	r5, #2
  4012e4:	3601      	adds	r6, #1
	for (col = 0; col < 10; col++) {
  4012e6:	9b00      	ldr	r3, [sp, #0]
  4012e8:	42b3      	cmp	r3, r6
  4012ea:	d002      	beq.n	4012f2 <ili9488_draw_string+0x72>
	offset = ((uint32_t)uc_c - 0x20) * 20;
  4012ec:	2407      	movs	r4, #7
  4012ee:	462f      	mov	r7, r5
  4012f0:	e7dc      	b.n	4012ac <ili9488_draw_string+0x2c>
		} else {
			/* Draw the character and place cursor right after (font width + 2) */
			ili9488_draw_char(ul_x, ul_y, *p_str);
			ul_x += gfont.width + 2;
  4012f2:	9b01      	ldr	r3, [sp, #4]
  4012f4:	330c      	adds	r3, #12
  4012f6:	9301      	str	r3, [sp, #4]
	while (*p_str != 0) {
  4012f8:	9a02      	ldr	r2, [sp, #8]
  4012fa:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  4012fe:	9202      	str	r2, [sp, #8]
  401300:	b17b      	cbz	r3, 401322 <ili9488_draw_string+0xa2>
		if (*p_str == '\n') {
  401302:	2b0a      	cmp	r3, #10
  401304:	d0c9      	beq.n	40129a <ili9488_draw_string+0x1a>
	offset = ((uint32_t)uc_c - 0x20) * 20;
  401306:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40130a:	4d07      	ldr	r5, [pc, #28]	; (401328 <ili9488_draw_string+0xa8>)
  40130c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  401310:	f5a3 7520 	sub.w	r5, r3, #640	; 0x280
  401314:	9e01      	ldr	r6, [sp, #4]
  401316:	4633      	mov	r3, r6
  401318:	330a      	adds	r3, #10
  40131a:	9300      	str	r3, [sp, #0]
				ili9488_draw_pixel(ul_x + col, ul_y + row);
  40131c:	f10b 0a07 	add.w	sl, fp, #7
  401320:	e7e4      	b.n	4012ec <ili9488_draw_string+0x6c>
		}
		p_str++;
	}
}
  401322:	b005      	add	sp, #20
  401324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401328:	004091bc 	.word	0x004091bc
  40132c:	004010e5 	.word	0x004010e5

00401330 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  401330:	6301      	str	r1, [r0, #48]	; 0x30
  401332:	4770      	bx	lr

00401334 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401334:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401336:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40133a:	d03a      	beq.n	4013b2 <pio_set_peripheral+0x7e>
  40133c:	d813      	bhi.n	401366 <pio_set_peripheral+0x32>
  40133e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401342:	d025      	beq.n	401390 <pio_set_peripheral+0x5c>
  401344:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401348:	d10a      	bne.n	401360 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40134a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40134c:	4313      	orrs	r3, r2
  40134e:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401350:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401352:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401354:	400b      	ands	r3, r1
  401356:	ea23 0302 	bic.w	r3, r3, r2
  40135a:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40135c:	6042      	str	r2, [r0, #4]
  40135e:	4770      	bx	lr
	switch (ul_type) {
  401360:	2900      	cmp	r1, #0
  401362:	d1fb      	bne.n	40135c <pio_set_peripheral+0x28>
  401364:	4770      	bx	lr
  401366:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40136a:	d021      	beq.n	4013b0 <pio_set_peripheral+0x7c>
  40136c:	d809      	bhi.n	401382 <pio_set_peripheral+0x4e>
  40136e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401372:	d1f3      	bne.n	40135c <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  401374:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401376:	4313      	orrs	r3, r2
  401378:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40137a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40137c:	4313      	orrs	r3, r2
  40137e:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401380:	e7ec      	b.n	40135c <pio_set_peripheral+0x28>
	switch (ul_type) {
  401382:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401386:	d013      	beq.n	4013b0 <pio_set_peripheral+0x7c>
  401388:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  40138c:	d010      	beq.n	4013b0 <pio_set_peripheral+0x7c>
  40138e:	e7e5      	b.n	40135c <pio_set_peripheral+0x28>
{
  401390:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  401392:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401394:	6f04      	ldr	r4, [r0, #112]	; 0x70
  401396:	43d3      	mvns	r3, r2
  401398:	4021      	ands	r1, r4
  40139a:	461c      	mov	r4, r3
  40139c:	4019      	ands	r1, r3
  40139e:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4013a0:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4013a2:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4013a4:	400b      	ands	r3, r1
  4013a6:	4023      	ands	r3, r4
  4013a8:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4013aa:	6042      	str	r2, [r0, #4]
}
  4013ac:	f85d 4b04 	ldr.w	r4, [sp], #4
  4013b0:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4013b2:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4013b4:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4013b6:	400b      	ands	r3, r1
  4013b8:	ea23 0302 	bic.w	r3, r3, r2
  4013bc:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4013be:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4013c0:	4313      	orrs	r3, r2
  4013c2:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4013c4:	e7ca      	b.n	40135c <pio_set_peripheral+0x28>

004013c6 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4013c6:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4013c8:	f012 0f01 	tst.w	r2, #1
  4013cc:	d10d      	bne.n	4013ea <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  4013ce:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4013d0:	f012 0f0a 	tst.w	r2, #10
  4013d4:	d00b      	beq.n	4013ee <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  4013d6:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  4013d8:	f012 0f02 	tst.w	r2, #2
  4013dc:	d109      	bne.n	4013f2 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  4013de:	f012 0f08 	tst.w	r2, #8
  4013e2:	d008      	beq.n	4013f6 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  4013e4:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  4013e8:	e005      	b.n	4013f6 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  4013ea:	6641      	str	r1, [r0, #100]	; 0x64
  4013ec:	e7f0      	b.n	4013d0 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  4013ee:	6241      	str	r1, [r0, #36]	; 0x24
  4013f0:	e7f2      	b.n	4013d8 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  4013f2:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  4013f6:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4013f8:	6001      	str	r1, [r0, #0]
  4013fa:	4770      	bx	lr

004013fc <pio_set_output>:
{
  4013fc:	b410      	push	{r4}
  4013fe:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  401400:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  401402:	b94c      	cbnz	r4, 401418 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  401404:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  401406:	b14b      	cbz	r3, 40141c <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  401408:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  40140a:	b94a      	cbnz	r2, 401420 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  40140c:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  40140e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  401410:	6001      	str	r1, [r0, #0]
}
  401412:	f85d 4b04 	ldr.w	r4, [sp], #4
  401416:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  401418:	6641      	str	r1, [r0, #100]	; 0x64
  40141a:	e7f4      	b.n	401406 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  40141c:	6541      	str	r1, [r0, #84]	; 0x54
  40141e:	e7f4      	b.n	40140a <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  401420:	6301      	str	r1, [r0, #48]	; 0x30
  401422:	e7f4      	b.n	40140e <pio_set_output+0x12>

00401424 <pio_configure>:
{
  401424:	b570      	push	{r4, r5, r6, lr}
  401426:	b082      	sub	sp, #8
  401428:	4605      	mov	r5, r0
  40142a:	4616      	mov	r6, r2
  40142c:	461c      	mov	r4, r3
	switch (ul_type) {
  40142e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401432:	d014      	beq.n	40145e <pio_configure+0x3a>
  401434:	d90a      	bls.n	40144c <pio_configure+0x28>
  401436:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40143a:	d024      	beq.n	401486 <pio_configure+0x62>
  40143c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401440:	d021      	beq.n	401486 <pio_configure+0x62>
  401442:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401446:	d017      	beq.n	401478 <pio_configure+0x54>
		return 0;
  401448:	2000      	movs	r0, #0
  40144a:	e01a      	b.n	401482 <pio_configure+0x5e>
	switch (ul_type) {
  40144c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401450:	d005      	beq.n	40145e <pio_configure+0x3a>
  401452:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401456:	d002      	beq.n	40145e <pio_configure+0x3a>
  401458:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40145c:	d1f4      	bne.n	401448 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  40145e:	4632      	mov	r2, r6
  401460:	4628      	mov	r0, r5
  401462:	4b11      	ldr	r3, [pc, #68]	; (4014a8 <pio_configure+0x84>)
  401464:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401466:	f014 0f01 	tst.w	r4, #1
  40146a:	d102      	bne.n	401472 <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  40146c:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  40146e:	2001      	movs	r0, #1
  401470:	e007      	b.n	401482 <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  401472:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  401474:	2001      	movs	r0, #1
  401476:	e004      	b.n	401482 <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  401478:	461a      	mov	r2, r3
  40147a:	4631      	mov	r1, r6
  40147c:	4b0b      	ldr	r3, [pc, #44]	; (4014ac <pio_configure+0x88>)
  40147e:	4798      	blx	r3
	return 1;
  401480:	2001      	movs	r0, #1
}
  401482:	b002      	add	sp, #8
  401484:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  401486:	f004 0301 	and.w	r3, r4, #1
  40148a:	9300      	str	r3, [sp, #0]
  40148c:	f3c4 0380 	ubfx	r3, r4, #2, #1
  401490:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401494:	bf14      	ite	ne
  401496:	2200      	movne	r2, #0
  401498:	2201      	moveq	r2, #1
  40149a:	4631      	mov	r1, r6
  40149c:	4628      	mov	r0, r5
  40149e:	4c04      	ldr	r4, [pc, #16]	; (4014b0 <pio_configure+0x8c>)
  4014a0:	47a0      	blx	r4
	return 1;
  4014a2:	2001      	movs	r0, #1
		break;
  4014a4:	e7ed      	b.n	401482 <pio_configure+0x5e>
  4014a6:	bf00      	nop
  4014a8:	00401335 	.word	0x00401335
  4014ac:	004013c7 	.word	0x004013c7
  4014b0:	004013fd 	.word	0x004013fd

004014b4 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4014b4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4014b6:	4770      	bx	lr

004014b8 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4014b8:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4014ba:	4770      	bx	lr

004014bc <pio_set_pin_high>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4014bc:	4b05      	ldr	r3, [pc, #20]	; (4014d4 <pio_set_pin_high+0x18>)
  4014be:	eb03 1350 	add.w	r3, r3, r0, lsr #5
  4014c2:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  4014c4:	f000 001f 	and.w	r0, r0, #31
  4014c8:	2201      	movs	r2, #1
  4014ca:	fa02 f000 	lsl.w	r0, r2, r0
  4014ce:	6318      	str	r0, [r3, #48]	; 0x30
  4014d0:	4770      	bx	lr
  4014d2:	bf00      	nop
  4014d4:	00200707 	.word	0x00200707

004014d8 <pio_set_pin_low>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4014d8:	4b05      	ldr	r3, [pc, #20]	; (4014f0 <pio_set_pin_low+0x18>)
  4014da:	eb03 1350 	add.w	r3, r3, r0, lsr #5
  4014de:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  4014e0:	f000 001f 	and.w	r0, r0, #31
  4014e4:	2201      	movs	r2, #1
  4014e6:	fa02 f000 	lsl.w	r0, r2, r0
  4014ea:	6358      	str	r0, [r3, #52]	; 0x34
  4014ec:	4770      	bx	lr
  4014ee:	bf00      	nop
  4014f0:	00200707 	.word	0x00200707

004014f4 <pio_configure_pin>:
{
  4014f4:	b570      	push	{r4, r5, r6, lr}
  4014f6:	b082      	sub	sp, #8
  4014f8:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4014fa:	4c46      	ldr	r4, [pc, #280]	; (401614 <pio_configure_pin+0x120>)
  4014fc:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  401500:	0264      	lsls	r4, r4, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  401502:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  401506:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40150a:	d059      	beq.n	4015c0 <pio_configure_pin+0xcc>
  40150c:	d80a      	bhi.n	401524 <pio_configure_pin+0x30>
  40150e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401512:	d02f      	beq.n	401574 <pio_configure_pin+0x80>
  401514:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401518:	d03f      	beq.n	40159a <pio_configure_pin+0xa6>
  40151a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40151e:	d016      	beq.n	40154e <pio_configure_pin+0x5a>
		return 0;
  401520:	2000      	movs	r0, #0
  401522:	e012      	b.n	40154a <pio_configure_pin+0x56>
	switch (ul_flags & PIO_TYPE_Msk) {
  401524:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401528:	d05d      	beq.n	4015e6 <pio_configure_pin+0xf2>
  40152a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40152e:	d05a      	beq.n	4015e6 <pio_configure_pin+0xf2>
  401530:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401534:	d1f4      	bne.n	401520 <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  401536:	f000 011f 	and.w	r1, r0, #31
  40153a:	2601      	movs	r6, #1
  40153c:	462a      	mov	r2, r5
  40153e:	fa06 f101 	lsl.w	r1, r6, r1
  401542:	4620      	mov	r0, r4
  401544:	4b34      	ldr	r3, [pc, #208]	; (401618 <pio_configure_pin+0x124>)
  401546:	4798      	blx	r3
	return 1;
  401548:	4630      	mov	r0, r6
}
  40154a:	b002      	add	sp, #8
  40154c:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  40154e:	f000 001f 	and.w	r0, r0, #31
  401552:	2601      	movs	r6, #1
  401554:	4086      	lsls	r6, r0
  401556:	4632      	mov	r2, r6
  401558:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40155c:	4620      	mov	r0, r4
  40155e:	4b2f      	ldr	r3, [pc, #188]	; (40161c <pio_configure_pin+0x128>)
  401560:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401562:	f015 0f01 	tst.w	r5, #1
  401566:	d102      	bne.n	40156e <pio_configure_pin+0x7a>
		p_pio->PIO_PUDR = ul_mask;
  401568:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  40156a:	2001      	movs	r0, #1
  40156c:	e7ed      	b.n	40154a <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  40156e:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  401570:	2001      	movs	r0, #1
  401572:	e7ea      	b.n	40154a <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  401574:	f000 001f 	and.w	r0, r0, #31
  401578:	2601      	movs	r6, #1
  40157a:	4086      	lsls	r6, r0
  40157c:	4632      	mov	r2, r6
  40157e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401582:	4620      	mov	r0, r4
  401584:	4b25      	ldr	r3, [pc, #148]	; (40161c <pio_configure_pin+0x128>)
  401586:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401588:	f015 0f01 	tst.w	r5, #1
  40158c:	d102      	bne.n	401594 <pio_configure_pin+0xa0>
		p_pio->PIO_PUDR = ul_mask;
  40158e:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  401590:	2001      	movs	r0, #1
  401592:	e7da      	b.n	40154a <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  401594:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  401596:	2001      	movs	r0, #1
  401598:	e7d7      	b.n	40154a <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  40159a:	f000 001f 	and.w	r0, r0, #31
  40159e:	2601      	movs	r6, #1
  4015a0:	4086      	lsls	r6, r0
  4015a2:	4632      	mov	r2, r6
  4015a4:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4015a8:	4620      	mov	r0, r4
  4015aa:	4b1c      	ldr	r3, [pc, #112]	; (40161c <pio_configure_pin+0x128>)
  4015ac:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4015ae:	f015 0f01 	tst.w	r5, #1
  4015b2:	d102      	bne.n	4015ba <pio_configure_pin+0xc6>
		p_pio->PIO_PUDR = ul_mask;
  4015b4:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4015b6:	2001      	movs	r0, #1
  4015b8:	e7c7      	b.n	40154a <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4015ba:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4015bc:	2001      	movs	r0, #1
  4015be:	e7c4      	b.n	40154a <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4015c0:	f000 001f 	and.w	r0, r0, #31
  4015c4:	2601      	movs	r6, #1
  4015c6:	4086      	lsls	r6, r0
  4015c8:	4632      	mov	r2, r6
  4015ca:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4015ce:	4620      	mov	r0, r4
  4015d0:	4b12      	ldr	r3, [pc, #72]	; (40161c <pio_configure_pin+0x128>)
  4015d2:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4015d4:	f015 0f01 	tst.w	r5, #1
  4015d8:	d102      	bne.n	4015e0 <pio_configure_pin+0xec>
		p_pio->PIO_PUDR = ul_mask;
  4015da:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4015dc:	2001      	movs	r0, #1
  4015de:	e7b4      	b.n	40154a <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4015e0:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4015e2:	2001      	movs	r0, #1
  4015e4:	e7b1      	b.n	40154a <pio_configure_pin+0x56>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4015e6:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4015ea:	f000 011f 	and.w	r1, r0, #31
  4015ee:	2601      	movs	r6, #1
  4015f0:	ea05 0306 	and.w	r3, r5, r6
  4015f4:	9300      	str	r3, [sp, #0]
  4015f6:	f3c5 0380 	ubfx	r3, r5, #2, #1
  4015fa:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4015fe:	bf14      	ite	ne
  401600:	2200      	movne	r2, #0
  401602:	2201      	moveq	r2, #1
  401604:	fa06 f101 	lsl.w	r1, r6, r1
  401608:	4620      	mov	r0, r4
  40160a:	4c05      	ldr	r4, [pc, #20]	; (401620 <pio_configure_pin+0x12c>)
  40160c:	47a0      	blx	r4
	return 1;
  40160e:	4630      	mov	r0, r6
		break;
  401610:	e79b      	b.n	40154a <pio_configure_pin+0x56>
  401612:	bf00      	nop
  401614:	00200707 	.word	0x00200707
  401618:	004013c7 	.word	0x004013c7
  40161c:	00401335 	.word	0x00401335
  401620:	004013fd 	.word	0x004013fd

00401624 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401628:	4604      	mov	r4, r0
  40162a:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40162c:	4b0e      	ldr	r3, [pc, #56]	; (401668 <pio_handler_process+0x44>)
  40162e:	4798      	blx	r3
  401630:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401632:	4620      	mov	r0, r4
  401634:	4b0d      	ldr	r3, [pc, #52]	; (40166c <pio_handler_process+0x48>)
  401636:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  401638:	4005      	ands	r5, r0
  40163a:	d013      	beq.n	401664 <pio_handler_process+0x40>
  40163c:	4c0c      	ldr	r4, [pc, #48]	; (401670 <pio_handler_process+0x4c>)
  40163e:	f104 0660 	add.w	r6, r4, #96	; 0x60
  401642:	e003      	b.n	40164c <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  401644:	42b4      	cmp	r4, r6
  401646:	d00d      	beq.n	401664 <pio_handler_process+0x40>
  401648:	3410      	adds	r4, #16
		while (status != 0) {
  40164a:	b15d      	cbz	r5, 401664 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  40164c:	6820      	ldr	r0, [r4, #0]
  40164e:	4540      	cmp	r0, r8
  401650:	d1f8      	bne.n	401644 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401652:	6861      	ldr	r1, [r4, #4]
  401654:	4229      	tst	r1, r5
  401656:	d0f5      	beq.n	401644 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401658:	68e3      	ldr	r3, [r4, #12]
  40165a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  40165c:	6863      	ldr	r3, [r4, #4]
  40165e:	ea25 0503 	bic.w	r5, r5, r3
  401662:	e7ef      	b.n	401644 <pio_handler_process+0x20>
  401664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401668:	004014b5 	.word	0x004014b5
  40166c:	004014b9 	.word	0x004014b9
  401670:	20400ecc 	.word	0x20400ecc

00401674 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401674:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  401676:	210a      	movs	r1, #10
  401678:	4801      	ldr	r0, [pc, #4]	; (401680 <PIOA_Handler+0xc>)
  40167a:	4b02      	ldr	r3, [pc, #8]	; (401684 <PIOA_Handler+0x10>)
  40167c:	4798      	blx	r3
  40167e:	bd08      	pop	{r3, pc}
  401680:	400e0e00 	.word	0x400e0e00
  401684:	00401625 	.word	0x00401625

00401688 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401688:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40168a:	210b      	movs	r1, #11
  40168c:	4801      	ldr	r0, [pc, #4]	; (401694 <PIOB_Handler+0xc>)
  40168e:	4b02      	ldr	r3, [pc, #8]	; (401698 <PIOB_Handler+0x10>)
  401690:	4798      	blx	r3
  401692:	bd08      	pop	{r3, pc}
  401694:	400e1000 	.word	0x400e1000
  401698:	00401625 	.word	0x00401625

0040169c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  40169c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40169e:	210c      	movs	r1, #12
  4016a0:	4801      	ldr	r0, [pc, #4]	; (4016a8 <PIOC_Handler+0xc>)
  4016a2:	4b02      	ldr	r3, [pc, #8]	; (4016ac <PIOC_Handler+0x10>)
  4016a4:	4798      	blx	r3
  4016a6:	bd08      	pop	{r3, pc}
  4016a8:	400e1200 	.word	0x400e1200
  4016ac:	00401625 	.word	0x00401625

004016b0 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4016b0:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4016b2:	2110      	movs	r1, #16
  4016b4:	4801      	ldr	r0, [pc, #4]	; (4016bc <PIOD_Handler+0xc>)
  4016b6:	4b02      	ldr	r3, [pc, #8]	; (4016c0 <PIOD_Handler+0x10>)
  4016b8:	4798      	blx	r3
  4016ba:	bd08      	pop	{r3, pc}
  4016bc:	400e1400 	.word	0x400e1400
  4016c0:	00401625 	.word	0x00401625

004016c4 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4016c4:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  4016c6:	2111      	movs	r1, #17
  4016c8:	4801      	ldr	r0, [pc, #4]	; (4016d0 <PIOE_Handler+0xc>)
  4016ca:	4b02      	ldr	r3, [pc, #8]	; (4016d4 <PIOE_Handler+0x10>)
  4016cc:	4798      	blx	r3
  4016ce:	bd08      	pop	{r3, pc}
  4016d0:	400e1600 	.word	0x400e1600
  4016d4:	00401625 	.word	0x00401625

004016d8 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  4016d8:	2803      	cmp	r0, #3
  4016da:	d011      	beq.n	401700 <pmc_mck_set_division+0x28>
  4016dc:	2804      	cmp	r0, #4
  4016de:	d012      	beq.n	401706 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4016e0:	2802      	cmp	r0, #2
  4016e2:	bf0c      	ite	eq
  4016e4:	f44f 7180 	moveq.w	r1, #256	; 0x100
  4016e8:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4016ea:	4a08      	ldr	r2, [pc, #32]	; (40170c <pmc_mck_set_division+0x34>)
  4016ec:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4016ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  4016f2:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  4016f4:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4016f6:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4016f8:	f013 0f08 	tst.w	r3, #8
  4016fc:	d0fb      	beq.n	4016f6 <pmc_mck_set_division+0x1e>
}
  4016fe:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  401700:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  401704:	e7f1      	b.n	4016ea <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  401706:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  40170a:	e7ee      	b.n	4016ea <pmc_mck_set_division+0x12>
  40170c:	400e0600 	.word	0x400e0600

00401710 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401710:	4a17      	ldr	r2, [pc, #92]	; (401770 <pmc_switch_mck_to_pllack+0x60>)
  401712:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401718:	4318      	orrs	r0, r3
  40171a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40171c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40171e:	f013 0f08 	tst.w	r3, #8
  401722:	d10a      	bne.n	40173a <pmc_switch_mck_to_pllack+0x2a>
  401724:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401728:	4911      	ldr	r1, [pc, #68]	; (401770 <pmc_switch_mck_to_pllack+0x60>)
  40172a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40172c:	f012 0f08 	tst.w	r2, #8
  401730:	d103      	bne.n	40173a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401732:	3b01      	subs	r3, #1
  401734:	d1f9      	bne.n	40172a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  401736:	2001      	movs	r0, #1
  401738:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40173a:	4a0d      	ldr	r2, [pc, #52]	; (401770 <pmc_switch_mck_to_pllack+0x60>)
  40173c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40173e:	f023 0303 	bic.w	r3, r3, #3
  401742:	f043 0302 	orr.w	r3, r3, #2
  401746:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401748:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40174a:	f013 0f08 	tst.w	r3, #8
  40174e:	d10a      	bne.n	401766 <pmc_switch_mck_to_pllack+0x56>
  401750:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401754:	4906      	ldr	r1, [pc, #24]	; (401770 <pmc_switch_mck_to_pllack+0x60>)
  401756:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401758:	f012 0f08 	tst.w	r2, #8
  40175c:	d105      	bne.n	40176a <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40175e:	3b01      	subs	r3, #1
  401760:	d1f9      	bne.n	401756 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  401762:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401764:	4770      	bx	lr
	return 0;
  401766:	2000      	movs	r0, #0
  401768:	4770      	bx	lr
  40176a:	2000      	movs	r0, #0
  40176c:	4770      	bx	lr
  40176e:	bf00      	nop
  401770:	400e0600 	.word	0x400e0600

00401774 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401774:	b9a0      	cbnz	r0, 4017a0 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401776:	480e      	ldr	r0, [pc, #56]	; (4017b0 <pmc_switch_mainck_to_xtal+0x3c>)
  401778:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40177a:	0209      	lsls	r1, r1, #8
  40177c:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40177e:	4a0d      	ldr	r2, [pc, #52]	; (4017b4 <pmc_switch_mainck_to_xtal+0x40>)
  401780:	401a      	ands	r2, r3
  401782:	4b0d      	ldr	r3, [pc, #52]	; (4017b8 <pmc_switch_mainck_to_xtal+0x44>)
  401784:	4313      	orrs	r3, r2
  401786:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401788:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40178a:	4602      	mov	r2, r0
  40178c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40178e:	f013 0f01 	tst.w	r3, #1
  401792:	d0fb      	beq.n	40178c <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401794:	4a06      	ldr	r2, [pc, #24]	; (4017b0 <pmc_switch_mainck_to_xtal+0x3c>)
  401796:	6a11      	ldr	r1, [r2, #32]
  401798:	4b08      	ldr	r3, [pc, #32]	; (4017bc <pmc_switch_mainck_to_xtal+0x48>)
  40179a:	430b      	orrs	r3, r1
  40179c:	6213      	str	r3, [r2, #32]
  40179e:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4017a0:	4903      	ldr	r1, [pc, #12]	; (4017b0 <pmc_switch_mainck_to_xtal+0x3c>)
  4017a2:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4017a4:	4a06      	ldr	r2, [pc, #24]	; (4017c0 <pmc_switch_mainck_to_xtal+0x4c>)
  4017a6:	401a      	ands	r2, r3
  4017a8:	4b06      	ldr	r3, [pc, #24]	; (4017c4 <pmc_switch_mainck_to_xtal+0x50>)
  4017aa:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4017ac:	620b      	str	r3, [r1, #32]
  4017ae:	4770      	bx	lr
  4017b0:	400e0600 	.word	0x400e0600
  4017b4:	ffc8fffc 	.word	0xffc8fffc
  4017b8:	00370001 	.word	0x00370001
  4017bc:	01370000 	.word	0x01370000
  4017c0:	fec8fffc 	.word	0xfec8fffc
  4017c4:	01370002 	.word	0x01370002

004017c8 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4017c8:	4b02      	ldr	r3, [pc, #8]	; (4017d4 <pmc_osc_is_ready_mainck+0xc>)
  4017ca:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4017cc:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4017d0:	4770      	bx	lr
  4017d2:	bf00      	nop
  4017d4:	400e0600 	.word	0x400e0600

004017d8 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4017d8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4017dc:	4b01      	ldr	r3, [pc, #4]	; (4017e4 <pmc_disable_pllack+0xc>)
  4017de:	629a      	str	r2, [r3, #40]	; 0x28
  4017e0:	4770      	bx	lr
  4017e2:	bf00      	nop
  4017e4:	400e0600 	.word	0x400e0600

004017e8 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4017e8:	4b02      	ldr	r3, [pc, #8]	; (4017f4 <pmc_is_locked_pllack+0xc>)
  4017ea:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4017ec:	f000 0002 	and.w	r0, r0, #2
  4017f0:	4770      	bx	lr
  4017f2:	bf00      	nop
  4017f4:	400e0600 	.word	0x400e0600

004017f8 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  4017f8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  4017fc:	4b05      	ldr	r3, [pc, #20]	; (401814 <pmc_enable_periph_clk+0x1c>)
  4017fe:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  401802:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  401806:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  40180a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  40180e:	2000      	movs	r0, #0
  401810:	4770      	bx	lr
  401812:	bf00      	nop
  401814:	400e0600 	.word	0x400e0600

00401818 <rtc_set_hour_mode>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
  401818:	b921      	cbnz	r1, 401824 <rtc_set_hour_mode+0xc>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  40181a:	6843      	ldr	r3, [r0, #4]
  40181c:	f023 0301 	bic.w	r3, r3, #1
  401820:	6043      	str	r3, [r0, #4]
  401822:	4770      	bx	lr
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  401824:	6843      	ldr	r3, [r0, #4]
  401826:	f043 0301 	orr.w	r3, r3, #1
  40182a:	6043      	str	r3, [r0, #4]
  40182c:	4770      	bx	lr

0040182e <rtc_enable_interrupt>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
	p_rtc->RTC_IER = ul_sources;
  40182e:	6201      	str	r1, [r0, #32]
  401830:	4770      	bx	lr

00401832 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  401832:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  401834:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  401836:	6884      	ldr	r4, [r0, #8]
  401838:	42a5      	cmp	r5, r4
  40183a:	d003      	beq.n	401844 <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
  40183c:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  40183e:	6884      	ldr	r4, [r0, #8]
  401840:	42ac      	cmp	r4, r5
  401842:	d1fb      	bne.n	40183c <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
  401844:	b161      	cbz	r1, 401860 <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  401846:	f3c4 5001 	ubfx	r0, r4, #20, #2
  40184a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  40184e:	f3c4 4003 	ubfx	r0, r4, #16, #4
  401852:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  401856:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
  40185a:	bf18      	it	ne
  40185c:	300c      	addne	r0, #12
  40185e:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  401860:	b142      	cbz	r2, 401874 <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  401862:	f3c4 3102 	ubfx	r1, r4, #12, #3
  401866:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  40186a:	f3c4 2003 	ubfx	r0, r4, #8, #4
  40186e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  401872:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  401874:	b143      	cbz	r3, 401888 <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  401876:	f3c4 1202 	ubfx	r2, r4, #4, #3
  40187a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40187e:	f004 040f 	and.w	r4, r4, #15
  401882:	eb04 0442 	add.w	r4, r4, r2, lsl #1
  401886:	601c      	str	r4, [r3, #0]
	}
}
  401888:	bc30      	pop	{r4, r5}
  40188a:	4770      	bx	lr

0040188c <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  40188c:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ul_time = 0;

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  40188e:	6844      	ldr	r4, [r0, #4]
		if (ul_hour > 12) {
  401890:	f014 0f01 	tst.w	r4, #1
  401894:	d005      	beq.n	4018a2 <rtc_set_time+0x16>
  401896:	290c      	cmp	r1, #12
  401898:	d903      	bls.n	4018a2 <rtc_set_time+0x16>
			ul_hour -= 12;
  40189a:	390c      	subs	r1, #12
			ul_time |= RTC_TIMR_AMPM;
  40189c:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  4018a0:	e000      	b.n	4018a4 <rtc_set_time+0x18>
	uint32_t ul_time = 0;
  4018a2:	2700      	movs	r7, #0
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  4018a4:	4c1c      	ldr	r4, [pc, #112]	; (401918 <rtc_set_time+0x8c>)
  4018a6:	fba4 5603 	umull	r5, r6, r4, r3
  4018aa:	08f6      	lsrs	r6, r6, #3
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  4018ac:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  4018b0:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
  4018b4:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  4018b8:	fba4 6502 	umull	r6, r5, r4, r2
  4018bc:	08ed      	lsrs	r5, r5, #3
  4018be:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  4018c2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  4018c6:	eba2 0545 	sub.w	r5, r2, r5, lsl #1
  4018ca:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  4018ce:	433b      	orrs	r3, r7
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  4018d0:	fba4 4201 	umull	r4, r2, r4, r1
  4018d4:	08d2      	lsrs	r2, r2, #3
  4018d6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  4018da:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4018de:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  4018e2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

	/* Update time register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  4018e6:	6983      	ldr	r3, [r0, #24]
  4018e8:	f013 0f04 	tst.w	r3, #4
  4018ec:	d0fb      	beq.n	4018e6 <rtc_set_time+0x5a>
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  4018ee:	6803      	ldr	r3, [r0, #0]
  4018f0:	f043 0301 	orr.w	r3, r3, #1
  4018f4:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  4018f6:	6983      	ldr	r3, [r0, #24]
  4018f8:	f013 0f01 	tst.w	r3, #1
  4018fc:	d0fb      	beq.n	4018f6 <rtc_set_time+0x6a>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  4018fe:	2301      	movs	r3, #1
  401900:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_TIMR = ul_time;
  401902:	6081      	str	r1, [r0, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  401904:	6803      	ldr	r3, [r0, #0]
  401906:	f023 0301 	bic.w	r3, r3, #1
  40190a:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  40190c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  40190e:	f000 0001 	and.w	r0, r0, #1
  401912:	bcf0      	pop	{r4, r5, r6, r7}
  401914:	4770      	bx	lr
  401916:	bf00      	nop
  401918:	cccccccd 	.word	0xcccccccd

0040191c <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  40191c:	b470      	push	{r4, r5, r6}

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40191e:	4d2a      	ldr	r5, [pc, #168]	; (4019c8 <rtc_set_date+0xac>)
  401920:	fba5 4603 	umull	r4, r6, r5, r3
  401924:	08f6      	lsrs	r6, r6, #3
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  401926:	9c03      	ldr	r4, [sp, #12]
  401928:	0564      	lsls	r4, r4, #21
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40192a:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  40192e:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  401932:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  401936:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  40193a:	fba5 6402 	umull	r6, r4, r5, r2
  40193e:	08e4      	lsrs	r4, r4, #3
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  401940:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  401944:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  401948:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40194c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  401950:	4b1e      	ldr	r3, [pc, #120]	; (4019cc <rtc_set_date+0xb0>)
  401952:	fba3 4301 	umull	r4, r3, r3, r1
  401956:	099b      	lsrs	r3, r3, #6
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  401958:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  40195c:	4b1c      	ldr	r3, [pc, #112]	; (4019d0 <rtc_set_date+0xb4>)
  40195e:	fba3 4301 	umull	r4, r3, r3, r1
  401962:	095b      	lsrs	r3, r3, #5
  401964:	fba5 6403 	umull	r6, r4, r5, r3
  401968:	08e4      	lsrs	r4, r4, #3
  40196a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40196e:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  401972:	431a      	orrs	r2, r3
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  401974:	fba5 4301 	umull	r4, r3, r5, r1
  401978:	08db      	lsrs	r3, r3, #3
  40197a:	eb03 0483 	add.w	r4, r3, r3, lsl #2
  40197e:	eba1 0144 	sub.w	r1, r1, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  401982:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  401986:	fba5 1503 	umull	r1, r5, r5, r3
  40198a:	08ed      	lsrs	r5, r5, #3
  40198c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  401990:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  401994:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

	/* Update calendar register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  401998:	6983      	ldr	r3, [r0, #24]
  40199a:	f013 0f04 	tst.w	r3, #4
  40199e:	d0fb      	beq.n	401998 <rtc_set_date+0x7c>
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  4019a0:	6803      	ldr	r3, [r0, #0]
  4019a2:	f043 0302 	orr.w	r3, r3, #2
  4019a6:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  4019a8:	6983      	ldr	r3, [r0, #24]
  4019aa:	f013 0f01 	tst.w	r3, #1
  4019ae:	d0fb      	beq.n	4019a8 <rtc_set_date+0x8c>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  4019b0:	2301      	movs	r3, #1
  4019b2:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_CALR = ul_date;
  4019b4:	60c2      	str	r2, [r0, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  4019b6:	6803      	ldr	r3, [r0, #0]
  4019b8:	f023 0302 	bic.w	r3, r3, #2
  4019bc:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  4019be:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4019c0:	f000 0002 	and.w	r0, r0, #2
  4019c4:	bc70      	pop	{r4, r5, r6}
  4019c6:	4770      	bx	lr
  4019c8:	cccccccd 	.word	0xcccccccd
  4019cc:	10624dd3 	.word	0x10624dd3
  4019d0:	51eb851f 	.word	0x51eb851f

004019d4 <rtt_init>:
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
  4019d4:	4b03      	ldr	r3, [pc, #12]	; (4019e4 <rtt_init+0x10>)
  4019d6:	681b      	ldr	r3, [r3, #0]
  4019d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  4019dc:	4319      	orrs	r1, r3
  4019de:	6001      	str	r1, [r0, #0]
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
#endif
	return 0;
}
  4019e0:	2000      	movs	r0, #0
  4019e2:	4770      	bx	lr
  4019e4:	20400f3c 	.word	0x20400f3c

004019e8 <rtt_sel_source>:
 * \param p_rtt Pointer to an RTT instance.
 * \param is_rtc_sel RTC 1Hz Clock Selection.
 */
void rtt_sel_source(Rtt *p_rtt, bool is_rtc_sel)
{
	if(is_rtc_sel) {
  4019e8:	b941      	cbnz	r1, 4019fc <rtt_sel_source+0x14>
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
	} else {
		g_wobits_in_rtt_mr &= ~RTT_MR_RTC1HZ;
  4019ea:	4a09      	ldr	r2, [pc, #36]	; (401a10 <rtt_sel_source+0x28>)
  4019ec:	6813      	ldr	r3, [r2, #0]
  4019ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  4019f2:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  4019f4:	6802      	ldr	r2, [r0, #0]
  4019f6:	4313      	orrs	r3, r2
  4019f8:	6003      	str	r3, [r0, #0]
  4019fa:	4770      	bx	lr
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
  4019fc:	4a04      	ldr	r2, [pc, #16]	; (401a10 <rtt_sel_source+0x28>)
  4019fe:	6813      	ldr	r3, [r2, #0]
  401a00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  401a04:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  401a06:	6802      	ldr	r2, [r0, #0]
  401a08:	4313      	orrs	r3, r2
  401a0a:	6003      	str	r3, [r0, #0]
  401a0c:	4770      	bx	lr
  401a0e:	bf00      	nop
  401a10:	20400f3c 	.word	0x20400f3c

00401a14 <rtt_enable_interrupt>:
 */
void rtt_enable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp;

	temp = p_rtt->RTT_MR;
  401a14:	6802      	ldr	r2, [r0, #0]
	temp |= ul_sources;
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  401a16:	4b03      	ldr	r3, [pc, #12]	; (401a24 <rtt_enable_interrupt+0x10>)
  401a18:	681b      	ldr	r3, [r3, #0]
  401a1a:	4319      	orrs	r1, r3
  401a1c:	4311      	orrs	r1, r2
#endif
	p_rtt->RTT_MR = temp;
  401a1e:	6001      	str	r1, [r0, #0]
  401a20:	4770      	bx	lr
  401a22:	bf00      	nop
  401a24:	20400f3c 	.word	0x20400f3c

00401a28 <rtt_disable_interrupt>:
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp = 0;

	temp = p_rtt->RTT_MR;
  401a28:	6803      	ldr	r3, [r0, #0]
	temp &= (~ul_sources);
  401a2a:	ea23 0101 	bic.w	r1, r3, r1
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  401a2e:	4b02      	ldr	r3, [pc, #8]	; (401a38 <rtt_disable_interrupt+0x10>)
  401a30:	681b      	ldr	r3, [r3, #0]
  401a32:	4319      	orrs	r1, r3
#endif
	p_rtt->RTT_MR = temp;
  401a34:	6001      	str	r1, [r0, #0]
  401a36:	4770      	bx	lr
  401a38:	20400f3c 	.word	0x20400f3c

00401a3c <rtt_read_timer_value>:
 *
 * \return The current Real-time Timer value.
 */
uint32_t rtt_read_timer_value(Rtt *p_rtt)
{
	uint32_t rtt_val = p_rtt->RTT_VR;
  401a3c:	6882      	ldr	r2, [r0, #8]

	while (rtt_val != p_rtt->RTT_VR) {
  401a3e:	6883      	ldr	r3, [r0, #8]
  401a40:	429a      	cmp	r2, r3
  401a42:	d003      	beq.n	401a4c <rtt_read_timer_value+0x10>
		rtt_val = p_rtt->RTT_VR;
  401a44:	6882      	ldr	r2, [r0, #8]
	while (rtt_val != p_rtt->RTT_VR) {
  401a46:	6883      	ldr	r3, [r0, #8]
  401a48:	4293      	cmp	r3, r2
  401a4a:	d1fb      	bne.n	401a44 <rtt_read_timer_value+0x8>
	}

	return rtt_val;
}
  401a4c:	4618      	mov	r0, r3
  401a4e:	4770      	bx	lr

00401a50 <rtt_get_status>:
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
	return p_rtt->RTT_SR;
  401a50:	68c0      	ldr	r0, [r0, #12]
}
  401a52:	4770      	bx	lr

00401a54 <rtt_write_alarm_time>:
 * \param ul_alarm_time Alarm time,Alarm time = ALMV + 1.
 *
 * \retval 0 Configuration is done.
 */
uint32_t rtt_write_alarm_time(Rtt *p_rtt, uint32_t ul_alarm_time)
{
  401a54:	b570      	push	{r4, r5, r6, lr}
  401a56:	4606      	mov	r6, r0
  401a58:	460d      	mov	r5, r1
	uint32_t flag;

	flag = p_rtt->RTT_MR & RTT_MR_ALMIEN;
  401a5a:	6804      	ldr	r4, [r0, #0]
  401a5c:	f404 3480 	and.w	r4, r4, #65536	; 0x10000

	rtt_disable_interrupt(RTT, RTT_MR_ALMIEN);
  401a60:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  401a64:	4809      	ldr	r0, [pc, #36]	; (401a8c <rtt_write_alarm_time+0x38>)
  401a66:	4b0a      	ldr	r3, [pc, #40]	; (401a90 <rtt_write_alarm_time+0x3c>)
  401a68:	4798      	blx	r3

	/**
	 * Alarm time = ALMV + 1,If the incoming parameter 
	 * is 0, the ALMV is set to 0xFFFFFFFF.
	*/
	if(ul_alarm_time == 0) {
  401a6a:	b92d      	cbnz	r5, 401a78 <rtt_write_alarm_time+0x24>
		p_rtt->RTT_AR = 0xFFFFFFFF;
  401a6c:	f04f 33ff 	mov.w	r3, #4294967295
  401a70:	6073      	str	r3, [r6, #4]
	}
	else {
		p_rtt->RTT_AR = ul_alarm_time - 1;
	}

	if (flag) {
  401a72:	b924      	cbnz	r4, 401a7e <rtt_write_alarm_time+0x2a>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
	}

	return 0;
}
  401a74:	2000      	movs	r0, #0
  401a76:	bd70      	pop	{r4, r5, r6, pc}
		p_rtt->RTT_AR = ul_alarm_time - 1;
  401a78:	3d01      	subs	r5, #1
  401a7a:	6075      	str	r5, [r6, #4]
  401a7c:	e7f9      	b.n	401a72 <rtt_write_alarm_time+0x1e>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  401a7e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  401a82:	4802      	ldr	r0, [pc, #8]	; (401a8c <rtt_write_alarm_time+0x38>)
  401a84:	4b03      	ldr	r3, [pc, #12]	; (401a94 <rtt_write_alarm_time+0x40>)
  401a86:	4798      	blx	r3
  401a88:	e7f4      	b.n	401a74 <rtt_write_alarm_time+0x20>
  401a8a:	bf00      	nop
  401a8c:	400e1830 	.word	0x400e1830
  401a90:	00401a29 	.word	0x00401a29
  401a94:	00401a15 	.word	0x00401a15

00401a98 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  401a98:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  401a9a:	4b07      	ldr	r3, [pc, #28]	; (401ab8 <spi_enable_clock+0x20>)
  401a9c:	4298      	cmp	r0, r3
  401a9e:	d003      	beq.n	401aa8 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  401aa0:	4b06      	ldr	r3, [pc, #24]	; (401abc <spi_enable_clock+0x24>)
  401aa2:	4298      	cmp	r0, r3
  401aa4:	d004      	beq.n	401ab0 <spi_enable_clock+0x18>
  401aa6:	bd08      	pop	{r3, pc}
  401aa8:	2015      	movs	r0, #21
  401aaa:	4b05      	ldr	r3, [pc, #20]	; (401ac0 <spi_enable_clock+0x28>)
  401aac:	4798      	blx	r3
  401aae:	bd08      	pop	{r3, pc}
  401ab0:	202a      	movs	r0, #42	; 0x2a
  401ab2:	4b03      	ldr	r3, [pc, #12]	; (401ac0 <spi_enable_clock+0x28>)
  401ab4:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  401ab6:	e7f6      	b.n	401aa6 <spi_enable_clock+0xe>
  401ab8:	40008000 	.word	0x40008000
  401abc:	40058000 	.word	0x40058000
  401ac0:	004017f9 	.word	0x004017f9

00401ac4 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  401ac4:	6843      	ldr	r3, [r0, #4]
  401ac6:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  401aca:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  401acc:	6843      	ldr	r3, [r0, #4]
  401ace:	0409      	lsls	r1, r1, #16
  401ad0:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  401ad4:	4319      	orrs	r1, r3
  401ad6:	6041      	str	r1, [r0, #4]
  401ad8:	4770      	bx	lr

00401ada <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
  401ada:	6843      	ldr	r3, [r0, #4]
  401adc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401ae0:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
  401ae2:	6843      	ldr	r3, [r0, #4]
  401ae4:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
  401ae8:	6041      	str	r1, [r0, #4]
  401aea:	4770      	bx	lr

00401aec <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  401aec:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  401aee:	f643 2499 	movw	r4, #15001	; 0x3a99
  401af2:	6905      	ldr	r5, [r0, #16]
  401af4:	f015 0f02 	tst.w	r5, #2
  401af8:	d103      	bne.n	401b02 <spi_write+0x16>
		if (!timeout--) {
  401afa:	3c01      	subs	r4, #1
  401afc:	d1f9      	bne.n	401af2 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  401afe:	2001      	movs	r0, #1
  401b00:	e00c      	b.n	401b1c <spi_write+0x30>
	if (p_spi->SPI_MR & SPI_MR_PS) {
  401b02:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  401b04:	f014 0f02 	tst.w	r4, #2
  401b08:	d006      	beq.n	401b18 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  401b0a:	0412      	lsls	r2, r2, #16
  401b0c:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  401b10:	4311      	orrs	r1, r2
		if (uc_last) {
  401b12:	b10b      	cbz	r3, 401b18 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  401b14:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  401b18:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  401b1a:	2000      	movs	r0, #0
}
  401b1c:	bc30      	pop	{r4, r5}
  401b1e:	4770      	bx	lr

00401b20 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  401b20:	b932      	cbnz	r2, 401b30 <spi_set_clock_polarity+0x10>
  401b22:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  401b26:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401b28:	f023 0301 	bic.w	r3, r3, #1
  401b2c:	6303      	str	r3, [r0, #48]	; 0x30
  401b2e:	4770      	bx	lr
  401b30:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  401b34:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401b36:	f043 0301 	orr.w	r3, r3, #1
  401b3a:	6303      	str	r3, [r0, #48]	; 0x30
  401b3c:	4770      	bx	lr

00401b3e <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  401b3e:	b932      	cbnz	r2, 401b4e <spi_set_clock_phase+0x10>
  401b40:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  401b44:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401b46:	f023 0302 	bic.w	r3, r3, #2
  401b4a:	6303      	str	r3, [r0, #48]	; 0x30
  401b4c:	4770      	bx	lr
  401b4e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  401b52:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401b54:	f043 0302 	orr.w	r3, r3, #2
  401b58:	6303      	str	r3, [r0, #48]	; 0x30
  401b5a:	4770      	bx	lr

00401b5c <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  401b5c:	2a04      	cmp	r2, #4
  401b5e:	d003      	beq.n	401b68 <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  401b60:	b16a      	cbz	r2, 401b7e <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  401b62:	2a08      	cmp	r2, #8
  401b64:	d016      	beq.n	401b94 <spi_configure_cs_behavior+0x38>
  401b66:	4770      	bx	lr
  401b68:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  401b6c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401b6e:	f023 0308 	bic.w	r3, r3, #8
  401b72:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  401b74:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401b76:	f043 0304 	orr.w	r3, r3, #4
  401b7a:	6303      	str	r3, [r0, #48]	; 0x30
  401b7c:	4770      	bx	lr
  401b7e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  401b82:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401b84:	f023 0308 	bic.w	r3, r3, #8
  401b88:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  401b8a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401b8c:	f023 0304 	bic.w	r3, r3, #4
  401b90:	6303      	str	r3, [r0, #48]	; 0x30
  401b92:	4770      	bx	lr
  401b94:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  401b98:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401b9a:	f043 0308 	orr.w	r3, r3, #8
  401b9e:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  401ba0:	e7e1      	b.n	401b66 <spi_configure_cs_behavior+0xa>

00401ba2 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  401ba2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  401ba6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401ba8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  401bac:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  401bae:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401bb0:	431a      	orrs	r2, r3
  401bb2:	630a      	str	r2, [r1, #48]	; 0x30
  401bb4:	4770      	bx	lr

00401bb6 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  401bb6:	1e43      	subs	r3, r0, #1
  401bb8:	4419      	add	r1, r3
  401bba:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  401bbe:	1e43      	subs	r3, r0, #1
  401bc0:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  401bc2:	bf94      	ite	ls
  401bc4:	b200      	sxthls	r0, r0
		return -1;
  401bc6:	f04f 30ff 	movhi.w	r0, #4294967295
}
  401bca:	4770      	bx	lr

00401bcc <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
  401bcc:	b17a      	cbz	r2, 401bee <spi_set_baudrate_div+0x22>
{
  401bce:	b410      	push	{r4}
  401bd0:	4614      	mov	r4, r2
  401bd2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  401bd6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401bd8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  401bdc:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  401bde:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  401be0:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  401be4:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  401be6:	2000      	movs	r0, #0
}
  401be8:	f85d 4b04 	ldr.w	r4, [sp], #4
  401bec:	4770      	bx	lr
        return -1;
  401bee:	f04f 30ff 	mov.w	r0, #4294967295
  401bf2:	4770      	bx	lr

00401bf4 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  401bf4:	b410      	push	{r4}
  401bf6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  401bfa:	6b08      	ldr	r0, [r1, #48]	; 0x30
  401bfc:	b280      	uxth	r0, r0
  401bfe:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  401c00:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  401c02:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  401c06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  401c0a:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  401c0c:	f85d 4b04 	ldr.w	r4, [sp], #4
  401c10:	4770      	bx	lr
	...

00401c14 <twihs_set_speed>:
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  401c14:	4b28      	ldr	r3, [pc, #160]	; (401cb8 <twihs_set_speed+0xa4>)
  401c16:	4299      	cmp	r1, r3
  401c18:	d84b      	bhi.n	401cb2 <twihs_set_speed+0x9e>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  401c1a:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  401c1e:	4299      	cmp	r1, r3
  401c20:	d92d      	bls.n	401c7e <twihs_set_speed+0x6a>
{
  401c22:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401c24:	4c25      	ldr	r4, [pc, #148]	; (401cbc <twihs_set_speed+0xa8>)
  401c26:	fba4 3402 	umull	r3, r4, r4, r2
  401c2a:	0ba4      	lsrs	r4, r4, #14
  401c2c:	3c03      	subs	r4, #3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401c2e:	4b24      	ldr	r3, [pc, #144]	; (401cc0 <twihs_set_speed+0xac>)
  401c30:	440b      	add	r3, r1
  401c32:	009b      	lsls	r3, r3, #2
  401c34:	fbb2 f2f3 	udiv	r2, r2, r3
  401c38:	3a03      	subs	r2, #3
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401c3a:	2cff      	cmp	r4, #255	; 0xff
  401c3c:	d91d      	bls.n	401c7a <twihs_set_speed+0x66>
  401c3e:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
  401c40:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWIHS_CLK_DIVIDER;
  401c42:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401c44:	2cff      	cmp	r4, #255	; 0xff
  401c46:	d901      	bls.n	401c4c <twihs_set_speed+0x38>
  401c48:	2906      	cmp	r1, #6
  401c4a:	d9f9      	bls.n	401c40 <twihs_set_speed+0x2c>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401c4c:	2aff      	cmp	r2, #255	; 0xff
  401c4e:	d907      	bls.n	401c60 <twihs_set_speed+0x4c>
  401c50:	2906      	cmp	r1, #6
  401c52:	d805      	bhi.n	401c60 <twihs_set_speed+0x4c>
			/* Increase clock divider */
			ckdiv++;
  401c54:	3101      	adds	r1, #1
			/* Divide cldiv value */
			chdiv /= TWIHS_CLK_DIVIDER;
  401c56:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401c58:	2aff      	cmp	r2, #255	; 0xff
  401c5a:	d901      	bls.n	401c60 <twihs_set_speed+0x4c>
  401c5c:	2906      	cmp	r1, #6
  401c5e:	d9f9      	bls.n	401c54 <twihs_set_speed+0x40>
		}

		/* set clock waveform generator register */
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  401c60:	0213      	lsls	r3, r2, #8
  401c62:	b29b      	uxth	r3, r3
				TWIHS_CWGR_CKDIV(ckdiv);
  401c64:	0409      	lsls	r1, r1, #16
  401c66:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  401c6a:	430b      	orrs	r3, r1
  401c6c:	b2e4      	uxtb	r4, r4
  401c6e:	4323      	orrs	r3, r4
		p_twihs->TWIHS_CWGR =
  401c70:	6103      	str	r3, [r0, #16]
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
				TWIHS_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  401c72:	2000      	movs	r0, #0
}
  401c74:	f85d 4b04 	ldr.w	r4, [sp], #4
  401c78:	4770      	bx	lr
	uint32_t ckdiv = 0;
  401c7a:	2100      	movs	r1, #0
  401c7c:	e7e6      	b.n	401c4c <twihs_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401c7e:	0049      	lsls	r1, r1, #1
  401c80:	fbb2 f2f1 	udiv	r2, r2, r1
  401c84:	3a03      	subs	r2, #3
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401c86:	2aff      	cmp	r2, #255	; 0xff
  401c88:	d911      	bls.n	401cae <twihs_set_speed+0x9a>
  401c8a:	2300      	movs	r3, #0
			ckdiv++;
  401c8c:	3301      	adds	r3, #1
			c_lh_div /= TWIHS_CLK_DIVIDER;
  401c8e:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401c90:	2aff      	cmp	r2, #255	; 0xff
  401c92:	d901      	bls.n	401c98 <twihs_set_speed+0x84>
  401c94:	2b06      	cmp	r3, #6
  401c96:	d9f9      	bls.n	401c8c <twihs_set_speed+0x78>
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401c98:	0211      	lsls	r1, r2, #8
  401c9a:	b289      	uxth	r1, r1
				TWIHS_CWGR_CKDIV(ckdiv);
  401c9c:	041b      	lsls	r3, r3, #16
  401c9e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401ca2:	430b      	orrs	r3, r1
  401ca4:	b2d2      	uxtb	r2, r2
  401ca6:	431a      	orrs	r2, r3
		p_twihs->TWIHS_CWGR =
  401ca8:	6102      	str	r2, [r0, #16]
	return PASS;
  401caa:	2000      	movs	r0, #0
  401cac:	4770      	bx	lr
	uint32_t ckdiv = 0;
  401cae:	2300      	movs	r3, #0
  401cb0:	e7f2      	b.n	401c98 <twihs_set_speed+0x84>
		return FAIL;
  401cb2:	2001      	movs	r0, #1
  401cb4:	4770      	bx	lr
  401cb6:	bf00      	nop
  401cb8:	00061a80 	.word	0x00061a80
  401cbc:	057619f1 	.word	0x057619f1
  401cc0:	3ffd1200 	.word	0x3ffd1200

00401cc4 <twihs_master_init>:
{
  401cc4:	b508      	push	{r3, lr}
	p_twihs->TWIHS_IDR = ~0UL;
  401cc6:	f04f 32ff 	mov.w	r2, #4294967295
  401cca:	6282      	str	r2, [r0, #40]	; 0x28
	p_twihs->TWIHS_SR;
  401ccc:	6a02      	ldr	r2, [r0, #32]
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  401cce:	2280      	movs	r2, #128	; 0x80
  401cd0:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_RHR;
  401cd2:	6b02      	ldr	r2, [r0, #48]	; 0x30
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  401cd4:	2208      	movs	r2, #8
  401cd6:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  401cd8:	2220      	movs	r2, #32
  401cda:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  401cdc:	2204      	movs	r2, #4
  401cde:	6002      	str	r2, [r0, #0]
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  401ce0:	680a      	ldr	r2, [r1, #0]
  401ce2:	6849      	ldr	r1, [r1, #4]
  401ce4:	4b03      	ldr	r3, [pc, #12]	; (401cf4 <twihs_master_init+0x30>)
  401ce6:	4798      	blx	r3
}
  401ce8:	2801      	cmp	r0, #1
  401cea:	bf14      	ite	ne
  401cec:	2000      	movne	r0, #0
  401cee:	2001      	moveq	r0, #1
  401cf0:	bd08      	pop	{r3, pc}
  401cf2:	bf00      	nop
  401cf4:	00401c15 	.word	0x00401c15

00401cf8 <twihs_master_read>:
	uint32_t status, cnt = p_packet->length;
  401cf8:	68ca      	ldr	r2, [r1, #12]
	if (cnt == 0) {
  401cfa:	2a00      	cmp	r2, #0
  401cfc:	d04c      	beq.n	401d98 <twihs_master_read+0xa0>
{
  401cfe:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  401d00:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  401d02:	2600      	movs	r6, #0
  401d04:	6046      	str	r6, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  401d06:	684b      	ldr	r3, [r1, #4]
  401d08:	021b      	lsls	r3, r3, #8
  401d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  401d0e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  401d12:	7c0d      	ldrb	r5, [r1, #16]
  401d14:	042d      	lsls	r5, r5, #16
  401d16:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
  401d1a:	432b      	orrs	r3, r5
  401d1c:	6043      	str	r3, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  401d1e:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401d20:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  401d22:	b15d      	cbz	r5, 401d3c <twihs_master_read+0x44>
	val = addr[0];
  401d24:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
  401d26:	2d01      	cmp	r5, #1
  401d28:	dd02      	ble.n	401d30 <twihs_master_read+0x38>
		val |= addr[1];
  401d2a:	784e      	ldrb	r6, [r1, #1]
  401d2c:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
	if (len > 2) {
  401d30:	2d02      	cmp	r5, #2
  401d32:	dd04      	ble.n	401d3e <twihs_master_read+0x46>
		val |= addr[2];
  401d34:	7889      	ldrb	r1, [r1, #2]
  401d36:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  401d3a:	e000      	b.n	401d3e <twihs_master_read+0x46>
		return 0;
  401d3c:	2300      	movs	r3, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401d3e:	60c3      	str	r3, [r0, #12]
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  401d40:	2301      	movs	r3, #1
  401d42:	6003      	str	r3, [r0, #0]
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401d44:	2502      	movs	r5, #2
  401d46:	e012      	b.n	401d6e <twihs_master_read+0x76>
  401d48:	6005      	str	r5, [r0, #0]
		if (!(status & TWIHS_SR_RXRDY)) {
  401d4a:	f013 0f02 	tst.w	r3, #2
  401d4e:	d01b      	beq.n	401d88 <twihs_master_read+0x90>
		*buffer++ = p_twihs->TWIHS_RHR;
  401d50:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401d52:	7023      	strb	r3, [r4, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401d54:	6a03      	ldr	r3, [r0, #32]
  401d56:	f013 0f01 	tst.w	r3, #1
  401d5a:	d0fb      	beq.n	401d54 <twihs_master_read+0x5c>
	p_twihs->TWIHS_SR;
  401d5c:	6a03      	ldr	r3, [r0, #32]
	return TWIHS_SUCCESS;
  401d5e:	2000      	movs	r0, #0
}
  401d60:	bc70      	pop	{r4, r5, r6}
  401d62:	4770      	bx	lr
		*buffer++ = p_twihs->TWIHS_RHR;
  401d64:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401d66:	f804 3b01 	strb.w	r3, [r4], #1
	while (cnt > 0) {
  401d6a:	3a01      	subs	r2, #1
  401d6c:	d0f2      	beq.n	401d54 <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  401d6e:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401d70:	f413 7f80 	tst.w	r3, #256	; 0x100
  401d74:	d114      	bne.n	401da0 <twihs_master_read+0xa8>
  401d76:	f247 5130 	movw	r1, #30000	; 0x7530
		if (cnt == 1) {
  401d7a:	2a01      	cmp	r2, #1
  401d7c:	d0e4      	beq.n	401d48 <twihs_master_read+0x50>
		if (!(status & TWIHS_SR_RXRDY)) {
  401d7e:	f013 0f02 	tst.w	r3, #2
  401d82:	d1ef      	bne.n	401d64 <twihs_master_read+0x6c>
	while (cnt > 0) {
  401d84:	2a00      	cmp	r2, #0
  401d86:	d0e5      	beq.n	401d54 <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  401d88:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401d8a:	f413 7f80 	tst.w	r3, #256	; 0x100
  401d8e:	d105      	bne.n	401d9c <twihs_master_read+0xa4>
		if (!timeout--) {
  401d90:	3901      	subs	r1, #1
  401d92:	d1f2      	bne.n	401d7a <twihs_master_read+0x82>
			return TWIHS_ERROR_TIMEOUT;
  401d94:	2009      	movs	r0, #9
  401d96:	e7e3      	b.n	401d60 <twihs_master_read+0x68>
		return TWIHS_INVALID_ARGUMENT;
  401d98:	2001      	movs	r0, #1
  401d9a:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401d9c:	2005      	movs	r0, #5
  401d9e:	e7df      	b.n	401d60 <twihs_master_read+0x68>
  401da0:	2005      	movs	r0, #5
  401da2:	e7dd      	b.n	401d60 <twihs_master_read+0x68>

00401da4 <twihs_master_write>:
	uint32_t status, cnt = p_packet->length;
  401da4:	68cb      	ldr	r3, [r1, #12]
	if (cnt == 0) {
  401da6:	2b00      	cmp	r3, #0
  401da8:	d043      	beq.n	401e32 <twihs_master_write+0x8e>
{
  401daa:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  401dac:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  401dae:	2600      	movs	r6, #0
  401db0:	6046      	str	r6, [r0, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401db2:	7c0a      	ldrb	r2, [r1, #16]
  401db4:	0412      	lsls	r2, r2, #16
  401db6:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  401dba:	684d      	ldr	r5, [r1, #4]
  401dbc:	022d      	lsls	r5, r5, #8
  401dbe:	f405 7540 	and.w	r5, r5, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401dc2:	432a      	orrs	r2, r5
  401dc4:	6042      	str	r2, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  401dc6:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401dc8:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  401dca:	b15d      	cbz	r5, 401de4 <twihs_master_write+0x40>
	val = addr[0];
  401dcc:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  401dce:	2d01      	cmp	r5, #1
  401dd0:	dd02      	ble.n	401dd8 <twihs_master_write+0x34>
		val |= addr[1];
  401dd2:	784e      	ldrb	r6, [r1, #1]
  401dd4:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
	if (len > 2) {
  401dd8:	2d02      	cmp	r5, #2
  401dda:	dd04      	ble.n	401de6 <twihs_master_write+0x42>
		val |= addr[2];
  401ddc:	7889      	ldrb	r1, [r1, #2]
  401dde:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  401de2:	e000      	b.n	401de6 <twihs_master_write+0x42>
		return 0;
  401de4:	2200      	movs	r2, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401de6:	60c2      	str	r2, [r0, #12]
  401de8:	e004      	b.n	401df4 <twihs_master_write+0x50>
		p_twihs->TWIHS_THR = *buffer++;
  401dea:	f814 2b01 	ldrb.w	r2, [r4], #1
  401dee:	6342      	str	r2, [r0, #52]	; 0x34
	while (cnt > 0) {
  401df0:	3b01      	subs	r3, #1
  401df2:	d00f      	beq.n	401e14 <twihs_master_write+0x70>
		status = p_twihs->TWIHS_SR;
  401df4:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401df6:	f412 7f80 	tst.w	r2, #256	; 0x100
  401dfa:	d11e      	bne.n	401e3a <twihs_master_write+0x96>
		if (!(status & TWIHS_SR_TXRDY)) {
  401dfc:	f012 0f04 	tst.w	r2, #4
  401e00:	d1f3      	bne.n	401dea <twihs_master_write+0x46>
		status = p_twihs->TWIHS_SR;
  401e02:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401e04:	f412 7f80 	tst.w	r2, #256	; 0x100
  401e08:	d115      	bne.n	401e36 <twihs_master_write+0x92>
		if (!(status & TWIHS_SR_TXRDY)) {
  401e0a:	f012 0f04 	tst.w	r2, #4
  401e0e:	d1ec      	bne.n	401dea <twihs_master_write+0x46>
	while (cnt > 0) {
  401e10:	2b00      	cmp	r3, #0
  401e12:	d1f6      	bne.n	401e02 <twihs_master_write+0x5e>
		status = p_twihs->TWIHS_SR;
  401e14:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401e16:	f413 7f80 	tst.w	r3, #256	; 0x100
  401e1a:	d111      	bne.n	401e40 <twihs_master_write+0x9c>
		if (status & TWIHS_SR_TXRDY) {
  401e1c:	f013 0f04 	tst.w	r3, #4
  401e20:	d0f8      	beq.n	401e14 <twihs_master_write+0x70>
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401e22:	2302      	movs	r3, #2
  401e24:	6003      	str	r3, [r0, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401e26:	6a03      	ldr	r3, [r0, #32]
  401e28:	f013 0f01 	tst.w	r3, #1
  401e2c:	d0fb      	beq.n	401e26 <twihs_master_write+0x82>
	return TWIHS_SUCCESS;
  401e2e:	2000      	movs	r0, #0
  401e30:	e004      	b.n	401e3c <twihs_master_write+0x98>
		return TWIHS_INVALID_ARGUMENT;
  401e32:	2001      	movs	r0, #1
  401e34:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401e36:	2005      	movs	r0, #5
  401e38:	e000      	b.n	401e3c <twihs_master_write+0x98>
  401e3a:	2005      	movs	r0, #5
}
  401e3c:	bc70      	pop	{r4, r5, r6}
  401e3e:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401e40:	2005      	movs	r0, #5
  401e42:	e7fb      	b.n	401e3c <twihs_master_write+0x98>

00401e44 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401e44:	6943      	ldr	r3, [r0, #20]
  401e46:	f013 0f02 	tst.w	r3, #2
  401e4a:	d002      	beq.n	401e52 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  401e4c:	61c1      	str	r1, [r0, #28]
	return 0;
  401e4e:	2000      	movs	r0, #0
  401e50:	4770      	bx	lr
		return 1;
  401e52:	2001      	movs	r0, #1
}
  401e54:	4770      	bx	lr

00401e56 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401e56:	6943      	ldr	r3, [r0, #20]
  401e58:	f013 0f01 	tst.w	r3, #1
  401e5c:	d003      	beq.n	401e66 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401e5e:	6983      	ldr	r3, [r0, #24]
  401e60:	700b      	strb	r3, [r1, #0]
	return 0;
  401e62:	2000      	movs	r0, #0
  401e64:	4770      	bx	lr
		return 1;
  401e66:	2001      	movs	r0, #1
}
  401e68:	4770      	bx	lr

00401e6a <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  401e6a:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  401e6c:	010b      	lsls	r3, r1, #4
  401e6e:	4293      	cmp	r3, r2
  401e70:	d914      	bls.n	401e9c <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401e72:	00c9      	lsls	r1, r1, #3
  401e74:	084b      	lsrs	r3, r1, #1
  401e76:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  401e7a:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  401e7e:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401e80:	1e5c      	subs	r4, r3, #1
  401e82:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  401e86:	428c      	cmp	r4, r1
  401e88:	d901      	bls.n	401e8e <usart_set_async_baudrate+0x24>
		return 1;
  401e8a:	2001      	movs	r0, #1
  401e8c:	e017      	b.n	401ebe <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  401e8e:	6841      	ldr	r1, [r0, #4]
  401e90:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  401e94:	6041      	str	r1, [r0, #4]
  401e96:	e00c      	b.n	401eb2 <usart_set_async_baudrate+0x48>
		return 1;
  401e98:	2001      	movs	r0, #1
  401e9a:	e010      	b.n	401ebe <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401e9c:	0859      	lsrs	r1, r3, #1
  401e9e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  401ea2:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  401ea6:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401ea8:	1e5c      	subs	r4, r3, #1
  401eaa:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  401eae:	428c      	cmp	r4, r1
  401eb0:	d8f2      	bhi.n	401e98 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  401eb2:	0412      	lsls	r2, r2, #16
  401eb4:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  401eb8:	431a      	orrs	r2, r3
  401eba:	6202      	str	r2, [r0, #32]

	return 0;
  401ebc:	2000      	movs	r0, #0
}
  401ebe:	f85d 4b04 	ldr.w	r4, [sp], #4
  401ec2:	4770      	bx	lr

00401ec4 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  401ec4:	4b08      	ldr	r3, [pc, #32]	; (401ee8 <usart_reset+0x24>)
  401ec6:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  401eca:	2300      	movs	r3, #0
  401ecc:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  401ece:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  401ed0:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  401ed2:	2388      	movs	r3, #136	; 0x88
  401ed4:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  401ed6:	2324      	movs	r3, #36	; 0x24
  401ed8:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  401eda:	f44f 7380 	mov.w	r3, #256	; 0x100
  401ede:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  401ee0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  401ee4:	6003      	str	r3, [r0, #0]
  401ee6:	4770      	bx	lr
  401ee8:	55534100 	.word	0x55534100

00401eec <usart_init_rs232>:
{
  401eec:	b570      	push	{r4, r5, r6, lr}
  401eee:	4605      	mov	r5, r0
  401ef0:	460c      	mov	r4, r1
  401ef2:	4616      	mov	r6, r2
	usart_reset(p_usart);
  401ef4:	4b0f      	ldr	r3, [pc, #60]	; (401f34 <usart_init_rs232+0x48>)
  401ef6:	4798      	blx	r3
	ul_reg_val = 0;
  401ef8:	2200      	movs	r2, #0
  401efa:	4b0f      	ldr	r3, [pc, #60]	; (401f38 <usart_init_rs232+0x4c>)
  401efc:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401efe:	b1a4      	cbz	r4, 401f2a <usart_init_rs232+0x3e>
  401f00:	4632      	mov	r2, r6
  401f02:	6821      	ldr	r1, [r4, #0]
  401f04:	4628      	mov	r0, r5
  401f06:	4b0d      	ldr	r3, [pc, #52]	; (401f3c <usart_init_rs232+0x50>)
  401f08:	4798      	blx	r3
  401f0a:	4602      	mov	r2, r0
  401f0c:	b978      	cbnz	r0, 401f2e <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401f0e:	6863      	ldr	r3, [r4, #4]
  401f10:	68a1      	ldr	r1, [r4, #8]
  401f12:	430b      	orrs	r3, r1
  401f14:	6921      	ldr	r1, [r4, #16]
  401f16:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401f18:	68e1      	ldr	r1, [r4, #12]
  401f1a:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401f1c:	4906      	ldr	r1, [pc, #24]	; (401f38 <usart_init_rs232+0x4c>)
  401f1e:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  401f20:	6869      	ldr	r1, [r5, #4]
  401f22:	430b      	orrs	r3, r1
  401f24:	606b      	str	r3, [r5, #4]
}
  401f26:	4610      	mov	r0, r2
  401f28:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  401f2a:	2201      	movs	r2, #1
  401f2c:	e7fb      	b.n	401f26 <usart_init_rs232+0x3a>
  401f2e:	2201      	movs	r2, #1
  401f30:	e7f9      	b.n	401f26 <usart_init_rs232+0x3a>
  401f32:	bf00      	nop
  401f34:	00401ec5 	.word	0x00401ec5
  401f38:	20400f40 	.word	0x20400f40
  401f3c:	00401e6b 	.word	0x00401e6b

00401f40 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  401f40:	2340      	movs	r3, #64	; 0x40
  401f42:	6003      	str	r3, [r0, #0]
  401f44:	4770      	bx	lr

00401f46 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  401f46:	2310      	movs	r3, #16
  401f48:	6003      	str	r3, [r0, #0]
  401f4a:	4770      	bx	lr

00401f4c <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401f4c:	6943      	ldr	r3, [r0, #20]
  401f4e:	f013 0f02 	tst.w	r3, #2
  401f52:	d004      	beq.n	401f5e <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  401f54:	f3c1 0108 	ubfx	r1, r1, #0, #9
  401f58:	61c1      	str	r1, [r0, #28]
	return 0;
  401f5a:	2000      	movs	r0, #0
  401f5c:	4770      	bx	lr
		return 1;
  401f5e:	2001      	movs	r0, #1
}
  401f60:	4770      	bx	lr

00401f62 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401f62:	6943      	ldr	r3, [r0, #20]
  401f64:	f013 0f01 	tst.w	r3, #1
  401f68:	d005      	beq.n	401f76 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401f6a:	6983      	ldr	r3, [r0, #24]
  401f6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
  401f70:	600b      	str	r3, [r1, #0]
	return 0;
  401f72:	2000      	movs	r0, #0
  401f74:	4770      	bx	lr
		return 1;
  401f76:	2001      	movs	r0, #1
}
  401f78:	4770      	bx	lr

00401f7a <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401f7a:	e7fe      	b.n	401f7a <Dummy_Handler>

00401f7c <Reset_Handler>:
{
  401f7c:	b500      	push	{lr}
  401f7e:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  401f80:	4b25      	ldr	r3, [pc, #148]	; (402018 <Reset_Handler+0x9c>)
  401f82:	4a26      	ldr	r2, [pc, #152]	; (40201c <Reset_Handler+0xa0>)
  401f84:	429a      	cmp	r2, r3
  401f86:	d010      	beq.n	401faa <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  401f88:	4b25      	ldr	r3, [pc, #148]	; (402020 <Reset_Handler+0xa4>)
  401f8a:	4a23      	ldr	r2, [pc, #140]	; (402018 <Reset_Handler+0x9c>)
  401f8c:	429a      	cmp	r2, r3
  401f8e:	d20c      	bcs.n	401faa <Reset_Handler+0x2e>
  401f90:	3b01      	subs	r3, #1
  401f92:	1a9b      	subs	r3, r3, r2
  401f94:	f023 0303 	bic.w	r3, r3, #3
  401f98:	3304      	adds	r3, #4
  401f9a:	4413      	add	r3, r2
  401f9c:	491f      	ldr	r1, [pc, #124]	; (40201c <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  401f9e:	f851 0b04 	ldr.w	r0, [r1], #4
  401fa2:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  401fa6:	429a      	cmp	r2, r3
  401fa8:	d1f9      	bne.n	401f9e <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  401faa:	4b1e      	ldr	r3, [pc, #120]	; (402024 <Reset_Handler+0xa8>)
  401fac:	4a1e      	ldr	r2, [pc, #120]	; (402028 <Reset_Handler+0xac>)
  401fae:	429a      	cmp	r2, r3
  401fb0:	d20a      	bcs.n	401fc8 <Reset_Handler+0x4c>
  401fb2:	3b01      	subs	r3, #1
  401fb4:	1a9b      	subs	r3, r3, r2
  401fb6:	f023 0303 	bic.w	r3, r3, #3
  401fba:	3304      	adds	r3, #4
  401fbc:	4413      	add	r3, r2
                *pDest++ = 0;
  401fbe:	2100      	movs	r1, #0
  401fc0:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  401fc4:	4293      	cmp	r3, r2
  401fc6:	d1fb      	bne.n	401fc0 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401fc8:	4a18      	ldr	r2, [pc, #96]	; (40202c <Reset_Handler+0xb0>)
  401fca:	4b19      	ldr	r3, [pc, #100]	; (402030 <Reset_Handler+0xb4>)
  401fcc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401fd0:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401fd2:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401fd6:	fab3 f383 	clz	r3, r3
  401fda:	095b      	lsrs	r3, r3, #5
  401fdc:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401fde:	b672      	cpsid	i
  __ASM volatile ("dmb");
  401fe0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401fe4:	2200      	movs	r2, #0
  401fe6:	4b13      	ldr	r3, [pc, #76]	; (402034 <Reset_Handler+0xb8>)
  401fe8:	701a      	strb	r2, [r3, #0]
	return flags;
  401fea:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401fec:	4a12      	ldr	r2, [pc, #72]	; (402038 <Reset_Handler+0xbc>)
  401fee:	6813      	ldr	r3, [r2, #0]
  401ff0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401ff4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  401ff6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401ffa:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401ffe:	b129      	cbz	r1, 40200c <Reset_Handler+0x90>
		cpu_irq_enable();
  402000:	2201      	movs	r2, #1
  402002:	4b0c      	ldr	r3, [pc, #48]	; (402034 <Reset_Handler+0xb8>)
  402004:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  402006:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40200a:	b662      	cpsie	i
        __libc_init_array();
  40200c:	4b0b      	ldr	r3, [pc, #44]	; (40203c <Reset_Handler+0xc0>)
  40200e:	4798      	blx	r3
        main();
  402010:	4b0b      	ldr	r3, [pc, #44]	; (402040 <Reset_Handler+0xc4>)
  402012:	4798      	blx	r3
  402014:	e7fe      	b.n	402014 <Reset_Handler+0x98>
  402016:	bf00      	nop
  402018:	20400000 	.word	0x20400000
  40201c:	00409d04 	.word	0x00409d04
  402020:	20400af0 	.word	0x20400af0
  402024:	20400fdc 	.word	0x20400fdc
  402028:	20400af0 	.word	0x20400af0
  40202c:	e000ed00 	.word	0xe000ed00
  402030:	00400000 	.word	0x00400000
  402034:	2040000a 	.word	0x2040000a
  402038:	e000ed88 	.word	0xe000ed88
  40203c:	00402c85 	.word	0x00402c85
  402040:	004029b1 	.word	0x004029b1

00402044 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  402044:	4b3b      	ldr	r3, [pc, #236]	; (402134 <SystemCoreClockUpdate+0xf0>)
  402046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402048:	f003 0303 	and.w	r3, r3, #3
  40204c:	2b01      	cmp	r3, #1
  40204e:	d01d      	beq.n	40208c <SystemCoreClockUpdate+0x48>
  402050:	b183      	cbz	r3, 402074 <SystemCoreClockUpdate+0x30>
  402052:	2b02      	cmp	r3, #2
  402054:	d036      	beq.n	4020c4 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  402056:	4b37      	ldr	r3, [pc, #220]	; (402134 <SystemCoreClockUpdate+0xf0>)
  402058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40205a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40205e:	2b70      	cmp	r3, #112	; 0x70
  402060:	d05f      	beq.n	402122 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  402062:	4b34      	ldr	r3, [pc, #208]	; (402134 <SystemCoreClockUpdate+0xf0>)
  402064:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402066:	4934      	ldr	r1, [pc, #208]	; (402138 <SystemCoreClockUpdate+0xf4>)
  402068:	f3c2 1202 	ubfx	r2, r2, #4, #3
  40206c:	680b      	ldr	r3, [r1, #0]
  40206e:	40d3      	lsrs	r3, r2
  402070:	600b      	str	r3, [r1, #0]
  402072:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  402074:	4b31      	ldr	r3, [pc, #196]	; (40213c <SystemCoreClockUpdate+0xf8>)
  402076:	695b      	ldr	r3, [r3, #20]
  402078:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40207c:	bf14      	ite	ne
  40207e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  402082:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  402086:	4b2c      	ldr	r3, [pc, #176]	; (402138 <SystemCoreClockUpdate+0xf4>)
  402088:	601a      	str	r2, [r3, #0]
  40208a:	e7e4      	b.n	402056 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40208c:	4b29      	ldr	r3, [pc, #164]	; (402134 <SystemCoreClockUpdate+0xf0>)
  40208e:	6a1b      	ldr	r3, [r3, #32]
  402090:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402094:	d003      	beq.n	40209e <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  402096:	4a2a      	ldr	r2, [pc, #168]	; (402140 <SystemCoreClockUpdate+0xfc>)
  402098:	4b27      	ldr	r3, [pc, #156]	; (402138 <SystemCoreClockUpdate+0xf4>)
  40209a:	601a      	str	r2, [r3, #0]
  40209c:	e7db      	b.n	402056 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40209e:	4a29      	ldr	r2, [pc, #164]	; (402144 <SystemCoreClockUpdate+0x100>)
  4020a0:	4b25      	ldr	r3, [pc, #148]	; (402138 <SystemCoreClockUpdate+0xf4>)
  4020a2:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4020a4:	4b23      	ldr	r3, [pc, #140]	; (402134 <SystemCoreClockUpdate+0xf0>)
  4020a6:	6a1b      	ldr	r3, [r3, #32]
  4020a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4020ac:	2b10      	cmp	r3, #16
  4020ae:	d005      	beq.n	4020bc <SystemCoreClockUpdate+0x78>
  4020b0:	2b20      	cmp	r3, #32
  4020b2:	d1d0      	bne.n	402056 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  4020b4:	4a22      	ldr	r2, [pc, #136]	; (402140 <SystemCoreClockUpdate+0xfc>)
  4020b6:	4b20      	ldr	r3, [pc, #128]	; (402138 <SystemCoreClockUpdate+0xf4>)
  4020b8:	601a      	str	r2, [r3, #0]
          break;
  4020ba:	e7cc      	b.n	402056 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  4020bc:	4a22      	ldr	r2, [pc, #136]	; (402148 <SystemCoreClockUpdate+0x104>)
  4020be:	4b1e      	ldr	r3, [pc, #120]	; (402138 <SystemCoreClockUpdate+0xf4>)
  4020c0:	601a      	str	r2, [r3, #0]
          break;
  4020c2:	e7c8      	b.n	402056 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4020c4:	4b1b      	ldr	r3, [pc, #108]	; (402134 <SystemCoreClockUpdate+0xf0>)
  4020c6:	6a1b      	ldr	r3, [r3, #32]
  4020c8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4020cc:	d016      	beq.n	4020fc <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4020ce:	4a1c      	ldr	r2, [pc, #112]	; (402140 <SystemCoreClockUpdate+0xfc>)
  4020d0:	4b19      	ldr	r3, [pc, #100]	; (402138 <SystemCoreClockUpdate+0xf4>)
  4020d2:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4020d4:	4b17      	ldr	r3, [pc, #92]	; (402134 <SystemCoreClockUpdate+0xf0>)
  4020d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4020d8:	f003 0303 	and.w	r3, r3, #3
  4020dc:	2b02      	cmp	r3, #2
  4020de:	d1ba      	bne.n	402056 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4020e0:	4a14      	ldr	r2, [pc, #80]	; (402134 <SystemCoreClockUpdate+0xf0>)
  4020e2:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4020e4:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4020e6:	4814      	ldr	r0, [pc, #80]	; (402138 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4020e8:	f3c1 410a 	ubfx	r1, r1, #16, #11
  4020ec:	6803      	ldr	r3, [r0, #0]
  4020ee:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4020f2:	b2d2      	uxtb	r2, r2
  4020f4:	fbb3 f3f2 	udiv	r3, r3, r2
  4020f8:	6003      	str	r3, [r0, #0]
  4020fa:	e7ac      	b.n	402056 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4020fc:	4a11      	ldr	r2, [pc, #68]	; (402144 <SystemCoreClockUpdate+0x100>)
  4020fe:	4b0e      	ldr	r3, [pc, #56]	; (402138 <SystemCoreClockUpdate+0xf4>)
  402100:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402102:	4b0c      	ldr	r3, [pc, #48]	; (402134 <SystemCoreClockUpdate+0xf0>)
  402104:	6a1b      	ldr	r3, [r3, #32]
  402106:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40210a:	2b10      	cmp	r3, #16
  40210c:	d005      	beq.n	40211a <SystemCoreClockUpdate+0xd6>
  40210e:	2b20      	cmp	r3, #32
  402110:	d1e0      	bne.n	4020d4 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  402112:	4a0b      	ldr	r2, [pc, #44]	; (402140 <SystemCoreClockUpdate+0xfc>)
  402114:	4b08      	ldr	r3, [pc, #32]	; (402138 <SystemCoreClockUpdate+0xf4>)
  402116:	601a      	str	r2, [r3, #0]
          break;
  402118:	e7dc      	b.n	4020d4 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  40211a:	4a0b      	ldr	r2, [pc, #44]	; (402148 <SystemCoreClockUpdate+0x104>)
  40211c:	4b06      	ldr	r3, [pc, #24]	; (402138 <SystemCoreClockUpdate+0xf4>)
  40211e:	601a      	str	r2, [r3, #0]
          break;
  402120:	e7d8      	b.n	4020d4 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  402122:	4a05      	ldr	r2, [pc, #20]	; (402138 <SystemCoreClockUpdate+0xf4>)
  402124:	6813      	ldr	r3, [r2, #0]
  402126:	4909      	ldr	r1, [pc, #36]	; (40214c <SystemCoreClockUpdate+0x108>)
  402128:	fba1 1303 	umull	r1, r3, r1, r3
  40212c:	085b      	lsrs	r3, r3, #1
  40212e:	6013      	str	r3, [r2, #0]
  402130:	4770      	bx	lr
  402132:	bf00      	nop
  402134:	400e0600 	.word	0x400e0600
  402138:	2040000c 	.word	0x2040000c
  40213c:	400e1810 	.word	0x400e1810
  402140:	00b71b00 	.word	0x00b71b00
  402144:	003d0900 	.word	0x003d0900
  402148:	007a1200 	.word	0x007a1200
  40214c:	aaaaaaab 	.word	0xaaaaaaab

00402150 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  402150:	4b16      	ldr	r3, [pc, #88]	; (4021ac <system_init_flash+0x5c>)
  402152:	4298      	cmp	r0, r3
  402154:	d913      	bls.n	40217e <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  402156:	4b16      	ldr	r3, [pc, #88]	; (4021b0 <system_init_flash+0x60>)
  402158:	4298      	cmp	r0, r3
  40215a:	d915      	bls.n	402188 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  40215c:	4b15      	ldr	r3, [pc, #84]	; (4021b4 <system_init_flash+0x64>)
  40215e:	4298      	cmp	r0, r3
  402160:	d916      	bls.n	402190 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  402162:	4b15      	ldr	r3, [pc, #84]	; (4021b8 <system_init_flash+0x68>)
  402164:	4298      	cmp	r0, r3
  402166:	d917      	bls.n	402198 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  402168:	4b14      	ldr	r3, [pc, #80]	; (4021bc <system_init_flash+0x6c>)
  40216a:	4298      	cmp	r0, r3
  40216c:	d918      	bls.n	4021a0 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  40216e:	4b14      	ldr	r3, [pc, #80]	; (4021c0 <system_init_flash+0x70>)
  402170:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402172:	bf94      	ite	ls
  402174:	4a13      	ldrls	r2, [pc, #76]	; (4021c4 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  402176:	4a14      	ldrhi	r2, [pc, #80]	; (4021c8 <system_init_flash+0x78>)
  402178:	4b14      	ldr	r3, [pc, #80]	; (4021cc <system_init_flash+0x7c>)
  40217a:	601a      	str	r2, [r3, #0]
  40217c:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40217e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402182:	4b12      	ldr	r3, [pc, #72]	; (4021cc <system_init_flash+0x7c>)
  402184:	601a      	str	r2, [r3, #0]
  402186:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402188:	4a11      	ldr	r2, [pc, #68]	; (4021d0 <system_init_flash+0x80>)
  40218a:	4b10      	ldr	r3, [pc, #64]	; (4021cc <system_init_flash+0x7c>)
  40218c:	601a      	str	r2, [r3, #0]
  40218e:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402190:	4a10      	ldr	r2, [pc, #64]	; (4021d4 <system_init_flash+0x84>)
  402192:	4b0e      	ldr	r3, [pc, #56]	; (4021cc <system_init_flash+0x7c>)
  402194:	601a      	str	r2, [r3, #0]
  402196:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402198:	4a0f      	ldr	r2, [pc, #60]	; (4021d8 <system_init_flash+0x88>)
  40219a:	4b0c      	ldr	r3, [pc, #48]	; (4021cc <system_init_flash+0x7c>)
  40219c:	601a      	str	r2, [r3, #0]
  40219e:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4021a0:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4021a4:	4b09      	ldr	r3, [pc, #36]	; (4021cc <system_init_flash+0x7c>)
  4021a6:	601a      	str	r2, [r3, #0]
  4021a8:	4770      	bx	lr
  4021aa:	bf00      	nop
  4021ac:	015ef3bf 	.word	0x015ef3bf
  4021b0:	02bde77f 	.word	0x02bde77f
  4021b4:	041cdb3f 	.word	0x041cdb3f
  4021b8:	057bceff 	.word	0x057bceff
  4021bc:	06dac2bf 	.word	0x06dac2bf
  4021c0:	0839b67f 	.word	0x0839b67f
  4021c4:	04000500 	.word	0x04000500
  4021c8:	04000600 	.word	0x04000600
  4021cc:	400e0c00 	.word	0x400e0c00
  4021d0:	04000100 	.word	0x04000100
  4021d4:	04000200 	.word	0x04000200
  4021d8:	04000300 	.word	0x04000300

004021dc <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4021dc:	4b0a      	ldr	r3, [pc, #40]	; (402208 <_sbrk+0x2c>)
  4021de:	681b      	ldr	r3, [r3, #0]
  4021e0:	b153      	cbz	r3, 4021f8 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  4021e2:	4b09      	ldr	r3, [pc, #36]	; (402208 <_sbrk+0x2c>)
  4021e4:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4021e6:	181a      	adds	r2, r3, r0
  4021e8:	4908      	ldr	r1, [pc, #32]	; (40220c <_sbrk+0x30>)
  4021ea:	4291      	cmp	r1, r2
  4021ec:	db08      	blt.n	402200 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  4021ee:	4610      	mov	r0, r2
  4021f0:	4a05      	ldr	r2, [pc, #20]	; (402208 <_sbrk+0x2c>)
  4021f2:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4021f4:	4618      	mov	r0, r3
  4021f6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  4021f8:	4a05      	ldr	r2, [pc, #20]	; (402210 <_sbrk+0x34>)
  4021fa:	4b03      	ldr	r3, [pc, #12]	; (402208 <_sbrk+0x2c>)
  4021fc:	601a      	str	r2, [r3, #0]
  4021fe:	e7f0      	b.n	4021e2 <_sbrk+0x6>
		return (caddr_t) -1;	
  402200:	f04f 30ff 	mov.w	r0, #4294967295
}
  402204:	4770      	bx	lr
  402206:	bf00      	nop
  402208:	20400f44 	.word	0x20400f44
  40220c:	2045fffc 	.word	0x2045fffc
  402210:	204031e0 	.word	0x204031e0

00402214 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  402214:	f04f 30ff 	mov.w	r0, #4294967295
  402218:	4770      	bx	lr

0040221a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  40221a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40221e:	604b      	str	r3, [r1, #4]

	return 0;
}
  402220:	2000      	movs	r0, #0
  402222:	4770      	bx	lr

00402224 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  402224:	2001      	movs	r0, #1
  402226:	4770      	bx	lr

00402228 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  402228:	2000      	movs	r0, #0
  40222a:	4770      	bx	lr

0040222c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  40222c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40222e:	b083      	sub	sp, #12
  402230:	4605      	mov	r5, r0
  402232:	460c      	mov	r4, r1
	uint32_t val = 0;
  402234:	2300      	movs	r3, #0
  402236:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  402238:	4b2a      	ldr	r3, [pc, #168]	; (4022e4 <usart_serial_getchar+0xb8>)
  40223a:	4298      	cmp	r0, r3
  40223c:	d013      	beq.n	402266 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40223e:	4b2a      	ldr	r3, [pc, #168]	; (4022e8 <usart_serial_getchar+0xbc>)
  402240:	4298      	cmp	r0, r3
  402242:	d018      	beq.n	402276 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  402244:	4b29      	ldr	r3, [pc, #164]	; (4022ec <usart_serial_getchar+0xc0>)
  402246:	4298      	cmp	r0, r3
  402248:	d01d      	beq.n	402286 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  40224a:	4b29      	ldr	r3, [pc, #164]	; (4022f0 <usart_serial_getchar+0xc4>)
  40224c:	429d      	cmp	r5, r3
  40224e:	d022      	beq.n	402296 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  402250:	4b28      	ldr	r3, [pc, #160]	; (4022f4 <usart_serial_getchar+0xc8>)
  402252:	429d      	cmp	r5, r3
  402254:	d027      	beq.n	4022a6 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  402256:	4b28      	ldr	r3, [pc, #160]	; (4022f8 <usart_serial_getchar+0xcc>)
  402258:	429d      	cmp	r5, r3
  40225a:	d02e      	beq.n	4022ba <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  40225c:	4b27      	ldr	r3, [pc, #156]	; (4022fc <usart_serial_getchar+0xd0>)
  40225e:	429d      	cmp	r5, r3
  402260:	d035      	beq.n	4022ce <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  402262:	b003      	add	sp, #12
  402264:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  402266:	461f      	mov	r7, r3
  402268:	4e25      	ldr	r6, [pc, #148]	; (402300 <usart_serial_getchar+0xd4>)
  40226a:	4621      	mov	r1, r4
  40226c:	4638      	mov	r0, r7
  40226e:	47b0      	blx	r6
  402270:	2800      	cmp	r0, #0
  402272:	d1fa      	bne.n	40226a <usart_serial_getchar+0x3e>
  402274:	e7e9      	b.n	40224a <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  402276:	461f      	mov	r7, r3
  402278:	4e21      	ldr	r6, [pc, #132]	; (402300 <usart_serial_getchar+0xd4>)
  40227a:	4621      	mov	r1, r4
  40227c:	4638      	mov	r0, r7
  40227e:	47b0      	blx	r6
  402280:	2800      	cmp	r0, #0
  402282:	d1fa      	bne.n	40227a <usart_serial_getchar+0x4e>
  402284:	e7e4      	b.n	402250 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  402286:	461f      	mov	r7, r3
  402288:	4e1d      	ldr	r6, [pc, #116]	; (402300 <usart_serial_getchar+0xd4>)
  40228a:	4621      	mov	r1, r4
  40228c:	4638      	mov	r0, r7
  40228e:	47b0      	blx	r6
  402290:	2800      	cmp	r0, #0
  402292:	d1fa      	bne.n	40228a <usart_serial_getchar+0x5e>
  402294:	e7df      	b.n	402256 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  402296:	461f      	mov	r7, r3
  402298:	4e19      	ldr	r6, [pc, #100]	; (402300 <usart_serial_getchar+0xd4>)
  40229a:	4621      	mov	r1, r4
  40229c:	4638      	mov	r0, r7
  40229e:	47b0      	blx	r6
  4022a0:	2800      	cmp	r0, #0
  4022a2:	d1fa      	bne.n	40229a <usart_serial_getchar+0x6e>
  4022a4:	e7da      	b.n	40225c <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  4022a6:	461e      	mov	r6, r3
  4022a8:	4d16      	ldr	r5, [pc, #88]	; (402304 <usart_serial_getchar+0xd8>)
  4022aa:	a901      	add	r1, sp, #4
  4022ac:	4630      	mov	r0, r6
  4022ae:	47a8      	blx	r5
  4022b0:	2800      	cmp	r0, #0
  4022b2:	d1fa      	bne.n	4022aa <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  4022b4:	9b01      	ldr	r3, [sp, #4]
  4022b6:	7023      	strb	r3, [r4, #0]
  4022b8:	e7d3      	b.n	402262 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4022ba:	461e      	mov	r6, r3
  4022bc:	4d11      	ldr	r5, [pc, #68]	; (402304 <usart_serial_getchar+0xd8>)
  4022be:	a901      	add	r1, sp, #4
  4022c0:	4630      	mov	r0, r6
  4022c2:	47a8      	blx	r5
  4022c4:	2800      	cmp	r0, #0
  4022c6:	d1fa      	bne.n	4022be <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  4022c8:	9b01      	ldr	r3, [sp, #4]
  4022ca:	7023      	strb	r3, [r4, #0]
  4022cc:	e7c9      	b.n	402262 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4022ce:	461e      	mov	r6, r3
  4022d0:	4d0c      	ldr	r5, [pc, #48]	; (402304 <usart_serial_getchar+0xd8>)
  4022d2:	a901      	add	r1, sp, #4
  4022d4:	4630      	mov	r0, r6
  4022d6:	47a8      	blx	r5
  4022d8:	2800      	cmp	r0, #0
  4022da:	d1fa      	bne.n	4022d2 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  4022dc:	9b01      	ldr	r3, [sp, #4]
  4022de:	7023      	strb	r3, [r4, #0]
}
  4022e0:	e7bf      	b.n	402262 <usart_serial_getchar+0x36>
  4022e2:	bf00      	nop
  4022e4:	400e0800 	.word	0x400e0800
  4022e8:	400e0a00 	.word	0x400e0a00
  4022ec:	400e1a00 	.word	0x400e1a00
  4022f0:	400e1c00 	.word	0x400e1c00
  4022f4:	40024000 	.word	0x40024000
  4022f8:	40028000 	.word	0x40028000
  4022fc:	4002c000 	.word	0x4002c000
  402300:	00401e57 	.word	0x00401e57
  402304:	00401f63 	.word	0x00401f63

00402308 <usart_serial_putchar>:
{
  402308:	b570      	push	{r4, r5, r6, lr}
  40230a:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  40230c:	4b2a      	ldr	r3, [pc, #168]	; (4023b8 <usart_serial_putchar+0xb0>)
  40230e:	4298      	cmp	r0, r3
  402310:	d013      	beq.n	40233a <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  402312:	4b2a      	ldr	r3, [pc, #168]	; (4023bc <usart_serial_putchar+0xb4>)
  402314:	4298      	cmp	r0, r3
  402316:	d019      	beq.n	40234c <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  402318:	4b29      	ldr	r3, [pc, #164]	; (4023c0 <usart_serial_putchar+0xb8>)
  40231a:	4298      	cmp	r0, r3
  40231c:	d01f      	beq.n	40235e <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  40231e:	4b29      	ldr	r3, [pc, #164]	; (4023c4 <usart_serial_putchar+0xbc>)
  402320:	4298      	cmp	r0, r3
  402322:	d025      	beq.n	402370 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  402324:	4b28      	ldr	r3, [pc, #160]	; (4023c8 <usart_serial_putchar+0xc0>)
  402326:	4298      	cmp	r0, r3
  402328:	d02b      	beq.n	402382 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  40232a:	4b28      	ldr	r3, [pc, #160]	; (4023cc <usart_serial_putchar+0xc4>)
  40232c:	4298      	cmp	r0, r3
  40232e:	d031      	beq.n	402394 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  402330:	4b27      	ldr	r3, [pc, #156]	; (4023d0 <usart_serial_putchar+0xc8>)
  402332:	4298      	cmp	r0, r3
  402334:	d037      	beq.n	4023a6 <usart_serial_putchar+0x9e>
	return 0;
  402336:	2000      	movs	r0, #0
}
  402338:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40233a:	461e      	mov	r6, r3
  40233c:	4d25      	ldr	r5, [pc, #148]	; (4023d4 <usart_serial_putchar+0xcc>)
  40233e:	4621      	mov	r1, r4
  402340:	4630      	mov	r0, r6
  402342:	47a8      	blx	r5
  402344:	2800      	cmp	r0, #0
  402346:	d1fa      	bne.n	40233e <usart_serial_putchar+0x36>
		return 1;
  402348:	2001      	movs	r0, #1
  40234a:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40234c:	461e      	mov	r6, r3
  40234e:	4d21      	ldr	r5, [pc, #132]	; (4023d4 <usart_serial_putchar+0xcc>)
  402350:	4621      	mov	r1, r4
  402352:	4630      	mov	r0, r6
  402354:	47a8      	blx	r5
  402356:	2800      	cmp	r0, #0
  402358:	d1fa      	bne.n	402350 <usart_serial_putchar+0x48>
		return 1;
  40235a:	2001      	movs	r0, #1
  40235c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40235e:	461e      	mov	r6, r3
  402360:	4d1c      	ldr	r5, [pc, #112]	; (4023d4 <usart_serial_putchar+0xcc>)
  402362:	4621      	mov	r1, r4
  402364:	4630      	mov	r0, r6
  402366:	47a8      	blx	r5
  402368:	2800      	cmp	r0, #0
  40236a:	d1fa      	bne.n	402362 <usart_serial_putchar+0x5a>
		return 1;
  40236c:	2001      	movs	r0, #1
  40236e:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402370:	461e      	mov	r6, r3
  402372:	4d18      	ldr	r5, [pc, #96]	; (4023d4 <usart_serial_putchar+0xcc>)
  402374:	4621      	mov	r1, r4
  402376:	4630      	mov	r0, r6
  402378:	47a8      	blx	r5
  40237a:	2800      	cmp	r0, #0
  40237c:	d1fa      	bne.n	402374 <usart_serial_putchar+0x6c>
		return 1;
  40237e:	2001      	movs	r0, #1
  402380:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402382:	461e      	mov	r6, r3
  402384:	4d14      	ldr	r5, [pc, #80]	; (4023d8 <usart_serial_putchar+0xd0>)
  402386:	4621      	mov	r1, r4
  402388:	4630      	mov	r0, r6
  40238a:	47a8      	blx	r5
  40238c:	2800      	cmp	r0, #0
  40238e:	d1fa      	bne.n	402386 <usart_serial_putchar+0x7e>
		return 1;
  402390:	2001      	movs	r0, #1
  402392:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402394:	461e      	mov	r6, r3
  402396:	4d10      	ldr	r5, [pc, #64]	; (4023d8 <usart_serial_putchar+0xd0>)
  402398:	4621      	mov	r1, r4
  40239a:	4630      	mov	r0, r6
  40239c:	47a8      	blx	r5
  40239e:	2800      	cmp	r0, #0
  4023a0:	d1fa      	bne.n	402398 <usart_serial_putchar+0x90>
		return 1;
  4023a2:	2001      	movs	r0, #1
  4023a4:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4023a6:	461e      	mov	r6, r3
  4023a8:	4d0b      	ldr	r5, [pc, #44]	; (4023d8 <usart_serial_putchar+0xd0>)
  4023aa:	4621      	mov	r1, r4
  4023ac:	4630      	mov	r0, r6
  4023ae:	47a8      	blx	r5
  4023b0:	2800      	cmp	r0, #0
  4023b2:	d1fa      	bne.n	4023aa <usart_serial_putchar+0xa2>
		return 1;
  4023b4:	2001      	movs	r0, #1
  4023b6:	bd70      	pop	{r4, r5, r6, pc}
  4023b8:	400e0800 	.word	0x400e0800
  4023bc:	400e0a00 	.word	0x400e0a00
  4023c0:	400e1a00 	.word	0x400e1a00
  4023c4:	400e1c00 	.word	0x400e1c00
  4023c8:	40024000 	.word	0x40024000
  4023cc:	40028000 	.word	0x40028000
  4023d0:	4002c000 	.word	0x4002c000
  4023d4:	00401e45 	.word	0x00401e45
  4023d8:	00401f4d 	.word	0x00401f4d

004023dc <initMenuOrder>:
 * Inicializa ordem do menu
 * retorna o primeiro ciclo que
 * deve ser exibido.
 */
t_ciclo *initMenuOrder(){
  c_rapido.previous = &c_enxague;
  4023dc:	4a07      	ldr	r2, [pc, #28]	; (4023fc <initMenuOrder+0x20>)
  4023de:	4b08      	ldr	r3, [pc, #32]	; (402400 <initMenuOrder+0x24>)
  4023e0:	6353      	str	r3, [r2, #52]	; 0x34
  c_rapido.next = &c_diario;
  4023e2:	4808      	ldr	r0, [pc, #32]	; (402404 <initMenuOrder+0x28>)
  4023e4:	6390      	str	r0, [r2, #56]	; 0x38

  c_diario.previous = &c_rapido;
  4023e6:	6342      	str	r2, [r0, #52]	; 0x34
  c_diario.next = &c_pesado;
  4023e8:	4907      	ldr	r1, [pc, #28]	; (402408 <initMenuOrder+0x2c>)
  4023ea:	6381      	str	r1, [r0, #56]	; 0x38

  c_pesado.previous = &c_diario;
  4023ec:	6348      	str	r0, [r1, #52]	; 0x34
  c_pesado.next = &c_enxague;
  4023ee:	638b      	str	r3, [r1, #56]	; 0x38

  c_enxague.previous = &c_pesado;
  4023f0:	6359      	str	r1, [r3, #52]	; 0x34
  c_enxague.next = &c_centrifuga;
  4023f2:	4906      	ldr	r1, [pc, #24]	; (40240c <initMenuOrder+0x30>)
  4023f4:	6399      	str	r1, [r3, #56]	; 0x38

  c_centrifuga.previous = &c_enxague;
  4023f6:	634b      	str	r3, [r1, #52]	; 0x34
  c_centrifuga.next = &c_rapido;
  4023f8:	638a      	str	r2, [r1, #56]	; 0x38

  return(&c_diario);
}
  4023fa:	4770      	bx	lr
  4023fc:	20400100 	.word	0x20400100
  402400:	20400088 	.word	0x20400088
  402404:	2040004c 	.word	0x2040004c
  402408:	204000c4 	.word	0x204000c4
  40240c:	20400010 	.word	0x20400010

00402410 <RTT_Handler>:
volatile Bool start = false;
volatile Bool locked = false;
volatile Bool selection = true;

static void RTT_init(uint16_t pllPreScale, uint32_t IrqNPulses);
void RTT_Handler(void){
  402410:	b508      	push	{r3, lr}
	uint32_t ul_status;

	/* Get RTT status */
	ul_status = rtt_get_status(RTT);
  402412:	4805      	ldr	r0, [pc, #20]	; (402428 <RTT_Handler+0x18>)
  402414:	4b05      	ldr	r3, [pc, #20]	; (40242c <RTT_Handler+0x1c>)
  402416:	4798      	blx	r3

	/* IRQ due to Time has changed */
	if ((ul_status & RTT_SR_RTTINC) == RTT_SR_RTTINC) {  }

	/* IRQ due to Alarm */
	if ((ul_status & RTT_SR_ALMS) == RTT_SR_ALMS) {
  402418:	f010 0f01 	tst.w	r0, #1
  40241c:	d002      	beq.n	402424 <RTT_Handler+0x14>
		f_rtt_alarme = true;                  // flag RTT alarme
  40241e:	2201      	movs	r2, #1
  402420:	4b03      	ldr	r3, [pc, #12]	; (402430 <RTT_Handler+0x20>)
  402422:	701a      	strb	r2, [r3, #0]
  402424:	bd08      	pop	{r3, pc}
  402426:	bf00      	nop
  402428:	400e1830 	.word	0x400e1830
  40242c:	00401a51 	.word	0x00401a51
  402430:	20400f4c 	.word	0x20400f4c

00402434 <RTC_init>:
	 * value to the calibrate register */
	mxt_write_config_reg(device, mxt_get_object_address(device,
			MXT_GEN_COMMANDPROCESSOR_T6, 0)
			+ MXT_GEN_COMMANDPROCESSOR_CALIBRATE, 0x01);
}
void RTC_init(){
  402434:	b530      	push	{r4, r5, lr}
  402436:	b083      	sub	sp, #12
	/* Configura o PMC */
	pmc_enable_periph_clk(ID_RTC);
  402438:	2002      	movs	r0, #2
  40243a:	4b13      	ldr	r3, [pc, #76]	; (402488 <RTC_init+0x54>)
  40243c:	4798      	blx	r3

	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
  40243e:	4c13      	ldr	r4, [pc, #76]	; (40248c <RTC_init+0x58>)
  402440:	2100      	movs	r1, #0
  402442:	4620      	mov	r0, r4
  402444:	4b12      	ldr	r3, [pc, #72]	; (402490 <RTC_init+0x5c>)
  402446:	4798      	blx	r3

	/* Configura data e hora manualmente */
	rtc_set_date(RTC, YEAR, MONTH, DAY, WEEK);
  402448:	230c      	movs	r3, #12
  40244a:	9300      	str	r3, [sp, #0]
  40244c:	2313      	movs	r3, #19
  40244e:	2203      	movs	r2, #3
  402450:	f240 71e3 	movw	r1, #2019	; 0x7e3
  402454:	4620      	mov	r0, r4
  402456:	4d0f      	ldr	r5, [pc, #60]	; (402494 <RTC_init+0x60>)
  402458:	47a8      	blx	r5
	rtc_set_time(RTC, HOUR, MINUTE, SECOND);
  40245a:	2300      	movs	r3, #0
  40245c:	461a      	mov	r2, r3
  40245e:	4619      	mov	r1, r3
  402460:	4620      	mov	r0, r4
  402462:	4d0d      	ldr	r5, [pc, #52]	; (402498 <RTC_init+0x64>)
  402464:	47a8      	blx	r5
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  402466:	4b0d      	ldr	r3, [pc, #52]	; (40249c <RTC_init+0x68>)
  402468:	2204      	movs	r2, #4
  40246a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40246e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402472:	2100      	movs	r1, #0
  402474:	f883 1302 	strb.w	r1, [r3, #770]	; 0x302
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402478:	601a      	str	r2, [r3, #0]
	NVIC_ClearPendingIRQ(RTC_IRQn);
	NVIC_SetPriority(RTC_IRQn, 0);
	NVIC_EnableIRQ(RTC_IRQn);

	/* Ativa interrupcao via alarme */
	rtc_enable_interrupt(RTC,  RTC_IER_ALREN);
  40247a:	2102      	movs	r1, #2
  40247c:	4620      	mov	r0, r4
  40247e:	4b08      	ldr	r3, [pc, #32]	; (4024a0 <RTC_init+0x6c>)
  402480:	4798      	blx	r3

}
  402482:	b003      	add	sp, #12
  402484:	bd30      	pop	{r4, r5, pc}
  402486:	bf00      	nop
  402488:	004017f9 	.word	0x004017f9
  40248c:	400e1860 	.word	0x400e1860
  402490:	00401819 	.word	0x00401819
  402494:	0040191d 	.word	0x0040191d
  402498:	0040188d 	.word	0x0040188d
  40249c:	e000e100 	.word	0xe000e100
  4024a0:	0040182f 	.word	0x0040182f

004024a4 <clear_LCD>:
void clear_LCD(int a, int b){
  4024a4:	b570      	push	{r4, r5, r6, lr}
  4024a6:	4604      	mov	r4, r0
  4024a8:	460d      	mov	r5, r1
	if (locked){
  4024aa:	4b0e      	ldr	r3, [pc, #56]	; (4024e4 <clear_LCD+0x40>)
  4024ac:	781b      	ldrb	r3, [r3, #0]
  4024ae:	b963      	cbnz	r3, 4024ca <clear_LCD+0x26>
		ili9488_set_foreground_color(COLOR_CONVERT(COLOR_BLACK));
		ili9488_draw_filled_rectangle(0, a, ILI9488_LCD_WIDTH-1, b);
		ili9488_set_foreground_color(COLOR_CONVERT(COLOR_WHITE));
	}
	else{
		ili9488_set_foreground_color(COLOR_CONVERT(COLOR_WHITE));
  4024b0:	480d      	ldr	r0, [pc, #52]	; (4024e8 <clear_LCD+0x44>)
  4024b2:	4e0e      	ldr	r6, [pc, #56]	; (4024ec <clear_LCD+0x48>)
  4024b4:	47b0      	blx	r6
		ili9488_draw_filled_rectangle(0, a, ILI9488_LCD_WIDTH-1, b);
  4024b6:	462b      	mov	r3, r5
  4024b8:	f240 123f 	movw	r2, #319	; 0x13f
  4024bc:	4621      	mov	r1, r4
  4024be:	2000      	movs	r0, #0
  4024c0:	4c0b      	ldr	r4, [pc, #44]	; (4024f0 <clear_LCD+0x4c>)
  4024c2:	47a0      	blx	r4
		ili9488_set_foreground_color(COLOR_CONVERT(COLOR_BLACK));
  4024c4:	2000      	movs	r0, #0
  4024c6:	47b0      	blx	r6
  4024c8:	bd70      	pop	{r4, r5, r6, pc}
		ili9488_set_foreground_color(COLOR_CONVERT(COLOR_BLACK));
  4024ca:	2000      	movs	r0, #0
  4024cc:	4e07      	ldr	r6, [pc, #28]	; (4024ec <clear_LCD+0x48>)
  4024ce:	47b0      	blx	r6
		ili9488_draw_filled_rectangle(0, a, ILI9488_LCD_WIDTH-1, b);
  4024d0:	462b      	mov	r3, r5
  4024d2:	f240 123f 	movw	r2, #319	; 0x13f
  4024d6:	4621      	mov	r1, r4
  4024d8:	2000      	movs	r0, #0
  4024da:	4c05      	ldr	r4, [pc, #20]	; (4024f0 <clear_LCD+0x4c>)
  4024dc:	47a0      	blx	r4
		ili9488_set_foreground_color(COLOR_CONVERT(COLOR_WHITE));
  4024de:	4802      	ldr	r0, [pc, #8]	; (4024e8 <clear_LCD+0x44>)
  4024e0:	47b0      	blx	r6
  4024e2:	bd70      	pop	{r4, r5, r6, pc}
  4024e4:	20400f4d 	.word	0x20400f4d
  4024e8:	00fcfcfc 	.word	0x00fcfcfc
  4024ec:	00400e95 	.word	0x00400e95
  4024f0:	00401121 	.word	0x00401121

004024f4 <draw_screen>:
	}
}
void draw_screen(void) {
  4024f4:	b510      	push	{r4, lr}
	ili9488_set_foreground_color(COLOR_CONVERT(COLOR_WHITE));
  4024f6:	4806      	ldr	r0, [pc, #24]	; (402510 <draw_screen+0x1c>)
  4024f8:	4b06      	ldr	r3, [pc, #24]	; (402514 <draw_screen+0x20>)
  4024fa:	4798      	blx	r3
	ili9488_draw_filled_rectangle(0, 0, ILI9488_LCD_WIDTH-1, ILI9488_LCD_HEIGHT-1);
  4024fc:	f240 13df 	movw	r3, #479	; 0x1df
  402500:	f240 123f 	movw	r2, #319	; 0x13f
  402504:	2100      	movs	r1, #0
  402506:	4608      	mov	r0, r1
  402508:	4c03      	ldr	r4, [pc, #12]	; (402518 <draw_screen+0x24>)
  40250a:	47a0      	blx	r4
  40250c:	bd10      	pop	{r4, pc}
  40250e:	bf00      	nop
  402510:	00fcfcfc 	.word	0x00fcfcfc
  402514:	00400e95 	.word	0x00400e95
  402518:	00401121 	.word	0x00401121

0040251c <display_cicle>:
}

void display_cicle(int x){
  40251c:	b510      	push	{r4, lr}
  40251e:	b0c0      	sub	sp, #256	; 0x100
  402520:	4604      	mov	r4, r0
	clear_LCD(200,315);
  402522:	f240 113b 	movw	r1, #315	; 0x13b
  402526:	20c8      	movs	r0, #200	; 0xc8
  402528:	4b06      	ldr	r3, [pc, #24]	; (402544 <display_cicle+0x28>)
  40252a:	4798      	blx	r3
	uint8_t stingLCD[256];

	sprintf(stingLCD, "CICLO %d",x);
  40252c:	4622      	mov	r2, r4
  40252e:	4906      	ldr	r1, [pc, #24]	; (402548 <display_cicle+0x2c>)
  402530:	4668      	mov	r0, sp
  402532:	4b06      	ldr	r3, [pc, #24]	; (40254c <display_cicle+0x30>)
  402534:	4798      	blx	r3
	ili9488_draw_string(40, 250, stingLCD);
  402536:	466a      	mov	r2, sp
  402538:	21fa      	movs	r1, #250	; 0xfa
  40253a:	2028      	movs	r0, #40	; 0x28
  40253c:	4b04      	ldr	r3, [pc, #16]	; (402550 <display_cicle+0x34>)
  40253e:	4798      	blx	r3
	
}
  402540:	b040      	add	sp, #256	; 0x100
  402542:	bd10      	pop	{r4, pc}
  402544:	004024a5 	.word	0x004024a5
  402548:	004099cc 	.word	0x004099cc
  40254c:	004034e5 	.word	0x004034e5
  402550:	00401281 	.word	0x00401281

00402554 <draw_button>:

void draw_button(uint32_t clicked) {
  402554:	b538      	push	{r3, r4, r5, lr}
	static uint32_t last_state = 255; // undefined
	uint8_t stingLCD[256];

	if(clicked == last_state) return;
  402556:	4b69      	ldr	r3, [pc, #420]	; (4026fc <draw_button+0x1a8>)
  402558:	681b      	ldr	r3, [r3, #0]
  40255a:	4283      	cmp	r3, r0
  40255c:	d01a      	beq.n	402594 <draw_button+0x40>
  40255e:	4604      	mov	r4, r0
	
	ili9488_set_foreground_color(COLOR_CONVERT(COLOR_BLACK));
  402560:	2000      	movs	r0, #0
  402562:	4d67      	ldr	r5, [pc, #412]	; (402700 <draw_button+0x1ac>)
  402564:	47a8      	blx	r5
	//ili9488_draw_filled_rectangle(BUTTON_X-BUTTON_W/2, BUTTON_Y-BUTTON_H/2, BUTTON_X+BUTTON_W/2, BUTTON_Y+BUTTON_H/2);
	ili9488_set_foreground_color(COLOR_CONVERT(COLOR_TOMATO));
  402566:	4867      	ldr	r0, [pc, #412]	; (402704 <draw_button+0x1b0>)
  402568:	47a8      	blx	r5
	ili9488_draw_filled_circle(275, 50,25);
  40256a:	2219      	movs	r2, #25
  40256c:	2132      	movs	r1, #50	; 0x32
  40256e:	f240 1013 	movw	r0, #275	; 0x113
  402572:	4b65      	ldr	r3, [pc, #404]	; (402708 <draw_button+0x1b4>)
  402574:	4798      	blx	r3
	
	if(selection){
  402576:	4b65      	ldr	r3, [pc, #404]	; (40270c <draw_button+0x1b8>)
  402578:	781b      	ldrb	r3, [r3, #0]
  40257a:	b963      	cbnz	r3, 402596 <draw_button+0x42>
			ili9488_draw_filled_circle(275, 50,25);
		}
			
	}
	else{
		if (locked){ //Pinta a tela de preto para indicar que esta travado
  40257c:	4b64      	ldr	r3, [pc, #400]	; (402710 <draw_button+0x1bc>)
  40257e:	781b      	ldrb	r3, [r3, #0]
  402580:	2b00      	cmp	r3, #0
  402582:	d14c      	bne.n	40261e <draw_button+0xca>
			ili9488_set_foreground_color(COLOR_CONVERT(COLOR_GREEN));
			ili9488_draw_filled_circle(275, 50,25);
			ili9488_set_foreground_color(COLOR_CONVERT(COLOR_WHITE));
		}
		else {		
			if (clicked==3){ //Voltando do estado de Travado
  402584:	2c03      	cmp	r4, #3
  402586:	d061      	beq.n	40264c <draw_button+0xf8>
					ili9488_set_foreground_color(COLOR_CONVERT(COLOR_GREEN));
					ili9488_draw_filled_rectangle(BUTTON_X-BUTTON_W/2+BUTTON_BORDER, BUTTON_Y-BUTTON_H/2+BUTTON_BORDER, BUTTON_X+BUTTON_W/2-BUTTON_BORDER, BUTTON_Y-BUTTON_BORDER);
				}
			}
		
			else if(clicked==1) {
  402588:	2c01      	cmp	r4, #1
  40258a:	f000 8094 	beq.w	4026b6 <draw_button+0x162>
				RTC_init();
				start = true;
				last_state = clicked;
			} 
		
			else if(clicked == 0) {
  40258e:	2c00      	cmp	r4, #0
  402590:	f000 80a3 	beq.w	4026da <draw_button+0x186>
  402594:	bd38      	pop	{r3, r4, r5, pc}
		clear_LCD(0,450);
  402596:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
  40259a:	2000      	movs	r0, #0
  40259c:	4b5d      	ldr	r3, [pc, #372]	; (402714 <draw_button+0x1c0>)
  40259e:	4798      	blx	r3
		last_state = 1;
  4025a0:	2201      	movs	r2, #1
  4025a2:	4b56      	ldr	r3, [pc, #344]	; (4026fc <draw_button+0x1a8>)
  4025a4:	601a      	str	r2, [r3, #0]
		if (locked){ //Pinta a tela de preto para indicar que esta travado
  4025a6:	4b5a      	ldr	r3, [pc, #360]	; (402710 <draw_button+0x1bc>)
  4025a8:	781b      	ldrb	r3, [r3, #0]
  4025aa:	b1b3      	cbz	r3, 4025da <draw_button+0x86>
			ili9488_set_foreground_color(COLOR_CONVERT(COLOR_BLACK));
  4025ac:	2000      	movs	r0, #0
  4025ae:	462c      	mov	r4, r5
  4025b0:	47a8      	blx	r5
			ili9488_draw_filled_rectangle(0, 0, ILI9488_LCD_WIDTH, ILI9488_LCD_HEIGHT);
  4025b2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  4025b6:	f44f 72a0 	mov.w	r2, #320	; 0x140
  4025ba:	2100      	movs	r1, #0
  4025bc:	4608      	mov	r0, r1
  4025be:	4d56      	ldr	r5, [pc, #344]	; (402718 <draw_button+0x1c4>)
  4025c0:	47a8      	blx	r5
			ili9488_set_foreground_color(COLOR_CONVERT(COLOR_GREEN));
  4025c2:	f44f 407c 	mov.w	r0, #64512	; 0xfc00
  4025c6:	47a0      	blx	r4
			ili9488_draw_filled_circle(275, 50,25);
  4025c8:	2219      	movs	r2, #25
  4025ca:	2132      	movs	r1, #50	; 0x32
  4025cc:	f240 1013 	movw	r0, #275	; 0x113
  4025d0:	4b4d      	ldr	r3, [pc, #308]	; (402708 <draw_button+0x1b4>)
  4025d2:	4798      	blx	r3
			ili9488_set_foreground_color(COLOR_CONVERT(COLOR_WHITE));
  4025d4:	4851      	ldr	r0, [pc, #324]	; (40271c <draw_button+0x1c8>)
  4025d6:	47a0      	blx	r4
  4025d8:	bd38      	pop	{r3, r4, r5, pc}
			ili9488_set_foreground_color(COLOR_CONVERT(COLOR_BLACK));
  4025da:	2000      	movs	r0, #0
  4025dc:	4d48      	ldr	r5, [pc, #288]	; (402700 <draw_button+0x1ac>)
  4025de:	47a8      	blx	r5
			ili9488_draw_filled_rectangle(ARROW_X,ARROW_Y,ARROW_W,ARROW_Y-ARROW_H);
  4025e0:	23af      	movs	r3, #175	; 0xaf
  4025e2:	2232      	movs	r2, #50	; 0x32
  4025e4:	f240 1113 	movw	r1, #275	; 0x113
  4025e8:	2000      	movs	r0, #0
  4025ea:	4c4b      	ldr	r4, [pc, #300]	; (402718 <draw_button+0x1c4>)
  4025ec:	47a0      	blx	r4
			ili9488_draw_filled_rectangle(ILI9488_LCD_WIDTH,ARROW_Y,ILI9488_LCD_WIDTH-ARROW_W,ARROW_Y-ARROW_H);
  4025ee:	23af      	movs	r3, #175	; 0xaf
  4025f0:	f44f 7287 	mov.w	r2, #270	; 0x10e
  4025f4:	f240 1113 	movw	r1, #275	; 0x113
  4025f8:	f44f 70a0 	mov.w	r0, #320	; 0x140
  4025fc:	47a0      	blx	r4
			ili9488_draw_filled_rectangle(100,325,ILI9488_LCD_WIDTH-100,375);
  4025fe:	f240 1377 	movw	r3, #375	; 0x177
  402602:	22dc      	movs	r2, #220	; 0xdc
  402604:	f240 1145 	movw	r1, #325	; 0x145
  402608:	2064      	movs	r0, #100	; 0x64
  40260a:	47a0      	blx	r4
			ili9488_set_foreground_color(COLOR_CONVERT(COLOR_TOMATO));
  40260c:	483d      	ldr	r0, [pc, #244]	; (402704 <draw_button+0x1b0>)
  40260e:	47a8      	blx	r5
			ili9488_draw_filled_circle(275, 50,25);
  402610:	2219      	movs	r2, #25
  402612:	2132      	movs	r1, #50	; 0x32
  402614:	f240 1013 	movw	r0, #275	; 0x113
  402618:	4b3b      	ldr	r3, [pc, #236]	; (402708 <draw_button+0x1b4>)
  40261a:	4798      	blx	r3
  40261c:	bd38      	pop	{r3, r4, r5, pc}
			ili9488_set_foreground_color(COLOR_CONVERT(COLOR_BLACK));
  40261e:	2000      	movs	r0, #0
  402620:	4c37      	ldr	r4, [pc, #220]	; (402700 <draw_button+0x1ac>)
  402622:	47a0      	blx	r4
			ili9488_draw_filled_rectangle(0, 0, ILI9488_LCD_WIDTH, ILI9488_LCD_HEIGHT);
  402624:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  402628:	f44f 72a0 	mov.w	r2, #320	; 0x140
  40262c:	2100      	movs	r1, #0
  40262e:	4608      	mov	r0, r1
  402630:	4d39      	ldr	r5, [pc, #228]	; (402718 <draw_button+0x1c4>)
  402632:	47a8      	blx	r5
			ili9488_set_foreground_color(COLOR_CONVERT(COLOR_GREEN));
  402634:	f44f 407c 	mov.w	r0, #64512	; 0xfc00
  402638:	47a0      	blx	r4
			ili9488_draw_filled_circle(275, 50,25);
  40263a:	2219      	movs	r2, #25
  40263c:	2132      	movs	r1, #50	; 0x32
  40263e:	f240 1013 	movw	r0, #275	; 0x113
  402642:	4b31      	ldr	r3, [pc, #196]	; (402708 <draw_button+0x1b4>)
  402644:	4798      	blx	r3
			ili9488_set_foreground_color(COLOR_CONVERT(COLOR_WHITE));
  402646:	4835      	ldr	r0, [pc, #212]	; (40271c <draw_button+0x1c8>)
  402648:	47a0      	blx	r4
  40264a:	bd38      	pop	{r3, r4, r5, pc}
				ili9488_set_foreground_color(COLOR_CONVERT(COLOR_WHITE));
  40264c:	4833      	ldr	r0, [pc, #204]	; (40271c <draw_button+0x1c8>)
  40264e:	4c2c      	ldr	r4, [pc, #176]	; (402700 <draw_button+0x1ac>)
  402650:	47a0      	blx	r4
				ili9488_draw_filled_rectangle(0, 0, ILI9488_LCD_WIDTH, ILI9488_LCD_HEIGHT);
  402652:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  402656:	f44f 72a0 	mov.w	r2, #320	; 0x140
  40265a:	2100      	movs	r1, #0
  40265c:	4608      	mov	r0, r1
  40265e:	4d2e      	ldr	r5, [pc, #184]	; (402718 <draw_button+0x1c4>)
  402660:	47a8      	blx	r5
				ili9488_set_foreground_color(COLOR_CONVERT(COLOR_TOMATO));
  402662:	4828      	ldr	r0, [pc, #160]	; (402704 <draw_button+0x1b0>)
  402664:	47a0      	blx	r4
				ili9488_draw_filled_circle(275, 50,25);
  402666:	2219      	movs	r2, #25
  402668:	2132      	movs	r1, #50	; 0x32
  40266a:	f240 1013 	movw	r0, #275	; 0x113
  40266e:	4b26      	ldr	r3, [pc, #152]	; (402708 <draw_button+0x1b4>)
  402670:	4798      	blx	r3
				ili9488_set_foreground_color(COLOR_CONVERT(COLOR_BLACK));
  402672:	2000      	movs	r0, #0
  402674:	47a0      	blx	r4
				ili9488_draw_filled_rectangle(BUTTON_X-BUTTON_W/2, BUTTON_Y-BUTTON_H/2, BUTTON_X+BUTTON_W/2, BUTTON_Y+BUTTON_H/2);
  402676:	f240 133b 	movw	r3, #315	; 0x13b
  40267a:	22dc      	movs	r2, #220	; 0xdc
  40267c:	21a5      	movs	r1, #165	; 0xa5
  40267e:	2064      	movs	r0, #100	; 0x64
  402680:	47a8      	blx	r5
				if(last_state==1) {
  402682:	4b1e      	ldr	r3, [pc, #120]	; (4026fc <draw_button+0x1a8>)
  402684:	681b      	ldr	r3, [r3, #0]
  402686:	2b01      	cmp	r3, #1
  402688:	d00c      	beq.n	4026a4 <draw_button+0x150>
				else if (last_state==0){
  40268a:	2b00      	cmp	r3, #0
  40268c:	d182      	bne.n	402594 <draw_button+0x40>
					ili9488_set_foreground_color(COLOR_CONVERT(COLOR_GREEN));
  40268e:	f44f 407c 	mov.w	r0, #64512	; 0xfc00
  402692:	4b1b      	ldr	r3, [pc, #108]	; (402700 <draw_button+0x1ac>)
  402694:	4798      	blx	r3
					ili9488_draw_filled_rectangle(BUTTON_X-BUTTON_W/2+BUTTON_BORDER, BUTTON_Y-BUTTON_H/2+BUTTON_BORDER, BUTTON_X+BUTTON_W/2-BUTTON_BORDER, BUTTON_Y-BUTTON_BORDER);
  402696:	23ee      	movs	r3, #238	; 0xee
  402698:	22da      	movs	r2, #218	; 0xda
  40269a:	21a7      	movs	r1, #167	; 0xa7
  40269c:	2066      	movs	r0, #102	; 0x66
  40269e:	4c1e      	ldr	r4, [pc, #120]	; (402718 <draw_button+0x1c4>)
  4026a0:	47a0      	blx	r4
  4026a2:	bd38      	pop	{r3, r4, r5, pc}
					ili9488_set_foreground_color(COLOR_CONVERT(COLOR_TOMATO));
  4026a4:	4817      	ldr	r0, [pc, #92]	; (402704 <draw_button+0x1b0>)
  4026a6:	47a0      	blx	r4
					ili9488_draw_filled_rectangle(BUTTON_X-BUTTON_W/2+BUTTON_BORDER, BUTTON_Y+BUTTON_BORDER, BUTTON_X+BUTTON_W/2-BUTTON_BORDER, BUTTON_Y+BUTTON_H/2-BUTTON_BORDER);
  4026a8:	f240 1339 	movw	r3, #313	; 0x139
  4026ac:	22da      	movs	r2, #218	; 0xda
  4026ae:	21f2      	movs	r1, #242	; 0xf2
  4026b0:	2066      	movs	r0, #102	; 0x66
  4026b2:	47a8      	blx	r5
  4026b4:	bd38      	pop	{r3, r4, r5, pc}
				ili9488_set_foreground_color(COLOR_CONVERT(COLOR_TOMATO));
  4026b6:	4813      	ldr	r0, [pc, #76]	; (402704 <draw_button+0x1b0>)
  4026b8:	4b11      	ldr	r3, [pc, #68]	; (402700 <draw_button+0x1ac>)
  4026ba:	4798      	blx	r3
				ili9488_draw_filled_rectangle(BUTTON_X-BUTTON_W/2+BUTTON_BORDER, BUTTON_Y+BUTTON_BORDER, BUTTON_X+BUTTON_W/2-BUTTON_BORDER, BUTTON_Y+BUTTON_H/2-BUTTON_BORDER);
  4026bc:	f240 1339 	movw	r3, #313	; 0x139
  4026c0:	22da      	movs	r2, #218	; 0xda
  4026c2:	21f2      	movs	r1, #242	; 0xf2
  4026c4:	2066      	movs	r0, #102	; 0x66
  4026c6:	4c14      	ldr	r4, [pc, #80]	; (402718 <draw_button+0x1c4>)
  4026c8:	47a0      	blx	r4
				RTC_init();
  4026ca:	4b15      	ldr	r3, [pc, #84]	; (402720 <draw_button+0x1cc>)
  4026cc:	4798      	blx	r3
				start = true;
  4026ce:	2301      	movs	r3, #1
  4026d0:	4a14      	ldr	r2, [pc, #80]	; (402724 <draw_button+0x1d0>)
  4026d2:	7013      	strb	r3, [r2, #0]
				last_state = clicked;
  4026d4:	4a09      	ldr	r2, [pc, #36]	; (4026fc <draw_button+0x1a8>)
  4026d6:	6013      	str	r3, [r2, #0]
  4026d8:	bd38      	pop	{r3, r4, r5, pc}
				ili9488_set_foreground_color(COLOR_CONVERT(COLOR_GREEN));
  4026da:	f44f 407c 	mov.w	r0, #64512	; 0xfc00
  4026de:	4b08      	ldr	r3, [pc, #32]	; (402700 <draw_button+0x1ac>)
  4026e0:	4798      	blx	r3
				ili9488_draw_filled_rectangle(BUTTON_X-BUTTON_W/2+BUTTON_BORDER, BUTTON_Y-BUTTON_H/2+BUTTON_BORDER, BUTTON_X+BUTTON_W/2-BUTTON_BORDER, BUTTON_Y-BUTTON_BORDER);
  4026e2:	23ee      	movs	r3, #238	; 0xee
  4026e4:	22da      	movs	r2, #218	; 0xda
  4026e6:	21a7      	movs	r1, #167	; 0xa7
  4026e8:	2066      	movs	r0, #102	; 0x66
  4026ea:	4c0b      	ldr	r4, [pc, #44]	; (402718 <draw_button+0x1c4>)
  4026ec:	47a0      	blx	r4
				start = false;
  4026ee:	2300      	movs	r3, #0
  4026f0:	4a0c      	ldr	r2, [pc, #48]	; (402724 <draw_button+0x1d0>)
  4026f2:	7013      	strb	r3, [r2, #0]
				last_state = clicked;
  4026f4:	4a01      	ldr	r2, [pc, #4]	; (4026fc <draw_button+0x1a8>)
  4026f6:	6013      	str	r3, [r2, #0]
  4026f8:	e74c      	b.n	402594 <draw_button+0x40>
  4026fa:	bf00      	nop
  4026fc:	2040013c 	.word	0x2040013c
  402700:	00400e95 	.word	0x00400e95
  402704:	00fc6044 	.word	0x00fc6044
  402708:	004011dd 	.word	0x004011dd
  40270c:	20400140 	.word	0x20400140
  402710:	20400f4d 	.word	0x20400f4d
  402714:	004024a5 	.word	0x004024a5
  402718:	00401121 	.word	0x00401121
  40271c:	00fcfcfc 	.word	0x00fcfcfc
  402720:	00402435 	.word	0x00402435
  402724:	20400f4e 	.word	0x20400f4e

00402728 <touch_handler>:

volatile int c =0;
volatile int clkd;
volatile int x =0;

void touch_handler(uint32_t tx, uint32_t ty) {
  402728:	b570      	push	{r4, r5, r6, lr}
  40272a:	4604      	mov	r4, r0
  40272c:	460d      	mov	r5, r1
	if(locked==false){ 
  40272e:	4b34      	ldr	r3, [pc, #208]	; (402800 <touch_handler+0xd8>)
  402730:	781b      	ldrb	r3, [r3, #0]
  402732:	b99b      	cbnz	r3, 40275c <touch_handler+0x34>
		if(selection==true){
  402734:	4b33      	ldr	r3, [pc, #204]	; (402804 <touch_handler+0xdc>)
  402736:	781b      	ldrb	r3, [r3, #0]
  402738:	b2db      	uxtb	r3, r3
  40273a:	2b01      	cmp	r3, #1
  40273c:	d028      	beq.n	402790 <touch_handler+0x68>
			}			
		}
		
		else{
			// Botoes de liga desliga lavagem
			if(tx >= BUTTON_X-BUTTON_W/2 && tx <= BUTTON_X + BUTTON_W/2) {
  40273e:	f1a0 0364 	sub.w	r3, r0, #100	; 0x64
  402742:	2b78      	cmp	r3, #120	; 0x78
  402744:	d80a      	bhi.n	40275c <touch_handler+0x34>
				if(ty >= BUTTON_Y-BUTTON_H/2 && ty <= BUTTON_Y) {
  402746:	f1a1 03a5 	sub.w	r3, r1, #165	; 0xa5
  40274a:	2b4b      	cmp	r3, #75	; 0x4b
  40274c:	d84b      	bhi.n	4027e6 <touch_handler+0xbe>
					clkd =1;
  40274e:	2201      	movs	r2, #1
  402750:	4b2d      	ldr	r3, [pc, #180]	; (402808 <touch_handler+0xe0>)
  402752:	601a      	str	r2, [r3, #0]
				} 
				else if(ty > BUTTON_Y && ty < BUTTON_Y + BUTTON_H/2) {
					clkd =0;
				}
				draw_button(clkd);
  402754:	4b2c      	ldr	r3, [pc, #176]	; (402808 <touch_handler+0xe0>)
  402756:	6818      	ldr	r0, [r3, #0]
  402758:	4b2c      	ldr	r3, [pc, #176]	; (40280c <touch_handler+0xe4>)
  40275a:	4798      	blx	r3
			}
		}
	}
	
	if(tx >=275 && tx <= 315 && ty >= 25 && ty <= 50) { // Botao do Lock
  40275c:	f2a4 1413 	subw	r4, r4, #275	; 0x113
  402760:	2c28      	cmp	r4, #40	; 0x28
  402762:	d814      	bhi.n	40278e <touch_handler+0x66>
  402764:	3d19      	subs	r5, #25
  402766:	2d19      	cmp	r5, #25
  402768:	d811      	bhi.n	40278e <touch_handler+0x66>
		c++;
  40276a:	4b29      	ldr	r3, [pc, #164]	; (402810 <touch_handler+0xe8>)
  40276c:	681a      	ldr	r2, [r3, #0]
  40276e:	3201      	adds	r2, #1
  402770:	601a      	str	r2, [r3, #0]
		if(c%2!=0){
  402772:	681b      	ldr	r3, [r3, #0]
  402774:	f013 0f01 	tst.w	r3, #1
  402778:	d009      	beq.n	40278e <touch_handler+0x66>
			if (locked){
  40277a:	4b21      	ldr	r3, [pc, #132]	; (402800 <touch_handler+0xd8>)
  40277c:	781b      	ldrb	r3, [r3, #0]
  40277e:	2b00      	cmp	r3, #0
  402780:	d039      	beq.n	4027f6 <touch_handler+0xce>
				locked=false;
  402782:	2200      	movs	r2, #0
  402784:	4b1e      	ldr	r3, [pc, #120]	; (402800 <touch_handler+0xd8>)
  402786:	701a      	strb	r2, [r3, #0]
			}
			else{
				locked=true;
			}
			draw_button(3);
  402788:	2003      	movs	r0, #3
  40278a:	4b20      	ldr	r3, [pc, #128]	; (40280c <touch_handler+0xe4>)
  40278c:	4798      	blx	r3
  40278e:	bd70      	pop	{r4, r5, r6, pc}
			if(tx >=100 && tx <= ILI9488_LCD_WIDTH-100 && ty >= 325 && ty <= 375) {
  402790:	f1a0 0364 	sub.w	r3, r0, #100	; 0x64
  402794:	2b78      	cmp	r3, #120	; 0x78
  402796:	d803      	bhi.n	4027a0 <touch_handler+0x78>
  402798:	f2a1 1345 	subw	r3, r1, #325	; 0x145
  40279c:	2b32      	cmp	r3, #50	; 0x32
  40279e:	d913      	bls.n	4027c8 <touch_handler+0xa0>
			if(tx >=ARROW_X && tx <= ARROW_X+ARROW_W && ty <= ARROW_Y && ty >= ARROW_Y-ARROW_H){
  4027a0:	f1a5 06af 	sub.w	r6, r5, #175	; 0xaf
  4027a4:	2c32      	cmp	r4, #50	; 0x32
  4027a6:	d801      	bhi.n	4027ac <touch_handler+0x84>
  4027a8:	2e64      	cmp	r6, #100	; 0x64
  4027aa:	d914      	bls.n	4027d6 <touch_handler+0xae>
			if(tx <=ILI9488_LCD_WIDTH && tx >= ILI9488_LCD_WIDTH-ARROW_W && ty <= ARROW_Y && ty >= ARROW_Y-ARROW_H){
  4027ac:	f5a4 7387 	sub.w	r3, r4, #270	; 0x10e
  4027b0:	2b32      	cmp	r3, #50	; 0x32
  4027b2:	d8d3      	bhi.n	40275c <touch_handler+0x34>
  4027b4:	2e64      	cmp	r6, #100	; 0x64
  4027b6:	d8d1      	bhi.n	40275c <touch_handler+0x34>
				x--;
  4027b8:	4b16      	ldr	r3, [pc, #88]	; (402814 <touch_handler+0xec>)
  4027ba:	681a      	ldr	r2, [r3, #0]
  4027bc:	3a01      	subs	r2, #1
  4027be:	601a      	str	r2, [r3, #0]
				display_cicle(x);
  4027c0:	6818      	ldr	r0, [r3, #0]
  4027c2:	4b15      	ldr	r3, [pc, #84]	; (402818 <touch_handler+0xf0>)
  4027c4:	4798      	blx	r3
  4027c6:	e7c9      	b.n	40275c <touch_handler+0x34>
				selection=false;	
  4027c8:	2200      	movs	r2, #0
  4027ca:	4b0e      	ldr	r3, [pc, #56]	; (402804 <touch_handler+0xdc>)
  4027cc:	701a      	strb	r2, [r3, #0]
				draw_button(3);
  4027ce:	2003      	movs	r0, #3
  4027d0:	4b0e      	ldr	r3, [pc, #56]	; (40280c <touch_handler+0xe4>)
  4027d2:	4798      	blx	r3
  4027d4:	e7e4      	b.n	4027a0 <touch_handler+0x78>
				x++;
  4027d6:	4b0f      	ldr	r3, [pc, #60]	; (402814 <touch_handler+0xec>)
  4027d8:	681a      	ldr	r2, [r3, #0]
  4027da:	3201      	adds	r2, #1
  4027dc:	601a      	str	r2, [r3, #0]
				display_cicle(x);
  4027de:	6818      	ldr	r0, [r3, #0]
  4027e0:	4b0d      	ldr	r3, [pc, #52]	; (402818 <touch_handler+0xf0>)
  4027e2:	4798      	blx	r3
  4027e4:	e7e2      	b.n	4027ac <touch_handler+0x84>
				else if(ty > BUTTON_Y && ty < BUTTON_Y + BUTTON_H/2) {
  4027e6:	f1a1 03f1 	sub.w	r3, r1, #241	; 0xf1
  4027ea:	2b49      	cmp	r3, #73	; 0x49
  4027ec:	d8b2      	bhi.n	402754 <touch_handler+0x2c>
					clkd =0;
  4027ee:	2200      	movs	r2, #0
  4027f0:	4b05      	ldr	r3, [pc, #20]	; (402808 <touch_handler+0xe0>)
  4027f2:	601a      	str	r2, [r3, #0]
  4027f4:	e7ae      	b.n	402754 <touch_handler+0x2c>
				locked=true;
  4027f6:	2201      	movs	r2, #1
  4027f8:	4b01      	ldr	r3, [pc, #4]	; (402800 <touch_handler+0xd8>)
  4027fa:	701a      	strb	r2, [r3, #0]
  4027fc:	e7c4      	b.n	402788 <touch_handler+0x60>
  4027fe:	bf00      	nop
  402800:	20400f4d 	.word	0x20400f4d
  402804:	20400140 	.word	0x20400140
  402808:	20400f9c 	.word	0x20400f9c
  40280c:	00402555 	.word	0x00402555
  402810:	20400f48 	.word	0x20400f48
  402814:	20400f50 	.word	0x20400f50
  402818:	0040251d 	.word	0x0040251d

0040281c <mxt_handler>:
		}
	}
}

void mxt_handler(struct mxt_device *device)
{
  40281c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402820:	b0ce      	sub	sp, #312	; 0x138
  402822:	4605      	mov	r5, r0
	/* USART tx buffer initialized to 0 */
	char tx_buf[STRING_LENGTH * MAX_ENTRIES] = {0};
  402824:	22d2      	movs	r2, #210	; 0xd2
  402826:	2100      	movs	r1, #0
  402828:	a819      	add	r0, sp, #100	; 0x64
  40282a:	4b23      	ldr	r3, [pc, #140]	; (4028b8 <mxt_handler+0x9c>)
  40282c:	4798      	blx	r3
	uint8_t i = 0; /* Iterator */
  40282e:	2400      	movs	r4, #0
	do {
		/* Temporary buffer for each new touch event line */
		char buf[STRING_LENGTH];
	
		/* Read next next touch event in the queue, discard if read fails */
		if (mxt_read_touch_event(device, &touch_event) != STATUS_OK) {
  402830:	4f22      	ldr	r7, [pc, #136]	; (4028bc <mxt_handler+0xa0>)
		 // eixos trocados (quando na vertical LCD)
		uint32_t conv_x = convert_axis_system_x(touch_event.y);
		uint32_t conv_y = convert_axis_system_y(touch_event.x);
		
		/* Format a new entry in the data string that will be sent over USART */
		sprintf(buf, "Nr: %1d, X:%4d, Y:%4d, Status:0x%2x conv X:%3d Y:%3d\n\r",
  402832:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 4028d8 <mxt_handler+0xbc>
  402836:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 4028dc <mxt_handler+0xc0>
  40283a:	e005      	b.n	402848 <mxt_handler+0x2c>
		strcat(tx_buf, buf);
		i++;

		/* Check if there is still messages in the queue and
		 * if we have reached the maximum numbers of events */
	} while ((mxt_is_message_pending(device)) & (i < MAX_ENTRIES));
  40283c:	4628      	mov	r0, r5
  40283e:	4b20      	ldr	r3, [pc, #128]	; (4028c0 <mxt_handler+0xa4>)
  402840:	4798      	blx	r3
  402842:	2c02      	cmp	r4, #2
  402844:	d82a      	bhi.n	40289c <mxt_handler+0x80>
  402846:	b348      	cbz	r0, 40289c <mxt_handler+0x80>
		if (mxt_read_touch_event(device, &touch_event) != STATUS_OK) {
  402848:	a916      	add	r1, sp, #88	; 0x58
  40284a:	4628      	mov	r0, r5
  40284c:	47b8      	blx	r7
  40284e:	2800      	cmp	r0, #0
  402850:	d1f4      	bne.n	40283c <mxt_handler+0x20>
		uint32_t conv_x = convert_axis_system_x(touch_event.y);
  402852:	f8bd 105c 	ldrh.w	r1, [sp, #92]	; 0x5c
	return ILI9488_LCD_WIDTH - ILI9488_LCD_WIDTH*touch_y/4096;
  402856:	eb01 0681 	add.w	r6, r1, r1, lsl #2
  40285a:	f3c6 1693 	ubfx	r6, r6, #6, #20
  40285e:	f5c6 76a0 	rsb	r6, r6, #320	; 0x140
		uint32_t conv_y = convert_axis_system_y(touch_event.x);
  402862:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
	return ILI9488_LCD_HEIGHT*touch_x/4096;
  402866:	ebc3 1a03 	rsb	sl, r3, r3, lsl #4
  40286a:	f3ca 1ad3 	ubfx	sl, sl, #7, #20
		sprintf(buf, "Nr: %1d, X:%4d, Y:%4d, Status:0x%2x conv X:%3d Y:%3d\n\r",
  40286e:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
  402872:	f8cd a00c 	str.w	sl, [sp, #12]
  402876:	9602      	str	r6, [sp, #8]
  402878:	f89d 0059 	ldrb.w	r0, [sp, #89]	; 0x59
  40287c:	9001      	str	r0, [sp, #4]
  40287e:	9100      	str	r1, [sp, #0]
  402880:	4649      	mov	r1, r9
  402882:	a804      	add	r0, sp, #16
  402884:	47c0      	blx	r8
		touch_handler(conv_x, conv_y);
  402886:	4651      	mov	r1, sl
  402888:	4630      	mov	r0, r6
  40288a:	4b0e      	ldr	r3, [pc, #56]	; (4028c4 <mxt_handler+0xa8>)
  40288c:	4798      	blx	r3
		strcat(tx_buf, buf);
  40288e:	a904      	add	r1, sp, #16
  402890:	a819      	add	r0, sp, #100	; 0x64
  402892:	4b0d      	ldr	r3, [pc, #52]	; (4028c8 <mxt_handler+0xac>)
  402894:	4798      	blx	r3
		i++;
  402896:	3401      	adds	r4, #1
  402898:	b2e4      	uxtb	r4, r4
  40289a:	e7cf      	b.n	40283c <mxt_handler+0x20>

	/* If there is any entries in the buffer, send them over USART */
	if (i > 0) {
  40289c:	b914      	cbnz	r4, 4028a4 <mxt_handler+0x88>
		usart_serial_write_packet(USART_SERIAL_EXAMPLE, (uint8_t *)tx_buf, strlen(tx_buf));
	}
}
  40289e:	b04e      	add	sp, #312	; 0x138
  4028a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		usart_serial_write_packet(USART_SERIAL_EXAMPLE, (uint8_t *)tx_buf, strlen(tx_buf));
  4028a4:	a819      	add	r0, sp, #100	; 0x64
  4028a6:	4b09      	ldr	r3, [pc, #36]	; (4028cc <mxt_handler+0xb0>)
  4028a8:	4798      	blx	r3
  4028aa:	4602      	mov	r2, r0
  4028ac:	a919      	add	r1, sp, #100	; 0x64
  4028ae:	4808      	ldr	r0, [pc, #32]	; (4028d0 <mxt_handler+0xb4>)
  4028b0:	4b08      	ldr	r3, [pc, #32]	; (4028d4 <mxt_handler+0xb8>)
  4028b2:	4798      	blx	r3
}
  4028b4:	e7f3      	b.n	40289e <mxt_handler+0x82>
  4028b6:	bf00      	nop
  4028b8:	0040326d 	.word	0x0040326d
  4028bc:	004005dd 	.word	0x004005dd
  4028c0:	0040056d 	.word	0x0040056d
  4028c4:	00402729 	.word	0x00402729
  4028c8:	00403531 	.word	0x00403531
  4028cc:	00403641 	.word	0x00403641
  4028d0:	40028000 	.word	0x40028000
  4028d4:	004006c1 	.word	0x004006c1
  4028d8:	004099fc 	.word	0x004099fc
  4028dc:	004034e5 	.word	0x004034e5

004028e0 <crono>:

void crono(int tempo){
  4028e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4028e2:	b0c3      	sub	sp, #268	; 0x10c
  4028e4:	4604      	mov	r4, r0
	clear_LCD(390,415);
  4028e6:	f240 119f 	movw	r1, #415	; 0x19f
  4028ea:	f44f 70c3 	mov.w	r0, #390	; 0x186
  4028ee:	4b20      	ldr	r3, [pc, #128]	; (402970 <crono+0x90>)
  4028f0:	4798      	blx	r3
	t_ciclo *p_primeiro = initMenuOrder();
  4028f2:	4b20      	ldr	r3, [pc, #128]	; (402974 <crono+0x94>)
  4028f4:	4798      	blx	r3
	if (start==true){
  4028f6:	4b20      	ldr	r3, [pc, #128]	; (402978 <crono+0x98>)
  4028f8:	781b      	ldrb	r3, [r3, #0]
  4028fa:	b2db      	uxtb	r3, r3
  4028fc:	2b01      	cmp	r3, #1
  4028fe:	d001      	beq.n	402904 <crono+0x24>
			selection=true;
			draw_button(3);
		}
	}
	else{return;}
}
  402900:	b043      	add	sp, #268	; 0x10c
  402902:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rtc_get_time(RTC, &hour, &minu, &seg);
  402904:	4e1d      	ldr	r6, [pc, #116]	; (40297c <crono+0x9c>)
  402906:	4d1e      	ldr	r5, [pc, #120]	; (402980 <crono+0xa0>)
  402908:	4633      	mov	r3, r6
  40290a:	462a      	mov	r2, r5
  40290c:	491d      	ldr	r1, [pc, #116]	; (402984 <crono+0xa4>)
  40290e:	481e      	ldr	r0, [pc, #120]	; (402988 <crono+0xa8>)
  402910:	4f1e      	ldr	r7, [pc, #120]	; (40298c <crono+0xac>)
  402912:	47b8      	blx	r7
		sprintf(stingLCD, "%d :%d de %d min.",minu,seg,tempo);
  402914:	6833      	ldr	r3, [r6, #0]
  402916:	9400      	str	r4, [sp, #0]
  402918:	682a      	ldr	r2, [r5, #0]
  40291a:	491d      	ldr	r1, [pc, #116]	; (402990 <crono+0xb0>)
  40291c:	a802      	add	r0, sp, #8
  40291e:	4e1d      	ldr	r6, [pc, #116]	; (402994 <crono+0xb4>)
  402920:	47b0      	blx	r6
		ili9488_draw_string(40, 400, stingLCD);
  402922:	aa02      	add	r2, sp, #8
  402924:	f44f 71c8 	mov.w	r1, #400	; 0x190
  402928:	2028      	movs	r0, #40	; 0x28
  40292a:	4b1b      	ldr	r3, [pc, #108]	; (402998 <crono+0xb8>)
  40292c:	4798      	blx	r3
		if(minu == tempo){
  40292e:	682b      	ldr	r3, [r5, #0]
  402930:	42a3      	cmp	r3, r4
  402932:	d1e5      	bne.n	402900 <crono+0x20>
			sprintf(stingLCD, "ACABOU A LAVAGEM SEU CORNO");
  402934:	ac02      	add	r4, sp, #8
  402936:	4d19      	ldr	r5, [pc, #100]	; (40299c <crono+0xbc>)
  402938:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40293a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  40293c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  402940:	c403      	stmia	r4!, {r0, r1}
  402942:	f824 2b02 	strh.w	r2, [r4], #2
  402946:	0c12      	lsrs	r2, r2, #16
  402948:	7022      	strb	r2, [r4, #0]
			ili9488_draw_string(5, 455, stingLCD);
  40294a:	aa02      	add	r2, sp, #8
  40294c:	f240 11c7 	movw	r1, #455	; 0x1c7
  402950:	2005      	movs	r0, #5
  402952:	4b11      	ldr	r3, [pc, #68]	; (402998 <crono+0xb8>)
  402954:	4798      	blx	r3
			delay_s(1);
  402956:	4812      	ldr	r0, [pc, #72]	; (4029a0 <crono+0xc0>)
  402958:	4b12      	ldr	r3, [pc, #72]	; (4029a4 <crono+0xc4>)
  40295a:	4798      	blx	r3
			start=false;
  40295c:	2200      	movs	r2, #0
  40295e:	4b06      	ldr	r3, [pc, #24]	; (402978 <crono+0x98>)
  402960:	701a      	strb	r2, [r3, #0]
			selection=true;
  402962:	2201      	movs	r2, #1
  402964:	4b10      	ldr	r3, [pc, #64]	; (4029a8 <crono+0xc8>)
  402966:	701a      	strb	r2, [r3, #0]
			draw_button(3);
  402968:	2003      	movs	r0, #3
  40296a:	4b10      	ldr	r3, [pc, #64]	; (4029ac <crono+0xcc>)
  40296c:	4798      	blx	r3
  40296e:	e7c7      	b.n	402900 <crono+0x20>
  402970:	004024a5 	.word	0x004024a5
  402974:	004023dd 	.word	0x004023dd
  402978:	20400f4e 	.word	0x20400f4e
  40297c:	20400f94 	.word	0x20400f94
  402980:	20400f98 	.word	0x20400f98
  402984:	20400fa0 	.word	0x20400fa0
  402988:	400e1860 	.word	0x400e1860
  40298c:	00401833 	.word	0x00401833
  402990:	0040999c 	.word	0x0040999c
  402994:	004034e5 	.word	0x004034e5
  402998:	00401281 	.word	0x00401281
  40299c:	004099b0 	.word	0x004099b0
  4029a0:	0303af6b 	.word	0x0303af6b
  4029a4:	20400001 	.word	0x20400001
  4029a8:	20400140 	.word	0x20400140
  4029ac:	00402555 	.word	0x00402555

004029b0 <main>:
 
int main(void){
  4029b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4029b4:	b0a5      	sub	sp, #148	; 0x94
		.charlength   = USART_SERIAL_CHAR_LENGTH,
		.paritytype   = USART_SERIAL_PARITY,
		.stopbits     = USART_SERIAL_STOP_BIT
	};

	sysclk_init(); /* Initialize system clocks */
  4029b6:	4b87      	ldr	r3, [pc, #540]	; (402bd4 <main+0x224>)
  4029b8:	4798      	blx	r3
	board_init();  /* Initialize board */
  4029ba:	4b87      	ldr	r3, [pc, #540]	; (402bd8 <main+0x228>)
  4029bc:	4798      	blx	r3
	g_ili9488_display_opt.ul_width = ILI9488_LCD_WIDTH;
  4029be:	4887      	ldr	r0, [pc, #540]	; (402bdc <main+0x22c>)
  4029c0:	f44f 73a0 	mov.w	r3, #320	; 0x140
  4029c4:	6003      	str	r3, [r0, #0]
	g_ili9488_display_opt.ul_height = ILI9488_LCD_HEIGHT;
  4029c6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  4029ca:	6043      	str	r3, [r0, #4]
	g_ili9488_display_opt.foreground_color = COLOR_CONVERT(COLOR_WHITE);
  4029cc:	4b84      	ldr	r3, [pc, #528]	; (402be0 <main+0x230>)
  4029ce:	6083      	str	r3, [r0, #8]
	g_ili9488_display_opt.background_color = COLOR_CONVERT(COLOR_WHITE);
  4029d0:	60c3      	str	r3, [r0, #12]
	ili9488_init(&g_ili9488_display_opt);
  4029d2:	4b84      	ldr	r3, [pc, #528]	; (402be4 <main+0x234>)
  4029d4:	4798      	blx	r3
	configure_lcd();
	draw_screen();
  4029d6:	4b84      	ldr	r3, [pc, #528]	; (402be8 <main+0x238>)
  4029d8:	4798      	blx	r3
	draw_button(0);
  4029da:	2000      	movs	r0, #0
  4029dc:	4b83      	ldr	r3, [pc, #524]	; (402bec <main+0x23c>)
  4029de:	4798      	blx	r3
	uint8_t t8_object[] = {
  4029e0:	4c83      	ldr	r4, [pc, #524]	; (402bf0 <main+0x240>)
  4029e2:	ab04      	add	r3, sp, #16
  4029e4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
  4029e8:	c303      	stmia	r3!, {r0, r1}
  4029ea:	801a      	strh	r2, [r3, #0]
	uint8_t t9_object[] = {
  4029ec:	ad13      	add	r5, sp, #76	; 0x4c
  4029ee:	f104 060c 	add.w	r6, r4, #12
  4029f2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  4029f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  4029f6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  4029f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  4029fa:	6833      	ldr	r3, [r6, #0]
  4029fc:	602b      	str	r3, [r5, #0]
	uint8_t t46_object[] = {
  4029fe:	ab01      	add	r3, sp, #4
  402a00:	f104 0230 	add.w	r2, r4, #48	; 0x30
  402a04:	ca07      	ldmia	r2, {r0, r1, r2}
  402a06:	c303      	stmia	r3!, {r0, r1}
  402a08:	701a      	strb	r2, [r3, #0]
	uint8_t t56_object[] = {
  402a0a:	ad0a      	add	r5, sp, #40	; 0x28
  402a0c:	343c      	adds	r4, #60	; 0x3c
  402a0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  402a10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  402a12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  402a14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  402a16:	6823      	ldr	r3, [r4, #0]
  402a18:	702b      	strb	r3, [r5, #0]
	twihs_master_options_t twi_opt = {
  402a1a:	2400      	movs	r4, #0
  402a1c:	9409      	str	r4, [sp, #36]	; 0x24
  402a1e:	4b75      	ldr	r3, [pc, #468]	; (402bf4 <main+0x244>)
  402a20:	9308      	str	r3, [sp, #32]
  402a22:	264a      	movs	r6, #74	; 0x4a
  402a24:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
typedef twihs_packet_t twihs_package_t;

static inline uint32_t twihs_master_setup(twihs_master_t p_twihs,
		twihs_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_peripheral_hz();
  402a28:	f8df 8250 	ldr.w	r8, [pc, #592]	; 402c7c <main+0x2cc>
  402a2c:	f8cd 801c 	str.w	r8, [sp, #28]
  402a30:	2013      	movs	r0, #19
  402a32:	f8df 924c 	ldr.w	r9, [pc, #588]	; 402c80 <main+0x2d0>
  402a36:	47c8      	blx	r9
#endif		
	} else {
		// Do Nothing
	}
#endif
	return (twihs_master_init(p_twihs, p_opt));
  402a38:	4d6f      	ldr	r5, [pc, #444]	; (402bf8 <main+0x248>)
  402a3a:	a907      	add	r1, sp, #28
  402a3c:	4628      	mov	r0, r5
  402a3e:	4b6f      	ldr	r3, [pc, #444]	; (402bfc <main+0x24c>)
  402a40:	4798      	blx	r3
	status = mxt_init_device(device, MAXTOUCH_TWI_INTERFACE,
  402a42:	2302      	movs	r3, #2
  402a44:	4632      	mov	r2, r6
  402a46:	4629      	mov	r1, r5
  402a48:	a81c      	add	r0, sp, #112	; 0x70
  402a4a:	4d6d      	ldr	r5, [pc, #436]	; (402c00 <main+0x250>)
  402a4c:	47a8      	blx	r5
	mxt_write_config_reg(device, mxt_get_object_address(device,
  402a4e:	4622      	mov	r2, r4
  402a50:	2106      	movs	r1, #6
  402a52:	a81c      	add	r0, sp, #112	; 0x70
  402a54:	4d6b      	ldr	r5, [pc, #428]	; (402c04 <main+0x254>)
  402a56:	47a8      	blx	r5
  402a58:	2201      	movs	r2, #1
  402a5a:	4601      	mov	r1, r0
  402a5c:	a81c      	add	r0, sp, #112	; 0x70
  402a5e:	4e6a      	ldr	r6, [pc, #424]	; (402c08 <main+0x258>)
  402a60:	47b0      	blx	r6
	delay_ms(MXT_RESET_TIME);
  402a62:	486a      	ldr	r0, [pc, #424]	; (402c0c <main+0x25c>)
  402a64:	4b6a      	ldr	r3, [pc, #424]	; (402c10 <main+0x260>)
  402a66:	4798      	blx	r3
	mxt_write_config_reg(device, mxt_get_object_address(device,
  402a68:	4622      	mov	r2, r4
  402a6a:	2107      	movs	r1, #7
  402a6c:	a81c      	add	r0, sp, #112	; 0x70
  402a6e:	47a8      	blx	r5
  402a70:	2220      	movs	r2, #32
  402a72:	4601      	mov	r1, r0
  402a74:	a81c      	add	r0, sp, #112	; 0x70
  402a76:	47b0      	blx	r6
	mxt_write_config_reg(device, mxt_get_object_address(device,
  402a78:	4622      	mov	r2, r4
  402a7a:	2107      	movs	r1, #7
  402a7c:	a81c      	add	r0, sp, #112	; 0x70
  402a7e:	47a8      	blx	r5
  402a80:	1c41      	adds	r1, r0, #1
  402a82:	2210      	movs	r2, #16
  402a84:	b289      	uxth	r1, r1
  402a86:	a81c      	add	r0, sp, #112	; 0x70
  402a88:	47b0      	blx	r6
	mxt_write_config_reg(device, mxt_get_object_address(device,
  402a8a:	4622      	mov	r2, r4
  402a8c:	2107      	movs	r1, #7
  402a8e:	a81c      	add	r0, sp, #112	; 0x70
  402a90:	47a8      	blx	r5
  402a92:	1c81      	adds	r1, r0, #2
  402a94:	224b      	movs	r2, #75	; 0x4b
  402a96:	b289      	uxth	r1, r1
  402a98:	a81c      	add	r0, sp, #112	; 0x70
  402a9a:	47b0      	blx	r6
	mxt_write_config_reg(device, mxt_get_object_address(device,
  402a9c:	4622      	mov	r2, r4
  402a9e:	2107      	movs	r1, #7
  402aa0:	a81c      	add	r0, sp, #112	; 0x70
  402aa2:	47a8      	blx	r5
  402aa4:	1cc1      	adds	r1, r0, #3
  402aa6:	2284      	movs	r2, #132	; 0x84
  402aa8:	b289      	uxth	r1, r1
  402aaa:	a81c      	add	r0, sp, #112	; 0x70
  402aac:	47b0      	blx	r6
	mxt_write_config_object(device, mxt_get_object_address(device,
  402aae:	4622      	mov	r2, r4
  402ab0:	2108      	movs	r1, #8
  402ab2:	a81c      	add	r0, sp, #112	; 0x70
  402ab4:	47a8      	blx	r5
  402ab6:	aa04      	add	r2, sp, #16
  402ab8:	4601      	mov	r1, r0
  402aba:	a81c      	add	r0, sp, #112	; 0x70
  402abc:	4f55      	ldr	r7, [pc, #340]	; (402c14 <main+0x264>)
  402abe:	47b8      	blx	r7
	mxt_write_config_object(device, mxt_get_object_address(device,
  402ac0:	4622      	mov	r2, r4
  402ac2:	2109      	movs	r1, #9
  402ac4:	a81c      	add	r0, sp, #112	; 0x70
  402ac6:	47a8      	blx	r5
  402ac8:	aa13      	add	r2, sp, #76	; 0x4c
  402aca:	4601      	mov	r1, r0
  402acc:	a81c      	add	r0, sp, #112	; 0x70
  402ace:	47b8      	blx	r7
	mxt_write_config_object(device, mxt_get_object_address(device,
  402ad0:	4622      	mov	r2, r4
  402ad2:	212e      	movs	r1, #46	; 0x2e
  402ad4:	a81c      	add	r0, sp, #112	; 0x70
  402ad6:	47a8      	blx	r5
  402ad8:	aa01      	add	r2, sp, #4
  402ada:	4601      	mov	r1, r0
  402adc:	a81c      	add	r0, sp, #112	; 0x70
  402ade:	47b8      	blx	r7
	mxt_write_config_object(device, mxt_get_object_address(device,
  402ae0:	4622      	mov	r2, r4
  402ae2:	2138      	movs	r1, #56	; 0x38
  402ae4:	a81c      	add	r0, sp, #112	; 0x70
  402ae6:	47a8      	blx	r5
  402ae8:	aa0a      	add	r2, sp, #40	; 0x28
  402aea:	4601      	mov	r1, r0
  402aec:	a81c      	add	r0, sp, #112	; 0x70
  402aee:	47b8      	blx	r7
	mxt_write_config_reg(device, mxt_get_object_address(device,
  402af0:	4622      	mov	r2, r4
  402af2:	2106      	movs	r1, #6
  402af4:	a81c      	add	r0, sp, #112	; 0x70
  402af6:	47a8      	blx	r5
  402af8:	1c81      	adds	r1, r0, #2
  402afa:	2201      	movs	r2, #1
  402afc:	b289      	uxth	r1, r1
  402afe:	a81c      	add	r0, sp, #112	; 0x70
  402b00:	47b0      	blx	r6
	/* Initialize the mXT touch device */
	mxt_init(&device);
    t_ciclo *p_primeiro = initMenuOrder();
  402b02:	4b45      	ldr	r3, [pc, #276]	; (402c18 <main+0x268>)
  402b04:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  402b06:	4d45      	ldr	r5, [pc, #276]	; (402c1c <main+0x26c>)
  402b08:	4b45      	ldr	r3, [pc, #276]	; (402c20 <main+0x270>)
  402b0a:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  402b0c:	4a45      	ldr	r2, [pc, #276]	; (402c24 <main+0x274>)
  402b0e:	4b46      	ldr	r3, [pc, #280]	; (402c28 <main+0x278>)
  402b10:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  402b12:	4a46      	ldr	r2, [pc, #280]	; (402c2c <main+0x27c>)
  402b14:	4b46      	ldr	r3, [pc, #280]	; (402c30 <main+0x280>)
  402b16:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  402b18:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  402b1c:	9313      	str	r3, [sp, #76]	; 0x4c
	usart_settings.char_length = opt->charlength;
  402b1e:	23c0      	movs	r3, #192	; 0xc0
  402b20:	9314      	str	r3, [sp, #80]	; 0x50
	usart_settings.parity_type = opt->paritytype;
  402b22:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402b26:	9315      	str	r3, [sp, #84]	; 0x54
	usart_settings.stop_bits= opt->stopbits;
  402b28:	9416      	str	r4, [sp, #88]	; 0x58
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  402b2a:	9417      	str	r4, [sp, #92]	; 0x5c
  402b2c:	200e      	movs	r0, #14
  402b2e:	47c8      	blx	r9
		usart_init_rs232(p_usart, &usart_settings,
  402b30:	4642      	mov	r2, r8
  402b32:	a913      	add	r1, sp, #76	; 0x4c
  402b34:	4628      	mov	r0, r5
  402b36:	4b3f      	ldr	r3, [pc, #252]	; (402c34 <main+0x284>)
  402b38:	4798      	blx	r3
		usart_enable_tx(p_usart);
  402b3a:	4628      	mov	r0, r5
  402b3c:	4b3e      	ldr	r3, [pc, #248]	; (402c38 <main+0x288>)
  402b3e:	4798      	blx	r3
		usart_enable_rx(p_usart);
  402b40:	4628      	mov	r0, r5
  402b42:	4b3e      	ldr	r3, [pc, #248]	; (402c3c <main+0x28c>)
  402b44:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  402b46:	4e3e      	ldr	r6, [pc, #248]	; (402c40 <main+0x290>)
  402b48:	6833      	ldr	r3, [r6, #0]
  402b4a:	4621      	mov	r1, r4
  402b4c:	6898      	ldr	r0, [r3, #8]
  402b4e:	4d3d      	ldr	r5, [pc, #244]	; (402c44 <main+0x294>)
  402b50:	47a8      	blx	r5
	setbuf(stdin, NULL);
  402b52:	6833      	ldr	r3, [r6, #0]
  402b54:	4621      	mov	r1, r4
  402b56:	6858      	ldr	r0, [r3, #4]
  402b58:	47a8      	blx	r5

	/* Initialize stdio on USART */
	stdio_serial_init(USART_SERIAL_EXAMPLE, &usart_serial_options);

	printf("\n\rmaXTouch data USART transmitter\n\r");
  402b5a:	483b      	ldr	r0, [pc, #236]	; (402c48 <main+0x298>)
  402b5c:	4b3b      	ldr	r3, [pc, #236]	; (402c4c <main+0x29c>)
  402b5e:	4798      	blx	r3
	
	f_rtt_alarme = true;
  402b60:	2201      	movs	r2, #1
  402b62:	4b3b      	ldr	r3, [pc, #236]	; (402c50 <main+0x2a0>)
  402b64:	701a      	strb	r2, [r3, #0]

	while (true) {
		if(f_rtt_alarme){
  402b66:	461f      	mov	r7, r3
	rtt_sel_source(RTT, false);
  402b68:	4c3a      	ldr	r4, [pc, #232]	; (402c54 <main+0x2a4>)
	ul_previous_time = rtt_read_timer_value(RTT);
  402b6a:	4e3b      	ldr	r6, [pc, #236]	; (402c58 <main+0x2a8>)
  402b6c:	e002      	b.n	402b74 <main+0x1c4>
			/* Check for any pending messages and run message handler if any
			* message is found in the queue */
			if (mxt_is_message_pending(&device)) {
				mxt_handler(&device);
			}
			crono(1);	
  402b6e:	2001      	movs	r0, #1
  402b70:	4b3a      	ldr	r3, [pc, #232]	; (402c5c <main+0x2ac>)
  402b72:	4798      	blx	r3
		if(f_rtt_alarme){
  402b74:	783b      	ldrb	r3, [r7, #0]
  402b76:	2b00      	cmp	r3, #0
  402b78:	d0fc      	beq.n	402b74 <main+0x1c4>
	rtt_sel_source(RTT, false);
  402b7a:	2100      	movs	r1, #0
  402b7c:	4620      	mov	r0, r4
  402b7e:	4b38      	ldr	r3, [pc, #224]	; (402c60 <main+0x2b0>)
  402b80:	4798      	blx	r3
	rtt_init(RTT, pllPreScale);
  402b82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  402b86:	4620      	mov	r0, r4
  402b88:	4b36      	ldr	r3, [pc, #216]	; (402c64 <main+0x2b4>)
  402b8a:	4798      	blx	r3
	ul_previous_time = rtt_read_timer_value(RTT);
  402b8c:	4620      	mov	r0, r4
  402b8e:	47b0      	blx	r6
  402b90:	4605      	mov	r5, r0
	while (ul_previous_time == rtt_read_timer_value(RTT));
  402b92:	4620      	mov	r0, r4
  402b94:	47b0      	blx	r6
  402b96:	4285      	cmp	r5, r0
  402b98:	d0fb      	beq.n	402b92 <main+0x1e2>
	rtt_write_alarm_time(RTT, IrqNPulses+ul_previous_time);
  402b9a:	1d29      	adds	r1, r5, #4
  402b9c:	4620      	mov	r0, r4
  402b9e:	4b32      	ldr	r3, [pc, #200]	; (402c68 <main+0x2b8>)
  402ba0:	4798      	blx	r3
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  402ba2:	4b32      	ldr	r3, [pc, #200]	; (402c6c <main+0x2bc>)
  402ba4:	2208      	movs	r2, #8
  402ba6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  402baa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402bae:	2500      	movs	r5, #0
  402bb0:	f883 5303 	strb.w	r5, [r3, #771]	; 0x303
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402bb4:	601a      	str	r2, [r3, #0]
	rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  402bb6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  402bba:	4620      	mov	r0, r4
  402bbc:	4b2c      	ldr	r3, [pc, #176]	; (402c70 <main+0x2c0>)
  402bbe:	4798      	blx	r3
			f_rtt_alarme = false;
  402bc0:	703d      	strb	r5, [r7, #0]
			if (mxt_is_message_pending(&device)) {
  402bc2:	a81c      	add	r0, sp, #112	; 0x70
  402bc4:	4b2b      	ldr	r3, [pc, #172]	; (402c74 <main+0x2c4>)
  402bc6:	4798      	blx	r3
  402bc8:	2800      	cmp	r0, #0
  402bca:	d0d0      	beq.n	402b6e <main+0x1be>
				mxt_handler(&device);
  402bcc:	a81c      	add	r0, sp, #112	; 0x70
  402bce:	4b2a      	ldr	r3, [pc, #168]	; (402c78 <main+0x2c8>)
  402bd0:	4798      	blx	r3
  402bd2:	e7cc      	b.n	402b6e <main+0x1be>
  402bd4:	0040064d 	.word	0x0040064d
  402bd8:	004009b5 	.word	0x004009b5
  402bdc:	20400fa4 	.word	0x20400fa4
  402be0:	00fcfcfc 	.word	0x00fcfcfc
  402be4:	00400f21 	.word	0x00400f21
  402be8:	004024f5 	.word	0x004024f5
  402bec:	00402555 	.word	0x00402555
  402bf0:	0040993c 	.word	0x0040993c
  402bf4:	00061a80 	.word	0x00061a80
  402bf8:	40018000 	.word	0x40018000
  402bfc:	00401cc5 	.word	0x00401cc5
  402c00:	004001d5 	.word	0x004001d5
  402c04:	0040046d 	.word	0x0040046d
  402c08:	00400525 	.word	0x00400525
  402c0c:	003228d8 	.word	0x003228d8
  402c10:	20400001 	.word	0x20400001
  402c14:	004004ad 	.word	0x004004ad
  402c18:	004023dd 	.word	0x004023dd
  402c1c:	40028000 	.word	0x40028000
  402c20:	20400f90 	.word	0x20400f90
  402c24:	00402309 	.word	0x00402309
  402c28:	20400f8c 	.word	0x20400f8c
  402c2c:	0040222d 	.word	0x0040222d
  402c30:	20400f88 	.word	0x20400f88
  402c34:	00401eed 	.word	0x00401eed
  402c38:	00401f41 	.word	0x00401f41
  402c3c:	00401f47 	.word	0x00401f47
  402c40:	20400144 	.word	0x20400144
  402c44:	00403345 	.word	0x00403345
  402c48:	004099d8 	.word	0x004099d8
  402c4c:	00402cd5 	.word	0x00402cd5
  402c50:	20400f4c 	.word	0x20400f4c
  402c54:	400e1830 	.word	0x400e1830
  402c58:	00401a3d 	.word	0x00401a3d
  402c5c:	004028e1 	.word	0x004028e1
  402c60:	004019e9 	.word	0x004019e9
  402c64:	004019d5 	.word	0x004019d5
  402c68:	00401a55 	.word	0x00401a55
  402c6c:	e000e100 	.word	0xe000e100
  402c70:	00401a15 	.word	0x00401a15
  402c74:	0040056d 	.word	0x0040056d
  402c78:	0040281d 	.word	0x0040281d
  402c7c:	08f0d180 	.word	0x08f0d180
  402c80:	004017f9 	.word	0x004017f9

00402c84 <__libc_init_array>:
  402c84:	b570      	push	{r4, r5, r6, lr}
  402c86:	4e0f      	ldr	r6, [pc, #60]	; (402cc4 <__libc_init_array+0x40>)
  402c88:	4d0f      	ldr	r5, [pc, #60]	; (402cc8 <__libc_init_array+0x44>)
  402c8a:	1b76      	subs	r6, r6, r5
  402c8c:	10b6      	asrs	r6, r6, #2
  402c8e:	bf18      	it	ne
  402c90:	2400      	movne	r4, #0
  402c92:	d005      	beq.n	402ca0 <__libc_init_array+0x1c>
  402c94:	3401      	adds	r4, #1
  402c96:	f855 3b04 	ldr.w	r3, [r5], #4
  402c9a:	4798      	blx	r3
  402c9c:	42a6      	cmp	r6, r4
  402c9e:	d1f9      	bne.n	402c94 <__libc_init_array+0x10>
  402ca0:	4e0a      	ldr	r6, [pc, #40]	; (402ccc <__libc_init_array+0x48>)
  402ca2:	4d0b      	ldr	r5, [pc, #44]	; (402cd0 <__libc_init_array+0x4c>)
  402ca4:	1b76      	subs	r6, r6, r5
  402ca6:	f007 f817 	bl	409cd8 <_init>
  402caa:	10b6      	asrs	r6, r6, #2
  402cac:	bf18      	it	ne
  402cae:	2400      	movne	r4, #0
  402cb0:	d006      	beq.n	402cc0 <__libc_init_array+0x3c>
  402cb2:	3401      	adds	r4, #1
  402cb4:	f855 3b04 	ldr.w	r3, [r5], #4
  402cb8:	4798      	blx	r3
  402cba:	42a6      	cmp	r6, r4
  402cbc:	d1f9      	bne.n	402cb2 <__libc_init_array+0x2e>
  402cbe:	bd70      	pop	{r4, r5, r6, pc}
  402cc0:	bd70      	pop	{r4, r5, r6, pc}
  402cc2:	bf00      	nop
  402cc4:	00409ce4 	.word	0x00409ce4
  402cc8:	00409ce4 	.word	0x00409ce4
  402ccc:	00409cec 	.word	0x00409cec
  402cd0:	00409ce4 	.word	0x00409ce4

00402cd4 <iprintf>:
  402cd4:	b40f      	push	{r0, r1, r2, r3}
  402cd6:	b500      	push	{lr}
  402cd8:	4907      	ldr	r1, [pc, #28]	; (402cf8 <iprintf+0x24>)
  402cda:	b083      	sub	sp, #12
  402cdc:	ab04      	add	r3, sp, #16
  402cde:	6808      	ldr	r0, [r1, #0]
  402ce0:	f853 2b04 	ldr.w	r2, [r3], #4
  402ce4:	6881      	ldr	r1, [r0, #8]
  402ce6:	9301      	str	r3, [sp, #4]
  402ce8:	f001 ff86 	bl	404bf8 <_vfiprintf_r>
  402cec:	b003      	add	sp, #12
  402cee:	f85d eb04 	ldr.w	lr, [sp], #4
  402cf2:	b004      	add	sp, #16
  402cf4:	4770      	bx	lr
  402cf6:	bf00      	nop
  402cf8:	20400144 	.word	0x20400144

00402cfc <malloc>:
  402cfc:	4b02      	ldr	r3, [pc, #8]	; (402d08 <malloc+0xc>)
  402cfe:	4601      	mov	r1, r0
  402d00:	6818      	ldr	r0, [r3, #0]
  402d02:	f000 b803 	b.w	402d0c <_malloc_r>
  402d06:	bf00      	nop
  402d08:	20400144 	.word	0x20400144

00402d0c <_malloc_r>:
  402d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402d10:	f101 060b 	add.w	r6, r1, #11
  402d14:	2e16      	cmp	r6, #22
  402d16:	b083      	sub	sp, #12
  402d18:	4605      	mov	r5, r0
  402d1a:	f240 809e 	bls.w	402e5a <_malloc_r+0x14e>
  402d1e:	f036 0607 	bics.w	r6, r6, #7
  402d22:	f100 80bd 	bmi.w	402ea0 <_malloc_r+0x194>
  402d26:	42b1      	cmp	r1, r6
  402d28:	f200 80ba 	bhi.w	402ea0 <_malloc_r+0x194>
  402d2c:	f000 faec 	bl	403308 <__malloc_lock>
  402d30:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  402d34:	f0c0 8293 	bcc.w	40325e <_malloc_r+0x552>
  402d38:	0a73      	lsrs	r3, r6, #9
  402d3a:	f000 80b8 	beq.w	402eae <_malloc_r+0x1a2>
  402d3e:	2b04      	cmp	r3, #4
  402d40:	f200 8179 	bhi.w	403036 <_malloc_r+0x32a>
  402d44:	09b3      	lsrs	r3, r6, #6
  402d46:	f103 0039 	add.w	r0, r3, #57	; 0x39
  402d4a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  402d4e:	00c3      	lsls	r3, r0, #3
  402d50:	4fbf      	ldr	r7, [pc, #764]	; (403050 <_malloc_r+0x344>)
  402d52:	443b      	add	r3, r7
  402d54:	f1a3 0108 	sub.w	r1, r3, #8
  402d58:	685c      	ldr	r4, [r3, #4]
  402d5a:	42a1      	cmp	r1, r4
  402d5c:	d106      	bne.n	402d6c <_malloc_r+0x60>
  402d5e:	e00c      	b.n	402d7a <_malloc_r+0x6e>
  402d60:	2a00      	cmp	r2, #0
  402d62:	f280 80aa 	bge.w	402eba <_malloc_r+0x1ae>
  402d66:	68e4      	ldr	r4, [r4, #12]
  402d68:	42a1      	cmp	r1, r4
  402d6a:	d006      	beq.n	402d7a <_malloc_r+0x6e>
  402d6c:	6863      	ldr	r3, [r4, #4]
  402d6e:	f023 0303 	bic.w	r3, r3, #3
  402d72:	1b9a      	subs	r2, r3, r6
  402d74:	2a0f      	cmp	r2, #15
  402d76:	ddf3      	ble.n	402d60 <_malloc_r+0x54>
  402d78:	4670      	mov	r0, lr
  402d7a:	693c      	ldr	r4, [r7, #16]
  402d7c:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 403064 <_malloc_r+0x358>
  402d80:	4574      	cmp	r4, lr
  402d82:	f000 81ab 	beq.w	4030dc <_malloc_r+0x3d0>
  402d86:	6863      	ldr	r3, [r4, #4]
  402d88:	f023 0303 	bic.w	r3, r3, #3
  402d8c:	1b9a      	subs	r2, r3, r6
  402d8e:	2a0f      	cmp	r2, #15
  402d90:	f300 8190 	bgt.w	4030b4 <_malloc_r+0x3a8>
  402d94:	2a00      	cmp	r2, #0
  402d96:	f8c7 e014 	str.w	lr, [r7, #20]
  402d9a:	f8c7 e010 	str.w	lr, [r7, #16]
  402d9e:	f280 809d 	bge.w	402edc <_malloc_r+0x1d0>
  402da2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402da6:	f080 8161 	bcs.w	40306c <_malloc_r+0x360>
  402daa:	08db      	lsrs	r3, r3, #3
  402dac:	f103 0c01 	add.w	ip, r3, #1
  402db0:	1099      	asrs	r1, r3, #2
  402db2:	687a      	ldr	r2, [r7, #4]
  402db4:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  402db8:	f8c4 8008 	str.w	r8, [r4, #8]
  402dbc:	2301      	movs	r3, #1
  402dbe:	408b      	lsls	r3, r1
  402dc0:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  402dc4:	4313      	orrs	r3, r2
  402dc6:	3908      	subs	r1, #8
  402dc8:	60e1      	str	r1, [r4, #12]
  402dca:	607b      	str	r3, [r7, #4]
  402dcc:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  402dd0:	f8c8 400c 	str.w	r4, [r8, #12]
  402dd4:	1082      	asrs	r2, r0, #2
  402dd6:	2401      	movs	r4, #1
  402dd8:	4094      	lsls	r4, r2
  402dda:	429c      	cmp	r4, r3
  402ddc:	f200 808b 	bhi.w	402ef6 <_malloc_r+0x1ea>
  402de0:	421c      	tst	r4, r3
  402de2:	d106      	bne.n	402df2 <_malloc_r+0xe6>
  402de4:	f020 0003 	bic.w	r0, r0, #3
  402de8:	0064      	lsls	r4, r4, #1
  402dea:	421c      	tst	r4, r3
  402dec:	f100 0004 	add.w	r0, r0, #4
  402df0:	d0fa      	beq.n	402de8 <_malloc_r+0xdc>
  402df2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  402df6:	46cc      	mov	ip, r9
  402df8:	4680      	mov	r8, r0
  402dfa:	f8dc 300c 	ldr.w	r3, [ip, #12]
  402dfe:	459c      	cmp	ip, r3
  402e00:	d107      	bne.n	402e12 <_malloc_r+0x106>
  402e02:	e16d      	b.n	4030e0 <_malloc_r+0x3d4>
  402e04:	2a00      	cmp	r2, #0
  402e06:	f280 817b 	bge.w	403100 <_malloc_r+0x3f4>
  402e0a:	68db      	ldr	r3, [r3, #12]
  402e0c:	459c      	cmp	ip, r3
  402e0e:	f000 8167 	beq.w	4030e0 <_malloc_r+0x3d4>
  402e12:	6859      	ldr	r1, [r3, #4]
  402e14:	f021 0103 	bic.w	r1, r1, #3
  402e18:	1b8a      	subs	r2, r1, r6
  402e1a:	2a0f      	cmp	r2, #15
  402e1c:	ddf2      	ble.n	402e04 <_malloc_r+0xf8>
  402e1e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  402e22:	f8d3 8008 	ldr.w	r8, [r3, #8]
  402e26:	9300      	str	r3, [sp, #0]
  402e28:	199c      	adds	r4, r3, r6
  402e2a:	4628      	mov	r0, r5
  402e2c:	f046 0601 	orr.w	r6, r6, #1
  402e30:	f042 0501 	orr.w	r5, r2, #1
  402e34:	605e      	str	r6, [r3, #4]
  402e36:	f8c8 c00c 	str.w	ip, [r8, #12]
  402e3a:	f8cc 8008 	str.w	r8, [ip, #8]
  402e3e:	617c      	str	r4, [r7, #20]
  402e40:	613c      	str	r4, [r7, #16]
  402e42:	f8c4 e00c 	str.w	lr, [r4, #12]
  402e46:	f8c4 e008 	str.w	lr, [r4, #8]
  402e4a:	6065      	str	r5, [r4, #4]
  402e4c:	505a      	str	r2, [r3, r1]
  402e4e:	f000 fa61 	bl	403314 <__malloc_unlock>
  402e52:	9b00      	ldr	r3, [sp, #0]
  402e54:	f103 0408 	add.w	r4, r3, #8
  402e58:	e01e      	b.n	402e98 <_malloc_r+0x18c>
  402e5a:	2910      	cmp	r1, #16
  402e5c:	d820      	bhi.n	402ea0 <_malloc_r+0x194>
  402e5e:	f000 fa53 	bl	403308 <__malloc_lock>
  402e62:	2610      	movs	r6, #16
  402e64:	2318      	movs	r3, #24
  402e66:	2002      	movs	r0, #2
  402e68:	4f79      	ldr	r7, [pc, #484]	; (403050 <_malloc_r+0x344>)
  402e6a:	443b      	add	r3, r7
  402e6c:	f1a3 0208 	sub.w	r2, r3, #8
  402e70:	685c      	ldr	r4, [r3, #4]
  402e72:	4294      	cmp	r4, r2
  402e74:	f000 813d 	beq.w	4030f2 <_malloc_r+0x3e6>
  402e78:	6863      	ldr	r3, [r4, #4]
  402e7a:	68e1      	ldr	r1, [r4, #12]
  402e7c:	68a6      	ldr	r6, [r4, #8]
  402e7e:	f023 0303 	bic.w	r3, r3, #3
  402e82:	4423      	add	r3, r4
  402e84:	4628      	mov	r0, r5
  402e86:	685a      	ldr	r2, [r3, #4]
  402e88:	60f1      	str	r1, [r6, #12]
  402e8a:	f042 0201 	orr.w	r2, r2, #1
  402e8e:	608e      	str	r6, [r1, #8]
  402e90:	605a      	str	r2, [r3, #4]
  402e92:	f000 fa3f 	bl	403314 <__malloc_unlock>
  402e96:	3408      	adds	r4, #8
  402e98:	4620      	mov	r0, r4
  402e9a:	b003      	add	sp, #12
  402e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402ea0:	2400      	movs	r4, #0
  402ea2:	230c      	movs	r3, #12
  402ea4:	4620      	mov	r0, r4
  402ea6:	602b      	str	r3, [r5, #0]
  402ea8:	b003      	add	sp, #12
  402eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402eae:	2040      	movs	r0, #64	; 0x40
  402eb0:	f44f 7300 	mov.w	r3, #512	; 0x200
  402eb4:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  402eb8:	e74a      	b.n	402d50 <_malloc_r+0x44>
  402eba:	4423      	add	r3, r4
  402ebc:	68e1      	ldr	r1, [r4, #12]
  402ebe:	685a      	ldr	r2, [r3, #4]
  402ec0:	68a6      	ldr	r6, [r4, #8]
  402ec2:	f042 0201 	orr.w	r2, r2, #1
  402ec6:	60f1      	str	r1, [r6, #12]
  402ec8:	4628      	mov	r0, r5
  402eca:	608e      	str	r6, [r1, #8]
  402ecc:	605a      	str	r2, [r3, #4]
  402ece:	f000 fa21 	bl	403314 <__malloc_unlock>
  402ed2:	3408      	adds	r4, #8
  402ed4:	4620      	mov	r0, r4
  402ed6:	b003      	add	sp, #12
  402ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402edc:	4423      	add	r3, r4
  402ede:	4628      	mov	r0, r5
  402ee0:	685a      	ldr	r2, [r3, #4]
  402ee2:	f042 0201 	orr.w	r2, r2, #1
  402ee6:	605a      	str	r2, [r3, #4]
  402ee8:	f000 fa14 	bl	403314 <__malloc_unlock>
  402eec:	3408      	adds	r4, #8
  402eee:	4620      	mov	r0, r4
  402ef0:	b003      	add	sp, #12
  402ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402ef6:	68bc      	ldr	r4, [r7, #8]
  402ef8:	6863      	ldr	r3, [r4, #4]
  402efa:	f023 0803 	bic.w	r8, r3, #3
  402efe:	45b0      	cmp	r8, r6
  402f00:	d304      	bcc.n	402f0c <_malloc_r+0x200>
  402f02:	eba8 0306 	sub.w	r3, r8, r6
  402f06:	2b0f      	cmp	r3, #15
  402f08:	f300 8085 	bgt.w	403016 <_malloc_r+0x30a>
  402f0c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 403068 <_malloc_r+0x35c>
  402f10:	4b50      	ldr	r3, [pc, #320]	; (403054 <_malloc_r+0x348>)
  402f12:	f8d9 2000 	ldr.w	r2, [r9]
  402f16:	681b      	ldr	r3, [r3, #0]
  402f18:	3201      	adds	r2, #1
  402f1a:	4433      	add	r3, r6
  402f1c:	eb04 0a08 	add.w	sl, r4, r8
  402f20:	f000 8155 	beq.w	4031ce <_malloc_r+0x4c2>
  402f24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  402f28:	330f      	adds	r3, #15
  402f2a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  402f2e:	f02b 0b0f 	bic.w	fp, fp, #15
  402f32:	4659      	mov	r1, fp
  402f34:	4628      	mov	r0, r5
  402f36:	f000 f9f3 	bl	403320 <_sbrk_r>
  402f3a:	1c41      	adds	r1, r0, #1
  402f3c:	4602      	mov	r2, r0
  402f3e:	f000 80fc 	beq.w	40313a <_malloc_r+0x42e>
  402f42:	4582      	cmp	sl, r0
  402f44:	f200 80f7 	bhi.w	403136 <_malloc_r+0x42a>
  402f48:	4b43      	ldr	r3, [pc, #268]	; (403058 <_malloc_r+0x34c>)
  402f4a:	6819      	ldr	r1, [r3, #0]
  402f4c:	4459      	add	r1, fp
  402f4e:	6019      	str	r1, [r3, #0]
  402f50:	f000 814d 	beq.w	4031ee <_malloc_r+0x4e2>
  402f54:	f8d9 0000 	ldr.w	r0, [r9]
  402f58:	3001      	adds	r0, #1
  402f5a:	bf1b      	ittet	ne
  402f5c:	eba2 0a0a 	subne.w	sl, r2, sl
  402f60:	4451      	addne	r1, sl
  402f62:	f8c9 2000 	streq.w	r2, [r9]
  402f66:	6019      	strne	r1, [r3, #0]
  402f68:	f012 0107 	ands.w	r1, r2, #7
  402f6c:	f000 8115 	beq.w	40319a <_malloc_r+0x48e>
  402f70:	f1c1 0008 	rsb	r0, r1, #8
  402f74:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  402f78:	4402      	add	r2, r0
  402f7a:	3108      	adds	r1, #8
  402f7c:	eb02 090b 	add.w	r9, r2, fp
  402f80:	f3c9 090b 	ubfx	r9, r9, #0, #12
  402f84:	eba1 0909 	sub.w	r9, r1, r9
  402f88:	4649      	mov	r1, r9
  402f8a:	4628      	mov	r0, r5
  402f8c:	9301      	str	r3, [sp, #4]
  402f8e:	9200      	str	r2, [sp, #0]
  402f90:	f000 f9c6 	bl	403320 <_sbrk_r>
  402f94:	1c43      	adds	r3, r0, #1
  402f96:	e89d 000c 	ldmia.w	sp, {r2, r3}
  402f9a:	f000 8143 	beq.w	403224 <_malloc_r+0x518>
  402f9e:	1a80      	subs	r0, r0, r2
  402fa0:	4448      	add	r0, r9
  402fa2:	f040 0001 	orr.w	r0, r0, #1
  402fa6:	6819      	ldr	r1, [r3, #0]
  402fa8:	60ba      	str	r2, [r7, #8]
  402faa:	4449      	add	r1, r9
  402fac:	42bc      	cmp	r4, r7
  402fae:	6050      	str	r0, [r2, #4]
  402fb0:	6019      	str	r1, [r3, #0]
  402fb2:	d017      	beq.n	402fe4 <_malloc_r+0x2d8>
  402fb4:	f1b8 0f0f 	cmp.w	r8, #15
  402fb8:	f240 80fb 	bls.w	4031b2 <_malloc_r+0x4a6>
  402fbc:	6860      	ldr	r0, [r4, #4]
  402fbe:	f1a8 020c 	sub.w	r2, r8, #12
  402fc2:	f022 0207 	bic.w	r2, r2, #7
  402fc6:	eb04 0e02 	add.w	lr, r4, r2
  402fca:	f000 0001 	and.w	r0, r0, #1
  402fce:	f04f 0c05 	mov.w	ip, #5
  402fd2:	4310      	orrs	r0, r2
  402fd4:	2a0f      	cmp	r2, #15
  402fd6:	6060      	str	r0, [r4, #4]
  402fd8:	f8ce c004 	str.w	ip, [lr, #4]
  402fdc:	f8ce c008 	str.w	ip, [lr, #8]
  402fe0:	f200 8117 	bhi.w	403212 <_malloc_r+0x506>
  402fe4:	4b1d      	ldr	r3, [pc, #116]	; (40305c <_malloc_r+0x350>)
  402fe6:	68bc      	ldr	r4, [r7, #8]
  402fe8:	681a      	ldr	r2, [r3, #0]
  402fea:	4291      	cmp	r1, r2
  402fec:	bf88      	it	hi
  402fee:	6019      	strhi	r1, [r3, #0]
  402ff0:	4b1b      	ldr	r3, [pc, #108]	; (403060 <_malloc_r+0x354>)
  402ff2:	681a      	ldr	r2, [r3, #0]
  402ff4:	4291      	cmp	r1, r2
  402ff6:	6862      	ldr	r2, [r4, #4]
  402ff8:	bf88      	it	hi
  402ffa:	6019      	strhi	r1, [r3, #0]
  402ffc:	f022 0203 	bic.w	r2, r2, #3
  403000:	4296      	cmp	r6, r2
  403002:	eba2 0306 	sub.w	r3, r2, r6
  403006:	d801      	bhi.n	40300c <_malloc_r+0x300>
  403008:	2b0f      	cmp	r3, #15
  40300a:	dc04      	bgt.n	403016 <_malloc_r+0x30a>
  40300c:	4628      	mov	r0, r5
  40300e:	f000 f981 	bl	403314 <__malloc_unlock>
  403012:	2400      	movs	r4, #0
  403014:	e740      	b.n	402e98 <_malloc_r+0x18c>
  403016:	19a2      	adds	r2, r4, r6
  403018:	f043 0301 	orr.w	r3, r3, #1
  40301c:	f046 0601 	orr.w	r6, r6, #1
  403020:	6066      	str	r6, [r4, #4]
  403022:	4628      	mov	r0, r5
  403024:	60ba      	str	r2, [r7, #8]
  403026:	6053      	str	r3, [r2, #4]
  403028:	f000 f974 	bl	403314 <__malloc_unlock>
  40302c:	3408      	adds	r4, #8
  40302e:	4620      	mov	r0, r4
  403030:	b003      	add	sp, #12
  403032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403036:	2b14      	cmp	r3, #20
  403038:	d971      	bls.n	40311e <_malloc_r+0x412>
  40303a:	2b54      	cmp	r3, #84	; 0x54
  40303c:	f200 80a3 	bhi.w	403186 <_malloc_r+0x47a>
  403040:	0b33      	lsrs	r3, r6, #12
  403042:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  403046:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40304a:	00c3      	lsls	r3, r0, #3
  40304c:	e680      	b.n	402d50 <_malloc_r+0x44>
  40304e:	bf00      	nop
  403050:	20400570 	.word	0x20400570
  403054:	20400f84 	.word	0x20400f84
  403058:	20400f54 	.word	0x20400f54
  40305c:	20400f7c 	.word	0x20400f7c
  403060:	20400f80 	.word	0x20400f80
  403064:	20400578 	.word	0x20400578
  403068:	20400978 	.word	0x20400978
  40306c:	0a5a      	lsrs	r2, r3, #9
  40306e:	2a04      	cmp	r2, #4
  403070:	d95b      	bls.n	40312a <_malloc_r+0x41e>
  403072:	2a14      	cmp	r2, #20
  403074:	f200 80ae 	bhi.w	4031d4 <_malloc_r+0x4c8>
  403078:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40307c:	00c9      	lsls	r1, r1, #3
  40307e:	325b      	adds	r2, #91	; 0x5b
  403080:	eb07 0c01 	add.w	ip, r7, r1
  403084:	5879      	ldr	r1, [r7, r1]
  403086:	f1ac 0c08 	sub.w	ip, ip, #8
  40308a:	458c      	cmp	ip, r1
  40308c:	f000 8088 	beq.w	4031a0 <_malloc_r+0x494>
  403090:	684a      	ldr	r2, [r1, #4]
  403092:	f022 0203 	bic.w	r2, r2, #3
  403096:	4293      	cmp	r3, r2
  403098:	d273      	bcs.n	403182 <_malloc_r+0x476>
  40309a:	6889      	ldr	r1, [r1, #8]
  40309c:	458c      	cmp	ip, r1
  40309e:	d1f7      	bne.n	403090 <_malloc_r+0x384>
  4030a0:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4030a4:	687b      	ldr	r3, [r7, #4]
  4030a6:	60e2      	str	r2, [r4, #12]
  4030a8:	f8c4 c008 	str.w	ip, [r4, #8]
  4030ac:	6094      	str	r4, [r2, #8]
  4030ae:	f8cc 400c 	str.w	r4, [ip, #12]
  4030b2:	e68f      	b.n	402dd4 <_malloc_r+0xc8>
  4030b4:	19a1      	adds	r1, r4, r6
  4030b6:	f046 0c01 	orr.w	ip, r6, #1
  4030ba:	f042 0601 	orr.w	r6, r2, #1
  4030be:	f8c4 c004 	str.w	ip, [r4, #4]
  4030c2:	4628      	mov	r0, r5
  4030c4:	6179      	str	r1, [r7, #20]
  4030c6:	6139      	str	r1, [r7, #16]
  4030c8:	f8c1 e00c 	str.w	lr, [r1, #12]
  4030cc:	f8c1 e008 	str.w	lr, [r1, #8]
  4030d0:	604e      	str	r6, [r1, #4]
  4030d2:	50e2      	str	r2, [r4, r3]
  4030d4:	f000 f91e 	bl	403314 <__malloc_unlock>
  4030d8:	3408      	adds	r4, #8
  4030da:	e6dd      	b.n	402e98 <_malloc_r+0x18c>
  4030dc:	687b      	ldr	r3, [r7, #4]
  4030de:	e679      	b.n	402dd4 <_malloc_r+0xc8>
  4030e0:	f108 0801 	add.w	r8, r8, #1
  4030e4:	f018 0f03 	tst.w	r8, #3
  4030e8:	f10c 0c08 	add.w	ip, ip, #8
  4030ec:	f47f ae85 	bne.w	402dfa <_malloc_r+0xee>
  4030f0:	e02d      	b.n	40314e <_malloc_r+0x442>
  4030f2:	68dc      	ldr	r4, [r3, #12]
  4030f4:	42a3      	cmp	r3, r4
  4030f6:	bf08      	it	eq
  4030f8:	3002      	addeq	r0, #2
  4030fa:	f43f ae3e 	beq.w	402d7a <_malloc_r+0x6e>
  4030fe:	e6bb      	b.n	402e78 <_malloc_r+0x16c>
  403100:	4419      	add	r1, r3
  403102:	461c      	mov	r4, r3
  403104:	684a      	ldr	r2, [r1, #4]
  403106:	68db      	ldr	r3, [r3, #12]
  403108:	f854 6f08 	ldr.w	r6, [r4, #8]!
  40310c:	f042 0201 	orr.w	r2, r2, #1
  403110:	604a      	str	r2, [r1, #4]
  403112:	4628      	mov	r0, r5
  403114:	60f3      	str	r3, [r6, #12]
  403116:	609e      	str	r6, [r3, #8]
  403118:	f000 f8fc 	bl	403314 <__malloc_unlock>
  40311c:	e6bc      	b.n	402e98 <_malloc_r+0x18c>
  40311e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  403122:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  403126:	00c3      	lsls	r3, r0, #3
  403128:	e612      	b.n	402d50 <_malloc_r+0x44>
  40312a:	099a      	lsrs	r2, r3, #6
  40312c:	f102 0139 	add.w	r1, r2, #57	; 0x39
  403130:	00c9      	lsls	r1, r1, #3
  403132:	3238      	adds	r2, #56	; 0x38
  403134:	e7a4      	b.n	403080 <_malloc_r+0x374>
  403136:	42bc      	cmp	r4, r7
  403138:	d054      	beq.n	4031e4 <_malloc_r+0x4d8>
  40313a:	68bc      	ldr	r4, [r7, #8]
  40313c:	6862      	ldr	r2, [r4, #4]
  40313e:	f022 0203 	bic.w	r2, r2, #3
  403142:	e75d      	b.n	403000 <_malloc_r+0x2f4>
  403144:	f859 3908 	ldr.w	r3, [r9], #-8
  403148:	4599      	cmp	r9, r3
  40314a:	f040 8086 	bne.w	40325a <_malloc_r+0x54e>
  40314e:	f010 0f03 	tst.w	r0, #3
  403152:	f100 30ff 	add.w	r0, r0, #4294967295
  403156:	d1f5      	bne.n	403144 <_malloc_r+0x438>
  403158:	687b      	ldr	r3, [r7, #4]
  40315a:	ea23 0304 	bic.w	r3, r3, r4
  40315e:	607b      	str	r3, [r7, #4]
  403160:	0064      	lsls	r4, r4, #1
  403162:	429c      	cmp	r4, r3
  403164:	f63f aec7 	bhi.w	402ef6 <_malloc_r+0x1ea>
  403168:	2c00      	cmp	r4, #0
  40316a:	f43f aec4 	beq.w	402ef6 <_malloc_r+0x1ea>
  40316e:	421c      	tst	r4, r3
  403170:	4640      	mov	r0, r8
  403172:	f47f ae3e 	bne.w	402df2 <_malloc_r+0xe6>
  403176:	0064      	lsls	r4, r4, #1
  403178:	421c      	tst	r4, r3
  40317a:	f100 0004 	add.w	r0, r0, #4
  40317e:	d0fa      	beq.n	403176 <_malloc_r+0x46a>
  403180:	e637      	b.n	402df2 <_malloc_r+0xe6>
  403182:	468c      	mov	ip, r1
  403184:	e78c      	b.n	4030a0 <_malloc_r+0x394>
  403186:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40318a:	d815      	bhi.n	4031b8 <_malloc_r+0x4ac>
  40318c:	0bf3      	lsrs	r3, r6, #15
  40318e:	f103 0078 	add.w	r0, r3, #120	; 0x78
  403192:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  403196:	00c3      	lsls	r3, r0, #3
  403198:	e5da      	b.n	402d50 <_malloc_r+0x44>
  40319a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40319e:	e6ed      	b.n	402f7c <_malloc_r+0x270>
  4031a0:	687b      	ldr	r3, [r7, #4]
  4031a2:	1092      	asrs	r2, r2, #2
  4031a4:	2101      	movs	r1, #1
  4031a6:	fa01 f202 	lsl.w	r2, r1, r2
  4031aa:	4313      	orrs	r3, r2
  4031ac:	607b      	str	r3, [r7, #4]
  4031ae:	4662      	mov	r2, ip
  4031b0:	e779      	b.n	4030a6 <_malloc_r+0x39a>
  4031b2:	2301      	movs	r3, #1
  4031b4:	6053      	str	r3, [r2, #4]
  4031b6:	e729      	b.n	40300c <_malloc_r+0x300>
  4031b8:	f240 5254 	movw	r2, #1364	; 0x554
  4031bc:	4293      	cmp	r3, r2
  4031be:	d822      	bhi.n	403206 <_malloc_r+0x4fa>
  4031c0:	0cb3      	lsrs	r3, r6, #18
  4031c2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4031c6:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4031ca:	00c3      	lsls	r3, r0, #3
  4031cc:	e5c0      	b.n	402d50 <_malloc_r+0x44>
  4031ce:	f103 0b10 	add.w	fp, r3, #16
  4031d2:	e6ae      	b.n	402f32 <_malloc_r+0x226>
  4031d4:	2a54      	cmp	r2, #84	; 0x54
  4031d6:	d829      	bhi.n	40322c <_malloc_r+0x520>
  4031d8:	0b1a      	lsrs	r2, r3, #12
  4031da:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4031de:	00c9      	lsls	r1, r1, #3
  4031e0:	326e      	adds	r2, #110	; 0x6e
  4031e2:	e74d      	b.n	403080 <_malloc_r+0x374>
  4031e4:	4b20      	ldr	r3, [pc, #128]	; (403268 <_malloc_r+0x55c>)
  4031e6:	6819      	ldr	r1, [r3, #0]
  4031e8:	4459      	add	r1, fp
  4031ea:	6019      	str	r1, [r3, #0]
  4031ec:	e6b2      	b.n	402f54 <_malloc_r+0x248>
  4031ee:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4031f2:	2800      	cmp	r0, #0
  4031f4:	f47f aeae 	bne.w	402f54 <_malloc_r+0x248>
  4031f8:	eb08 030b 	add.w	r3, r8, fp
  4031fc:	68ba      	ldr	r2, [r7, #8]
  4031fe:	f043 0301 	orr.w	r3, r3, #1
  403202:	6053      	str	r3, [r2, #4]
  403204:	e6ee      	b.n	402fe4 <_malloc_r+0x2d8>
  403206:	207f      	movs	r0, #127	; 0x7f
  403208:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  40320c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  403210:	e59e      	b.n	402d50 <_malloc_r+0x44>
  403212:	f104 0108 	add.w	r1, r4, #8
  403216:	4628      	mov	r0, r5
  403218:	9300      	str	r3, [sp, #0]
  40321a:	f003 fdc9 	bl	406db0 <_free_r>
  40321e:	9b00      	ldr	r3, [sp, #0]
  403220:	6819      	ldr	r1, [r3, #0]
  403222:	e6df      	b.n	402fe4 <_malloc_r+0x2d8>
  403224:	2001      	movs	r0, #1
  403226:	f04f 0900 	mov.w	r9, #0
  40322a:	e6bc      	b.n	402fa6 <_malloc_r+0x29a>
  40322c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403230:	d805      	bhi.n	40323e <_malloc_r+0x532>
  403232:	0bda      	lsrs	r2, r3, #15
  403234:	f102 0178 	add.w	r1, r2, #120	; 0x78
  403238:	00c9      	lsls	r1, r1, #3
  40323a:	3277      	adds	r2, #119	; 0x77
  40323c:	e720      	b.n	403080 <_malloc_r+0x374>
  40323e:	f240 5154 	movw	r1, #1364	; 0x554
  403242:	428a      	cmp	r2, r1
  403244:	d805      	bhi.n	403252 <_malloc_r+0x546>
  403246:	0c9a      	lsrs	r2, r3, #18
  403248:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40324c:	00c9      	lsls	r1, r1, #3
  40324e:	327c      	adds	r2, #124	; 0x7c
  403250:	e716      	b.n	403080 <_malloc_r+0x374>
  403252:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  403256:	227e      	movs	r2, #126	; 0x7e
  403258:	e712      	b.n	403080 <_malloc_r+0x374>
  40325a:	687b      	ldr	r3, [r7, #4]
  40325c:	e780      	b.n	403160 <_malloc_r+0x454>
  40325e:	08f0      	lsrs	r0, r6, #3
  403260:	f106 0308 	add.w	r3, r6, #8
  403264:	e600      	b.n	402e68 <_malloc_r+0x15c>
  403266:	bf00      	nop
  403268:	20400f54 	.word	0x20400f54

0040326c <memset>:
  40326c:	b470      	push	{r4, r5, r6}
  40326e:	0786      	lsls	r6, r0, #30
  403270:	d046      	beq.n	403300 <memset+0x94>
  403272:	1e54      	subs	r4, r2, #1
  403274:	2a00      	cmp	r2, #0
  403276:	d041      	beq.n	4032fc <memset+0x90>
  403278:	b2ca      	uxtb	r2, r1
  40327a:	4603      	mov	r3, r0
  40327c:	e002      	b.n	403284 <memset+0x18>
  40327e:	f114 34ff 	adds.w	r4, r4, #4294967295
  403282:	d33b      	bcc.n	4032fc <memset+0x90>
  403284:	f803 2b01 	strb.w	r2, [r3], #1
  403288:	079d      	lsls	r5, r3, #30
  40328a:	d1f8      	bne.n	40327e <memset+0x12>
  40328c:	2c03      	cmp	r4, #3
  40328e:	d92e      	bls.n	4032ee <memset+0x82>
  403290:	b2cd      	uxtb	r5, r1
  403292:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  403296:	2c0f      	cmp	r4, #15
  403298:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40329c:	d919      	bls.n	4032d2 <memset+0x66>
  40329e:	f103 0210 	add.w	r2, r3, #16
  4032a2:	4626      	mov	r6, r4
  4032a4:	3e10      	subs	r6, #16
  4032a6:	2e0f      	cmp	r6, #15
  4032a8:	f842 5c10 	str.w	r5, [r2, #-16]
  4032ac:	f842 5c0c 	str.w	r5, [r2, #-12]
  4032b0:	f842 5c08 	str.w	r5, [r2, #-8]
  4032b4:	f842 5c04 	str.w	r5, [r2, #-4]
  4032b8:	f102 0210 	add.w	r2, r2, #16
  4032bc:	d8f2      	bhi.n	4032a4 <memset+0x38>
  4032be:	f1a4 0210 	sub.w	r2, r4, #16
  4032c2:	f022 020f 	bic.w	r2, r2, #15
  4032c6:	f004 040f 	and.w	r4, r4, #15
  4032ca:	3210      	adds	r2, #16
  4032cc:	2c03      	cmp	r4, #3
  4032ce:	4413      	add	r3, r2
  4032d0:	d90d      	bls.n	4032ee <memset+0x82>
  4032d2:	461e      	mov	r6, r3
  4032d4:	4622      	mov	r2, r4
  4032d6:	3a04      	subs	r2, #4
  4032d8:	2a03      	cmp	r2, #3
  4032da:	f846 5b04 	str.w	r5, [r6], #4
  4032de:	d8fa      	bhi.n	4032d6 <memset+0x6a>
  4032e0:	1f22      	subs	r2, r4, #4
  4032e2:	f022 0203 	bic.w	r2, r2, #3
  4032e6:	3204      	adds	r2, #4
  4032e8:	4413      	add	r3, r2
  4032ea:	f004 0403 	and.w	r4, r4, #3
  4032ee:	b12c      	cbz	r4, 4032fc <memset+0x90>
  4032f0:	b2c9      	uxtb	r1, r1
  4032f2:	441c      	add	r4, r3
  4032f4:	f803 1b01 	strb.w	r1, [r3], #1
  4032f8:	429c      	cmp	r4, r3
  4032fa:	d1fb      	bne.n	4032f4 <memset+0x88>
  4032fc:	bc70      	pop	{r4, r5, r6}
  4032fe:	4770      	bx	lr
  403300:	4614      	mov	r4, r2
  403302:	4603      	mov	r3, r0
  403304:	e7c2      	b.n	40328c <memset+0x20>
  403306:	bf00      	nop

00403308 <__malloc_lock>:
  403308:	4801      	ldr	r0, [pc, #4]	; (403310 <__malloc_lock+0x8>)
  40330a:	f003 bff9 	b.w	407300 <__retarget_lock_acquire_recursive>
  40330e:	bf00      	nop
  403310:	20400fc4 	.word	0x20400fc4

00403314 <__malloc_unlock>:
  403314:	4801      	ldr	r0, [pc, #4]	; (40331c <__malloc_unlock+0x8>)
  403316:	f003 bff5 	b.w	407304 <__retarget_lock_release_recursive>
  40331a:	bf00      	nop
  40331c:	20400fc4 	.word	0x20400fc4

00403320 <_sbrk_r>:
  403320:	b538      	push	{r3, r4, r5, lr}
  403322:	4c07      	ldr	r4, [pc, #28]	; (403340 <_sbrk_r+0x20>)
  403324:	2300      	movs	r3, #0
  403326:	4605      	mov	r5, r0
  403328:	4608      	mov	r0, r1
  40332a:	6023      	str	r3, [r4, #0]
  40332c:	f7fe ff56 	bl	4021dc <_sbrk>
  403330:	1c43      	adds	r3, r0, #1
  403332:	d000      	beq.n	403336 <_sbrk_r+0x16>
  403334:	bd38      	pop	{r3, r4, r5, pc}
  403336:	6823      	ldr	r3, [r4, #0]
  403338:	2b00      	cmp	r3, #0
  40333a:	d0fb      	beq.n	403334 <_sbrk_r+0x14>
  40333c:	602b      	str	r3, [r5, #0]
  40333e:	bd38      	pop	{r3, r4, r5, pc}
  403340:	20400fd8 	.word	0x20400fd8

00403344 <setbuf>:
  403344:	2900      	cmp	r1, #0
  403346:	bf0c      	ite	eq
  403348:	2202      	moveq	r2, #2
  40334a:	2200      	movne	r2, #0
  40334c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403350:	f000 b800 	b.w	403354 <setvbuf>

00403354 <setvbuf>:
  403354:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403358:	4c61      	ldr	r4, [pc, #388]	; (4034e0 <setvbuf+0x18c>)
  40335a:	6825      	ldr	r5, [r4, #0]
  40335c:	b083      	sub	sp, #12
  40335e:	4604      	mov	r4, r0
  403360:	460f      	mov	r7, r1
  403362:	4690      	mov	r8, r2
  403364:	461e      	mov	r6, r3
  403366:	b115      	cbz	r5, 40336e <setvbuf+0x1a>
  403368:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40336a:	2b00      	cmp	r3, #0
  40336c:	d064      	beq.n	403438 <setvbuf+0xe4>
  40336e:	f1b8 0f02 	cmp.w	r8, #2
  403372:	d006      	beq.n	403382 <setvbuf+0x2e>
  403374:	f1b8 0f01 	cmp.w	r8, #1
  403378:	f200 809f 	bhi.w	4034ba <setvbuf+0x166>
  40337c:	2e00      	cmp	r6, #0
  40337e:	f2c0 809c 	blt.w	4034ba <setvbuf+0x166>
  403382:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403384:	07d8      	lsls	r0, r3, #31
  403386:	d534      	bpl.n	4033f2 <setvbuf+0x9e>
  403388:	4621      	mov	r1, r4
  40338a:	4628      	mov	r0, r5
  40338c:	f003 fb92 	bl	406ab4 <_fflush_r>
  403390:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403392:	b141      	cbz	r1, 4033a6 <setvbuf+0x52>
  403394:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403398:	4299      	cmp	r1, r3
  40339a:	d002      	beq.n	4033a2 <setvbuf+0x4e>
  40339c:	4628      	mov	r0, r5
  40339e:	f003 fd07 	bl	406db0 <_free_r>
  4033a2:	2300      	movs	r3, #0
  4033a4:	6323      	str	r3, [r4, #48]	; 0x30
  4033a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4033aa:	2200      	movs	r2, #0
  4033ac:	61a2      	str	r2, [r4, #24]
  4033ae:	6062      	str	r2, [r4, #4]
  4033b0:	061a      	lsls	r2, r3, #24
  4033b2:	d43a      	bmi.n	40342a <setvbuf+0xd6>
  4033b4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4033b8:	f023 0303 	bic.w	r3, r3, #3
  4033bc:	f1b8 0f02 	cmp.w	r8, #2
  4033c0:	81a3      	strh	r3, [r4, #12]
  4033c2:	d01d      	beq.n	403400 <setvbuf+0xac>
  4033c4:	ab01      	add	r3, sp, #4
  4033c6:	466a      	mov	r2, sp
  4033c8:	4621      	mov	r1, r4
  4033ca:	4628      	mov	r0, r5
  4033cc:	f003 ff9c 	bl	407308 <__swhatbuf_r>
  4033d0:	89a3      	ldrh	r3, [r4, #12]
  4033d2:	4318      	orrs	r0, r3
  4033d4:	81a0      	strh	r0, [r4, #12]
  4033d6:	2e00      	cmp	r6, #0
  4033d8:	d132      	bne.n	403440 <setvbuf+0xec>
  4033da:	9e00      	ldr	r6, [sp, #0]
  4033dc:	4630      	mov	r0, r6
  4033de:	f7ff fc8d 	bl	402cfc <malloc>
  4033e2:	4607      	mov	r7, r0
  4033e4:	2800      	cmp	r0, #0
  4033e6:	d06b      	beq.n	4034c0 <setvbuf+0x16c>
  4033e8:	89a3      	ldrh	r3, [r4, #12]
  4033ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4033ee:	81a3      	strh	r3, [r4, #12]
  4033f0:	e028      	b.n	403444 <setvbuf+0xf0>
  4033f2:	89a3      	ldrh	r3, [r4, #12]
  4033f4:	0599      	lsls	r1, r3, #22
  4033f6:	d4c7      	bmi.n	403388 <setvbuf+0x34>
  4033f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4033fa:	f003 ff81 	bl	407300 <__retarget_lock_acquire_recursive>
  4033fe:	e7c3      	b.n	403388 <setvbuf+0x34>
  403400:	2500      	movs	r5, #0
  403402:	6e61      	ldr	r1, [r4, #100]	; 0x64
  403404:	2600      	movs	r6, #0
  403406:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40340a:	f043 0302 	orr.w	r3, r3, #2
  40340e:	2001      	movs	r0, #1
  403410:	60a6      	str	r6, [r4, #8]
  403412:	07ce      	lsls	r6, r1, #31
  403414:	81a3      	strh	r3, [r4, #12]
  403416:	6022      	str	r2, [r4, #0]
  403418:	6122      	str	r2, [r4, #16]
  40341a:	6160      	str	r0, [r4, #20]
  40341c:	d401      	bmi.n	403422 <setvbuf+0xce>
  40341e:	0598      	lsls	r0, r3, #22
  403420:	d53e      	bpl.n	4034a0 <setvbuf+0x14c>
  403422:	4628      	mov	r0, r5
  403424:	b003      	add	sp, #12
  403426:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40342a:	6921      	ldr	r1, [r4, #16]
  40342c:	4628      	mov	r0, r5
  40342e:	f003 fcbf 	bl	406db0 <_free_r>
  403432:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403436:	e7bd      	b.n	4033b4 <setvbuf+0x60>
  403438:	4628      	mov	r0, r5
  40343a:	f003 fb93 	bl	406b64 <__sinit>
  40343e:	e796      	b.n	40336e <setvbuf+0x1a>
  403440:	2f00      	cmp	r7, #0
  403442:	d0cb      	beq.n	4033dc <setvbuf+0x88>
  403444:	6bab      	ldr	r3, [r5, #56]	; 0x38
  403446:	2b00      	cmp	r3, #0
  403448:	d033      	beq.n	4034b2 <setvbuf+0x15e>
  40344a:	9b00      	ldr	r3, [sp, #0]
  40344c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403450:	6027      	str	r7, [r4, #0]
  403452:	429e      	cmp	r6, r3
  403454:	bf1c      	itt	ne
  403456:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  40345a:	81a2      	strhne	r2, [r4, #12]
  40345c:	f1b8 0f01 	cmp.w	r8, #1
  403460:	bf04      	itt	eq
  403462:	f042 0201 	orreq.w	r2, r2, #1
  403466:	81a2      	strheq	r2, [r4, #12]
  403468:	b292      	uxth	r2, r2
  40346a:	f012 0308 	ands.w	r3, r2, #8
  40346e:	6127      	str	r7, [r4, #16]
  403470:	6166      	str	r6, [r4, #20]
  403472:	d00e      	beq.n	403492 <setvbuf+0x13e>
  403474:	07d1      	lsls	r1, r2, #31
  403476:	d51a      	bpl.n	4034ae <setvbuf+0x15a>
  403478:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40347a:	4276      	negs	r6, r6
  40347c:	2300      	movs	r3, #0
  40347e:	f015 0501 	ands.w	r5, r5, #1
  403482:	61a6      	str	r6, [r4, #24]
  403484:	60a3      	str	r3, [r4, #8]
  403486:	d009      	beq.n	40349c <setvbuf+0x148>
  403488:	2500      	movs	r5, #0
  40348a:	4628      	mov	r0, r5
  40348c:	b003      	add	sp, #12
  40348e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403492:	60a3      	str	r3, [r4, #8]
  403494:	6e65      	ldr	r5, [r4, #100]	; 0x64
  403496:	f015 0501 	ands.w	r5, r5, #1
  40349a:	d1f5      	bne.n	403488 <setvbuf+0x134>
  40349c:	0593      	lsls	r3, r2, #22
  40349e:	d4c0      	bmi.n	403422 <setvbuf+0xce>
  4034a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4034a2:	f003 ff2f 	bl	407304 <__retarget_lock_release_recursive>
  4034a6:	4628      	mov	r0, r5
  4034a8:	b003      	add	sp, #12
  4034aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4034ae:	60a6      	str	r6, [r4, #8]
  4034b0:	e7f0      	b.n	403494 <setvbuf+0x140>
  4034b2:	4628      	mov	r0, r5
  4034b4:	f003 fb56 	bl	406b64 <__sinit>
  4034b8:	e7c7      	b.n	40344a <setvbuf+0xf6>
  4034ba:	f04f 35ff 	mov.w	r5, #4294967295
  4034be:	e7b0      	b.n	403422 <setvbuf+0xce>
  4034c0:	f8dd 9000 	ldr.w	r9, [sp]
  4034c4:	45b1      	cmp	r9, r6
  4034c6:	d004      	beq.n	4034d2 <setvbuf+0x17e>
  4034c8:	4648      	mov	r0, r9
  4034ca:	f7ff fc17 	bl	402cfc <malloc>
  4034ce:	4607      	mov	r7, r0
  4034d0:	b920      	cbnz	r0, 4034dc <setvbuf+0x188>
  4034d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4034d6:	f04f 35ff 	mov.w	r5, #4294967295
  4034da:	e792      	b.n	403402 <setvbuf+0xae>
  4034dc:	464e      	mov	r6, r9
  4034de:	e783      	b.n	4033e8 <setvbuf+0x94>
  4034e0:	20400144 	.word	0x20400144

004034e4 <sprintf>:
  4034e4:	b40e      	push	{r1, r2, r3}
  4034e6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4034e8:	b09c      	sub	sp, #112	; 0x70
  4034ea:	ab21      	add	r3, sp, #132	; 0x84
  4034ec:	490f      	ldr	r1, [pc, #60]	; (40352c <sprintf+0x48>)
  4034ee:	f853 2b04 	ldr.w	r2, [r3], #4
  4034f2:	9301      	str	r3, [sp, #4]
  4034f4:	4605      	mov	r5, r0
  4034f6:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  4034fa:	6808      	ldr	r0, [r1, #0]
  4034fc:	9502      	str	r5, [sp, #8]
  4034fe:	f44f 7702 	mov.w	r7, #520	; 0x208
  403502:	f64f 76ff 	movw	r6, #65535	; 0xffff
  403506:	a902      	add	r1, sp, #8
  403508:	9506      	str	r5, [sp, #24]
  40350a:	f8ad 7014 	strh.w	r7, [sp, #20]
  40350e:	9404      	str	r4, [sp, #16]
  403510:	9407      	str	r4, [sp, #28]
  403512:	f8ad 6016 	strh.w	r6, [sp, #22]
  403516:	f000 f901 	bl	40371c <_svfprintf_r>
  40351a:	9b02      	ldr	r3, [sp, #8]
  40351c:	2200      	movs	r2, #0
  40351e:	701a      	strb	r2, [r3, #0]
  403520:	b01c      	add	sp, #112	; 0x70
  403522:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  403526:	b003      	add	sp, #12
  403528:	4770      	bx	lr
  40352a:	bf00      	nop
  40352c:	20400144 	.word	0x20400144

00403530 <strcat>:
  403530:	0783      	lsls	r3, r0, #30
  403532:	b510      	push	{r4, lr}
  403534:	4604      	mov	r4, r0
  403536:	d110      	bne.n	40355a <strcat+0x2a>
  403538:	6802      	ldr	r2, [r0, #0]
  40353a:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
  40353e:	ea23 0302 	bic.w	r3, r3, r2
  403542:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  403546:	d108      	bne.n	40355a <strcat+0x2a>
  403548:	f850 2f04 	ldr.w	r2, [r0, #4]!
  40354c:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
  403550:	ea23 0302 	bic.w	r3, r3, r2
  403554:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  403558:	d0f6      	beq.n	403548 <strcat+0x18>
  40355a:	7803      	ldrb	r3, [r0, #0]
  40355c:	b11b      	cbz	r3, 403566 <strcat+0x36>
  40355e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  403562:	2b00      	cmp	r3, #0
  403564:	d1fb      	bne.n	40355e <strcat+0x2e>
  403566:	f000 f803 	bl	403570 <strcpy>
  40356a:	4620      	mov	r0, r4
  40356c:	bd10      	pop	{r4, pc}
  40356e:	bf00      	nop

00403570 <strcpy>:
  403570:	ea80 0201 	eor.w	r2, r0, r1
  403574:	4684      	mov	ip, r0
  403576:	f012 0f03 	tst.w	r2, #3
  40357a:	d14f      	bne.n	40361c <strcpy+0xac>
  40357c:	f011 0f03 	tst.w	r1, #3
  403580:	d132      	bne.n	4035e8 <strcpy+0x78>
  403582:	f84d 4d04 	str.w	r4, [sp, #-4]!
  403586:	f011 0f04 	tst.w	r1, #4
  40358a:	f851 3b04 	ldr.w	r3, [r1], #4
  40358e:	d00b      	beq.n	4035a8 <strcpy+0x38>
  403590:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  403594:	439a      	bics	r2, r3
  403596:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40359a:	bf04      	itt	eq
  40359c:	f84c 3b04 	streq.w	r3, [ip], #4
  4035a0:	f851 3b04 	ldreq.w	r3, [r1], #4
  4035a4:	d116      	bne.n	4035d4 <strcpy+0x64>
  4035a6:	bf00      	nop
  4035a8:	f851 4b04 	ldr.w	r4, [r1], #4
  4035ac:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  4035b0:	439a      	bics	r2, r3
  4035b2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4035b6:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  4035ba:	d10b      	bne.n	4035d4 <strcpy+0x64>
  4035bc:	f84c 3b04 	str.w	r3, [ip], #4
  4035c0:	43a2      	bics	r2, r4
  4035c2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4035c6:	bf04      	itt	eq
  4035c8:	f851 3b04 	ldreq.w	r3, [r1], #4
  4035cc:	f84c 4b04 	streq.w	r4, [ip], #4
  4035d0:	d0ea      	beq.n	4035a8 <strcpy+0x38>
  4035d2:	4623      	mov	r3, r4
  4035d4:	f80c 3b01 	strb.w	r3, [ip], #1
  4035d8:	f013 0fff 	tst.w	r3, #255	; 0xff
  4035dc:	ea4f 2333 	mov.w	r3, r3, ror #8
  4035e0:	d1f8      	bne.n	4035d4 <strcpy+0x64>
  4035e2:	f85d 4b04 	ldr.w	r4, [sp], #4
  4035e6:	4770      	bx	lr
  4035e8:	f011 0f01 	tst.w	r1, #1
  4035ec:	d006      	beq.n	4035fc <strcpy+0x8c>
  4035ee:	f811 2b01 	ldrb.w	r2, [r1], #1
  4035f2:	f80c 2b01 	strb.w	r2, [ip], #1
  4035f6:	2a00      	cmp	r2, #0
  4035f8:	bf08      	it	eq
  4035fa:	4770      	bxeq	lr
  4035fc:	f011 0f02 	tst.w	r1, #2
  403600:	d0bf      	beq.n	403582 <strcpy+0x12>
  403602:	f831 2b02 	ldrh.w	r2, [r1], #2
  403606:	f012 0fff 	tst.w	r2, #255	; 0xff
  40360a:	bf16      	itet	ne
  40360c:	f82c 2b02 	strhne.w	r2, [ip], #2
  403610:	f88c 2000 	strbeq.w	r2, [ip]
  403614:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  403618:	d1b3      	bne.n	403582 <strcpy+0x12>
  40361a:	4770      	bx	lr
  40361c:	f811 2b01 	ldrb.w	r2, [r1], #1
  403620:	f80c 2b01 	strb.w	r2, [ip], #1
  403624:	2a00      	cmp	r2, #0
  403626:	d1f9      	bne.n	40361c <strcpy+0xac>
  403628:	4770      	bx	lr
  40362a:	bf00      	nop
	...

00403640 <strlen>:
  403640:	f890 f000 	pld	[r0]
  403644:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  403648:	f020 0107 	bic.w	r1, r0, #7
  40364c:	f06f 0c00 	mvn.w	ip, #0
  403650:	f010 0407 	ands.w	r4, r0, #7
  403654:	f891 f020 	pld	[r1, #32]
  403658:	f040 8049 	bne.w	4036ee <strlen+0xae>
  40365c:	f04f 0400 	mov.w	r4, #0
  403660:	f06f 0007 	mvn.w	r0, #7
  403664:	e9d1 2300 	ldrd	r2, r3, [r1]
  403668:	f891 f040 	pld	[r1, #64]	; 0x40
  40366c:	f100 0008 	add.w	r0, r0, #8
  403670:	fa82 f24c 	uadd8	r2, r2, ip
  403674:	faa4 f28c 	sel	r2, r4, ip
  403678:	fa83 f34c 	uadd8	r3, r3, ip
  40367c:	faa2 f38c 	sel	r3, r2, ip
  403680:	bb4b      	cbnz	r3, 4036d6 <strlen+0x96>
  403682:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  403686:	fa82 f24c 	uadd8	r2, r2, ip
  40368a:	f100 0008 	add.w	r0, r0, #8
  40368e:	faa4 f28c 	sel	r2, r4, ip
  403692:	fa83 f34c 	uadd8	r3, r3, ip
  403696:	faa2 f38c 	sel	r3, r2, ip
  40369a:	b9e3      	cbnz	r3, 4036d6 <strlen+0x96>
  40369c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4036a0:	fa82 f24c 	uadd8	r2, r2, ip
  4036a4:	f100 0008 	add.w	r0, r0, #8
  4036a8:	faa4 f28c 	sel	r2, r4, ip
  4036ac:	fa83 f34c 	uadd8	r3, r3, ip
  4036b0:	faa2 f38c 	sel	r3, r2, ip
  4036b4:	b97b      	cbnz	r3, 4036d6 <strlen+0x96>
  4036b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4036ba:	f101 0120 	add.w	r1, r1, #32
  4036be:	fa82 f24c 	uadd8	r2, r2, ip
  4036c2:	f100 0008 	add.w	r0, r0, #8
  4036c6:	faa4 f28c 	sel	r2, r4, ip
  4036ca:	fa83 f34c 	uadd8	r3, r3, ip
  4036ce:	faa2 f38c 	sel	r3, r2, ip
  4036d2:	2b00      	cmp	r3, #0
  4036d4:	d0c6      	beq.n	403664 <strlen+0x24>
  4036d6:	2a00      	cmp	r2, #0
  4036d8:	bf04      	itt	eq
  4036da:	3004      	addeq	r0, #4
  4036dc:	461a      	moveq	r2, r3
  4036de:	ba12      	rev	r2, r2
  4036e0:	fab2 f282 	clz	r2, r2
  4036e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4036e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4036ec:	4770      	bx	lr
  4036ee:	e9d1 2300 	ldrd	r2, r3, [r1]
  4036f2:	f004 0503 	and.w	r5, r4, #3
  4036f6:	f1c4 0000 	rsb	r0, r4, #0
  4036fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4036fe:	f014 0f04 	tst.w	r4, #4
  403702:	f891 f040 	pld	[r1, #64]	; 0x40
  403706:	fa0c f505 	lsl.w	r5, ip, r5
  40370a:	ea62 0205 	orn	r2, r2, r5
  40370e:	bf1c      	itt	ne
  403710:	ea63 0305 	ornne	r3, r3, r5
  403714:	4662      	movne	r2, ip
  403716:	f04f 0400 	mov.w	r4, #0
  40371a:	e7a9      	b.n	403670 <strlen+0x30>

0040371c <_svfprintf_r>:
  40371c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403720:	b0c3      	sub	sp, #268	; 0x10c
  403722:	460c      	mov	r4, r1
  403724:	910b      	str	r1, [sp, #44]	; 0x2c
  403726:	4692      	mov	sl, r2
  403728:	930f      	str	r3, [sp, #60]	; 0x3c
  40372a:	900c      	str	r0, [sp, #48]	; 0x30
  40372c:	f003 fdd6 	bl	4072dc <_localeconv_r>
  403730:	6803      	ldr	r3, [r0, #0]
  403732:	931a      	str	r3, [sp, #104]	; 0x68
  403734:	4618      	mov	r0, r3
  403736:	f7ff ff83 	bl	403640 <strlen>
  40373a:	89a3      	ldrh	r3, [r4, #12]
  40373c:	9019      	str	r0, [sp, #100]	; 0x64
  40373e:	0619      	lsls	r1, r3, #24
  403740:	d503      	bpl.n	40374a <_svfprintf_r+0x2e>
  403742:	6923      	ldr	r3, [r4, #16]
  403744:	2b00      	cmp	r3, #0
  403746:	f001 8003 	beq.w	404750 <_svfprintf_r+0x1034>
  40374a:	2300      	movs	r3, #0
  40374c:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  403750:	9313      	str	r3, [sp, #76]	; 0x4c
  403752:	9315      	str	r3, [sp, #84]	; 0x54
  403754:	9314      	str	r3, [sp, #80]	; 0x50
  403756:	9327      	str	r3, [sp, #156]	; 0x9c
  403758:	9326      	str	r3, [sp, #152]	; 0x98
  40375a:	9318      	str	r3, [sp, #96]	; 0x60
  40375c:	931b      	str	r3, [sp, #108]	; 0x6c
  40375e:	9309      	str	r3, [sp, #36]	; 0x24
  403760:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  403764:	46c8      	mov	r8, r9
  403766:	9316      	str	r3, [sp, #88]	; 0x58
  403768:	9317      	str	r3, [sp, #92]	; 0x5c
  40376a:	f89a 3000 	ldrb.w	r3, [sl]
  40376e:	4654      	mov	r4, sl
  403770:	b1e3      	cbz	r3, 4037ac <_svfprintf_r+0x90>
  403772:	2b25      	cmp	r3, #37	; 0x25
  403774:	d102      	bne.n	40377c <_svfprintf_r+0x60>
  403776:	e019      	b.n	4037ac <_svfprintf_r+0x90>
  403778:	2b25      	cmp	r3, #37	; 0x25
  40377a:	d003      	beq.n	403784 <_svfprintf_r+0x68>
  40377c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  403780:	2b00      	cmp	r3, #0
  403782:	d1f9      	bne.n	403778 <_svfprintf_r+0x5c>
  403784:	eba4 050a 	sub.w	r5, r4, sl
  403788:	b185      	cbz	r5, 4037ac <_svfprintf_r+0x90>
  40378a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40378c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40378e:	f8c8 a000 	str.w	sl, [r8]
  403792:	3301      	adds	r3, #1
  403794:	442a      	add	r2, r5
  403796:	2b07      	cmp	r3, #7
  403798:	f8c8 5004 	str.w	r5, [r8, #4]
  40379c:	9227      	str	r2, [sp, #156]	; 0x9c
  40379e:	9326      	str	r3, [sp, #152]	; 0x98
  4037a0:	dc7f      	bgt.n	4038a2 <_svfprintf_r+0x186>
  4037a2:	f108 0808 	add.w	r8, r8, #8
  4037a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4037a8:	442b      	add	r3, r5
  4037aa:	9309      	str	r3, [sp, #36]	; 0x24
  4037ac:	7823      	ldrb	r3, [r4, #0]
  4037ae:	2b00      	cmp	r3, #0
  4037b0:	d07f      	beq.n	4038b2 <_svfprintf_r+0x196>
  4037b2:	2300      	movs	r3, #0
  4037b4:	461a      	mov	r2, r3
  4037b6:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4037ba:	4619      	mov	r1, r3
  4037bc:	930d      	str	r3, [sp, #52]	; 0x34
  4037be:	469b      	mov	fp, r3
  4037c0:	f04f 30ff 	mov.w	r0, #4294967295
  4037c4:	7863      	ldrb	r3, [r4, #1]
  4037c6:	900a      	str	r0, [sp, #40]	; 0x28
  4037c8:	f104 0a01 	add.w	sl, r4, #1
  4037cc:	f10a 0a01 	add.w	sl, sl, #1
  4037d0:	f1a3 0020 	sub.w	r0, r3, #32
  4037d4:	2858      	cmp	r0, #88	; 0x58
  4037d6:	f200 83c1 	bhi.w	403f5c <_svfprintf_r+0x840>
  4037da:	e8df f010 	tbh	[pc, r0, lsl #1]
  4037de:	0238      	.short	0x0238
  4037e0:	03bf03bf 	.word	0x03bf03bf
  4037e4:	03bf0240 	.word	0x03bf0240
  4037e8:	03bf03bf 	.word	0x03bf03bf
  4037ec:	03bf03bf 	.word	0x03bf03bf
  4037f0:	024503bf 	.word	0x024503bf
  4037f4:	03bf0203 	.word	0x03bf0203
  4037f8:	026b005d 	.word	0x026b005d
  4037fc:	028603bf 	.word	0x028603bf
  403800:	039d039d 	.word	0x039d039d
  403804:	039d039d 	.word	0x039d039d
  403808:	039d039d 	.word	0x039d039d
  40380c:	039d039d 	.word	0x039d039d
  403810:	03bf039d 	.word	0x03bf039d
  403814:	03bf03bf 	.word	0x03bf03bf
  403818:	03bf03bf 	.word	0x03bf03bf
  40381c:	03bf03bf 	.word	0x03bf03bf
  403820:	03bf03bf 	.word	0x03bf03bf
  403824:	033703bf 	.word	0x033703bf
  403828:	03bf0357 	.word	0x03bf0357
  40382c:	03bf0357 	.word	0x03bf0357
  403830:	03bf03bf 	.word	0x03bf03bf
  403834:	039803bf 	.word	0x039803bf
  403838:	03bf03bf 	.word	0x03bf03bf
  40383c:	03bf03ad 	.word	0x03bf03ad
  403840:	03bf03bf 	.word	0x03bf03bf
  403844:	03bf03bf 	.word	0x03bf03bf
  403848:	03bf0259 	.word	0x03bf0259
  40384c:	031e03bf 	.word	0x031e03bf
  403850:	03bf03bf 	.word	0x03bf03bf
  403854:	03bf03bf 	.word	0x03bf03bf
  403858:	03bf03bf 	.word	0x03bf03bf
  40385c:	03bf03bf 	.word	0x03bf03bf
  403860:	03bf03bf 	.word	0x03bf03bf
  403864:	02db02c6 	.word	0x02db02c6
  403868:	03570357 	.word	0x03570357
  40386c:	028b0357 	.word	0x028b0357
  403870:	03bf02db 	.word	0x03bf02db
  403874:	029003bf 	.word	0x029003bf
  403878:	029d03bf 	.word	0x029d03bf
  40387c:	02b401cc 	.word	0x02b401cc
  403880:	03bf0208 	.word	0x03bf0208
  403884:	03bf01e1 	.word	0x03bf01e1
  403888:	03bf007e 	.word	0x03bf007e
  40388c:	020d03bf 	.word	0x020d03bf
  403890:	980d      	ldr	r0, [sp, #52]	; 0x34
  403892:	930f      	str	r3, [sp, #60]	; 0x3c
  403894:	4240      	negs	r0, r0
  403896:	900d      	str	r0, [sp, #52]	; 0x34
  403898:	f04b 0b04 	orr.w	fp, fp, #4
  40389c:	f89a 3000 	ldrb.w	r3, [sl]
  4038a0:	e794      	b.n	4037cc <_svfprintf_r+0xb0>
  4038a2:	aa25      	add	r2, sp, #148	; 0x94
  4038a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4038a6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4038a8:	f004 fbf4 	bl	408094 <__ssprint_r>
  4038ac:	b940      	cbnz	r0, 4038c0 <_svfprintf_r+0x1a4>
  4038ae:	46c8      	mov	r8, r9
  4038b0:	e779      	b.n	4037a6 <_svfprintf_r+0x8a>
  4038b2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4038b4:	b123      	cbz	r3, 4038c0 <_svfprintf_r+0x1a4>
  4038b6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4038b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4038ba:	aa25      	add	r2, sp, #148	; 0x94
  4038bc:	f004 fbea 	bl	408094 <__ssprint_r>
  4038c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4038c2:	899b      	ldrh	r3, [r3, #12]
  4038c4:	f013 0f40 	tst.w	r3, #64	; 0x40
  4038c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4038ca:	bf18      	it	ne
  4038cc:	f04f 33ff 	movne.w	r3, #4294967295
  4038d0:	9309      	str	r3, [sp, #36]	; 0x24
  4038d2:	9809      	ldr	r0, [sp, #36]	; 0x24
  4038d4:	b043      	add	sp, #268	; 0x10c
  4038d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4038da:	f01b 0f20 	tst.w	fp, #32
  4038de:	9311      	str	r3, [sp, #68]	; 0x44
  4038e0:	f040 81dd 	bne.w	403c9e <_svfprintf_r+0x582>
  4038e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4038e6:	f01b 0f10 	tst.w	fp, #16
  4038ea:	4613      	mov	r3, r2
  4038ec:	f040 856e 	bne.w	4043cc <_svfprintf_r+0xcb0>
  4038f0:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4038f4:	f000 856a 	beq.w	4043cc <_svfprintf_r+0xcb0>
  4038f8:	8814      	ldrh	r4, [r2, #0]
  4038fa:	3204      	adds	r2, #4
  4038fc:	2500      	movs	r5, #0
  4038fe:	2301      	movs	r3, #1
  403900:	920f      	str	r2, [sp, #60]	; 0x3c
  403902:	2700      	movs	r7, #0
  403904:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  403908:	990a      	ldr	r1, [sp, #40]	; 0x28
  40390a:	1c4a      	adds	r2, r1, #1
  40390c:	f000 8265 	beq.w	403dda <_svfprintf_r+0x6be>
  403910:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  403914:	9207      	str	r2, [sp, #28]
  403916:	ea54 0205 	orrs.w	r2, r4, r5
  40391a:	f040 8264 	bne.w	403de6 <_svfprintf_r+0x6ca>
  40391e:	2900      	cmp	r1, #0
  403920:	f040 843c 	bne.w	40419c <_svfprintf_r+0xa80>
  403924:	2b00      	cmp	r3, #0
  403926:	f040 84d7 	bne.w	4042d8 <_svfprintf_r+0xbbc>
  40392a:	f01b 0301 	ands.w	r3, fp, #1
  40392e:	930e      	str	r3, [sp, #56]	; 0x38
  403930:	f000 8604 	beq.w	40453c <_svfprintf_r+0xe20>
  403934:	ae42      	add	r6, sp, #264	; 0x108
  403936:	2330      	movs	r3, #48	; 0x30
  403938:	f806 3d41 	strb.w	r3, [r6, #-65]!
  40393c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40393e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403940:	4293      	cmp	r3, r2
  403942:	bfb8      	it	lt
  403944:	4613      	movlt	r3, r2
  403946:	9308      	str	r3, [sp, #32]
  403948:	2300      	movs	r3, #0
  40394a:	9312      	str	r3, [sp, #72]	; 0x48
  40394c:	b117      	cbz	r7, 403954 <_svfprintf_r+0x238>
  40394e:	9b08      	ldr	r3, [sp, #32]
  403950:	3301      	adds	r3, #1
  403952:	9308      	str	r3, [sp, #32]
  403954:	9b07      	ldr	r3, [sp, #28]
  403956:	f013 0302 	ands.w	r3, r3, #2
  40395a:	9310      	str	r3, [sp, #64]	; 0x40
  40395c:	d002      	beq.n	403964 <_svfprintf_r+0x248>
  40395e:	9b08      	ldr	r3, [sp, #32]
  403960:	3302      	adds	r3, #2
  403962:	9308      	str	r3, [sp, #32]
  403964:	9b07      	ldr	r3, [sp, #28]
  403966:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  40396a:	f040 830e 	bne.w	403f8a <_svfprintf_r+0x86e>
  40396e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403970:	9a08      	ldr	r2, [sp, #32]
  403972:	eba3 0b02 	sub.w	fp, r3, r2
  403976:	f1bb 0f00 	cmp.w	fp, #0
  40397a:	f340 8306 	ble.w	403f8a <_svfprintf_r+0x86e>
  40397e:	f1bb 0f10 	cmp.w	fp, #16
  403982:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403984:	9a26      	ldr	r2, [sp, #152]	; 0x98
  403986:	dd29      	ble.n	4039dc <_svfprintf_r+0x2c0>
  403988:	4643      	mov	r3, r8
  40398a:	4621      	mov	r1, r4
  40398c:	46a8      	mov	r8, r5
  40398e:	2710      	movs	r7, #16
  403990:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403992:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  403994:	e006      	b.n	4039a4 <_svfprintf_r+0x288>
  403996:	f1ab 0b10 	sub.w	fp, fp, #16
  40399a:	f1bb 0f10 	cmp.w	fp, #16
  40399e:	f103 0308 	add.w	r3, r3, #8
  4039a2:	dd18      	ble.n	4039d6 <_svfprintf_r+0x2ba>
  4039a4:	3201      	adds	r2, #1
  4039a6:	48b7      	ldr	r0, [pc, #732]	; (403c84 <_svfprintf_r+0x568>)
  4039a8:	9226      	str	r2, [sp, #152]	; 0x98
  4039aa:	3110      	adds	r1, #16
  4039ac:	2a07      	cmp	r2, #7
  4039ae:	9127      	str	r1, [sp, #156]	; 0x9c
  4039b0:	e883 0081 	stmia.w	r3, {r0, r7}
  4039b4:	ddef      	ble.n	403996 <_svfprintf_r+0x27a>
  4039b6:	aa25      	add	r2, sp, #148	; 0x94
  4039b8:	4629      	mov	r1, r5
  4039ba:	4620      	mov	r0, r4
  4039bc:	f004 fb6a 	bl	408094 <__ssprint_r>
  4039c0:	2800      	cmp	r0, #0
  4039c2:	f47f af7d 	bne.w	4038c0 <_svfprintf_r+0x1a4>
  4039c6:	f1ab 0b10 	sub.w	fp, fp, #16
  4039ca:	f1bb 0f10 	cmp.w	fp, #16
  4039ce:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4039d0:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4039d2:	464b      	mov	r3, r9
  4039d4:	dce6      	bgt.n	4039a4 <_svfprintf_r+0x288>
  4039d6:	4645      	mov	r5, r8
  4039d8:	460c      	mov	r4, r1
  4039da:	4698      	mov	r8, r3
  4039dc:	3201      	adds	r2, #1
  4039de:	4ba9      	ldr	r3, [pc, #676]	; (403c84 <_svfprintf_r+0x568>)
  4039e0:	9226      	str	r2, [sp, #152]	; 0x98
  4039e2:	445c      	add	r4, fp
  4039e4:	2a07      	cmp	r2, #7
  4039e6:	9427      	str	r4, [sp, #156]	; 0x9c
  4039e8:	e888 0808 	stmia.w	r8, {r3, fp}
  4039ec:	f300 8498 	bgt.w	404320 <_svfprintf_r+0xc04>
  4039f0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4039f4:	f108 0808 	add.w	r8, r8, #8
  4039f8:	b177      	cbz	r7, 403a18 <_svfprintf_r+0x2fc>
  4039fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4039fc:	3301      	adds	r3, #1
  4039fe:	3401      	adds	r4, #1
  403a00:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  403a04:	2201      	movs	r2, #1
  403a06:	2b07      	cmp	r3, #7
  403a08:	9427      	str	r4, [sp, #156]	; 0x9c
  403a0a:	9326      	str	r3, [sp, #152]	; 0x98
  403a0c:	e888 0006 	stmia.w	r8, {r1, r2}
  403a10:	f300 83db 	bgt.w	4041ca <_svfprintf_r+0xaae>
  403a14:	f108 0808 	add.w	r8, r8, #8
  403a18:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403a1a:	b16b      	cbz	r3, 403a38 <_svfprintf_r+0x31c>
  403a1c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403a1e:	3301      	adds	r3, #1
  403a20:	3402      	adds	r4, #2
  403a22:	a91e      	add	r1, sp, #120	; 0x78
  403a24:	2202      	movs	r2, #2
  403a26:	2b07      	cmp	r3, #7
  403a28:	9427      	str	r4, [sp, #156]	; 0x9c
  403a2a:	9326      	str	r3, [sp, #152]	; 0x98
  403a2c:	e888 0006 	stmia.w	r8, {r1, r2}
  403a30:	f300 83d6 	bgt.w	4041e0 <_svfprintf_r+0xac4>
  403a34:	f108 0808 	add.w	r8, r8, #8
  403a38:	2d80      	cmp	r5, #128	; 0x80
  403a3a:	f000 8315 	beq.w	404068 <_svfprintf_r+0x94c>
  403a3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403a40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403a42:	1a9f      	subs	r7, r3, r2
  403a44:	2f00      	cmp	r7, #0
  403a46:	dd36      	ble.n	403ab6 <_svfprintf_r+0x39a>
  403a48:	2f10      	cmp	r7, #16
  403a4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403a4c:	4d8e      	ldr	r5, [pc, #568]	; (403c88 <_svfprintf_r+0x56c>)
  403a4e:	dd27      	ble.n	403aa0 <_svfprintf_r+0x384>
  403a50:	4642      	mov	r2, r8
  403a52:	4621      	mov	r1, r4
  403a54:	46b0      	mov	r8, r6
  403a56:	f04f 0b10 	mov.w	fp, #16
  403a5a:	462e      	mov	r6, r5
  403a5c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403a5e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  403a60:	e004      	b.n	403a6c <_svfprintf_r+0x350>
  403a62:	3f10      	subs	r7, #16
  403a64:	2f10      	cmp	r7, #16
  403a66:	f102 0208 	add.w	r2, r2, #8
  403a6a:	dd15      	ble.n	403a98 <_svfprintf_r+0x37c>
  403a6c:	3301      	adds	r3, #1
  403a6e:	3110      	adds	r1, #16
  403a70:	2b07      	cmp	r3, #7
  403a72:	9127      	str	r1, [sp, #156]	; 0x9c
  403a74:	9326      	str	r3, [sp, #152]	; 0x98
  403a76:	e882 0840 	stmia.w	r2, {r6, fp}
  403a7a:	ddf2      	ble.n	403a62 <_svfprintf_r+0x346>
  403a7c:	aa25      	add	r2, sp, #148	; 0x94
  403a7e:	4629      	mov	r1, r5
  403a80:	4620      	mov	r0, r4
  403a82:	f004 fb07 	bl	408094 <__ssprint_r>
  403a86:	2800      	cmp	r0, #0
  403a88:	f47f af1a 	bne.w	4038c0 <_svfprintf_r+0x1a4>
  403a8c:	3f10      	subs	r7, #16
  403a8e:	2f10      	cmp	r7, #16
  403a90:	9927      	ldr	r1, [sp, #156]	; 0x9c
  403a92:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403a94:	464a      	mov	r2, r9
  403a96:	dce9      	bgt.n	403a6c <_svfprintf_r+0x350>
  403a98:	4635      	mov	r5, r6
  403a9a:	460c      	mov	r4, r1
  403a9c:	4646      	mov	r6, r8
  403a9e:	4690      	mov	r8, r2
  403aa0:	3301      	adds	r3, #1
  403aa2:	443c      	add	r4, r7
  403aa4:	2b07      	cmp	r3, #7
  403aa6:	9427      	str	r4, [sp, #156]	; 0x9c
  403aa8:	9326      	str	r3, [sp, #152]	; 0x98
  403aaa:	e888 00a0 	stmia.w	r8, {r5, r7}
  403aae:	f300 8381 	bgt.w	4041b4 <_svfprintf_r+0xa98>
  403ab2:	f108 0808 	add.w	r8, r8, #8
  403ab6:	9b07      	ldr	r3, [sp, #28]
  403ab8:	05df      	lsls	r7, r3, #23
  403aba:	f100 8268 	bmi.w	403f8e <_svfprintf_r+0x872>
  403abe:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403ac0:	990e      	ldr	r1, [sp, #56]	; 0x38
  403ac2:	f8c8 6000 	str.w	r6, [r8]
  403ac6:	3301      	adds	r3, #1
  403ac8:	440c      	add	r4, r1
  403aca:	2b07      	cmp	r3, #7
  403acc:	9427      	str	r4, [sp, #156]	; 0x9c
  403ace:	f8c8 1004 	str.w	r1, [r8, #4]
  403ad2:	9326      	str	r3, [sp, #152]	; 0x98
  403ad4:	f300 834d 	bgt.w	404172 <_svfprintf_r+0xa56>
  403ad8:	f108 0808 	add.w	r8, r8, #8
  403adc:	9b07      	ldr	r3, [sp, #28]
  403ade:	075b      	lsls	r3, r3, #29
  403ae0:	d53a      	bpl.n	403b58 <_svfprintf_r+0x43c>
  403ae2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403ae4:	9a08      	ldr	r2, [sp, #32]
  403ae6:	1a9d      	subs	r5, r3, r2
  403ae8:	2d00      	cmp	r5, #0
  403aea:	dd35      	ble.n	403b58 <_svfprintf_r+0x43c>
  403aec:	2d10      	cmp	r5, #16
  403aee:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403af0:	dd20      	ble.n	403b34 <_svfprintf_r+0x418>
  403af2:	2610      	movs	r6, #16
  403af4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  403af6:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  403afa:	e004      	b.n	403b06 <_svfprintf_r+0x3ea>
  403afc:	3d10      	subs	r5, #16
  403afe:	2d10      	cmp	r5, #16
  403b00:	f108 0808 	add.w	r8, r8, #8
  403b04:	dd16      	ble.n	403b34 <_svfprintf_r+0x418>
  403b06:	3301      	adds	r3, #1
  403b08:	4a5e      	ldr	r2, [pc, #376]	; (403c84 <_svfprintf_r+0x568>)
  403b0a:	9326      	str	r3, [sp, #152]	; 0x98
  403b0c:	3410      	adds	r4, #16
  403b0e:	2b07      	cmp	r3, #7
  403b10:	9427      	str	r4, [sp, #156]	; 0x9c
  403b12:	e888 0044 	stmia.w	r8, {r2, r6}
  403b16:	ddf1      	ble.n	403afc <_svfprintf_r+0x3e0>
  403b18:	aa25      	add	r2, sp, #148	; 0x94
  403b1a:	4659      	mov	r1, fp
  403b1c:	4638      	mov	r0, r7
  403b1e:	f004 fab9 	bl	408094 <__ssprint_r>
  403b22:	2800      	cmp	r0, #0
  403b24:	f47f aecc 	bne.w	4038c0 <_svfprintf_r+0x1a4>
  403b28:	3d10      	subs	r5, #16
  403b2a:	2d10      	cmp	r5, #16
  403b2c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403b2e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403b30:	46c8      	mov	r8, r9
  403b32:	dce8      	bgt.n	403b06 <_svfprintf_r+0x3ea>
  403b34:	3301      	adds	r3, #1
  403b36:	4a53      	ldr	r2, [pc, #332]	; (403c84 <_svfprintf_r+0x568>)
  403b38:	9326      	str	r3, [sp, #152]	; 0x98
  403b3a:	442c      	add	r4, r5
  403b3c:	2b07      	cmp	r3, #7
  403b3e:	9427      	str	r4, [sp, #156]	; 0x9c
  403b40:	e888 0024 	stmia.w	r8, {r2, r5}
  403b44:	dd08      	ble.n	403b58 <_svfprintf_r+0x43c>
  403b46:	aa25      	add	r2, sp, #148	; 0x94
  403b48:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403b4a:	980c      	ldr	r0, [sp, #48]	; 0x30
  403b4c:	f004 faa2 	bl	408094 <__ssprint_r>
  403b50:	2800      	cmp	r0, #0
  403b52:	f47f aeb5 	bne.w	4038c0 <_svfprintf_r+0x1a4>
  403b56:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403b58:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403b5a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  403b5c:	9908      	ldr	r1, [sp, #32]
  403b5e:	428a      	cmp	r2, r1
  403b60:	bfac      	ite	ge
  403b62:	189b      	addge	r3, r3, r2
  403b64:	185b      	addlt	r3, r3, r1
  403b66:	9309      	str	r3, [sp, #36]	; 0x24
  403b68:	2c00      	cmp	r4, #0
  403b6a:	f040 830d 	bne.w	404188 <_svfprintf_r+0xa6c>
  403b6e:	2300      	movs	r3, #0
  403b70:	9326      	str	r3, [sp, #152]	; 0x98
  403b72:	46c8      	mov	r8, r9
  403b74:	e5f9      	b.n	40376a <_svfprintf_r+0x4e>
  403b76:	9311      	str	r3, [sp, #68]	; 0x44
  403b78:	f01b 0320 	ands.w	r3, fp, #32
  403b7c:	f040 81e3 	bne.w	403f46 <_svfprintf_r+0x82a>
  403b80:	f01b 0210 	ands.w	r2, fp, #16
  403b84:	f040 842e 	bne.w	4043e4 <_svfprintf_r+0xcc8>
  403b88:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  403b8c:	f000 842a 	beq.w	4043e4 <_svfprintf_r+0xcc8>
  403b90:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403b92:	4613      	mov	r3, r2
  403b94:	460a      	mov	r2, r1
  403b96:	3204      	adds	r2, #4
  403b98:	880c      	ldrh	r4, [r1, #0]
  403b9a:	920f      	str	r2, [sp, #60]	; 0x3c
  403b9c:	2500      	movs	r5, #0
  403b9e:	e6b0      	b.n	403902 <_svfprintf_r+0x1e6>
  403ba0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403ba2:	9311      	str	r3, [sp, #68]	; 0x44
  403ba4:	6816      	ldr	r6, [r2, #0]
  403ba6:	2400      	movs	r4, #0
  403ba8:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  403bac:	1d15      	adds	r5, r2, #4
  403bae:	2e00      	cmp	r6, #0
  403bb0:	f000 86a7 	beq.w	404902 <_svfprintf_r+0x11e6>
  403bb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403bb6:	1c53      	adds	r3, r2, #1
  403bb8:	f000 8609 	beq.w	4047ce <_svfprintf_r+0x10b2>
  403bbc:	4621      	mov	r1, r4
  403bbe:	4630      	mov	r0, r6
  403bc0:	f003 fc36 	bl	407430 <memchr>
  403bc4:	2800      	cmp	r0, #0
  403bc6:	f000 86e1 	beq.w	40498c <_svfprintf_r+0x1270>
  403bca:	1b83      	subs	r3, r0, r6
  403bcc:	930e      	str	r3, [sp, #56]	; 0x38
  403bce:	940a      	str	r4, [sp, #40]	; 0x28
  403bd0:	950f      	str	r5, [sp, #60]	; 0x3c
  403bd2:	f8cd b01c 	str.w	fp, [sp, #28]
  403bd6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403bda:	9308      	str	r3, [sp, #32]
  403bdc:	9412      	str	r4, [sp, #72]	; 0x48
  403bde:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403be2:	e6b3      	b.n	40394c <_svfprintf_r+0x230>
  403be4:	f89a 3000 	ldrb.w	r3, [sl]
  403be8:	2201      	movs	r2, #1
  403bea:	212b      	movs	r1, #43	; 0x2b
  403bec:	e5ee      	b.n	4037cc <_svfprintf_r+0xb0>
  403bee:	f04b 0b20 	orr.w	fp, fp, #32
  403bf2:	f89a 3000 	ldrb.w	r3, [sl]
  403bf6:	e5e9      	b.n	4037cc <_svfprintf_r+0xb0>
  403bf8:	9311      	str	r3, [sp, #68]	; 0x44
  403bfa:	2a00      	cmp	r2, #0
  403bfc:	f040 8795 	bne.w	404b2a <_svfprintf_r+0x140e>
  403c00:	4b22      	ldr	r3, [pc, #136]	; (403c8c <_svfprintf_r+0x570>)
  403c02:	9318      	str	r3, [sp, #96]	; 0x60
  403c04:	f01b 0f20 	tst.w	fp, #32
  403c08:	f040 8111 	bne.w	403e2e <_svfprintf_r+0x712>
  403c0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403c0e:	f01b 0f10 	tst.w	fp, #16
  403c12:	4613      	mov	r3, r2
  403c14:	f040 83e1 	bne.w	4043da <_svfprintf_r+0xcbe>
  403c18:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403c1c:	f000 83dd 	beq.w	4043da <_svfprintf_r+0xcbe>
  403c20:	3304      	adds	r3, #4
  403c22:	8814      	ldrh	r4, [r2, #0]
  403c24:	930f      	str	r3, [sp, #60]	; 0x3c
  403c26:	2500      	movs	r5, #0
  403c28:	f01b 0f01 	tst.w	fp, #1
  403c2c:	f000 810c 	beq.w	403e48 <_svfprintf_r+0x72c>
  403c30:	ea54 0305 	orrs.w	r3, r4, r5
  403c34:	f000 8108 	beq.w	403e48 <_svfprintf_r+0x72c>
  403c38:	2330      	movs	r3, #48	; 0x30
  403c3a:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  403c3e:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  403c42:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  403c46:	f04b 0b02 	orr.w	fp, fp, #2
  403c4a:	2302      	movs	r3, #2
  403c4c:	e659      	b.n	403902 <_svfprintf_r+0x1e6>
  403c4e:	f89a 3000 	ldrb.w	r3, [sl]
  403c52:	2900      	cmp	r1, #0
  403c54:	f47f adba 	bne.w	4037cc <_svfprintf_r+0xb0>
  403c58:	2201      	movs	r2, #1
  403c5a:	2120      	movs	r1, #32
  403c5c:	e5b6      	b.n	4037cc <_svfprintf_r+0xb0>
  403c5e:	f04b 0b01 	orr.w	fp, fp, #1
  403c62:	f89a 3000 	ldrb.w	r3, [sl]
  403c66:	e5b1      	b.n	4037cc <_svfprintf_r+0xb0>
  403c68:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  403c6a:	6823      	ldr	r3, [r4, #0]
  403c6c:	930d      	str	r3, [sp, #52]	; 0x34
  403c6e:	4618      	mov	r0, r3
  403c70:	2800      	cmp	r0, #0
  403c72:	4623      	mov	r3, r4
  403c74:	f103 0304 	add.w	r3, r3, #4
  403c78:	f6ff ae0a 	blt.w	403890 <_svfprintf_r+0x174>
  403c7c:	930f      	str	r3, [sp, #60]	; 0x3c
  403c7e:	f89a 3000 	ldrb.w	r3, [sl]
  403c82:	e5a3      	b.n	4037cc <_svfprintf_r+0xb0>
  403c84:	00409a7c 	.word	0x00409a7c
  403c88:	00409a8c 	.word	0x00409a8c
  403c8c:	00409a5c 	.word	0x00409a5c
  403c90:	f04b 0b10 	orr.w	fp, fp, #16
  403c94:	f01b 0f20 	tst.w	fp, #32
  403c98:	9311      	str	r3, [sp, #68]	; 0x44
  403c9a:	f43f ae23 	beq.w	4038e4 <_svfprintf_r+0x1c8>
  403c9e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403ca0:	3507      	adds	r5, #7
  403ca2:	f025 0307 	bic.w	r3, r5, #7
  403ca6:	f103 0208 	add.w	r2, r3, #8
  403caa:	e9d3 4500 	ldrd	r4, r5, [r3]
  403cae:	920f      	str	r2, [sp, #60]	; 0x3c
  403cb0:	2301      	movs	r3, #1
  403cb2:	e626      	b.n	403902 <_svfprintf_r+0x1e6>
  403cb4:	f89a 3000 	ldrb.w	r3, [sl]
  403cb8:	2b2a      	cmp	r3, #42	; 0x2a
  403cba:	f10a 0401 	add.w	r4, sl, #1
  403cbe:	f000 8727 	beq.w	404b10 <_svfprintf_r+0x13f4>
  403cc2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403cc6:	2809      	cmp	r0, #9
  403cc8:	46a2      	mov	sl, r4
  403cca:	f200 86ad 	bhi.w	404a28 <_svfprintf_r+0x130c>
  403cce:	2300      	movs	r3, #0
  403cd0:	461c      	mov	r4, r3
  403cd2:	f81a 3b01 	ldrb.w	r3, [sl], #1
  403cd6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  403cda:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  403cde:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403ce2:	2809      	cmp	r0, #9
  403ce4:	d9f5      	bls.n	403cd2 <_svfprintf_r+0x5b6>
  403ce6:	940a      	str	r4, [sp, #40]	; 0x28
  403ce8:	e572      	b.n	4037d0 <_svfprintf_r+0xb4>
  403cea:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  403cee:	f89a 3000 	ldrb.w	r3, [sl]
  403cf2:	e56b      	b.n	4037cc <_svfprintf_r+0xb0>
  403cf4:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  403cf8:	f89a 3000 	ldrb.w	r3, [sl]
  403cfc:	e566      	b.n	4037cc <_svfprintf_r+0xb0>
  403cfe:	f89a 3000 	ldrb.w	r3, [sl]
  403d02:	2b6c      	cmp	r3, #108	; 0x6c
  403d04:	bf03      	ittte	eq
  403d06:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  403d0a:	f04b 0b20 	orreq.w	fp, fp, #32
  403d0e:	f10a 0a01 	addeq.w	sl, sl, #1
  403d12:	f04b 0b10 	orrne.w	fp, fp, #16
  403d16:	e559      	b.n	4037cc <_svfprintf_r+0xb0>
  403d18:	2a00      	cmp	r2, #0
  403d1a:	f040 8711 	bne.w	404b40 <_svfprintf_r+0x1424>
  403d1e:	f01b 0f20 	tst.w	fp, #32
  403d22:	f040 84f9 	bne.w	404718 <_svfprintf_r+0xffc>
  403d26:	f01b 0f10 	tst.w	fp, #16
  403d2a:	f040 84ac 	bne.w	404686 <_svfprintf_r+0xf6a>
  403d2e:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403d32:	f000 84a8 	beq.w	404686 <_svfprintf_r+0xf6a>
  403d36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403d38:	6813      	ldr	r3, [r2, #0]
  403d3a:	3204      	adds	r2, #4
  403d3c:	920f      	str	r2, [sp, #60]	; 0x3c
  403d3e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  403d42:	801a      	strh	r2, [r3, #0]
  403d44:	e511      	b.n	40376a <_svfprintf_r+0x4e>
  403d46:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403d48:	4bb3      	ldr	r3, [pc, #716]	; (404018 <_svfprintf_r+0x8fc>)
  403d4a:	680c      	ldr	r4, [r1, #0]
  403d4c:	9318      	str	r3, [sp, #96]	; 0x60
  403d4e:	2230      	movs	r2, #48	; 0x30
  403d50:	2378      	movs	r3, #120	; 0x78
  403d52:	3104      	adds	r1, #4
  403d54:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  403d58:	9311      	str	r3, [sp, #68]	; 0x44
  403d5a:	f04b 0b02 	orr.w	fp, fp, #2
  403d5e:	910f      	str	r1, [sp, #60]	; 0x3c
  403d60:	2500      	movs	r5, #0
  403d62:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  403d66:	2302      	movs	r3, #2
  403d68:	e5cb      	b.n	403902 <_svfprintf_r+0x1e6>
  403d6a:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403d6c:	9311      	str	r3, [sp, #68]	; 0x44
  403d6e:	680a      	ldr	r2, [r1, #0]
  403d70:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  403d74:	2300      	movs	r3, #0
  403d76:	460a      	mov	r2, r1
  403d78:	461f      	mov	r7, r3
  403d7a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403d7e:	3204      	adds	r2, #4
  403d80:	2301      	movs	r3, #1
  403d82:	9308      	str	r3, [sp, #32]
  403d84:	f8cd b01c 	str.w	fp, [sp, #28]
  403d88:	970a      	str	r7, [sp, #40]	; 0x28
  403d8a:	9712      	str	r7, [sp, #72]	; 0x48
  403d8c:	920f      	str	r2, [sp, #60]	; 0x3c
  403d8e:	930e      	str	r3, [sp, #56]	; 0x38
  403d90:	ae28      	add	r6, sp, #160	; 0xa0
  403d92:	e5df      	b.n	403954 <_svfprintf_r+0x238>
  403d94:	9311      	str	r3, [sp, #68]	; 0x44
  403d96:	2a00      	cmp	r2, #0
  403d98:	f040 86ea 	bne.w	404b70 <_svfprintf_r+0x1454>
  403d9c:	f01b 0f20 	tst.w	fp, #32
  403da0:	d15d      	bne.n	403e5e <_svfprintf_r+0x742>
  403da2:	f01b 0f10 	tst.w	fp, #16
  403da6:	f040 8308 	bne.w	4043ba <_svfprintf_r+0xc9e>
  403daa:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403dae:	f000 8304 	beq.w	4043ba <_svfprintf_r+0xc9e>
  403db2:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403db4:	f9b1 4000 	ldrsh.w	r4, [r1]
  403db8:	3104      	adds	r1, #4
  403dba:	17e5      	asrs	r5, r4, #31
  403dbc:	4622      	mov	r2, r4
  403dbe:	462b      	mov	r3, r5
  403dc0:	910f      	str	r1, [sp, #60]	; 0x3c
  403dc2:	2a00      	cmp	r2, #0
  403dc4:	f173 0300 	sbcs.w	r3, r3, #0
  403dc8:	db58      	blt.n	403e7c <_svfprintf_r+0x760>
  403dca:	990a      	ldr	r1, [sp, #40]	; 0x28
  403dcc:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403dd0:	1c4a      	adds	r2, r1, #1
  403dd2:	f04f 0301 	mov.w	r3, #1
  403dd6:	f47f ad9b 	bne.w	403910 <_svfprintf_r+0x1f4>
  403dda:	ea54 0205 	orrs.w	r2, r4, r5
  403dde:	f000 81df 	beq.w	4041a0 <_svfprintf_r+0xa84>
  403de2:	f8cd b01c 	str.w	fp, [sp, #28]
  403de6:	2b01      	cmp	r3, #1
  403de8:	f000 827b 	beq.w	4042e2 <_svfprintf_r+0xbc6>
  403dec:	2b02      	cmp	r3, #2
  403dee:	f040 8206 	bne.w	4041fe <_svfprintf_r+0xae2>
  403df2:	9818      	ldr	r0, [sp, #96]	; 0x60
  403df4:	464e      	mov	r6, r9
  403df6:	0923      	lsrs	r3, r4, #4
  403df8:	f004 010f 	and.w	r1, r4, #15
  403dfc:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  403e00:	092a      	lsrs	r2, r5, #4
  403e02:	461c      	mov	r4, r3
  403e04:	4615      	mov	r5, r2
  403e06:	5c43      	ldrb	r3, [r0, r1]
  403e08:	f806 3d01 	strb.w	r3, [r6, #-1]!
  403e0c:	ea54 0305 	orrs.w	r3, r4, r5
  403e10:	d1f1      	bne.n	403df6 <_svfprintf_r+0x6da>
  403e12:	eba9 0306 	sub.w	r3, r9, r6
  403e16:	930e      	str	r3, [sp, #56]	; 0x38
  403e18:	e590      	b.n	40393c <_svfprintf_r+0x220>
  403e1a:	9311      	str	r3, [sp, #68]	; 0x44
  403e1c:	2a00      	cmp	r2, #0
  403e1e:	f040 86a3 	bne.w	404b68 <_svfprintf_r+0x144c>
  403e22:	4b7e      	ldr	r3, [pc, #504]	; (40401c <_svfprintf_r+0x900>)
  403e24:	9318      	str	r3, [sp, #96]	; 0x60
  403e26:	f01b 0f20 	tst.w	fp, #32
  403e2a:	f43f aeef 	beq.w	403c0c <_svfprintf_r+0x4f0>
  403e2e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403e30:	3507      	adds	r5, #7
  403e32:	f025 0307 	bic.w	r3, r5, #7
  403e36:	f103 0208 	add.w	r2, r3, #8
  403e3a:	f01b 0f01 	tst.w	fp, #1
  403e3e:	920f      	str	r2, [sp, #60]	; 0x3c
  403e40:	e9d3 4500 	ldrd	r4, r5, [r3]
  403e44:	f47f aef4 	bne.w	403c30 <_svfprintf_r+0x514>
  403e48:	2302      	movs	r3, #2
  403e4a:	e55a      	b.n	403902 <_svfprintf_r+0x1e6>
  403e4c:	9311      	str	r3, [sp, #68]	; 0x44
  403e4e:	2a00      	cmp	r2, #0
  403e50:	f040 8686 	bne.w	404b60 <_svfprintf_r+0x1444>
  403e54:	f04b 0b10 	orr.w	fp, fp, #16
  403e58:	f01b 0f20 	tst.w	fp, #32
  403e5c:	d0a1      	beq.n	403da2 <_svfprintf_r+0x686>
  403e5e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403e60:	3507      	adds	r5, #7
  403e62:	f025 0507 	bic.w	r5, r5, #7
  403e66:	e9d5 2300 	ldrd	r2, r3, [r5]
  403e6a:	2a00      	cmp	r2, #0
  403e6c:	f105 0108 	add.w	r1, r5, #8
  403e70:	461d      	mov	r5, r3
  403e72:	f173 0300 	sbcs.w	r3, r3, #0
  403e76:	910f      	str	r1, [sp, #60]	; 0x3c
  403e78:	4614      	mov	r4, r2
  403e7a:	daa6      	bge.n	403dca <_svfprintf_r+0x6ae>
  403e7c:	272d      	movs	r7, #45	; 0x2d
  403e7e:	4264      	negs	r4, r4
  403e80:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  403e84:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  403e88:	2301      	movs	r3, #1
  403e8a:	e53d      	b.n	403908 <_svfprintf_r+0x1ec>
  403e8c:	9311      	str	r3, [sp, #68]	; 0x44
  403e8e:	2a00      	cmp	r2, #0
  403e90:	f040 8662 	bne.w	404b58 <_svfprintf_r+0x143c>
  403e94:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403e96:	3507      	adds	r5, #7
  403e98:	f025 0307 	bic.w	r3, r5, #7
  403e9c:	f103 0208 	add.w	r2, r3, #8
  403ea0:	920f      	str	r2, [sp, #60]	; 0x3c
  403ea2:	681a      	ldr	r2, [r3, #0]
  403ea4:	9215      	str	r2, [sp, #84]	; 0x54
  403ea6:	685b      	ldr	r3, [r3, #4]
  403ea8:	9314      	str	r3, [sp, #80]	; 0x50
  403eaa:	9b14      	ldr	r3, [sp, #80]	; 0x50
  403eac:	9d15      	ldr	r5, [sp, #84]	; 0x54
  403eae:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  403eb2:	4628      	mov	r0, r5
  403eb4:	4621      	mov	r1, r4
  403eb6:	f04f 32ff 	mov.w	r2, #4294967295
  403eba:	4b59      	ldr	r3, [pc, #356]	; (404020 <_svfprintf_r+0x904>)
  403ebc:	f004 ffb8 	bl	408e30 <__aeabi_dcmpun>
  403ec0:	2800      	cmp	r0, #0
  403ec2:	f040 834a 	bne.w	40455a <_svfprintf_r+0xe3e>
  403ec6:	4628      	mov	r0, r5
  403ec8:	4621      	mov	r1, r4
  403eca:	f04f 32ff 	mov.w	r2, #4294967295
  403ece:	4b54      	ldr	r3, [pc, #336]	; (404020 <_svfprintf_r+0x904>)
  403ed0:	f004 ff90 	bl	408df4 <__aeabi_dcmple>
  403ed4:	2800      	cmp	r0, #0
  403ed6:	f040 8340 	bne.w	40455a <_svfprintf_r+0xe3e>
  403eda:	a815      	add	r0, sp, #84	; 0x54
  403edc:	c80d      	ldmia	r0, {r0, r2, r3}
  403ede:	9914      	ldr	r1, [sp, #80]	; 0x50
  403ee0:	f004 ff7e 	bl	408de0 <__aeabi_dcmplt>
  403ee4:	2800      	cmp	r0, #0
  403ee6:	f040 8530 	bne.w	40494a <_svfprintf_r+0x122e>
  403eea:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403eee:	4e4d      	ldr	r6, [pc, #308]	; (404024 <_svfprintf_r+0x908>)
  403ef0:	4b4d      	ldr	r3, [pc, #308]	; (404028 <_svfprintf_r+0x90c>)
  403ef2:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  403ef6:	9007      	str	r0, [sp, #28]
  403ef8:	9811      	ldr	r0, [sp, #68]	; 0x44
  403efa:	2203      	movs	r2, #3
  403efc:	2100      	movs	r1, #0
  403efe:	9208      	str	r2, [sp, #32]
  403f00:	910a      	str	r1, [sp, #40]	; 0x28
  403f02:	2847      	cmp	r0, #71	; 0x47
  403f04:	bfd8      	it	le
  403f06:	461e      	movle	r6, r3
  403f08:	920e      	str	r2, [sp, #56]	; 0x38
  403f0a:	9112      	str	r1, [sp, #72]	; 0x48
  403f0c:	e51e      	b.n	40394c <_svfprintf_r+0x230>
  403f0e:	f04b 0b08 	orr.w	fp, fp, #8
  403f12:	f89a 3000 	ldrb.w	r3, [sl]
  403f16:	e459      	b.n	4037cc <_svfprintf_r+0xb0>
  403f18:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403f1c:	2300      	movs	r3, #0
  403f1e:	461c      	mov	r4, r3
  403f20:	f81a 3b01 	ldrb.w	r3, [sl], #1
  403f24:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  403f28:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  403f2c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403f30:	2809      	cmp	r0, #9
  403f32:	d9f5      	bls.n	403f20 <_svfprintf_r+0x804>
  403f34:	940d      	str	r4, [sp, #52]	; 0x34
  403f36:	e44b      	b.n	4037d0 <_svfprintf_r+0xb4>
  403f38:	f04b 0b10 	orr.w	fp, fp, #16
  403f3c:	9311      	str	r3, [sp, #68]	; 0x44
  403f3e:	f01b 0320 	ands.w	r3, fp, #32
  403f42:	f43f ae1d 	beq.w	403b80 <_svfprintf_r+0x464>
  403f46:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403f48:	3507      	adds	r5, #7
  403f4a:	f025 0307 	bic.w	r3, r5, #7
  403f4e:	f103 0208 	add.w	r2, r3, #8
  403f52:	e9d3 4500 	ldrd	r4, r5, [r3]
  403f56:	920f      	str	r2, [sp, #60]	; 0x3c
  403f58:	2300      	movs	r3, #0
  403f5a:	e4d2      	b.n	403902 <_svfprintf_r+0x1e6>
  403f5c:	9311      	str	r3, [sp, #68]	; 0x44
  403f5e:	2a00      	cmp	r2, #0
  403f60:	f040 85e7 	bne.w	404b32 <_svfprintf_r+0x1416>
  403f64:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403f66:	2a00      	cmp	r2, #0
  403f68:	f43f aca3 	beq.w	4038b2 <_svfprintf_r+0x196>
  403f6c:	2300      	movs	r3, #0
  403f6e:	2101      	movs	r1, #1
  403f70:	461f      	mov	r7, r3
  403f72:	9108      	str	r1, [sp, #32]
  403f74:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  403f78:	f8cd b01c 	str.w	fp, [sp, #28]
  403f7c:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403f80:	930a      	str	r3, [sp, #40]	; 0x28
  403f82:	9312      	str	r3, [sp, #72]	; 0x48
  403f84:	910e      	str	r1, [sp, #56]	; 0x38
  403f86:	ae28      	add	r6, sp, #160	; 0xa0
  403f88:	e4e4      	b.n	403954 <_svfprintf_r+0x238>
  403f8a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403f8c:	e534      	b.n	4039f8 <_svfprintf_r+0x2dc>
  403f8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403f90:	2b65      	cmp	r3, #101	; 0x65
  403f92:	f340 80a7 	ble.w	4040e4 <_svfprintf_r+0x9c8>
  403f96:	a815      	add	r0, sp, #84	; 0x54
  403f98:	c80d      	ldmia	r0, {r0, r2, r3}
  403f9a:	9914      	ldr	r1, [sp, #80]	; 0x50
  403f9c:	f004 ff16 	bl	408dcc <__aeabi_dcmpeq>
  403fa0:	2800      	cmp	r0, #0
  403fa2:	f000 8150 	beq.w	404246 <_svfprintf_r+0xb2a>
  403fa6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403fa8:	4a20      	ldr	r2, [pc, #128]	; (40402c <_svfprintf_r+0x910>)
  403faa:	f8c8 2000 	str.w	r2, [r8]
  403fae:	3301      	adds	r3, #1
  403fb0:	3401      	adds	r4, #1
  403fb2:	2201      	movs	r2, #1
  403fb4:	2b07      	cmp	r3, #7
  403fb6:	9427      	str	r4, [sp, #156]	; 0x9c
  403fb8:	9326      	str	r3, [sp, #152]	; 0x98
  403fba:	f8c8 2004 	str.w	r2, [r8, #4]
  403fbe:	f300 836a 	bgt.w	404696 <_svfprintf_r+0xf7a>
  403fc2:	f108 0808 	add.w	r8, r8, #8
  403fc6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403fc8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  403fca:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403fcc:	4293      	cmp	r3, r2
  403fce:	db03      	blt.n	403fd8 <_svfprintf_r+0x8bc>
  403fd0:	9b07      	ldr	r3, [sp, #28]
  403fd2:	07dd      	lsls	r5, r3, #31
  403fd4:	f57f ad82 	bpl.w	403adc <_svfprintf_r+0x3c0>
  403fd8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403fda:	9919      	ldr	r1, [sp, #100]	; 0x64
  403fdc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  403fde:	f8c8 2000 	str.w	r2, [r8]
  403fe2:	3301      	adds	r3, #1
  403fe4:	440c      	add	r4, r1
  403fe6:	2b07      	cmp	r3, #7
  403fe8:	f8c8 1004 	str.w	r1, [r8, #4]
  403fec:	9427      	str	r4, [sp, #156]	; 0x9c
  403fee:	9326      	str	r3, [sp, #152]	; 0x98
  403ff0:	f300 839e 	bgt.w	404730 <_svfprintf_r+0x1014>
  403ff4:	f108 0808 	add.w	r8, r8, #8
  403ff8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403ffa:	1e5e      	subs	r6, r3, #1
  403ffc:	2e00      	cmp	r6, #0
  403ffe:	f77f ad6d 	ble.w	403adc <_svfprintf_r+0x3c0>
  404002:	2e10      	cmp	r6, #16
  404004:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404006:	4d0a      	ldr	r5, [pc, #40]	; (404030 <_svfprintf_r+0x914>)
  404008:	f340 81f5 	ble.w	4043f6 <_svfprintf_r+0xcda>
  40400c:	4622      	mov	r2, r4
  40400e:	2710      	movs	r7, #16
  404010:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  404014:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  404016:	e013      	b.n	404040 <_svfprintf_r+0x924>
  404018:	00409a5c 	.word	0x00409a5c
  40401c:	00409a48 	.word	0x00409a48
  404020:	7fefffff 	.word	0x7fefffff
  404024:	00409a3c 	.word	0x00409a3c
  404028:	00409a38 	.word	0x00409a38
  40402c:	00409a78 	.word	0x00409a78
  404030:	00409a8c 	.word	0x00409a8c
  404034:	f108 0808 	add.w	r8, r8, #8
  404038:	3e10      	subs	r6, #16
  40403a:	2e10      	cmp	r6, #16
  40403c:	f340 81da 	ble.w	4043f4 <_svfprintf_r+0xcd8>
  404040:	3301      	adds	r3, #1
  404042:	3210      	adds	r2, #16
  404044:	2b07      	cmp	r3, #7
  404046:	9227      	str	r2, [sp, #156]	; 0x9c
  404048:	9326      	str	r3, [sp, #152]	; 0x98
  40404a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40404e:	ddf1      	ble.n	404034 <_svfprintf_r+0x918>
  404050:	aa25      	add	r2, sp, #148	; 0x94
  404052:	4621      	mov	r1, r4
  404054:	4658      	mov	r0, fp
  404056:	f004 f81d 	bl	408094 <__ssprint_r>
  40405a:	2800      	cmp	r0, #0
  40405c:	f47f ac30 	bne.w	4038c0 <_svfprintf_r+0x1a4>
  404060:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404062:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404064:	46c8      	mov	r8, r9
  404066:	e7e7      	b.n	404038 <_svfprintf_r+0x91c>
  404068:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40406a:	9a08      	ldr	r2, [sp, #32]
  40406c:	1a9f      	subs	r7, r3, r2
  40406e:	2f00      	cmp	r7, #0
  404070:	f77f ace5 	ble.w	403a3e <_svfprintf_r+0x322>
  404074:	2f10      	cmp	r7, #16
  404076:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404078:	4db6      	ldr	r5, [pc, #728]	; (404354 <_svfprintf_r+0xc38>)
  40407a:	dd27      	ble.n	4040cc <_svfprintf_r+0x9b0>
  40407c:	4642      	mov	r2, r8
  40407e:	4621      	mov	r1, r4
  404080:	46b0      	mov	r8, r6
  404082:	f04f 0b10 	mov.w	fp, #16
  404086:	462e      	mov	r6, r5
  404088:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40408a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40408c:	e004      	b.n	404098 <_svfprintf_r+0x97c>
  40408e:	3f10      	subs	r7, #16
  404090:	2f10      	cmp	r7, #16
  404092:	f102 0208 	add.w	r2, r2, #8
  404096:	dd15      	ble.n	4040c4 <_svfprintf_r+0x9a8>
  404098:	3301      	adds	r3, #1
  40409a:	3110      	adds	r1, #16
  40409c:	2b07      	cmp	r3, #7
  40409e:	9127      	str	r1, [sp, #156]	; 0x9c
  4040a0:	9326      	str	r3, [sp, #152]	; 0x98
  4040a2:	e882 0840 	stmia.w	r2, {r6, fp}
  4040a6:	ddf2      	ble.n	40408e <_svfprintf_r+0x972>
  4040a8:	aa25      	add	r2, sp, #148	; 0x94
  4040aa:	4629      	mov	r1, r5
  4040ac:	4620      	mov	r0, r4
  4040ae:	f003 fff1 	bl	408094 <__ssprint_r>
  4040b2:	2800      	cmp	r0, #0
  4040b4:	f47f ac04 	bne.w	4038c0 <_svfprintf_r+0x1a4>
  4040b8:	3f10      	subs	r7, #16
  4040ba:	2f10      	cmp	r7, #16
  4040bc:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4040be:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4040c0:	464a      	mov	r2, r9
  4040c2:	dce9      	bgt.n	404098 <_svfprintf_r+0x97c>
  4040c4:	4635      	mov	r5, r6
  4040c6:	460c      	mov	r4, r1
  4040c8:	4646      	mov	r6, r8
  4040ca:	4690      	mov	r8, r2
  4040cc:	3301      	adds	r3, #1
  4040ce:	443c      	add	r4, r7
  4040d0:	2b07      	cmp	r3, #7
  4040d2:	9427      	str	r4, [sp, #156]	; 0x9c
  4040d4:	9326      	str	r3, [sp, #152]	; 0x98
  4040d6:	e888 00a0 	stmia.w	r8, {r5, r7}
  4040da:	f300 8232 	bgt.w	404542 <_svfprintf_r+0xe26>
  4040de:	f108 0808 	add.w	r8, r8, #8
  4040e2:	e4ac      	b.n	403a3e <_svfprintf_r+0x322>
  4040e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4040e6:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4040e8:	2b01      	cmp	r3, #1
  4040ea:	f340 81fe 	ble.w	4044ea <_svfprintf_r+0xdce>
  4040ee:	3701      	adds	r7, #1
  4040f0:	3401      	adds	r4, #1
  4040f2:	2301      	movs	r3, #1
  4040f4:	2f07      	cmp	r7, #7
  4040f6:	9427      	str	r4, [sp, #156]	; 0x9c
  4040f8:	9726      	str	r7, [sp, #152]	; 0x98
  4040fa:	f8c8 6000 	str.w	r6, [r8]
  4040fe:	f8c8 3004 	str.w	r3, [r8, #4]
  404102:	f300 8203 	bgt.w	40450c <_svfprintf_r+0xdf0>
  404106:	f108 0808 	add.w	r8, r8, #8
  40410a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40410c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40410e:	f8c8 3000 	str.w	r3, [r8]
  404112:	3701      	adds	r7, #1
  404114:	4414      	add	r4, r2
  404116:	2f07      	cmp	r7, #7
  404118:	9427      	str	r4, [sp, #156]	; 0x9c
  40411a:	9726      	str	r7, [sp, #152]	; 0x98
  40411c:	f8c8 2004 	str.w	r2, [r8, #4]
  404120:	f300 8200 	bgt.w	404524 <_svfprintf_r+0xe08>
  404124:	f108 0808 	add.w	r8, r8, #8
  404128:	a815      	add	r0, sp, #84	; 0x54
  40412a:	c80d      	ldmia	r0, {r0, r2, r3}
  40412c:	9914      	ldr	r1, [sp, #80]	; 0x50
  40412e:	f004 fe4d 	bl	408dcc <__aeabi_dcmpeq>
  404132:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404134:	2800      	cmp	r0, #0
  404136:	f040 8101 	bne.w	40433c <_svfprintf_r+0xc20>
  40413a:	3b01      	subs	r3, #1
  40413c:	3701      	adds	r7, #1
  40413e:	3601      	adds	r6, #1
  404140:	441c      	add	r4, r3
  404142:	2f07      	cmp	r7, #7
  404144:	9726      	str	r7, [sp, #152]	; 0x98
  404146:	9427      	str	r4, [sp, #156]	; 0x9c
  404148:	f8c8 6000 	str.w	r6, [r8]
  40414c:	f8c8 3004 	str.w	r3, [r8, #4]
  404150:	f300 8127 	bgt.w	4043a2 <_svfprintf_r+0xc86>
  404154:	f108 0808 	add.w	r8, r8, #8
  404158:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  40415a:	f8c8 2004 	str.w	r2, [r8, #4]
  40415e:	3701      	adds	r7, #1
  404160:	4414      	add	r4, r2
  404162:	ab21      	add	r3, sp, #132	; 0x84
  404164:	2f07      	cmp	r7, #7
  404166:	9427      	str	r4, [sp, #156]	; 0x9c
  404168:	9726      	str	r7, [sp, #152]	; 0x98
  40416a:	f8c8 3000 	str.w	r3, [r8]
  40416e:	f77f acb3 	ble.w	403ad8 <_svfprintf_r+0x3bc>
  404172:	aa25      	add	r2, sp, #148	; 0x94
  404174:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404176:	980c      	ldr	r0, [sp, #48]	; 0x30
  404178:	f003 ff8c 	bl	408094 <__ssprint_r>
  40417c:	2800      	cmp	r0, #0
  40417e:	f47f ab9f 	bne.w	4038c0 <_svfprintf_r+0x1a4>
  404182:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404184:	46c8      	mov	r8, r9
  404186:	e4a9      	b.n	403adc <_svfprintf_r+0x3c0>
  404188:	aa25      	add	r2, sp, #148	; 0x94
  40418a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40418c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40418e:	f003 ff81 	bl	408094 <__ssprint_r>
  404192:	2800      	cmp	r0, #0
  404194:	f43f aceb 	beq.w	403b6e <_svfprintf_r+0x452>
  404198:	f7ff bb92 	b.w	4038c0 <_svfprintf_r+0x1a4>
  40419c:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4041a0:	2b01      	cmp	r3, #1
  4041a2:	f000 8134 	beq.w	40440e <_svfprintf_r+0xcf2>
  4041a6:	2b02      	cmp	r3, #2
  4041a8:	d125      	bne.n	4041f6 <_svfprintf_r+0xada>
  4041aa:	f8cd b01c 	str.w	fp, [sp, #28]
  4041ae:	2400      	movs	r4, #0
  4041b0:	2500      	movs	r5, #0
  4041b2:	e61e      	b.n	403df2 <_svfprintf_r+0x6d6>
  4041b4:	aa25      	add	r2, sp, #148	; 0x94
  4041b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4041b8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4041ba:	f003 ff6b 	bl	408094 <__ssprint_r>
  4041be:	2800      	cmp	r0, #0
  4041c0:	f47f ab7e 	bne.w	4038c0 <_svfprintf_r+0x1a4>
  4041c4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4041c6:	46c8      	mov	r8, r9
  4041c8:	e475      	b.n	403ab6 <_svfprintf_r+0x39a>
  4041ca:	aa25      	add	r2, sp, #148	; 0x94
  4041cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4041ce:	980c      	ldr	r0, [sp, #48]	; 0x30
  4041d0:	f003 ff60 	bl	408094 <__ssprint_r>
  4041d4:	2800      	cmp	r0, #0
  4041d6:	f47f ab73 	bne.w	4038c0 <_svfprintf_r+0x1a4>
  4041da:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4041dc:	46c8      	mov	r8, r9
  4041de:	e41b      	b.n	403a18 <_svfprintf_r+0x2fc>
  4041e0:	aa25      	add	r2, sp, #148	; 0x94
  4041e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4041e4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4041e6:	f003 ff55 	bl	408094 <__ssprint_r>
  4041ea:	2800      	cmp	r0, #0
  4041ec:	f47f ab68 	bne.w	4038c0 <_svfprintf_r+0x1a4>
  4041f0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4041f2:	46c8      	mov	r8, r9
  4041f4:	e420      	b.n	403a38 <_svfprintf_r+0x31c>
  4041f6:	f8cd b01c 	str.w	fp, [sp, #28]
  4041fa:	2400      	movs	r4, #0
  4041fc:	2500      	movs	r5, #0
  4041fe:	4649      	mov	r1, r9
  404200:	e000      	b.n	404204 <_svfprintf_r+0xae8>
  404202:	4631      	mov	r1, r6
  404204:	08e2      	lsrs	r2, r4, #3
  404206:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40420a:	08e8      	lsrs	r0, r5, #3
  40420c:	f004 0307 	and.w	r3, r4, #7
  404210:	4605      	mov	r5, r0
  404212:	4614      	mov	r4, r2
  404214:	3330      	adds	r3, #48	; 0x30
  404216:	ea54 0205 	orrs.w	r2, r4, r5
  40421a:	f801 3c01 	strb.w	r3, [r1, #-1]
  40421e:	f101 36ff 	add.w	r6, r1, #4294967295
  404222:	d1ee      	bne.n	404202 <_svfprintf_r+0xae6>
  404224:	9a07      	ldr	r2, [sp, #28]
  404226:	07d2      	lsls	r2, r2, #31
  404228:	f57f adf3 	bpl.w	403e12 <_svfprintf_r+0x6f6>
  40422c:	2b30      	cmp	r3, #48	; 0x30
  40422e:	f43f adf0 	beq.w	403e12 <_svfprintf_r+0x6f6>
  404232:	3902      	subs	r1, #2
  404234:	2330      	movs	r3, #48	; 0x30
  404236:	f806 3c01 	strb.w	r3, [r6, #-1]
  40423a:	eba9 0301 	sub.w	r3, r9, r1
  40423e:	930e      	str	r3, [sp, #56]	; 0x38
  404240:	460e      	mov	r6, r1
  404242:	f7ff bb7b 	b.w	40393c <_svfprintf_r+0x220>
  404246:	991f      	ldr	r1, [sp, #124]	; 0x7c
  404248:	2900      	cmp	r1, #0
  40424a:	f340 822e 	ble.w	4046aa <_svfprintf_r+0xf8e>
  40424e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404250:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404252:	4293      	cmp	r3, r2
  404254:	bfa8      	it	ge
  404256:	4613      	movge	r3, r2
  404258:	2b00      	cmp	r3, #0
  40425a:	461f      	mov	r7, r3
  40425c:	dd0d      	ble.n	40427a <_svfprintf_r+0xb5e>
  40425e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404260:	f8c8 6000 	str.w	r6, [r8]
  404264:	3301      	adds	r3, #1
  404266:	443c      	add	r4, r7
  404268:	2b07      	cmp	r3, #7
  40426a:	9427      	str	r4, [sp, #156]	; 0x9c
  40426c:	f8c8 7004 	str.w	r7, [r8, #4]
  404270:	9326      	str	r3, [sp, #152]	; 0x98
  404272:	f300 831f 	bgt.w	4048b4 <_svfprintf_r+0x1198>
  404276:	f108 0808 	add.w	r8, r8, #8
  40427a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40427c:	2f00      	cmp	r7, #0
  40427e:	bfa8      	it	ge
  404280:	1bdb      	subge	r3, r3, r7
  404282:	2b00      	cmp	r3, #0
  404284:	461f      	mov	r7, r3
  404286:	f340 80d6 	ble.w	404436 <_svfprintf_r+0xd1a>
  40428a:	2f10      	cmp	r7, #16
  40428c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40428e:	4d31      	ldr	r5, [pc, #196]	; (404354 <_svfprintf_r+0xc38>)
  404290:	f340 81ed 	ble.w	40466e <_svfprintf_r+0xf52>
  404294:	4642      	mov	r2, r8
  404296:	4621      	mov	r1, r4
  404298:	46b0      	mov	r8, r6
  40429a:	f04f 0b10 	mov.w	fp, #16
  40429e:	462e      	mov	r6, r5
  4042a0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4042a2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4042a4:	e004      	b.n	4042b0 <_svfprintf_r+0xb94>
  4042a6:	3208      	adds	r2, #8
  4042a8:	3f10      	subs	r7, #16
  4042aa:	2f10      	cmp	r7, #16
  4042ac:	f340 81db 	ble.w	404666 <_svfprintf_r+0xf4a>
  4042b0:	3301      	adds	r3, #1
  4042b2:	3110      	adds	r1, #16
  4042b4:	2b07      	cmp	r3, #7
  4042b6:	9127      	str	r1, [sp, #156]	; 0x9c
  4042b8:	9326      	str	r3, [sp, #152]	; 0x98
  4042ba:	e882 0840 	stmia.w	r2, {r6, fp}
  4042be:	ddf2      	ble.n	4042a6 <_svfprintf_r+0xb8a>
  4042c0:	aa25      	add	r2, sp, #148	; 0x94
  4042c2:	4629      	mov	r1, r5
  4042c4:	4620      	mov	r0, r4
  4042c6:	f003 fee5 	bl	408094 <__ssprint_r>
  4042ca:	2800      	cmp	r0, #0
  4042cc:	f47f aaf8 	bne.w	4038c0 <_svfprintf_r+0x1a4>
  4042d0:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4042d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4042d4:	464a      	mov	r2, r9
  4042d6:	e7e7      	b.n	4042a8 <_svfprintf_r+0xb8c>
  4042d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4042da:	930e      	str	r3, [sp, #56]	; 0x38
  4042dc:	464e      	mov	r6, r9
  4042de:	f7ff bb2d 	b.w	40393c <_svfprintf_r+0x220>
  4042e2:	2d00      	cmp	r5, #0
  4042e4:	bf08      	it	eq
  4042e6:	2c0a      	cmpeq	r4, #10
  4042e8:	f0c0 808f 	bcc.w	40440a <_svfprintf_r+0xcee>
  4042ec:	464e      	mov	r6, r9
  4042ee:	4620      	mov	r0, r4
  4042f0:	4629      	mov	r1, r5
  4042f2:	220a      	movs	r2, #10
  4042f4:	2300      	movs	r3, #0
  4042f6:	f004 fdd9 	bl	408eac <__aeabi_uldivmod>
  4042fa:	3230      	adds	r2, #48	; 0x30
  4042fc:	f806 2d01 	strb.w	r2, [r6, #-1]!
  404300:	4620      	mov	r0, r4
  404302:	4629      	mov	r1, r5
  404304:	2300      	movs	r3, #0
  404306:	220a      	movs	r2, #10
  404308:	f004 fdd0 	bl	408eac <__aeabi_uldivmod>
  40430c:	4604      	mov	r4, r0
  40430e:	460d      	mov	r5, r1
  404310:	ea54 0305 	orrs.w	r3, r4, r5
  404314:	d1eb      	bne.n	4042ee <_svfprintf_r+0xbd2>
  404316:	eba9 0306 	sub.w	r3, r9, r6
  40431a:	930e      	str	r3, [sp, #56]	; 0x38
  40431c:	f7ff bb0e 	b.w	40393c <_svfprintf_r+0x220>
  404320:	aa25      	add	r2, sp, #148	; 0x94
  404322:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404324:	980c      	ldr	r0, [sp, #48]	; 0x30
  404326:	f003 feb5 	bl	408094 <__ssprint_r>
  40432a:	2800      	cmp	r0, #0
  40432c:	f47f aac8 	bne.w	4038c0 <_svfprintf_r+0x1a4>
  404330:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404334:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404336:	46c8      	mov	r8, r9
  404338:	f7ff bb5e 	b.w	4039f8 <_svfprintf_r+0x2dc>
  40433c:	1e5e      	subs	r6, r3, #1
  40433e:	2e00      	cmp	r6, #0
  404340:	f77f af0a 	ble.w	404158 <_svfprintf_r+0xa3c>
  404344:	2e10      	cmp	r6, #16
  404346:	4d03      	ldr	r5, [pc, #12]	; (404354 <_svfprintf_r+0xc38>)
  404348:	dd22      	ble.n	404390 <_svfprintf_r+0xc74>
  40434a:	4622      	mov	r2, r4
  40434c:	f04f 0b10 	mov.w	fp, #16
  404350:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404352:	e006      	b.n	404362 <_svfprintf_r+0xc46>
  404354:	00409a8c 	.word	0x00409a8c
  404358:	3e10      	subs	r6, #16
  40435a:	2e10      	cmp	r6, #16
  40435c:	f108 0808 	add.w	r8, r8, #8
  404360:	dd15      	ble.n	40438e <_svfprintf_r+0xc72>
  404362:	3701      	adds	r7, #1
  404364:	3210      	adds	r2, #16
  404366:	2f07      	cmp	r7, #7
  404368:	9227      	str	r2, [sp, #156]	; 0x9c
  40436a:	9726      	str	r7, [sp, #152]	; 0x98
  40436c:	e888 0820 	stmia.w	r8, {r5, fp}
  404370:	ddf2      	ble.n	404358 <_svfprintf_r+0xc3c>
  404372:	aa25      	add	r2, sp, #148	; 0x94
  404374:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404376:	4620      	mov	r0, r4
  404378:	f003 fe8c 	bl	408094 <__ssprint_r>
  40437c:	2800      	cmp	r0, #0
  40437e:	f47f aa9f 	bne.w	4038c0 <_svfprintf_r+0x1a4>
  404382:	3e10      	subs	r6, #16
  404384:	2e10      	cmp	r6, #16
  404386:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404388:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40438a:	46c8      	mov	r8, r9
  40438c:	dce9      	bgt.n	404362 <_svfprintf_r+0xc46>
  40438e:	4614      	mov	r4, r2
  404390:	3701      	adds	r7, #1
  404392:	4434      	add	r4, r6
  404394:	2f07      	cmp	r7, #7
  404396:	9427      	str	r4, [sp, #156]	; 0x9c
  404398:	9726      	str	r7, [sp, #152]	; 0x98
  40439a:	e888 0060 	stmia.w	r8, {r5, r6}
  40439e:	f77f aed9 	ble.w	404154 <_svfprintf_r+0xa38>
  4043a2:	aa25      	add	r2, sp, #148	; 0x94
  4043a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4043a6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4043a8:	f003 fe74 	bl	408094 <__ssprint_r>
  4043ac:	2800      	cmp	r0, #0
  4043ae:	f47f aa87 	bne.w	4038c0 <_svfprintf_r+0x1a4>
  4043b2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4043b4:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4043b6:	46c8      	mov	r8, r9
  4043b8:	e6ce      	b.n	404158 <_svfprintf_r+0xa3c>
  4043ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4043bc:	6814      	ldr	r4, [r2, #0]
  4043be:	4613      	mov	r3, r2
  4043c0:	3304      	adds	r3, #4
  4043c2:	17e5      	asrs	r5, r4, #31
  4043c4:	930f      	str	r3, [sp, #60]	; 0x3c
  4043c6:	4622      	mov	r2, r4
  4043c8:	462b      	mov	r3, r5
  4043ca:	e4fa      	b.n	403dc2 <_svfprintf_r+0x6a6>
  4043cc:	3204      	adds	r2, #4
  4043ce:	681c      	ldr	r4, [r3, #0]
  4043d0:	920f      	str	r2, [sp, #60]	; 0x3c
  4043d2:	2301      	movs	r3, #1
  4043d4:	2500      	movs	r5, #0
  4043d6:	f7ff ba94 	b.w	403902 <_svfprintf_r+0x1e6>
  4043da:	681c      	ldr	r4, [r3, #0]
  4043dc:	3304      	adds	r3, #4
  4043de:	930f      	str	r3, [sp, #60]	; 0x3c
  4043e0:	2500      	movs	r5, #0
  4043e2:	e421      	b.n	403c28 <_svfprintf_r+0x50c>
  4043e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4043e6:	460a      	mov	r2, r1
  4043e8:	3204      	adds	r2, #4
  4043ea:	680c      	ldr	r4, [r1, #0]
  4043ec:	920f      	str	r2, [sp, #60]	; 0x3c
  4043ee:	2500      	movs	r5, #0
  4043f0:	f7ff ba87 	b.w	403902 <_svfprintf_r+0x1e6>
  4043f4:	4614      	mov	r4, r2
  4043f6:	3301      	adds	r3, #1
  4043f8:	4434      	add	r4, r6
  4043fa:	2b07      	cmp	r3, #7
  4043fc:	9427      	str	r4, [sp, #156]	; 0x9c
  4043fe:	9326      	str	r3, [sp, #152]	; 0x98
  404400:	e888 0060 	stmia.w	r8, {r5, r6}
  404404:	f77f ab68 	ble.w	403ad8 <_svfprintf_r+0x3bc>
  404408:	e6b3      	b.n	404172 <_svfprintf_r+0xa56>
  40440a:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40440e:	f8cd b01c 	str.w	fp, [sp, #28]
  404412:	ae42      	add	r6, sp, #264	; 0x108
  404414:	3430      	adds	r4, #48	; 0x30
  404416:	2301      	movs	r3, #1
  404418:	f806 4d41 	strb.w	r4, [r6, #-65]!
  40441c:	930e      	str	r3, [sp, #56]	; 0x38
  40441e:	f7ff ba8d 	b.w	40393c <_svfprintf_r+0x220>
  404422:	aa25      	add	r2, sp, #148	; 0x94
  404424:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404426:	980c      	ldr	r0, [sp, #48]	; 0x30
  404428:	f003 fe34 	bl	408094 <__ssprint_r>
  40442c:	2800      	cmp	r0, #0
  40442e:	f47f aa47 	bne.w	4038c0 <_svfprintf_r+0x1a4>
  404432:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404434:	46c8      	mov	r8, r9
  404436:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  404438:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40443a:	429a      	cmp	r2, r3
  40443c:	db44      	blt.n	4044c8 <_svfprintf_r+0xdac>
  40443e:	9b07      	ldr	r3, [sp, #28]
  404440:	07d9      	lsls	r1, r3, #31
  404442:	d441      	bmi.n	4044c8 <_svfprintf_r+0xdac>
  404444:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404446:	9812      	ldr	r0, [sp, #72]	; 0x48
  404448:	1a9a      	subs	r2, r3, r2
  40444a:	1a1d      	subs	r5, r3, r0
  40444c:	4295      	cmp	r5, r2
  40444e:	bfa8      	it	ge
  404450:	4615      	movge	r5, r2
  404452:	2d00      	cmp	r5, #0
  404454:	dd0e      	ble.n	404474 <_svfprintf_r+0xd58>
  404456:	9926      	ldr	r1, [sp, #152]	; 0x98
  404458:	f8c8 5004 	str.w	r5, [r8, #4]
  40445c:	3101      	adds	r1, #1
  40445e:	4406      	add	r6, r0
  404460:	442c      	add	r4, r5
  404462:	2907      	cmp	r1, #7
  404464:	f8c8 6000 	str.w	r6, [r8]
  404468:	9427      	str	r4, [sp, #156]	; 0x9c
  40446a:	9126      	str	r1, [sp, #152]	; 0x98
  40446c:	f300 823b 	bgt.w	4048e6 <_svfprintf_r+0x11ca>
  404470:	f108 0808 	add.w	r8, r8, #8
  404474:	2d00      	cmp	r5, #0
  404476:	bfac      	ite	ge
  404478:	1b56      	subge	r6, r2, r5
  40447a:	4616      	movlt	r6, r2
  40447c:	2e00      	cmp	r6, #0
  40447e:	f77f ab2d 	ble.w	403adc <_svfprintf_r+0x3c0>
  404482:	2e10      	cmp	r6, #16
  404484:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404486:	4db0      	ldr	r5, [pc, #704]	; (404748 <_svfprintf_r+0x102c>)
  404488:	ddb5      	ble.n	4043f6 <_svfprintf_r+0xcda>
  40448a:	4622      	mov	r2, r4
  40448c:	2710      	movs	r7, #16
  40448e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  404492:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  404494:	e004      	b.n	4044a0 <_svfprintf_r+0xd84>
  404496:	f108 0808 	add.w	r8, r8, #8
  40449a:	3e10      	subs	r6, #16
  40449c:	2e10      	cmp	r6, #16
  40449e:	dda9      	ble.n	4043f4 <_svfprintf_r+0xcd8>
  4044a0:	3301      	adds	r3, #1
  4044a2:	3210      	adds	r2, #16
  4044a4:	2b07      	cmp	r3, #7
  4044a6:	9227      	str	r2, [sp, #156]	; 0x9c
  4044a8:	9326      	str	r3, [sp, #152]	; 0x98
  4044aa:	e888 00a0 	stmia.w	r8, {r5, r7}
  4044ae:	ddf2      	ble.n	404496 <_svfprintf_r+0xd7a>
  4044b0:	aa25      	add	r2, sp, #148	; 0x94
  4044b2:	4621      	mov	r1, r4
  4044b4:	4658      	mov	r0, fp
  4044b6:	f003 fded 	bl	408094 <__ssprint_r>
  4044ba:	2800      	cmp	r0, #0
  4044bc:	f47f aa00 	bne.w	4038c0 <_svfprintf_r+0x1a4>
  4044c0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4044c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4044c4:	46c8      	mov	r8, r9
  4044c6:	e7e8      	b.n	40449a <_svfprintf_r+0xd7e>
  4044c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4044ca:	9819      	ldr	r0, [sp, #100]	; 0x64
  4044cc:	991a      	ldr	r1, [sp, #104]	; 0x68
  4044ce:	f8c8 1000 	str.w	r1, [r8]
  4044d2:	3301      	adds	r3, #1
  4044d4:	4404      	add	r4, r0
  4044d6:	2b07      	cmp	r3, #7
  4044d8:	9427      	str	r4, [sp, #156]	; 0x9c
  4044da:	f8c8 0004 	str.w	r0, [r8, #4]
  4044de:	9326      	str	r3, [sp, #152]	; 0x98
  4044e0:	f300 81f5 	bgt.w	4048ce <_svfprintf_r+0x11b2>
  4044e4:	f108 0808 	add.w	r8, r8, #8
  4044e8:	e7ac      	b.n	404444 <_svfprintf_r+0xd28>
  4044ea:	9b07      	ldr	r3, [sp, #28]
  4044ec:	07da      	lsls	r2, r3, #31
  4044ee:	f53f adfe 	bmi.w	4040ee <_svfprintf_r+0x9d2>
  4044f2:	3701      	adds	r7, #1
  4044f4:	3401      	adds	r4, #1
  4044f6:	2301      	movs	r3, #1
  4044f8:	2f07      	cmp	r7, #7
  4044fa:	9427      	str	r4, [sp, #156]	; 0x9c
  4044fc:	9726      	str	r7, [sp, #152]	; 0x98
  4044fe:	f8c8 6000 	str.w	r6, [r8]
  404502:	f8c8 3004 	str.w	r3, [r8, #4]
  404506:	f77f ae25 	ble.w	404154 <_svfprintf_r+0xa38>
  40450a:	e74a      	b.n	4043a2 <_svfprintf_r+0xc86>
  40450c:	aa25      	add	r2, sp, #148	; 0x94
  40450e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404510:	980c      	ldr	r0, [sp, #48]	; 0x30
  404512:	f003 fdbf 	bl	408094 <__ssprint_r>
  404516:	2800      	cmp	r0, #0
  404518:	f47f a9d2 	bne.w	4038c0 <_svfprintf_r+0x1a4>
  40451c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40451e:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404520:	46c8      	mov	r8, r9
  404522:	e5f2      	b.n	40410a <_svfprintf_r+0x9ee>
  404524:	aa25      	add	r2, sp, #148	; 0x94
  404526:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404528:	980c      	ldr	r0, [sp, #48]	; 0x30
  40452a:	f003 fdb3 	bl	408094 <__ssprint_r>
  40452e:	2800      	cmp	r0, #0
  404530:	f47f a9c6 	bne.w	4038c0 <_svfprintf_r+0x1a4>
  404534:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404536:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404538:	46c8      	mov	r8, r9
  40453a:	e5f5      	b.n	404128 <_svfprintf_r+0xa0c>
  40453c:	464e      	mov	r6, r9
  40453e:	f7ff b9fd 	b.w	40393c <_svfprintf_r+0x220>
  404542:	aa25      	add	r2, sp, #148	; 0x94
  404544:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404546:	980c      	ldr	r0, [sp, #48]	; 0x30
  404548:	f003 fda4 	bl	408094 <__ssprint_r>
  40454c:	2800      	cmp	r0, #0
  40454e:	f47f a9b7 	bne.w	4038c0 <_svfprintf_r+0x1a4>
  404552:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404554:	46c8      	mov	r8, r9
  404556:	f7ff ba72 	b.w	403a3e <_svfprintf_r+0x322>
  40455a:	9c15      	ldr	r4, [sp, #84]	; 0x54
  40455c:	4622      	mov	r2, r4
  40455e:	4620      	mov	r0, r4
  404560:	9c14      	ldr	r4, [sp, #80]	; 0x50
  404562:	4623      	mov	r3, r4
  404564:	4621      	mov	r1, r4
  404566:	f004 fc63 	bl	408e30 <__aeabi_dcmpun>
  40456a:	2800      	cmp	r0, #0
  40456c:	f040 8286 	bne.w	404a7c <_svfprintf_r+0x1360>
  404570:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404572:	3301      	adds	r3, #1
  404574:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404576:	f023 0320 	bic.w	r3, r3, #32
  40457a:	930e      	str	r3, [sp, #56]	; 0x38
  40457c:	f000 81e2 	beq.w	404944 <_svfprintf_r+0x1228>
  404580:	2b47      	cmp	r3, #71	; 0x47
  404582:	f000 811e 	beq.w	4047c2 <_svfprintf_r+0x10a6>
  404586:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  40458a:	9307      	str	r3, [sp, #28]
  40458c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40458e:	1e1f      	subs	r7, r3, #0
  404590:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404592:	9308      	str	r3, [sp, #32]
  404594:	bfbb      	ittet	lt
  404596:	463b      	movlt	r3, r7
  404598:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  40459c:	2300      	movge	r3, #0
  40459e:	232d      	movlt	r3, #45	; 0x2d
  4045a0:	9310      	str	r3, [sp, #64]	; 0x40
  4045a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4045a4:	2b66      	cmp	r3, #102	; 0x66
  4045a6:	f000 81bb 	beq.w	404920 <_svfprintf_r+0x1204>
  4045aa:	2b46      	cmp	r3, #70	; 0x46
  4045ac:	f000 80df 	beq.w	40476e <_svfprintf_r+0x1052>
  4045b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4045b2:	9a08      	ldr	r2, [sp, #32]
  4045b4:	2b45      	cmp	r3, #69	; 0x45
  4045b6:	bf0c      	ite	eq
  4045b8:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  4045ba:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  4045bc:	a823      	add	r0, sp, #140	; 0x8c
  4045be:	a920      	add	r1, sp, #128	; 0x80
  4045c0:	bf08      	it	eq
  4045c2:	1c5d      	addeq	r5, r3, #1
  4045c4:	9004      	str	r0, [sp, #16]
  4045c6:	9103      	str	r1, [sp, #12]
  4045c8:	a81f      	add	r0, sp, #124	; 0x7c
  4045ca:	2102      	movs	r1, #2
  4045cc:	463b      	mov	r3, r7
  4045ce:	9002      	str	r0, [sp, #8]
  4045d0:	9501      	str	r5, [sp, #4]
  4045d2:	9100      	str	r1, [sp, #0]
  4045d4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4045d6:	f001 faa3 	bl	405b20 <_dtoa_r>
  4045da:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4045dc:	2b67      	cmp	r3, #103	; 0x67
  4045de:	4606      	mov	r6, r0
  4045e0:	f040 81e0 	bne.w	4049a4 <_svfprintf_r+0x1288>
  4045e4:	f01b 0f01 	tst.w	fp, #1
  4045e8:	f000 8246 	beq.w	404a78 <_svfprintf_r+0x135c>
  4045ec:	1974      	adds	r4, r6, r5
  4045ee:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4045f0:	9808      	ldr	r0, [sp, #32]
  4045f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4045f4:	4639      	mov	r1, r7
  4045f6:	f004 fbe9 	bl	408dcc <__aeabi_dcmpeq>
  4045fa:	2800      	cmp	r0, #0
  4045fc:	f040 8165 	bne.w	4048ca <_svfprintf_r+0x11ae>
  404600:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404602:	42a3      	cmp	r3, r4
  404604:	d206      	bcs.n	404614 <_svfprintf_r+0xef8>
  404606:	2130      	movs	r1, #48	; 0x30
  404608:	1c5a      	adds	r2, r3, #1
  40460a:	9223      	str	r2, [sp, #140]	; 0x8c
  40460c:	7019      	strb	r1, [r3, #0]
  40460e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404610:	429c      	cmp	r4, r3
  404612:	d8f9      	bhi.n	404608 <_svfprintf_r+0xeec>
  404614:	1b9b      	subs	r3, r3, r6
  404616:	9313      	str	r3, [sp, #76]	; 0x4c
  404618:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40461a:	2b47      	cmp	r3, #71	; 0x47
  40461c:	f000 80e9 	beq.w	4047f2 <_svfprintf_r+0x10d6>
  404620:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404622:	2b65      	cmp	r3, #101	; 0x65
  404624:	f340 81cd 	ble.w	4049c2 <_svfprintf_r+0x12a6>
  404628:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40462a:	2b66      	cmp	r3, #102	; 0x66
  40462c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40462e:	9312      	str	r3, [sp, #72]	; 0x48
  404630:	f000 819e 	beq.w	404970 <_svfprintf_r+0x1254>
  404634:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404636:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404638:	4619      	mov	r1, r3
  40463a:	4291      	cmp	r1, r2
  40463c:	f300 818a 	bgt.w	404954 <_svfprintf_r+0x1238>
  404640:	f01b 0f01 	tst.w	fp, #1
  404644:	f040 8213 	bne.w	404a6e <_svfprintf_r+0x1352>
  404648:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40464c:	9308      	str	r3, [sp, #32]
  40464e:	2367      	movs	r3, #103	; 0x67
  404650:	920e      	str	r2, [sp, #56]	; 0x38
  404652:	9311      	str	r3, [sp, #68]	; 0x44
  404654:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404656:	2b00      	cmp	r3, #0
  404658:	f040 80c4 	bne.w	4047e4 <_svfprintf_r+0x10c8>
  40465c:	930a      	str	r3, [sp, #40]	; 0x28
  40465e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404662:	f7ff b973 	b.w	40394c <_svfprintf_r+0x230>
  404666:	4635      	mov	r5, r6
  404668:	460c      	mov	r4, r1
  40466a:	4646      	mov	r6, r8
  40466c:	4690      	mov	r8, r2
  40466e:	3301      	adds	r3, #1
  404670:	443c      	add	r4, r7
  404672:	2b07      	cmp	r3, #7
  404674:	9427      	str	r4, [sp, #156]	; 0x9c
  404676:	9326      	str	r3, [sp, #152]	; 0x98
  404678:	e888 00a0 	stmia.w	r8, {r5, r7}
  40467c:	f73f aed1 	bgt.w	404422 <_svfprintf_r+0xd06>
  404680:	f108 0808 	add.w	r8, r8, #8
  404684:	e6d7      	b.n	404436 <_svfprintf_r+0xd1a>
  404686:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404688:	6813      	ldr	r3, [r2, #0]
  40468a:	3204      	adds	r2, #4
  40468c:	920f      	str	r2, [sp, #60]	; 0x3c
  40468e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404690:	601a      	str	r2, [r3, #0]
  404692:	f7ff b86a 	b.w	40376a <_svfprintf_r+0x4e>
  404696:	aa25      	add	r2, sp, #148	; 0x94
  404698:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40469a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40469c:	f003 fcfa 	bl	408094 <__ssprint_r>
  4046a0:	2800      	cmp	r0, #0
  4046a2:	f47f a90d 	bne.w	4038c0 <_svfprintf_r+0x1a4>
  4046a6:	46c8      	mov	r8, r9
  4046a8:	e48d      	b.n	403fc6 <_svfprintf_r+0x8aa>
  4046aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4046ac:	4a27      	ldr	r2, [pc, #156]	; (40474c <_svfprintf_r+0x1030>)
  4046ae:	f8c8 2000 	str.w	r2, [r8]
  4046b2:	3301      	adds	r3, #1
  4046b4:	3401      	adds	r4, #1
  4046b6:	2201      	movs	r2, #1
  4046b8:	2b07      	cmp	r3, #7
  4046ba:	9427      	str	r4, [sp, #156]	; 0x9c
  4046bc:	9326      	str	r3, [sp, #152]	; 0x98
  4046be:	f8c8 2004 	str.w	r2, [r8, #4]
  4046c2:	dc72      	bgt.n	4047aa <_svfprintf_r+0x108e>
  4046c4:	f108 0808 	add.w	r8, r8, #8
  4046c8:	b929      	cbnz	r1, 4046d6 <_svfprintf_r+0xfba>
  4046ca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4046cc:	b91b      	cbnz	r3, 4046d6 <_svfprintf_r+0xfba>
  4046ce:	9b07      	ldr	r3, [sp, #28]
  4046d0:	07d8      	lsls	r0, r3, #31
  4046d2:	f57f aa03 	bpl.w	403adc <_svfprintf_r+0x3c0>
  4046d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4046d8:	9819      	ldr	r0, [sp, #100]	; 0x64
  4046da:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  4046dc:	f8c8 2000 	str.w	r2, [r8]
  4046e0:	3301      	adds	r3, #1
  4046e2:	4602      	mov	r2, r0
  4046e4:	4422      	add	r2, r4
  4046e6:	2b07      	cmp	r3, #7
  4046e8:	9227      	str	r2, [sp, #156]	; 0x9c
  4046ea:	f8c8 0004 	str.w	r0, [r8, #4]
  4046ee:	9326      	str	r3, [sp, #152]	; 0x98
  4046f0:	f300 818d 	bgt.w	404a0e <_svfprintf_r+0x12f2>
  4046f4:	f108 0808 	add.w	r8, r8, #8
  4046f8:	2900      	cmp	r1, #0
  4046fa:	f2c0 8165 	blt.w	4049c8 <_svfprintf_r+0x12ac>
  4046fe:	9913      	ldr	r1, [sp, #76]	; 0x4c
  404700:	f8c8 6000 	str.w	r6, [r8]
  404704:	3301      	adds	r3, #1
  404706:	188c      	adds	r4, r1, r2
  404708:	2b07      	cmp	r3, #7
  40470a:	9427      	str	r4, [sp, #156]	; 0x9c
  40470c:	9326      	str	r3, [sp, #152]	; 0x98
  40470e:	f8c8 1004 	str.w	r1, [r8, #4]
  404712:	f77f a9e1 	ble.w	403ad8 <_svfprintf_r+0x3bc>
  404716:	e52c      	b.n	404172 <_svfprintf_r+0xa56>
  404718:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40471a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40471c:	6813      	ldr	r3, [r2, #0]
  40471e:	17cd      	asrs	r5, r1, #31
  404720:	4608      	mov	r0, r1
  404722:	3204      	adds	r2, #4
  404724:	4629      	mov	r1, r5
  404726:	920f      	str	r2, [sp, #60]	; 0x3c
  404728:	e9c3 0100 	strd	r0, r1, [r3]
  40472c:	f7ff b81d 	b.w	40376a <_svfprintf_r+0x4e>
  404730:	aa25      	add	r2, sp, #148	; 0x94
  404732:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404734:	980c      	ldr	r0, [sp, #48]	; 0x30
  404736:	f003 fcad 	bl	408094 <__ssprint_r>
  40473a:	2800      	cmp	r0, #0
  40473c:	f47f a8c0 	bne.w	4038c0 <_svfprintf_r+0x1a4>
  404740:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404742:	46c8      	mov	r8, r9
  404744:	e458      	b.n	403ff8 <_svfprintf_r+0x8dc>
  404746:	bf00      	nop
  404748:	00409a8c 	.word	0x00409a8c
  40474c:	00409a78 	.word	0x00409a78
  404750:	2140      	movs	r1, #64	; 0x40
  404752:	980c      	ldr	r0, [sp, #48]	; 0x30
  404754:	f7fe fada 	bl	402d0c <_malloc_r>
  404758:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40475a:	6010      	str	r0, [r2, #0]
  40475c:	6110      	str	r0, [r2, #16]
  40475e:	2800      	cmp	r0, #0
  404760:	f000 81f2 	beq.w	404b48 <_svfprintf_r+0x142c>
  404764:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404766:	2340      	movs	r3, #64	; 0x40
  404768:	6153      	str	r3, [r2, #20]
  40476a:	f7fe bfee 	b.w	40374a <_svfprintf_r+0x2e>
  40476e:	a823      	add	r0, sp, #140	; 0x8c
  404770:	a920      	add	r1, sp, #128	; 0x80
  404772:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  404774:	9004      	str	r0, [sp, #16]
  404776:	9103      	str	r1, [sp, #12]
  404778:	a81f      	add	r0, sp, #124	; 0x7c
  40477a:	2103      	movs	r1, #3
  40477c:	9002      	str	r0, [sp, #8]
  40477e:	9a08      	ldr	r2, [sp, #32]
  404780:	9401      	str	r4, [sp, #4]
  404782:	463b      	mov	r3, r7
  404784:	9100      	str	r1, [sp, #0]
  404786:	980c      	ldr	r0, [sp, #48]	; 0x30
  404788:	f001 f9ca 	bl	405b20 <_dtoa_r>
  40478c:	4625      	mov	r5, r4
  40478e:	4606      	mov	r6, r0
  404790:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404792:	2b46      	cmp	r3, #70	; 0x46
  404794:	eb06 0405 	add.w	r4, r6, r5
  404798:	f47f af29 	bne.w	4045ee <_svfprintf_r+0xed2>
  40479c:	7833      	ldrb	r3, [r6, #0]
  40479e:	2b30      	cmp	r3, #48	; 0x30
  4047a0:	f000 8178 	beq.w	404a94 <_svfprintf_r+0x1378>
  4047a4:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  4047a6:	442c      	add	r4, r5
  4047a8:	e721      	b.n	4045ee <_svfprintf_r+0xed2>
  4047aa:	aa25      	add	r2, sp, #148	; 0x94
  4047ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4047ae:	980c      	ldr	r0, [sp, #48]	; 0x30
  4047b0:	f003 fc70 	bl	408094 <__ssprint_r>
  4047b4:	2800      	cmp	r0, #0
  4047b6:	f47f a883 	bne.w	4038c0 <_svfprintf_r+0x1a4>
  4047ba:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4047bc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4047be:	46c8      	mov	r8, r9
  4047c0:	e782      	b.n	4046c8 <_svfprintf_r+0xfac>
  4047c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4047c4:	2b00      	cmp	r3, #0
  4047c6:	bf08      	it	eq
  4047c8:	2301      	moveq	r3, #1
  4047ca:	930a      	str	r3, [sp, #40]	; 0x28
  4047cc:	e6db      	b.n	404586 <_svfprintf_r+0xe6a>
  4047ce:	4630      	mov	r0, r6
  4047d0:	940a      	str	r4, [sp, #40]	; 0x28
  4047d2:	f7fe ff35 	bl	403640 <strlen>
  4047d6:	950f      	str	r5, [sp, #60]	; 0x3c
  4047d8:	900e      	str	r0, [sp, #56]	; 0x38
  4047da:	f8cd b01c 	str.w	fp, [sp, #28]
  4047de:	4603      	mov	r3, r0
  4047e0:	f7ff b9f9 	b.w	403bd6 <_svfprintf_r+0x4ba>
  4047e4:	272d      	movs	r7, #45	; 0x2d
  4047e6:	2300      	movs	r3, #0
  4047e8:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4047ec:	930a      	str	r3, [sp, #40]	; 0x28
  4047ee:	f7ff b8ae 	b.w	40394e <_svfprintf_r+0x232>
  4047f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4047f4:	9312      	str	r3, [sp, #72]	; 0x48
  4047f6:	461a      	mov	r2, r3
  4047f8:	3303      	adds	r3, #3
  4047fa:	db04      	blt.n	404806 <_svfprintf_r+0x10ea>
  4047fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4047fe:	4619      	mov	r1, r3
  404800:	4291      	cmp	r1, r2
  404802:	f6bf af17 	bge.w	404634 <_svfprintf_r+0xf18>
  404806:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404808:	3b02      	subs	r3, #2
  40480a:	9311      	str	r3, [sp, #68]	; 0x44
  40480c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  404810:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  404814:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404816:	3b01      	subs	r3, #1
  404818:	2b00      	cmp	r3, #0
  40481a:	931f      	str	r3, [sp, #124]	; 0x7c
  40481c:	bfbd      	ittte	lt
  40481e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  404820:	f1c3 0301 	rsblt	r3, r3, #1
  404824:	222d      	movlt	r2, #45	; 0x2d
  404826:	222b      	movge	r2, #43	; 0x2b
  404828:	2b09      	cmp	r3, #9
  40482a:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  40482e:	f340 8116 	ble.w	404a5e <_svfprintf_r+0x1342>
  404832:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  404836:	4620      	mov	r0, r4
  404838:	4dab      	ldr	r5, [pc, #684]	; (404ae8 <_svfprintf_r+0x13cc>)
  40483a:	e000      	b.n	40483e <_svfprintf_r+0x1122>
  40483c:	4610      	mov	r0, r2
  40483e:	fb85 1203 	smull	r1, r2, r5, r3
  404842:	17d9      	asrs	r1, r3, #31
  404844:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  404848:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  40484c:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  404850:	3230      	adds	r2, #48	; 0x30
  404852:	2909      	cmp	r1, #9
  404854:	f800 2c01 	strb.w	r2, [r0, #-1]
  404858:	460b      	mov	r3, r1
  40485a:	f100 32ff 	add.w	r2, r0, #4294967295
  40485e:	dced      	bgt.n	40483c <_svfprintf_r+0x1120>
  404860:	3330      	adds	r3, #48	; 0x30
  404862:	3802      	subs	r0, #2
  404864:	b2d9      	uxtb	r1, r3
  404866:	4284      	cmp	r4, r0
  404868:	f802 1c01 	strb.w	r1, [r2, #-1]
  40486c:	f240 8165 	bls.w	404b3a <_svfprintf_r+0x141e>
  404870:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  404874:	4613      	mov	r3, r2
  404876:	e001      	b.n	40487c <_svfprintf_r+0x1160>
  404878:	f813 1b01 	ldrb.w	r1, [r3], #1
  40487c:	f800 1b01 	strb.w	r1, [r0], #1
  404880:	42a3      	cmp	r3, r4
  404882:	d1f9      	bne.n	404878 <_svfprintf_r+0x115c>
  404884:	3301      	adds	r3, #1
  404886:	1a9b      	subs	r3, r3, r2
  404888:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  40488c:	4413      	add	r3, r2
  40488e:	aa21      	add	r2, sp, #132	; 0x84
  404890:	1a9b      	subs	r3, r3, r2
  404892:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404894:	931b      	str	r3, [sp, #108]	; 0x6c
  404896:	2a01      	cmp	r2, #1
  404898:	4413      	add	r3, r2
  40489a:	930e      	str	r3, [sp, #56]	; 0x38
  40489c:	f340 8119 	ble.w	404ad2 <_svfprintf_r+0x13b6>
  4048a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4048a2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4048a4:	4413      	add	r3, r2
  4048a6:	930e      	str	r3, [sp, #56]	; 0x38
  4048a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4048ac:	9308      	str	r3, [sp, #32]
  4048ae:	2300      	movs	r3, #0
  4048b0:	9312      	str	r3, [sp, #72]	; 0x48
  4048b2:	e6cf      	b.n	404654 <_svfprintf_r+0xf38>
  4048b4:	aa25      	add	r2, sp, #148	; 0x94
  4048b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4048b8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4048ba:	f003 fbeb 	bl	408094 <__ssprint_r>
  4048be:	2800      	cmp	r0, #0
  4048c0:	f47e affe 	bne.w	4038c0 <_svfprintf_r+0x1a4>
  4048c4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4048c6:	46c8      	mov	r8, r9
  4048c8:	e4d7      	b.n	40427a <_svfprintf_r+0xb5e>
  4048ca:	4623      	mov	r3, r4
  4048cc:	e6a2      	b.n	404614 <_svfprintf_r+0xef8>
  4048ce:	aa25      	add	r2, sp, #148	; 0x94
  4048d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4048d2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4048d4:	f003 fbde 	bl	408094 <__ssprint_r>
  4048d8:	2800      	cmp	r0, #0
  4048da:	f47e aff1 	bne.w	4038c0 <_svfprintf_r+0x1a4>
  4048de:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4048e0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4048e2:	46c8      	mov	r8, r9
  4048e4:	e5ae      	b.n	404444 <_svfprintf_r+0xd28>
  4048e6:	aa25      	add	r2, sp, #148	; 0x94
  4048e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4048ea:	980c      	ldr	r0, [sp, #48]	; 0x30
  4048ec:	f003 fbd2 	bl	408094 <__ssprint_r>
  4048f0:	2800      	cmp	r0, #0
  4048f2:	f47e afe5 	bne.w	4038c0 <_svfprintf_r+0x1a4>
  4048f6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4048f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4048fa:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4048fc:	1a9a      	subs	r2, r3, r2
  4048fe:	46c8      	mov	r8, r9
  404900:	e5b8      	b.n	404474 <_svfprintf_r+0xd58>
  404902:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404904:	9612      	str	r6, [sp, #72]	; 0x48
  404906:	2b06      	cmp	r3, #6
  404908:	bf28      	it	cs
  40490a:	2306      	movcs	r3, #6
  40490c:	960a      	str	r6, [sp, #40]	; 0x28
  40490e:	4637      	mov	r7, r6
  404910:	9308      	str	r3, [sp, #32]
  404912:	950f      	str	r5, [sp, #60]	; 0x3c
  404914:	f8cd b01c 	str.w	fp, [sp, #28]
  404918:	930e      	str	r3, [sp, #56]	; 0x38
  40491a:	4e74      	ldr	r6, [pc, #464]	; (404aec <_svfprintf_r+0x13d0>)
  40491c:	f7ff b816 	b.w	40394c <_svfprintf_r+0x230>
  404920:	a823      	add	r0, sp, #140	; 0x8c
  404922:	a920      	add	r1, sp, #128	; 0x80
  404924:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  404926:	9004      	str	r0, [sp, #16]
  404928:	9103      	str	r1, [sp, #12]
  40492a:	a81f      	add	r0, sp, #124	; 0x7c
  40492c:	2103      	movs	r1, #3
  40492e:	9002      	str	r0, [sp, #8]
  404930:	9a08      	ldr	r2, [sp, #32]
  404932:	9501      	str	r5, [sp, #4]
  404934:	463b      	mov	r3, r7
  404936:	9100      	str	r1, [sp, #0]
  404938:	980c      	ldr	r0, [sp, #48]	; 0x30
  40493a:	f001 f8f1 	bl	405b20 <_dtoa_r>
  40493e:	4606      	mov	r6, r0
  404940:	1944      	adds	r4, r0, r5
  404942:	e72b      	b.n	40479c <_svfprintf_r+0x1080>
  404944:	2306      	movs	r3, #6
  404946:	930a      	str	r3, [sp, #40]	; 0x28
  404948:	e61d      	b.n	404586 <_svfprintf_r+0xe6a>
  40494a:	272d      	movs	r7, #45	; 0x2d
  40494c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404950:	f7ff bacd 	b.w	403eee <_svfprintf_r+0x7d2>
  404954:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404956:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404958:	4413      	add	r3, r2
  40495a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40495c:	930e      	str	r3, [sp, #56]	; 0x38
  40495e:	2a00      	cmp	r2, #0
  404960:	f340 80b0 	ble.w	404ac4 <_svfprintf_r+0x13a8>
  404964:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404968:	9308      	str	r3, [sp, #32]
  40496a:	2367      	movs	r3, #103	; 0x67
  40496c:	9311      	str	r3, [sp, #68]	; 0x44
  40496e:	e671      	b.n	404654 <_svfprintf_r+0xf38>
  404970:	2b00      	cmp	r3, #0
  404972:	f340 80c3 	ble.w	404afc <_svfprintf_r+0x13e0>
  404976:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404978:	2a00      	cmp	r2, #0
  40497a:	f040 8099 	bne.w	404ab0 <_svfprintf_r+0x1394>
  40497e:	f01b 0f01 	tst.w	fp, #1
  404982:	f040 8095 	bne.w	404ab0 <_svfprintf_r+0x1394>
  404986:	9308      	str	r3, [sp, #32]
  404988:	930e      	str	r3, [sp, #56]	; 0x38
  40498a:	e663      	b.n	404654 <_svfprintf_r+0xf38>
  40498c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40498e:	9308      	str	r3, [sp, #32]
  404990:	930e      	str	r3, [sp, #56]	; 0x38
  404992:	900a      	str	r0, [sp, #40]	; 0x28
  404994:	950f      	str	r5, [sp, #60]	; 0x3c
  404996:	f8cd b01c 	str.w	fp, [sp, #28]
  40499a:	9012      	str	r0, [sp, #72]	; 0x48
  40499c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4049a0:	f7fe bfd4 	b.w	40394c <_svfprintf_r+0x230>
  4049a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4049a6:	2b47      	cmp	r3, #71	; 0x47
  4049a8:	f47f ae20 	bne.w	4045ec <_svfprintf_r+0xed0>
  4049ac:	f01b 0f01 	tst.w	fp, #1
  4049b0:	f47f aeee 	bne.w	404790 <_svfprintf_r+0x1074>
  4049b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4049b6:	1b9b      	subs	r3, r3, r6
  4049b8:	9313      	str	r3, [sp, #76]	; 0x4c
  4049ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4049bc:	2b47      	cmp	r3, #71	; 0x47
  4049be:	f43f af18 	beq.w	4047f2 <_svfprintf_r+0x10d6>
  4049c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4049c4:	9312      	str	r3, [sp, #72]	; 0x48
  4049c6:	e721      	b.n	40480c <_svfprintf_r+0x10f0>
  4049c8:	424f      	negs	r7, r1
  4049ca:	3110      	adds	r1, #16
  4049cc:	4d48      	ldr	r5, [pc, #288]	; (404af0 <_svfprintf_r+0x13d4>)
  4049ce:	da2f      	bge.n	404a30 <_svfprintf_r+0x1314>
  4049d0:	2410      	movs	r4, #16
  4049d2:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  4049d6:	e004      	b.n	4049e2 <_svfprintf_r+0x12c6>
  4049d8:	f108 0808 	add.w	r8, r8, #8
  4049dc:	3f10      	subs	r7, #16
  4049de:	2f10      	cmp	r7, #16
  4049e0:	dd26      	ble.n	404a30 <_svfprintf_r+0x1314>
  4049e2:	3301      	adds	r3, #1
  4049e4:	3210      	adds	r2, #16
  4049e6:	2b07      	cmp	r3, #7
  4049e8:	9227      	str	r2, [sp, #156]	; 0x9c
  4049ea:	9326      	str	r3, [sp, #152]	; 0x98
  4049ec:	f8c8 5000 	str.w	r5, [r8]
  4049f0:	f8c8 4004 	str.w	r4, [r8, #4]
  4049f4:	ddf0      	ble.n	4049d8 <_svfprintf_r+0x12bc>
  4049f6:	aa25      	add	r2, sp, #148	; 0x94
  4049f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4049fa:	4658      	mov	r0, fp
  4049fc:	f003 fb4a 	bl	408094 <__ssprint_r>
  404a00:	2800      	cmp	r0, #0
  404a02:	f47e af5d 	bne.w	4038c0 <_svfprintf_r+0x1a4>
  404a06:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404a08:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404a0a:	46c8      	mov	r8, r9
  404a0c:	e7e6      	b.n	4049dc <_svfprintf_r+0x12c0>
  404a0e:	aa25      	add	r2, sp, #148	; 0x94
  404a10:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404a12:	980c      	ldr	r0, [sp, #48]	; 0x30
  404a14:	f003 fb3e 	bl	408094 <__ssprint_r>
  404a18:	2800      	cmp	r0, #0
  404a1a:	f47e af51 	bne.w	4038c0 <_svfprintf_r+0x1a4>
  404a1e:	991f      	ldr	r1, [sp, #124]	; 0x7c
  404a20:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404a22:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404a24:	46c8      	mov	r8, r9
  404a26:	e667      	b.n	4046f8 <_svfprintf_r+0xfdc>
  404a28:	2000      	movs	r0, #0
  404a2a:	900a      	str	r0, [sp, #40]	; 0x28
  404a2c:	f7fe bed0 	b.w	4037d0 <_svfprintf_r+0xb4>
  404a30:	3301      	adds	r3, #1
  404a32:	443a      	add	r2, r7
  404a34:	2b07      	cmp	r3, #7
  404a36:	e888 00a0 	stmia.w	r8, {r5, r7}
  404a3a:	9227      	str	r2, [sp, #156]	; 0x9c
  404a3c:	9326      	str	r3, [sp, #152]	; 0x98
  404a3e:	f108 0808 	add.w	r8, r8, #8
  404a42:	f77f ae5c 	ble.w	4046fe <_svfprintf_r+0xfe2>
  404a46:	aa25      	add	r2, sp, #148	; 0x94
  404a48:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404a4a:	980c      	ldr	r0, [sp, #48]	; 0x30
  404a4c:	f003 fb22 	bl	408094 <__ssprint_r>
  404a50:	2800      	cmp	r0, #0
  404a52:	f47e af35 	bne.w	4038c0 <_svfprintf_r+0x1a4>
  404a56:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404a58:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404a5a:	46c8      	mov	r8, r9
  404a5c:	e64f      	b.n	4046fe <_svfprintf_r+0xfe2>
  404a5e:	3330      	adds	r3, #48	; 0x30
  404a60:	2230      	movs	r2, #48	; 0x30
  404a62:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  404a66:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  404a6a:	ab22      	add	r3, sp, #136	; 0x88
  404a6c:	e70f      	b.n	40488e <_svfprintf_r+0x1172>
  404a6e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404a70:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404a72:	4413      	add	r3, r2
  404a74:	930e      	str	r3, [sp, #56]	; 0x38
  404a76:	e775      	b.n	404964 <_svfprintf_r+0x1248>
  404a78:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404a7a:	e5cb      	b.n	404614 <_svfprintf_r+0xef8>
  404a7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404a7e:	4e1d      	ldr	r6, [pc, #116]	; (404af4 <_svfprintf_r+0x13d8>)
  404a80:	2b00      	cmp	r3, #0
  404a82:	bfb6      	itet	lt
  404a84:	272d      	movlt	r7, #45	; 0x2d
  404a86:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  404a8a:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  404a8e:	4b1a      	ldr	r3, [pc, #104]	; (404af8 <_svfprintf_r+0x13dc>)
  404a90:	f7ff ba2f 	b.w	403ef2 <_svfprintf_r+0x7d6>
  404a94:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404a96:	9808      	ldr	r0, [sp, #32]
  404a98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404a9a:	4639      	mov	r1, r7
  404a9c:	f004 f996 	bl	408dcc <__aeabi_dcmpeq>
  404aa0:	2800      	cmp	r0, #0
  404aa2:	f47f ae7f 	bne.w	4047a4 <_svfprintf_r+0x1088>
  404aa6:	f1c5 0501 	rsb	r5, r5, #1
  404aaa:	951f      	str	r5, [sp, #124]	; 0x7c
  404aac:	442c      	add	r4, r5
  404aae:	e59e      	b.n	4045ee <_svfprintf_r+0xed2>
  404ab0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404ab2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404ab4:	4413      	add	r3, r2
  404ab6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404ab8:	441a      	add	r2, r3
  404aba:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  404abe:	920e      	str	r2, [sp, #56]	; 0x38
  404ac0:	9308      	str	r3, [sp, #32]
  404ac2:	e5c7      	b.n	404654 <_svfprintf_r+0xf38>
  404ac4:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404ac6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404ac8:	f1c3 0301 	rsb	r3, r3, #1
  404acc:	441a      	add	r2, r3
  404ace:	4613      	mov	r3, r2
  404ad0:	e7d0      	b.n	404a74 <_svfprintf_r+0x1358>
  404ad2:	f01b 0301 	ands.w	r3, fp, #1
  404ad6:	9312      	str	r3, [sp, #72]	; 0x48
  404ad8:	f47f aee2 	bne.w	4048a0 <_svfprintf_r+0x1184>
  404adc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404ade:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404ae2:	9308      	str	r3, [sp, #32]
  404ae4:	e5b6      	b.n	404654 <_svfprintf_r+0xf38>
  404ae6:	bf00      	nop
  404ae8:	66666667 	.word	0x66666667
  404aec:	00409a70 	.word	0x00409a70
  404af0:	00409a8c 	.word	0x00409a8c
  404af4:	00409a44 	.word	0x00409a44
  404af8:	00409a40 	.word	0x00409a40
  404afc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404afe:	b913      	cbnz	r3, 404b06 <_svfprintf_r+0x13ea>
  404b00:	f01b 0f01 	tst.w	fp, #1
  404b04:	d002      	beq.n	404b0c <_svfprintf_r+0x13f0>
  404b06:	9b19      	ldr	r3, [sp, #100]	; 0x64
  404b08:	3301      	adds	r3, #1
  404b0a:	e7d4      	b.n	404ab6 <_svfprintf_r+0x139a>
  404b0c:	2301      	movs	r3, #1
  404b0e:	e73a      	b.n	404986 <_svfprintf_r+0x126a>
  404b10:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404b12:	f89a 3001 	ldrb.w	r3, [sl, #1]
  404b16:	6828      	ldr	r0, [r5, #0]
  404b18:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  404b1c:	900a      	str	r0, [sp, #40]	; 0x28
  404b1e:	4628      	mov	r0, r5
  404b20:	3004      	adds	r0, #4
  404b22:	46a2      	mov	sl, r4
  404b24:	900f      	str	r0, [sp, #60]	; 0x3c
  404b26:	f7fe be51 	b.w	4037cc <_svfprintf_r+0xb0>
  404b2a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404b2e:	f7ff b867 	b.w	403c00 <_svfprintf_r+0x4e4>
  404b32:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404b36:	f7ff ba15 	b.w	403f64 <_svfprintf_r+0x848>
  404b3a:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  404b3e:	e6a6      	b.n	40488e <_svfprintf_r+0x1172>
  404b40:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404b44:	f7ff b8eb 	b.w	403d1e <_svfprintf_r+0x602>
  404b48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404b4a:	230c      	movs	r3, #12
  404b4c:	6013      	str	r3, [r2, #0]
  404b4e:	f04f 33ff 	mov.w	r3, #4294967295
  404b52:	9309      	str	r3, [sp, #36]	; 0x24
  404b54:	f7fe bebd 	b.w	4038d2 <_svfprintf_r+0x1b6>
  404b58:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404b5c:	f7ff b99a 	b.w	403e94 <_svfprintf_r+0x778>
  404b60:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404b64:	f7ff b976 	b.w	403e54 <_svfprintf_r+0x738>
  404b68:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404b6c:	f7ff b959 	b.w	403e22 <_svfprintf_r+0x706>
  404b70:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404b74:	f7ff b912 	b.w	403d9c <_svfprintf_r+0x680>

00404b78 <__sprint_r.part.0>:
  404b78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404b7c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  404b7e:	049c      	lsls	r4, r3, #18
  404b80:	4693      	mov	fp, r2
  404b82:	d52f      	bpl.n	404be4 <__sprint_r.part.0+0x6c>
  404b84:	6893      	ldr	r3, [r2, #8]
  404b86:	6812      	ldr	r2, [r2, #0]
  404b88:	b353      	cbz	r3, 404be0 <__sprint_r.part.0+0x68>
  404b8a:	460e      	mov	r6, r1
  404b8c:	4607      	mov	r7, r0
  404b8e:	f102 0908 	add.w	r9, r2, #8
  404b92:	e919 0420 	ldmdb	r9, {r5, sl}
  404b96:	ea5f 089a 	movs.w	r8, sl, lsr #2
  404b9a:	d017      	beq.n	404bcc <__sprint_r.part.0+0x54>
  404b9c:	3d04      	subs	r5, #4
  404b9e:	2400      	movs	r4, #0
  404ba0:	e001      	b.n	404ba6 <__sprint_r.part.0+0x2e>
  404ba2:	45a0      	cmp	r8, r4
  404ba4:	d010      	beq.n	404bc8 <__sprint_r.part.0+0x50>
  404ba6:	4632      	mov	r2, r6
  404ba8:	f855 1f04 	ldr.w	r1, [r5, #4]!
  404bac:	4638      	mov	r0, r7
  404bae:	f002 f87b 	bl	406ca8 <_fputwc_r>
  404bb2:	1c43      	adds	r3, r0, #1
  404bb4:	f104 0401 	add.w	r4, r4, #1
  404bb8:	d1f3      	bne.n	404ba2 <__sprint_r.part.0+0x2a>
  404bba:	2300      	movs	r3, #0
  404bbc:	f8cb 3008 	str.w	r3, [fp, #8]
  404bc0:	f8cb 3004 	str.w	r3, [fp, #4]
  404bc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404bc8:	f8db 3008 	ldr.w	r3, [fp, #8]
  404bcc:	f02a 0a03 	bic.w	sl, sl, #3
  404bd0:	eba3 030a 	sub.w	r3, r3, sl
  404bd4:	f8cb 3008 	str.w	r3, [fp, #8]
  404bd8:	f109 0908 	add.w	r9, r9, #8
  404bdc:	2b00      	cmp	r3, #0
  404bde:	d1d8      	bne.n	404b92 <__sprint_r.part.0+0x1a>
  404be0:	2000      	movs	r0, #0
  404be2:	e7ea      	b.n	404bba <__sprint_r.part.0+0x42>
  404be4:	f002 f9ca 	bl	406f7c <__sfvwrite_r>
  404be8:	2300      	movs	r3, #0
  404bea:	f8cb 3008 	str.w	r3, [fp, #8]
  404bee:	f8cb 3004 	str.w	r3, [fp, #4]
  404bf2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404bf6:	bf00      	nop

00404bf8 <_vfiprintf_r>:
  404bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404bfc:	b0ad      	sub	sp, #180	; 0xb4
  404bfe:	461d      	mov	r5, r3
  404c00:	468b      	mov	fp, r1
  404c02:	4690      	mov	r8, r2
  404c04:	9307      	str	r3, [sp, #28]
  404c06:	9006      	str	r0, [sp, #24]
  404c08:	b118      	cbz	r0, 404c12 <_vfiprintf_r+0x1a>
  404c0a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404c0c:	2b00      	cmp	r3, #0
  404c0e:	f000 80f3 	beq.w	404df8 <_vfiprintf_r+0x200>
  404c12:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404c16:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  404c1a:	07df      	lsls	r7, r3, #31
  404c1c:	b281      	uxth	r1, r0
  404c1e:	d402      	bmi.n	404c26 <_vfiprintf_r+0x2e>
  404c20:	058e      	lsls	r6, r1, #22
  404c22:	f140 80fc 	bpl.w	404e1e <_vfiprintf_r+0x226>
  404c26:	048c      	lsls	r4, r1, #18
  404c28:	d40a      	bmi.n	404c40 <_vfiprintf_r+0x48>
  404c2a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404c2e:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  404c32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  404c36:	f8ab 100c 	strh.w	r1, [fp, #12]
  404c3a:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  404c3e:	b289      	uxth	r1, r1
  404c40:	0708      	lsls	r0, r1, #28
  404c42:	f140 80b3 	bpl.w	404dac <_vfiprintf_r+0x1b4>
  404c46:	f8db 3010 	ldr.w	r3, [fp, #16]
  404c4a:	2b00      	cmp	r3, #0
  404c4c:	f000 80ae 	beq.w	404dac <_vfiprintf_r+0x1b4>
  404c50:	f001 031a 	and.w	r3, r1, #26
  404c54:	2b0a      	cmp	r3, #10
  404c56:	f000 80b5 	beq.w	404dc4 <_vfiprintf_r+0x1cc>
  404c5a:	2300      	movs	r3, #0
  404c5c:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  404c60:	930b      	str	r3, [sp, #44]	; 0x2c
  404c62:	9311      	str	r3, [sp, #68]	; 0x44
  404c64:	9310      	str	r3, [sp, #64]	; 0x40
  404c66:	9303      	str	r3, [sp, #12]
  404c68:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  404c6c:	46ca      	mov	sl, r9
  404c6e:	f8cd b010 	str.w	fp, [sp, #16]
  404c72:	f898 3000 	ldrb.w	r3, [r8]
  404c76:	4644      	mov	r4, r8
  404c78:	b1fb      	cbz	r3, 404cba <_vfiprintf_r+0xc2>
  404c7a:	2b25      	cmp	r3, #37	; 0x25
  404c7c:	d102      	bne.n	404c84 <_vfiprintf_r+0x8c>
  404c7e:	e01c      	b.n	404cba <_vfiprintf_r+0xc2>
  404c80:	2b25      	cmp	r3, #37	; 0x25
  404c82:	d003      	beq.n	404c8c <_vfiprintf_r+0x94>
  404c84:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  404c88:	2b00      	cmp	r3, #0
  404c8a:	d1f9      	bne.n	404c80 <_vfiprintf_r+0x88>
  404c8c:	eba4 0508 	sub.w	r5, r4, r8
  404c90:	b19d      	cbz	r5, 404cba <_vfiprintf_r+0xc2>
  404c92:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404c94:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404c96:	f8ca 8000 	str.w	r8, [sl]
  404c9a:	3301      	adds	r3, #1
  404c9c:	442a      	add	r2, r5
  404c9e:	2b07      	cmp	r3, #7
  404ca0:	f8ca 5004 	str.w	r5, [sl, #4]
  404ca4:	9211      	str	r2, [sp, #68]	; 0x44
  404ca6:	9310      	str	r3, [sp, #64]	; 0x40
  404ca8:	dd7a      	ble.n	404da0 <_vfiprintf_r+0x1a8>
  404caa:	2a00      	cmp	r2, #0
  404cac:	f040 84b0 	bne.w	405610 <_vfiprintf_r+0xa18>
  404cb0:	9b03      	ldr	r3, [sp, #12]
  404cb2:	9210      	str	r2, [sp, #64]	; 0x40
  404cb4:	442b      	add	r3, r5
  404cb6:	46ca      	mov	sl, r9
  404cb8:	9303      	str	r3, [sp, #12]
  404cba:	7823      	ldrb	r3, [r4, #0]
  404cbc:	2b00      	cmp	r3, #0
  404cbe:	f000 83e0 	beq.w	405482 <_vfiprintf_r+0x88a>
  404cc2:	2000      	movs	r0, #0
  404cc4:	f04f 0300 	mov.w	r3, #0
  404cc8:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  404ccc:	f104 0801 	add.w	r8, r4, #1
  404cd0:	7862      	ldrb	r2, [r4, #1]
  404cd2:	4605      	mov	r5, r0
  404cd4:	4606      	mov	r6, r0
  404cd6:	4603      	mov	r3, r0
  404cd8:	f04f 34ff 	mov.w	r4, #4294967295
  404cdc:	f108 0801 	add.w	r8, r8, #1
  404ce0:	f1a2 0120 	sub.w	r1, r2, #32
  404ce4:	2958      	cmp	r1, #88	; 0x58
  404ce6:	f200 82de 	bhi.w	4052a6 <_vfiprintf_r+0x6ae>
  404cea:	e8df f011 	tbh	[pc, r1, lsl #1]
  404cee:	0221      	.short	0x0221
  404cf0:	02dc02dc 	.word	0x02dc02dc
  404cf4:	02dc0229 	.word	0x02dc0229
  404cf8:	02dc02dc 	.word	0x02dc02dc
  404cfc:	02dc02dc 	.word	0x02dc02dc
  404d00:	028902dc 	.word	0x028902dc
  404d04:	02dc0295 	.word	0x02dc0295
  404d08:	02bd00a2 	.word	0x02bd00a2
  404d0c:	019f02dc 	.word	0x019f02dc
  404d10:	01a401a4 	.word	0x01a401a4
  404d14:	01a401a4 	.word	0x01a401a4
  404d18:	01a401a4 	.word	0x01a401a4
  404d1c:	01a401a4 	.word	0x01a401a4
  404d20:	02dc01a4 	.word	0x02dc01a4
  404d24:	02dc02dc 	.word	0x02dc02dc
  404d28:	02dc02dc 	.word	0x02dc02dc
  404d2c:	02dc02dc 	.word	0x02dc02dc
  404d30:	02dc02dc 	.word	0x02dc02dc
  404d34:	01b202dc 	.word	0x01b202dc
  404d38:	02dc02dc 	.word	0x02dc02dc
  404d3c:	02dc02dc 	.word	0x02dc02dc
  404d40:	02dc02dc 	.word	0x02dc02dc
  404d44:	02dc02dc 	.word	0x02dc02dc
  404d48:	02dc02dc 	.word	0x02dc02dc
  404d4c:	02dc0197 	.word	0x02dc0197
  404d50:	02dc02dc 	.word	0x02dc02dc
  404d54:	02dc02dc 	.word	0x02dc02dc
  404d58:	02dc019b 	.word	0x02dc019b
  404d5c:	025302dc 	.word	0x025302dc
  404d60:	02dc02dc 	.word	0x02dc02dc
  404d64:	02dc02dc 	.word	0x02dc02dc
  404d68:	02dc02dc 	.word	0x02dc02dc
  404d6c:	02dc02dc 	.word	0x02dc02dc
  404d70:	02dc02dc 	.word	0x02dc02dc
  404d74:	021b025a 	.word	0x021b025a
  404d78:	02dc02dc 	.word	0x02dc02dc
  404d7c:	026e02dc 	.word	0x026e02dc
  404d80:	02dc021b 	.word	0x02dc021b
  404d84:	027302dc 	.word	0x027302dc
  404d88:	01f502dc 	.word	0x01f502dc
  404d8c:	02090182 	.word	0x02090182
  404d90:	02dc02d7 	.word	0x02dc02d7
  404d94:	02dc029a 	.word	0x02dc029a
  404d98:	02dc00a7 	.word	0x02dc00a7
  404d9c:	022e02dc 	.word	0x022e02dc
  404da0:	f10a 0a08 	add.w	sl, sl, #8
  404da4:	9b03      	ldr	r3, [sp, #12]
  404da6:	442b      	add	r3, r5
  404da8:	9303      	str	r3, [sp, #12]
  404daa:	e786      	b.n	404cba <_vfiprintf_r+0xc2>
  404dac:	4659      	mov	r1, fp
  404dae:	9806      	ldr	r0, [sp, #24]
  404db0:	f000 fdac 	bl	40590c <__swsetup_r>
  404db4:	bb18      	cbnz	r0, 404dfe <_vfiprintf_r+0x206>
  404db6:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  404dba:	f001 031a 	and.w	r3, r1, #26
  404dbe:	2b0a      	cmp	r3, #10
  404dc0:	f47f af4b 	bne.w	404c5a <_vfiprintf_r+0x62>
  404dc4:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  404dc8:	2b00      	cmp	r3, #0
  404dca:	f6ff af46 	blt.w	404c5a <_vfiprintf_r+0x62>
  404dce:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404dd2:	07db      	lsls	r3, r3, #31
  404dd4:	d405      	bmi.n	404de2 <_vfiprintf_r+0x1ea>
  404dd6:	058f      	lsls	r7, r1, #22
  404dd8:	d403      	bmi.n	404de2 <_vfiprintf_r+0x1ea>
  404dda:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404dde:	f002 fa91 	bl	407304 <__retarget_lock_release_recursive>
  404de2:	462b      	mov	r3, r5
  404de4:	4642      	mov	r2, r8
  404de6:	4659      	mov	r1, fp
  404de8:	9806      	ldr	r0, [sp, #24]
  404dea:	f000 fd4d 	bl	405888 <__sbprintf>
  404dee:	9003      	str	r0, [sp, #12]
  404df0:	9803      	ldr	r0, [sp, #12]
  404df2:	b02d      	add	sp, #180	; 0xb4
  404df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404df8:	f001 feb4 	bl	406b64 <__sinit>
  404dfc:	e709      	b.n	404c12 <_vfiprintf_r+0x1a>
  404dfe:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404e02:	07d9      	lsls	r1, r3, #31
  404e04:	d404      	bmi.n	404e10 <_vfiprintf_r+0x218>
  404e06:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404e0a:	059a      	lsls	r2, r3, #22
  404e0c:	f140 84aa 	bpl.w	405764 <_vfiprintf_r+0xb6c>
  404e10:	f04f 33ff 	mov.w	r3, #4294967295
  404e14:	9303      	str	r3, [sp, #12]
  404e16:	9803      	ldr	r0, [sp, #12]
  404e18:	b02d      	add	sp, #180	; 0xb4
  404e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404e1e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404e22:	f002 fa6d 	bl	407300 <__retarget_lock_acquire_recursive>
  404e26:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  404e2a:	b281      	uxth	r1, r0
  404e2c:	e6fb      	b.n	404c26 <_vfiprintf_r+0x2e>
  404e2e:	4276      	negs	r6, r6
  404e30:	9207      	str	r2, [sp, #28]
  404e32:	f043 0304 	orr.w	r3, r3, #4
  404e36:	f898 2000 	ldrb.w	r2, [r8]
  404e3a:	e74f      	b.n	404cdc <_vfiprintf_r+0xe4>
  404e3c:	9608      	str	r6, [sp, #32]
  404e3e:	069e      	lsls	r6, r3, #26
  404e40:	f100 8450 	bmi.w	4056e4 <_vfiprintf_r+0xaec>
  404e44:	9907      	ldr	r1, [sp, #28]
  404e46:	06dd      	lsls	r5, r3, #27
  404e48:	460a      	mov	r2, r1
  404e4a:	f100 83ef 	bmi.w	40562c <_vfiprintf_r+0xa34>
  404e4e:	0658      	lsls	r0, r3, #25
  404e50:	f140 83ec 	bpl.w	40562c <_vfiprintf_r+0xa34>
  404e54:	880e      	ldrh	r6, [r1, #0]
  404e56:	3104      	adds	r1, #4
  404e58:	2700      	movs	r7, #0
  404e5a:	2201      	movs	r2, #1
  404e5c:	9107      	str	r1, [sp, #28]
  404e5e:	f04f 0100 	mov.w	r1, #0
  404e62:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  404e66:	2500      	movs	r5, #0
  404e68:	1c61      	adds	r1, r4, #1
  404e6a:	f000 8116 	beq.w	40509a <_vfiprintf_r+0x4a2>
  404e6e:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  404e72:	9102      	str	r1, [sp, #8]
  404e74:	ea56 0107 	orrs.w	r1, r6, r7
  404e78:	f040 8114 	bne.w	4050a4 <_vfiprintf_r+0x4ac>
  404e7c:	2c00      	cmp	r4, #0
  404e7e:	f040 835c 	bne.w	40553a <_vfiprintf_r+0x942>
  404e82:	2a00      	cmp	r2, #0
  404e84:	f040 83b7 	bne.w	4055f6 <_vfiprintf_r+0x9fe>
  404e88:	f013 0301 	ands.w	r3, r3, #1
  404e8c:	9305      	str	r3, [sp, #20]
  404e8e:	f000 8457 	beq.w	405740 <_vfiprintf_r+0xb48>
  404e92:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  404e96:	2330      	movs	r3, #48	; 0x30
  404e98:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  404e9c:	9b05      	ldr	r3, [sp, #20]
  404e9e:	42a3      	cmp	r3, r4
  404ea0:	bfb8      	it	lt
  404ea2:	4623      	movlt	r3, r4
  404ea4:	9301      	str	r3, [sp, #4]
  404ea6:	b10d      	cbz	r5, 404eac <_vfiprintf_r+0x2b4>
  404ea8:	3301      	adds	r3, #1
  404eaa:	9301      	str	r3, [sp, #4]
  404eac:	9b02      	ldr	r3, [sp, #8]
  404eae:	f013 0302 	ands.w	r3, r3, #2
  404eb2:	9309      	str	r3, [sp, #36]	; 0x24
  404eb4:	d002      	beq.n	404ebc <_vfiprintf_r+0x2c4>
  404eb6:	9b01      	ldr	r3, [sp, #4]
  404eb8:	3302      	adds	r3, #2
  404eba:	9301      	str	r3, [sp, #4]
  404ebc:	9b02      	ldr	r3, [sp, #8]
  404ebe:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  404ec2:	930a      	str	r3, [sp, #40]	; 0x28
  404ec4:	f040 8217 	bne.w	4052f6 <_vfiprintf_r+0x6fe>
  404ec8:	9b08      	ldr	r3, [sp, #32]
  404eca:	9a01      	ldr	r2, [sp, #4]
  404ecc:	1a9d      	subs	r5, r3, r2
  404ece:	2d00      	cmp	r5, #0
  404ed0:	f340 8211 	ble.w	4052f6 <_vfiprintf_r+0x6fe>
  404ed4:	2d10      	cmp	r5, #16
  404ed6:	f340 8490 	ble.w	4057fa <_vfiprintf_r+0xc02>
  404eda:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404edc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404ede:	4ec4      	ldr	r6, [pc, #784]	; (4051f0 <_vfiprintf_r+0x5f8>)
  404ee0:	46d6      	mov	lr, sl
  404ee2:	2710      	movs	r7, #16
  404ee4:	46a2      	mov	sl, r4
  404ee6:	4619      	mov	r1, r3
  404ee8:	9c06      	ldr	r4, [sp, #24]
  404eea:	e007      	b.n	404efc <_vfiprintf_r+0x304>
  404eec:	f101 0c02 	add.w	ip, r1, #2
  404ef0:	f10e 0e08 	add.w	lr, lr, #8
  404ef4:	4601      	mov	r1, r0
  404ef6:	3d10      	subs	r5, #16
  404ef8:	2d10      	cmp	r5, #16
  404efa:	dd11      	ble.n	404f20 <_vfiprintf_r+0x328>
  404efc:	1c48      	adds	r0, r1, #1
  404efe:	3210      	adds	r2, #16
  404f00:	2807      	cmp	r0, #7
  404f02:	9211      	str	r2, [sp, #68]	; 0x44
  404f04:	e88e 00c0 	stmia.w	lr, {r6, r7}
  404f08:	9010      	str	r0, [sp, #64]	; 0x40
  404f0a:	ddef      	ble.n	404eec <_vfiprintf_r+0x2f4>
  404f0c:	2a00      	cmp	r2, #0
  404f0e:	f040 81e4 	bne.w	4052da <_vfiprintf_r+0x6e2>
  404f12:	3d10      	subs	r5, #16
  404f14:	2d10      	cmp	r5, #16
  404f16:	4611      	mov	r1, r2
  404f18:	f04f 0c01 	mov.w	ip, #1
  404f1c:	46ce      	mov	lr, r9
  404f1e:	dced      	bgt.n	404efc <_vfiprintf_r+0x304>
  404f20:	4654      	mov	r4, sl
  404f22:	4661      	mov	r1, ip
  404f24:	46f2      	mov	sl, lr
  404f26:	442a      	add	r2, r5
  404f28:	2907      	cmp	r1, #7
  404f2a:	9211      	str	r2, [sp, #68]	; 0x44
  404f2c:	f8ca 6000 	str.w	r6, [sl]
  404f30:	f8ca 5004 	str.w	r5, [sl, #4]
  404f34:	9110      	str	r1, [sp, #64]	; 0x40
  404f36:	f300 82ec 	bgt.w	405512 <_vfiprintf_r+0x91a>
  404f3a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404f3e:	f10a 0a08 	add.w	sl, sl, #8
  404f42:	1c48      	adds	r0, r1, #1
  404f44:	2d00      	cmp	r5, #0
  404f46:	f040 81de 	bne.w	405306 <_vfiprintf_r+0x70e>
  404f4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404f4c:	2b00      	cmp	r3, #0
  404f4e:	f000 81f8 	beq.w	405342 <_vfiprintf_r+0x74a>
  404f52:	3202      	adds	r2, #2
  404f54:	a90e      	add	r1, sp, #56	; 0x38
  404f56:	2302      	movs	r3, #2
  404f58:	2807      	cmp	r0, #7
  404f5a:	9211      	str	r2, [sp, #68]	; 0x44
  404f5c:	9010      	str	r0, [sp, #64]	; 0x40
  404f5e:	e88a 000a 	stmia.w	sl, {r1, r3}
  404f62:	f340 81ea 	ble.w	40533a <_vfiprintf_r+0x742>
  404f66:	2a00      	cmp	r2, #0
  404f68:	f040 838c 	bne.w	405684 <_vfiprintf_r+0xa8c>
  404f6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404f6e:	2b80      	cmp	r3, #128	; 0x80
  404f70:	f04f 0001 	mov.w	r0, #1
  404f74:	4611      	mov	r1, r2
  404f76:	46ca      	mov	sl, r9
  404f78:	f040 81e7 	bne.w	40534a <_vfiprintf_r+0x752>
  404f7c:	9b08      	ldr	r3, [sp, #32]
  404f7e:	9d01      	ldr	r5, [sp, #4]
  404f80:	1b5e      	subs	r6, r3, r5
  404f82:	2e00      	cmp	r6, #0
  404f84:	f340 81e1 	ble.w	40534a <_vfiprintf_r+0x752>
  404f88:	2e10      	cmp	r6, #16
  404f8a:	4d9a      	ldr	r5, [pc, #616]	; (4051f4 <_vfiprintf_r+0x5fc>)
  404f8c:	f340 8450 	ble.w	405830 <_vfiprintf_r+0xc38>
  404f90:	46d4      	mov	ip, sl
  404f92:	2710      	movs	r7, #16
  404f94:	46a2      	mov	sl, r4
  404f96:	9c06      	ldr	r4, [sp, #24]
  404f98:	e007      	b.n	404faa <_vfiprintf_r+0x3b2>
  404f9a:	f101 0e02 	add.w	lr, r1, #2
  404f9e:	f10c 0c08 	add.w	ip, ip, #8
  404fa2:	4601      	mov	r1, r0
  404fa4:	3e10      	subs	r6, #16
  404fa6:	2e10      	cmp	r6, #16
  404fa8:	dd11      	ble.n	404fce <_vfiprintf_r+0x3d6>
  404faa:	1c48      	adds	r0, r1, #1
  404fac:	3210      	adds	r2, #16
  404fae:	2807      	cmp	r0, #7
  404fb0:	9211      	str	r2, [sp, #68]	; 0x44
  404fb2:	e88c 00a0 	stmia.w	ip, {r5, r7}
  404fb6:	9010      	str	r0, [sp, #64]	; 0x40
  404fb8:	ddef      	ble.n	404f9a <_vfiprintf_r+0x3a2>
  404fba:	2a00      	cmp	r2, #0
  404fbc:	f040 829d 	bne.w	4054fa <_vfiprintf_r+0x902>
  404fc0:	3e10      	subs	r6, #16
  404fc2:	2e10      	cmp	r6, #16
  404fc4:	f04f 0e01 	mov.w	lr, #1
  404fc8:	4611      	mov	r1, r2
  404fca:	46cc      	mov	ip, r9
  404fcc:	dced      	bgt.n	404faa <_vfiprintf_r+0x3b2>
  404fce:	4654      	mov	r4, sl
  404fd0:	46e2      	mov	sl, ip
  404fd2:	4432      	add	r2, r6
  404fd4:	f1be 0f07 	cmp.w	lr, #7
  404fd8:	9211      	str	r2, [sp, #68]	; 0x44
  404fda:	e88a 0060 	stmia.w	sl, {r5, r6}
  404fde:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  404fe2:	f300 8369 	bgt.w	4056b8 <_vfiprintf_r+0xac0>
  404fe6:	f10a 0a08 	add.w	sl, sl, #8
  404fea:	f10e 0001 	add.w	r0, lr, #1
  404fee:	4671      	mov	r1, lr
  404ff0:	e1ab      	b.n	40534a <_vfiprintf_r+0x752>
  404ff2:	9608      	str	r6, [sp, #32]
  404ff4:	f013 0220 	ands.w	r2, r3, #32
  404ff8:	f040 838c 	bne.w	405714 <_vfiprintf_r+0xb1c>
  404ffc:	f013 0110 	ands.w	r1, r3, #16
  405000:	f040 831a 	bne.w	405638 <_vfiprintf_r+0xa40>
  405004:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  405008:	f000 8316 	beq.w	405638 <_vfiprintf_r+0xa40>
  40500c:	9807      	ldr	r0, [sp, #28]
  40500e:	460a      	mov	r2, r1
  405010:	4601      	mov	r1, r0
  405012:	3104      	adds	r1, #4
  405014:	8806      	ldrh	r6, [r0, #0]
  405016:	9107      	str	r1, [sp, #28]
  405018:	2700      	movs	r7, #0
  40501a:	e720      	b.n	404e5e <_vfiprintf_r+0x266>
  40501c:	9608      	str	r6, [sp, #32]
  40501e:	f043 0310 	orr.w	r3, r3, #16
  405022:	e7e7      	b.n	404ff4 <_vfiprintf_r+0x3fc>
  405024:	9608      	str	r6, [sp, #32]
  405026:	f043 0310 	orr.w	r3, r3, #16
  40502a:	e708      	b.n	404e3e <_vfiprintf_r+0x246>
  40502c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405030:	f898 2000 	ldrb.w	r2, [r8]
  405034:	e652      	b.n	404cdc <_vfiprintf_r+0xe4>
  405036:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40503a:	2600      	movs	r6, #0
  40503c:	f818 2b01 	ldrb.w	r2, [r8], #1
  405040:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  405044:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  405048:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40504c:	2909      	cmp	r1, #9
  40504e:	d9f5      	bls.n	40503c <_vfiprintf_r+0x444>
  405050:	e646      	b.n	404ce0 <_vfiprintf_r+0xe8>
  405052:	9608      	str	r6, [sp, #32]
  405054:	2800      	cmp	r0, #0
  405056:	f040 8408 	bne.w	40586a <_vfiprintf_r+0xc72>
  40505a:	f043 0310 	orr.w	r3, r3, #16
  40505e:	069e      	lsls	r6, r3, #26
  405060:	f100 834c 	bmi.w	4056fc <_vfiprintf_r+0xb04>
  405064:	06dd      	lsls	r5, r3, #27
  405066:	f100 82f3 	bmi.w	405650 <_vfiprintf_r+0xa58>
  40506a:	0658      	lsls	r0, r3, #25
  40506c:	f140 82f0 	bpl.w	405650 <_vfiprintf_r+0xa58>
  405070:	9d07      	ldr	r5, [sp, #28]
  405072:	f9b5 6000 	ldrsh.w	r6, [r5]
  405076:	462a      	mov	r2, r5
  405078:	17f7      	asrs	r7, r6, #31
  40507a:	3204      	adds	r2, #4
  40507c:	4630      	mov	r0, r6
  40507e:	4639      	mov	r1, r7
  405080:	9207      	str	r2, [sp, #28]
  405082:	2800      	cmp	r0, #0
  405084:	f171 0200 	sbcs.w	r2, r1, #0
  405088:	f2c0 835d 	blt.w	405746 <_vfiprintf_r+0xb4e>
  40508c:	1c61      	adds	r1, r4, #1
  40508e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405092:	f04f 0201 	mov.w	r2, #1
  405096:	f47f aeea 	bne.w	404e6e <_vfiprintf_r+0x276>
  40509a:	ea56 0107 	orrs.w	r1, r6, r7
  40509e:	f000 824d 	beq.w	40553c <_vfiprintf_r+0x944>
  4050a2:	9302      	str	r3, [sp, #8]
  4050a4:	2a01      	cmp	r2, #1
  4050a6:	f000 828c 	beq.w	4055c2 <_vfiprintf_r+0x9ca>
  4050aa:	2a02      	cmp	r2, #2
  4050ac:	f040 825c 	bne.w	405568 <_vfiprintf_r+0x970>
  4050b0:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4050b2:	46cb      	mov	fp, r9
  4050b4:	0933      	lsrs	r3, r6, #4
  4050b6:	f006 010f 	and.w	r1, r6, #15
  4050ba:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  4050be:	093a      	lsrs	r2, r7, #4
  4050c0:	461e      	mov	r6, r3
  4050c2:	4617      	mov	r7, r2
  4050c4:	5c43      	ldrb	r3, [r0, r1]
  4050c6:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  4050ca:	ea56 0307 	orrs.w	r3, r6, r7
  4050ce:	d1f1      	bne.n	4050b4 <_vfiprintf_r+0x4bc>
  4050d0:	eba9 030b 	sub.w	r3, r9, fp
  4050d4:	9305      	str	r3, [sp, #20]
  4050d6:	e6e1      	b.n	404e9c <_vfiprintf_r+0x2a4>
  4050d8:	2800      	cmp	r0, #0
  4050da:	f040 83c0 	bne.w	40585e <_vfiprintf_r+0xc66>
  4050de:	0699      	lsls	r1, r3, #26
  4050e0:	f100 8367 	bmi.w	4057b2 <_vfiprintf_r+0xbba>
  4050e4:	06da      	lsls	r2, r3, #27
  4050e6:	f100 80f1 	bmi.w	4052cc <_vfiprintf_r+0x6d4>
  4050ea:	065b      	lsls	r3, r3, #25
  4050ec:	f140 80ee 	bpl.w	4052cc <_vfiprintf_r+0x6d4>
  4050f0:	9a07      	ldr	r2, [sp, #28]
  4050f2:	6813      	ldr	r3, [r2, #0]
  4050f4:	3204      	adds	r2, #4
  4050f6:	9207      	str	r2, [sp, #28]
  4050f8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4050fc:	801a      	strh	r2, [r3, #0]
  4050fe:	e5b8      	b.n	404c72 <_vfiprintf_r+0x7a>
  405100:	9807      	ldr	r0, [sp, #28]
  405102:	4a3d      	ldr	r2, [pc, #244]	; (4051f8 <_vfiprintf_r+0x600>)
  405104:	9608      	str	r6, [sp, #32]
  405106:	920b      	str	r2, [sp, #44]	; 0x2c
  405108:	6806      	ldr	r6, [r0, #0]
  40510a:	2278      	movs	r2, #120	; 0x78
  40510c:	2130      	movs	r1, #48	; 0x30
  40510e:	3004      	adds	r0, #4
  405110:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  405114:	f043 0302 	orr.w	r3, r3, #2
  405118:	9007      	str	r0, [sp, #28]
  40511a:	2700      	movs	r7, #0
  40511c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  405120:	2202      	movs	r2, #2
  405122:	e69c      	b.n	404e5e <_vfiprintf_r+0x266>
  405124:	9608      	str	r6, [sp, #32]
  405126:	2800      	cmp	r0, #0
  405128:	d099      	beq.n	40505e <_vfiprintf_r+0x466>
  40512a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40512e:	e796      	b.n	40505e <_vfiprintf_r+0x466>
  405130:	f898 2000 	ldrb.w	r2, [r8]
  405134:	2d00      	cmp	r5, #0
  405136:	f47f add1 	bne.w	404cdc <_vfiprintf_r+0xe4>
  40513a:	2001      	movs	r0, #1
  40513c:	2520      	movs	r5, #32
  40513e:	e5cd      	b.n	404cdc <_vfiprintf_r+0xe4>
  405140:	f043 0301 	orr.w	r3, r3, #1
  405144:	f898 2000 	ldrb.w	r2, [r8]
  405148:	e5c8      	b.n	404cdc <_vfiprintf_r+0xe4>
  40514a:	9608      	str	r6, [sp, #32]
  40514c:	2800      	cmp	r0, #0
  40514e:	f040 8393 	bne.w	405878 <_vfiprintf_r+0xc80>
  405152:	4929      	ldr	r1, [pc, #164]	; (4051f8 <_vfiprintf_r+0x600>)
  405154:	910b      	str	r1, [sp, #44]	; 0x2c
  405156:	069f      	lsls	r7, r3, #26
  405158:	f100 82e8 	bmi.w	40572c <_vfiprintf_r+0xb34>
  40515c:	9807      	ldr	r0, [sp, #28]
  40515e:	06de      	lsls	r6, r3, #27
  405160:	4601      	mov	r1, r0
  405162:	f100 8270 	bmi.w	405646 <_vfiprintf_r+0xa4e>
  405166:	065d      	lsls	r5, r3, #25
  405168:	f140 826d 	bpl.w	405646 <_vfiprintf_r+0xa4e>
  40516c:	3104      	adds	r1, #4
  40516e:	8806      	ldrh	r6, [r0, #0]
  405170:	9107      	str	r1, [sp, #28]
  405172:	2700      	movs	r7, #0
  405174:	07d8      	lsls	r0, r3, #31
  405176:	f140 8222 	bpl.w	4055be <_vfiprintf_r+0x9c6>
  40517a:	ea56 0107 	orrs.w	r1, r6, r7
  40517e:	f000 821e 	beq.w	4055be <_vfiprintf_r+0x9c6>
  405182:	2130      	movs	r1, #48	; 0x30
  405184:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  405188:	f043 0302 	orr.w	r3, r3, #2
  40518c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  405190:	2202      	movs	r2, #2
  405192:	e664      	b.n	404e5e <_vfiprintf_r+0x266>
  405194:	9608      	str	r6, [sp, #32]
  405196:	2800      	cmp	r0, #0
  405198:	f040 836b 	bne.w	405872 <_vfiprintf_r+0xc7a>
  40519c:	4917      	ldr	r1, [pc, #92]	; (4051fc <_vfiprintf_r+0x604>)
  40519e:	910b      	str	r1, [sp, #44]	; 0x2c
  4051a0:	e7d9      	b.n	405156 <_vfiprintf_r+0x55e>
  4051a2:	9907      	ldr	r1, [sp, #28]
  4051a4:	9608      	str	r6, [sp, #32]
  4051a6:	680a      	ldr	r2, [r1, #0]
  4051a8:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4051ac:	f04f 0000 	mov.w	r0, #0
  4051b0:	460a      	mov	r2, r1
  4051b2:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  4051b6:	3204      	adds	r2, #4
  4051b8:	2001      	movs	r0, #1
  4051ba:	9001      	str	r0, [sp, #4]
  4051bc:	9207      	str	r2, [sp, #28]
  4051be:	9005      	str	r0, [sp, #20]
  4051c0:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4051c4:	9302      	str	r3, [sp, #8]
  4051c6:	2400      	movs	r4, #0
  4051c8:	e670      	b.n	404eac <_vfiprintf_r+0x2b4>
  4051ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4051ce:	f898 2000 	ldrb.w	r2, [r8]
  4051d2:	e583      	b.n	404cdc <_vfiprintf_r+0xe4>
  4051d4:	f898 2000 	ldrb.w	r2, [r8]
  4051d8:	2a6c      	cmp	r2, #108	; 0x6c
  4051da:	bf03      	ittte	eq
  4051dc:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  4051e0:	f043 0320 	orreq.w	r3, r3, #32
  4051e4:	f108 0801 	addeq.w	r8, r8, #1
  4051e8:	f043 0310 	orrne.w	r3, r3, #16
  4051ec:	e576      	b.n	404cdc <_vfiprintf_r+0xe4>
  4051ee:	bf00      	nop
  4051f0:	00409a9c 	.word	0x00409a9c
  4051f4:	00409aac 	.word	0x00409aac
  4051f8:	00409a5c 	.word	0x00409a5c
  4051fc:	00409a48 	.word	0x00409a48
  405200:	9907      	ldr	r1, [sp, #28]
  405202:	680e      	ldr	r6, [r1, #0]
  405204:	460a      	mov	r2, r1
  405206:	2e00      	cmp	r6, #0
  405208:	f102 0204 	add.w	r2, r2, #4
  40520c:	f6ff ae0f 	blt.w	404e2e <_vfiprintf_r+0x236>
  405210:	9207      	str	r2, [sp, #28]
  405212:	f898 2000 	ldrb.w	r2, [r8]
  405216:	e561      	b.n	404cdc <_vfiprintf_r+0xe4>
  405218:	f898 2000 	ldrb.w	r2, [r8]
  40521c:	2001      	movs	r0, #1
  40521e:	252b      	movs	r5, #43	; 0x2b
  405220:	e55c      	b.n	404cdc <_vfiprintf_r+0xe4>
  405222:	9907      	ldr	r1, [sp, #28]
  405224:	9608      	str	r6, [sp, #32]
  405226:	f8d1 b000 	ldr.w	fp, [r1]
  40522a:	f04f 0200 	mov.w	r2, #0
  40522e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  405232:	1d0e      	adds	r6, r1, #4
  405234:	f1bb 0f00 	cmp.w	fp, #0
  405238:	f000 82e5 	beq.w	405806 <_vfiprintf_r+0xc0e>
  40523c:	1c67      	adds	r7, r4, #1
  40523e:	f000 82c4 	beq.w	4057ca <_vfiprintf_r+0xbd2>
  405242:	4622      	mov	r2, r4
  405244:	2100      	movs	r1, #0
  405246:	4658      	mov	r0, fp
  405248:	9301      	str	r3, [sp, #4]
  40524a:	f002 f8f1 	bl	407430 <memchr>
  40524e:	9b01      	ldr	r3, [sp, #4]
  405250:	2800      	cmp	r0, #0
  405252:	f000 82e5 	beq.w	405820 <_vfiprintf_r+0xc28>
  405256:	eba0 020b 	sub.w	r2, r0, fp
  40525a:	9205      	str	r2, [sp, #20]
  40525c:	9607      	str	r6, [sp, #28]
  40525e:	9302      	str	r3, [sp, #8]
  405260:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405264:	2400      	movs	r4, #0
  405266:	e619      	b.n	404e9c <_vfiprintf_r+0x2a4>
  405268:	f898 2000 	ldrb.w	r2, [r8]
  40526c:	2a2a      	cmp	r2, #42	; 0x2a
  40526e:	f108 0701 	add.w	r7, r8, #1
  405272:	f000 82e9 	beq.w	405848 <_vfiprintf_r+0xc50>
  405276:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40527a:	2909      	cmp	r1, #9
  40527c:	46b8      	mov	r8, r7
  40527e:	f04f 0400 	mov.w	r4, #0
  405282:	f63f ad2d 	bhi.w	404ce0 <_vfiprintf_r+0xe8>
  405286:	f818 2b01 	ldrb.w	r2, [r8], #1
  40528a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40528e:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  405292:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  405296:	2909      	cmp	r1, #9
  405298:	d9f5      	bls.n	405286 <_vfiprintf_r+0x68e>
  40529a:	e521      	b.n	404ce0 <_vfiprintf_r+0xe8>
  40529c:	f043 0320 	orr.w	r3, r3, #32
  4052a0:	f898 2000 	ldrb.w	r2, [r8]
  4052a4:	e51a      	b.n	404cdc <_vfiprintf_r+0xe4>
  4052a6:	9608      	str	r6, [sp, #32]
  4052a8:	2800      	cmp	r0, #0
  4052aa:	f040 82db 	bne.w	405864 <_vfiprintf_r+0xc6c>
  4052ae:	2a00      	cmp	r2, #0
  4052b0:	f000 80e7 	beq.w	405482 <_vfiprintf_r+0x88a>
  4052b4:	2101      	movs	r1, #1
  4052b6:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4052ba:	f04f 0200 	mov.w	r2, #0
  4052be:	9101      	str	r1, [sp, #4]
  4052c0:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4052c4:	9105      	str	r1, [sp, #20]
  4052c6:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4052ca:	e77b      	b.n	4051c4 <_vfiprintf_r+0x5cc>
  4052cc:	9a07      	ldr	r2, [sp, #28]
  4052ce:	6813      	ldr	r3, [r2, #0]
  4052d0:	3204      	adds	r2, #4
  4052d2:	9207      	str	r2, [sp, #28]
  4052d4:	9a03      	ldr	r2, [sp, #12]
  4052d6:	601a      	str	r2, [r3, #0]
  4052d8:	e4cb      	b.n	404c72 <_vfiprintf_r+0x7a>
  4052da:	aa0f      	add	r2, sp, #60	; 0x3c
  4052dc:	9904      	ldr	r1, [sp, #16]
  4052de:	4620      	mov	r0, r4
  4052e0:	f7ff fc4a 	bl	404b78 <__sprint_r.part.0>
  4052e4:	2800      	cmp	r0, #0
  4052e6:	f040 8139 	bne.w	40555c <_vfiprintf_r+0x964>
  4052ea:	9910      	ldr	r1, [sp, #64]	; 0x40
  4052ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4052ee:	f101 0c01 	add.w	ip, r1, #1
  4052f2:	46ce      	mov	lr, r9
  4052f4:	e5ff      	b.n	404ef6 <_vfiprintf_r+0x2fe>
  4052f6:	9910      	ldr	r1, [sp, #64]	; 0x40
  4052f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4052fa:	1c48      	adds	r0, r1, #1
  4052fc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405300:	2d00      	cmp	r5, #0
  405302:	f43f ae22 	beq.w	404f4a <_vfiprintf_r+0x352>
  405306:	3201      	adds	r2, #1
  405308:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  40530c:	2101      	movs	r1, #1
  40530e:	2807      	cmp	r0, #7
  405310:	9211      	str	r2, [sp, #68]	; 0x44
  405312:	9010      	str	r0, [sp, #64]	; 0x40
  405314:	f8ca 5000 	str.w	r5, [sl]
  405318:	f8ca 1004 	str.w	r1, [sl, #4]
  40531c:	f340 8108 	ble.w	405530 <_vfiprintf_r+0x938>
  405320:	2a00      	cmp	r2, #0
  405322:	f040 81bc 	bne.w	40569e <_vfiprintf_r+0xaa6>
  405326:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405328:	2b00      	cmp	r3, #0
  40532a:	f43f ae1f 	beq.w	404f6c <_vfiprintf_r+0x374>
  40532e:	ab0e      	add	r3, sp, #56	; 0x38
  405330:	2202      	movs	r2, #2
  405332:	4608      	mov	r0, r1
  405334:	931c      	str	r3, [sp, #112]	; 0x70
  405336:	921d      	str	r2, [sp, #116]	; 0x74
  405338:	46ca      	mov	sl, r9
  40533a:	4601      	mov	r1, r0
  40533c:	f10a 0a08 	add.w	sl, sl, #8
  405340:	3001      	adds	r0, #1
  405342:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405344:	2b80      	cmp	r3, #128	; 0x80
  405346:	f43f ae19 	beq.w	404f7c <_vfiprintf_r+0x384>
  40534a:	9b05      	ldr	r3, [sp, #20]
  40534c:	1ae4      	subs	r4, r4, r3
  40534e:	2c00      	cmp	r4, #0
  405350:	dd2e      	ble.n	4053b0 <_vfiprintf_r+0x7b8>
  405352:	2c10      	cmp	r4, #16
  405354:	4db3      	ldr	r5, [pc, #716]	; (405624 <_vfiprintf_r+0xa2c>)
  405356:	dd1e      	ble.n	405396 <_vfiprintf_r+0x79e>
  405358:	46d6      	mov	lr, sl
  40535a:	2610      	movs	r6, #16
  40535c:	9f06      	ldr	r7, [sp, #24]
  40535e:	f8dd a010 	ldr.w	sl, [sp, #16]
  405362:	e006      	b.n	405372 <_vfiprintf_r+0x77a>
  405364:	1c88      	adds	r0, r1, #2
  405366:	f10e 0e08 	add.w	lr, lr, #8
  40536a:	4619      	mov	r1, r3
  40536c:	3c10      	subs	r4, #16
  40536e:	2c10      	cmp	r4, #16
  405370:	dd10      	ble.n	405394 <_vfiprintf_r+0x79c>
  405372:	1c4b      	adds	r3, r1, #1
  405374:	3210      	adds	r2, #16
  405376:	2b07      	cmp	r3, #7
  405378:	9211      	str	r2, [sp, #68]	; 0x44
  40537a:	e88e 0060 	stmia.w	lr, {r5, r6}
  40537e:	9310      	str	r3, [sp, #64]	; 0x40
  405380:	ddf0      	ble.n	405364 <_vfiprintf_r+0x76c>
  405382:	2a00      	cmp	r2, #0
  405384:	d165      	bne.n	405452 <_vfiprintf_r+0x85a>
  405386:	3c10      	subs	r4, #16
  405388:	2c10      	cmp	r4, #16
  40538a:	f04f 0001 	mov.w	r0, #1
  40538e:	4611      	mov	r1, r2
  405390:	46ce      	mov	lr, r9
  405392:	dcee      	bgt.n	405372 <_vfiprintf_r+0x77a>
  405394:	46f2      	mov	sl, lr
  405396:	4422      	add	r2, r4
  405398:	2807      	cmp	r0, #7
  40539a:	9211      	str	r2, [sp, #68]	; 0x44
  40539c:	f8ca 5000 	str.w	r5, [sl]
  4053a0:	f8ca 4004 	str.w	r4, [sl, #4]
  4053a4:	9010      	str	r0, [sp, #64]	; 0x40
  4053a6:	f300 8085 	bgt.w	4054b4 <_vfiprintf_r+0x8bc>
  4053aa:	f10a 0a08 	add.w	sl, sl, #8
  4053ae:	3001      	adds	r0, #1
  4053b0:	9905      	ldr	r1, [sp, #20]
  4053b2:	f8ca b000 	str.w	fp, [sl]
  4053b6:	440a      	add	r2, r1
  4053b8:	2807      	cmp	r0, #7
  4053ba:	9211      	str	r2, [sp, #68]	; 0x44
  4053bc:	f8ca 1004 	str.w	r1, [sl, #4]
  4053c0:	9010      	str	r0, [sp, #64]	; 0x40
  4053c2:	f340 8082 	ble.w	4054ca <_vfiprintf_r+0x8d2>
  4053c6:	2a00      	cmp	r2, #0
  4053c8:	f040 8118 	bne.w	4055fc <_vfiprintf_r+0xa04>
  4053cc:	9b02      	ldr	r3, [sp, #8]
  4053ce:	9210      	str	r2, [sp, #64]	; 0x40
  4053d0:	0758      	lsls	r0, r3, #29
  4053d2:	d535      	bpl.n	405440 <_vfiprintf_r+0x848>
  4053d4:	9b08      	ldr	r3, [sp, #32]
  4053d6:	9901      	ldr	r1, [sp, #4]
  4053d8:	1a5c      	subs	r4, r3, r1
  4053da:	2c00      	cmp	r4, #0
  4053dc:	f340 80e7 	ble.w	4055ae <_vfiprintf_r+0x9b6>
  4053e0:	46ca      	mov	sl, r9
  4053e2:	2c10      	cmp	r4, #16
  4053e4:	f340 8218 	ble.w	405818 <_vfiprintf_r+0xc20>
  4053e8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4053ea:	4e8f      	ldr	r6, [pc, #572]	; (405628 <_vfiprintf_r+0xa30>)
  4053ec:	9f06      	ldr	r7, [sp, #24]
  4053ee:	f8dd b010 	ldr.w	fp, [sp, #16]
  4053f2:	2510      	movs	r5, #16
  4053f4:	e006      	b.n	405404 <_vfiprintf_r+0x80c>
  4053f6:	1c88      	adds	r0, r1, #2
  4053f8:	f10a 0a08 	add.w	sl, sl, #8
  4053fc:	4619      	mov	r1, r3
  4053fe:	3c10      	subs	r4, #16
  405400:	2c10      	cmp	r4, #16
  405402:	dd11      	ble.n	405428 <_vfiprintf_r+0x830>
  405404:	1c4b      	adds	r3, r1, #1
  405406:	3210      	adds	r2, #16
  405408:	2b07      	cmp	r3, #7
  40540a:	9211      	str	r2, [sp, #68]	; 0x44
  40540c:	f8ca 6000 	str.w	r6, [sl]
  405410:	f8ca 5004 	str.w	r5, [sl, #4]
  405414:	9310      	str	r3, [sp, #64]	; 0x40
  405416:	ddee      	ble.n	4053f6 <_vfiprintf_r+0x7fe>
  405418:	bb42      	cbnz	r2, 40546c <_vfiprintf_r+0x874>
  40541a:	3c10      	subs	r4, #16
  40541c:	2c10      	cmp	r4, #16
  40541e:	f04f 0001 	mov.w	r0, #1
  405422:	4611      	mov	r1, r2
  405424:	46ca      	mov	sl, r9
  405426:	dced      	bgt.n	405404 <_vfiprintf_r+0x80c>
  405428:	4422      	add	r2, r4
  40542a:	2807      	cmp	r0, #7
  40542c:	9211      	str	r2, [sp, #68]	; 0x44
  40542e:	f8ca 6000 	str.w	r6, [sl]
  405432:	f8ca 4004 	str.w	r4, [sl, #4]
  405436:	9010      	str	r0, [sp, #64]	; 0x40
  405438:	dd51      	ble.n	4054de <_vfiprintf_r+0x8e6>
  40543a:	2a00      	cmp	r2, #0
  40543c:	f040 819b 	bne.w	405776 <_vfiprintf_r+0xb7e>
  405440:	9b03      	ldr	r3, [sp, #12]
  405442:	9a08      	ldr	r2, [sp, #32]
  405444:	9901      	ldr	r1, [sp, #4]
  405446:	428a      	cmp	r2, r1
  405448:	bfac      	ite	ge
  40544a:	189b      	addge	r3, r3, r2
  40544c:	185b      	addlt	r3, r3, r1
  40544e:	9303      	str	r3, [sp, #12]
  405450:	e04e      	b.n	4054f0 <_vfiprintf_r+0x8f8>
  405452:	aa0f      	add	r2, sp, #60	; 0x3c
  405454:	4651      	mov	r1, sl
  405456:	4638      	mov	r0, r7
  405458:	f7ff fb8e 	bl	404b78 <__sprint_r.part.0>
  40545c:	2800      	cmp	r0, #0
  40545e:	f040 813f 	bne.w	4056e0 <_vfiprintf_r+0xae8>
  405462:	9910      	ldr	r1, [sp, #64]	; 0x40
  405464:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405466:	1c48      	adds	r0, r1, #1
  405468:	46ce      	mov	lr, r9
  40546a:	e77f      	b.n	40536c <_vfiprintf_r+0x774>
  40546c:	aa0f      	add	r2, sp, #60	; 0x3c
  40546e:	4659      	mov	r1, fp
  405470:	4638      	mov	r0, r7
  405472:	f7ff fb81 	bl	404b78 <__sprint_r.part.0>
  405476:	b960      	cbnz	r0, 405492 <_vfiprintf_r+0x89a>
  405478:	9910      	ldr	r1, [sp, #64]	; 0x40
  40547a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40547c:	1c48      	adds	r0, r1, #1
  40547e:	46ca      	mov	sl, r9
  405480:	e7bd      	b.n	4053fe <_vfiprintf_r+0x806>
  405482:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405484:	f8dd b010 	ldr.w	fp, [sp, #16]
  405488:	2b00      	cmp	r3, #0
  40548a:	f040 81d4 	bne.w	405836 <_vfiprintf_r+0xc3e>
  40548e:	2300      	movs	r3, #0
  405490:	9310      	str	r3, [sp, #64]	; 0x40
  405492:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405496:	f013 0f01 	tst.w	r3, #1
  40549a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40549e:	d102      	bne.n	4054a6 <_vfiprintf_r+0x8ae>
  4054a0:	059a      	lsls	r2, r3, #22
  4054a2:	f140 80de 	bpl.w	405662 <_vfiprintf_r+0xa6a>
  4054a6:	065b      	lsls	r3, r3, #25
  4054a8:	f53f acb2 	bmi.w	404e10 <_vfiprintf_r+0x218>
  4054ac:	9803      	ldr	r0, [sp, #12]
  4054ae:	b02d      	add	sp, #180	; 0xb4
  4054b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4054b4:	2a00      	cmp	r2, #0
  4054b6:	f040 8106 	bne.w	4056c6 <_vfiprintf_r+0xace>
  4054ba:	9a05      	ldr	r2, [sp, #20]
  4054bc:	921d      	str	r2, [sp, #116]	; 0x74
  4054be:	2301      	movs	r3, #1
  4054c0:	9211      	str	r2, [sp, #68]	; 0x44
  4054c2:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  4054c6:	9310      	str	r3, [sp, #64]	; 0x40
  4054c8:	46ca      	mov	sl, r9
  4054ca:	f10a 0a08 	add.w	sl, sl, #8
  4054ce:	9b02      	ldr	r3, [sp, #8]
  4054d0:	0759      	lsls	r1, r3, #29
  4054d2:	d504      	bpl.n	4054de <_vfiprintf_r+0x8e6>
  4054d4:	9b08      	ldr	r3, [sp, #32]
  4054d6:	9901      	ldr	r1, [sp, #4]
  4054d8:	1a5c      	subs	r4, r3, r1
  4054da:	2c00      	cmp	r4, #0
  4054dc:	dc81      	bgt.n	4053e2 <_vfiprintf_r+0x7ea>
  4054de:	9b03      	ldr	r3, [sp, #12]
  4054e0:	9908      	ldr	r1, [sp, #32]
  4054e2:	9801      	ldr	r0, [sp, #4]
  4054e4:	4281      	cmp	r1, r0
  4054e6:	bfac      	ite	ge
  4054e8:	185b      	addge	r3, r3, r1
  4054ea:	181b      	addlt	r3, r3, r0
  4054ec:	9303      	str	r3, [sp, #12]
  4054ee:	bb72      	cbnz	r2, 40554e <_vfiprintf_r+0x956>
  4054f0:	2300      	movs	r3, #0
  4054f2:	9310      	str	r3, [sp, #64]	; 0x40
  4054f4:	46ca      	mov	sl, r9
  4054f6:	f7ff bbbc 	b.w	404c72 <_vfiprintf_r+0x7a>
  4054fa:	aa0f      	add	r2, sp, #60	; 0x3c
  4054fc:	9904      	ldr	r1, [sp, #16]
  4054fe:	4620      	mov	r0, r4
  405500:	f7ff fb3a 	bl	404b78 <__sprint_r.part.0>
  405504:	bb50      	cbnz	r0, 40555c <_vfiprintf_r+0x964>
  405506:	9910      	ldr	r1, [sp, #64]	; 0x40
  405508:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40550a:	f101 0e01 	add.w	lr, r1, #1
  40550e:	46cc      	mov	ip, r9
  405510:	e548      	b.n	404fa4 <_vfiprintf_r+0x3ac>
  405512:	2a00      	cmp	r2, #0
  405514:	f040 8140 	bne.w	405798 <_vfiprintf_r+0xba0>
  405518:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  40551c:	2900      	cmp	r1, #0
  40551e:	f000 811b 	beq.w	405758 <_vfiprintf_r+0xb60>
  405522:	2201      	movs	r2, #1
  405524:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  405528:	4610      	mov	r0, r2
  40552a:	921d      	str	r2, [sp, #116]	; 0x74
  40552c:	911c      	str	r1, [sp, #112]	; 0x70
  40552e:	46ca      	mov	sl, r9
  405530:	4601      	mov	r1, r0
  405532:	f10a 0a08 	add.w	sl, sl, #8
  405536:	3001      	adds	r0, #1
  405538:	e507      	b.n	404f4a <_vfiprintf_r+0x352>
  40553a:	9b02      	ldr	r3, [sp, #8]
  40553c:	2a01      	cmp	r2, #1
  40553e:	f000 8098 	beq.w	405672 <_vfiprintf_r+0xa7a>
  405542:	2a02      	cmp	r2, #2
  405544:	d10d      	bne.n	405562 <_vfiprintf_r+0x96a>
  405546:	9302      	str	r3, [sp, #8]
  405548:	2600      	movs	r6, #0
  40554a:	2700      	movs	r7, #0
  40554c:	e5b0      	b.n	4050b0 <_vfiprintf_r+0x4b8>
  40554e:	aa0f      	add	r2, sp, #60	; 0x3c
  405550:	9904      	ldr	r1, [sp, #16]
  405552:	9806      	ldr	r0, [sp, #24]
  405554:	f7ff fb10 	bl	404b78 <__sprint_r.part.0>
  405558:	2800      	cmp	r0, #0
  40555a:	d0c9      	beq.n	4054f0 <_vfiprintf_r+0x8f8>
  40555c:	f8dd b010 	ldr.w	fp, [sp, #16]
  405560:	e797      	b.n	405492 <_vfiprintf_r+0x89a>
  405562:	9302      	str	r3, [sp, #8]
  405564:	2600      	movs	r6, #0
  405566:	2700      	movs	r7, #0
  405568:	4649      	mov	r1, r9
  40556a:	e000      	b.n	40556e <_vfiprintf_r+0x976>
  40556c:	4659      	mov	r1, fp
  40556e:	08f2      	lsrs	r2, r6, #3
  405570:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  405574:	08f8      	lsrs	r0, r7, #3
  405576:	f006 0307 	and.w	r3, r6, #7
  40557a:	4607      	mov	r7, r0
  40557c:	4616      	mov	r6, r2
  40557e:	3330      	adds	r3, #48	; 0x30
  405580:	ea56 0207 	orrs.w	r2, r6, r7
  405584:	f801 3c01 	strb.w	r3, [r1, #-1]
  405588:	f101 3bff 	add.w	fp, r1, #4294967295
  40558c:	d1ee      	bne.n	40556c <_vfiprintf_r+0x974>
  40558e:	9a02      	ldr	r2, [sp, #8]
  405590:	07d6      	lsls	r6, r2, #31
  405592:	f57f ad9d 	bpl.w	4050d0 <_vfiprintf_r+0x4d8>
  405596:	2b30      	cmp	r3, #48	; 0x30
  405598:	f43f ad9a 	beq.w	4050d0 <_vfiprintf_r+0x4d8>
  40559c:	3902      	subs	r1, #2
  40559e:	2330      	movs	r3, #48	; 0x30
  4055a0:	f80b 3c01 	strb.w	r3, [fp, #-1]
  4055a4:	eba9 0301 	sub.w	r3, r9, r1
  4055a8:	9305      	str	r3, [sp, #20]
  4055aa:	468b      	mov	fp, r1
  4055ac:	e476      	b.n	404e9c <_vfiprintf_r+0x2a4>
  4055ae:	9b03      	ldr	r3, [sp, #12]
  4055b0:	9a08      	ldr	r2, [sp, #32]
  4055b2:	428a      	cmp	r2, r1
  4055b4:	bfac      	ite	ge
  4055b6:	189b      	addge	r3, r3, r2
  4055b8:	185b      	addlt	r3, r3, r1
  4055ba:	9303      	str	r3, [sp, #12]
  4055bc:	e798      	b.n	4054f0 <_vfiprintf_r+0x8f8>
  4055be:	2202      	movs	r2, #2
  4055c0:	e44d      	b.n	404e5e <_vfiprintf_r+0x266>
  4055c2:	2f00      	cmp	r7, #0
  4055c4:	bf08      	it	eq
  4055c6:	2e0a      	cmpeq	r6, #10
  4055c8:	d352      	bcc.n	405670 <_vfiprintf_r+0xa78>
  4055ca:	46cb      	mov	fp, r9
  4055cc:	4630      	mov	r0, r6
  4055ce:	4639      	mov	r1, r7
  4055d0:	220a      	movs	r2, #10
  4055d2:	2300      	movs	r3, #0
  4055d4:	f003 fc6a 	bl	408eac <__aeabi_uldivmod>
  4055d8:	3230      	adds	r2, #48	; 0x30
  4055da:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  4055de:	4630      	mov	r0, r6
  4055e0:	4639      	mov	r1, r7
  4055e2:	2300      	movs	r3, #0
  4055e4:	220a      	movs	r2, #10
  4055e6:	f003 fc61 	bl	408eac <__aeabi_uldivmod>
  4055ea:	4606      	mov	r6, r0
  4055ec:	460f      	mov	r7, r1
  4055ee:	ea56 0307 	orrs.w	r3, r6, r7
  4055f2:	d1eb      	bne.n	4055cc <_vfiprintf_r+0x9d4>
  4055f4:	e56c      	b.n	4050d0 <_vfiprintf_r+0x4d8>
  4055f6:	9405      	str	r4, [sp, #20]
  4055f8:	46cb      	mov	fp, r9
  4055fa:	e44f      	b.n	404e9c <_vfiprintf_r+0x2a4>
  4055fc:	aa0f      	add	r2, sp, #60	; 0x3c
  4055fe:	9904      	ldr	r1, [sp, #16]
  405600:	9806      	ldr	r0, [sp, #24]
  405602:	f7ff fab9 	bl	404b78 <__sprint_r.part.0>
  405606:	2800      	cmp	r0, #0
  405608:	d1a8      	bne.n	40555c <_vfiprintf_r+0x964>
  40560a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40560c:	46ca      	mov	sl, r9
  40560e:	e75e      	b.n	4054ce <_vfiprintf_r+0x8d6>
  405610:	aa0f      	add	r2, sp, #60	; 0x3c
  405612:	9904      	ldr	r1, [sp, #16]
  405614:	9806      	ldr	r0, [sp, #24]
  405616:	f7ff faaf 	bl	404b78 <__sprint_r.part.0>
  40561a:	2800      	cmp	r0, #0
  40561c:	d19e      	bne.n	40555c <_vfiprintf_r+0x964>
  40561e:	46ca      	mov	sl, r9
  405620:	f7ff bbc0 	b.w	404da4 <_vfiprintf_r+0x1ac>
  405624:	00409aac 	.word	0x00409aac
  405628:	00409a9c 	.word	0x00409a9c
  40562c:	3104      	adds	r1, #4
  40562e:	6816      	ldr	r6, [r2, #0]
  405630:	9107      	str	r1, [sp, #28]
  405632:	2201      	movs	r2, #1
  405634:	2700      	movs	r7, #0
  405636:	e412      	b.n	404e5e <_vfiprintf_r+0x266>
  405638:	9807      	ldr	r0, [sp, #28]
  40563a:	4601      	mov	r1, r0
  40563c:	3104      	adds	r1, #4
  40563e:	6806      	ldr	r6, [r0, #0]
  405640:	9107      	str	r1, [sp, #28]
  405642:	2700      	movs	r7, #0
  405644:	e40b      	b.n	404e5e <_vfiprintf_r+0x266>
  405646:	680e      	ldr	r6, [r1, #0]
  405648:	3104      	adds	r1, #4
  40564a:	9107      	str	r1, [sp, #28]
  40564c:	2700      	movs	r7, #0
  40564e:	e591      	b.n	405174 <_vfiprintf_r+0x57c>
  405650:	9907      	ldr	r1, [sp, #28]
  405652:	680e      	ldr	r6, [r1, #0]
  405654:	460a      	mov	r2, r1
  405656:	17f7      	asrs	r7, r6, #31
  405658:	3204      	adds	r2, #4
  40565a:	9207      	str	r2, [sp, #28]
  40565c:	4630      	mov	r0, r6
  40565e:	4639      	mov	r1, r7
  405660:	e50f      	b.n	405082 <_vfiprintf_r+0x48a>
  405662:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405666:	f001 fe4d 	bl	407304 <__retarget_lock_release_recursive>
  40566a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40566e:	e71a      	b.n	4054a6 <_vfiprintf_r+0x8ae>
  405670:	9b02      	ldr	r3, [sp, #8]
  405672:	9302      	str	r3, [sp, #8]
  405674:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  405678:	3630      	adds	r6, #48	; 0x30
  40567a:	2301      	movs	r3, #1
  40567c:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  405680:	9305      	str	r3, [sp, #20]
  405682:	e40b      	b.n	404e9c <_vfiprintf_r+0x2a4>
  405684:	aa0f      	add	r2, sp, #60	; 0x3c
  405686:	9904      	ldr	r1, [sp, #16]
  405688:	9806      	ldr	r0, [sp, #24]
  40568a:	f7ff fa75 	bl	404b78 <__sprint_r.part.0>
  40568e:	2800      	cmp	r0, #0
  405690:	f47f af64 	bne.w	40555c <_vfiprintf_r+0x964>
  405694:	9910      	ldr	r1, [sp, #64]	; 0x40
  405696:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405698:	1c48      	adds	r0, r1, #1
  40569a:	46ca      	mov	sl, r9
  40569c:	e651      	b.n	405342 <_vfiprintf_r+0x74a>
  40569e:	aa0f      	add	r2, sp, #60	; 0x3c
  4056a0:	9904      	ldr	r1, [sp, #16]
  4056a2:	9806      	ldr	r0, [sp, #24]
  4056a4:	f7ff fa68 	bl	404b78 <__sprint_r.part.0>
  4056a8:	2800      	cmp	r0, #0
  4056aa:	f47f af57 	bne.w	40555c <_vfiprintf_r+0x964>
  4056ae:	9910      	ldr	r1, [sp, #64]	; 0x40
  4056b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4056b2:	1c48      	adds	r0, r1, #1
  4056b4:	46ca      	mov	sl, r9
  4056b6:	e448      	b.n	404f4a <_vfiprintf_r+0x352>
  4056b8:	2a00      	cmp	r2, #0
  4056ba:	f040 8091 	bne.w	4057e0 <_vfiprintf_r+0xbe8>
  4056be:	2001      	movs	r0, #1
  4056c0:	4611      	mov	r1, r2
  4056c2:	46ca      	mov	sl, r9
  4056c4:	e641      	b.n	40534a <_vfiprintf_r+0x752>
  4056c6:	aa0f      	add	r2, sp, #60	; 0x3c
  4056c8:	9904      	ldr	r1, [sp, #16]
  4056ca:	9806      	ldr	r0, [sp, #24]
  4056cc:	f7ff fa54 	bl	404b78 <__sprint_r.part.0>
  4056d0:	2800      	cmp	r0, #0
  4056d2:	f47f af43 	bne.w	40555c <_vfiprintf_r+0x964>
  4056d6:	9810      	ldr	r0, [sp, #64]	; 0x40
  4056d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4056da:	3001      	adds	r0, #1
  4056dc:	46ca      	mov	sl, r9
  4056de:	e667      	b.n	4053b0 <_vfiprintf_r+0x7b8>
  4056e0:	46d3      	mov	fp, sl
  4056e2:	e6d6      	b.n	405492 <_vfiprintf_r+0x89a>
  4056e4:	9e07      	ldr	r6, [sp, #28]
  4056e6:	3607      	adds	r6, #7
  4056e8:	f026 0207 	bic.w	r2, r6, #7
  4056ec:	f102 0108 	add.w	r1, r2, #8
  4056f0:	e9d2 6700 	ldrd	r6, r7, [r2]
  4056f4:	9107      	str	r1, [sp, #28]
  4056f6:	2201      	movs	r2, #1
  4056f8:	f7ff bbb1 	b.w	404e5e <_vfiprintf_r+0x266>
  4056fc:	9e07      	ldr	r6, [sp, #28]
  4056fe:	3607      	adds	r6, #7
  405700:	f026 0607 	bic.w	r6, r6, #7
  405704:	e9d6 0100 	ldrd	r0, r1, [r6]
  405708:	f106 0208 	add.w	r2, r6, #8
  40570c:	9207      	str	r2, [sp, #28]
  40570e:	4606      	mov	r6, r0
  405710:	460f      	mov	r7, r1
  405712:	e4b6      	b.n	405082 <_vfiprintf_r+0x48a>
  405714:	9e07      	ldr	r6, [sp, #28]
  405716:	3607      	adds	r6, #7
  405718:	f026 0207 	bic.w	r2, r6, #7
  40571c:	f102 0108 	add.w	r1, r2, #8
  405720:	e9d2 6700 	ldrd	r6, r7, [r2]
  405724:	9107      	str	r1, [sp, #28]
  405726:	2200      	movs	r2, #0
  405728:	f7ff bb99 	b.w	404e5e <_vfiprintf_r+0x266>
  40572c:	9e07      	ldr	r6, [sp, #28]
  40572e:	3607      	adds	r6, #7
  405730:	f026 0107 	bic.w	r1, r6, #7
  405734:	f101 0008 	add.w	r0, r1, #8
  405738:	9007      	str	r0, [sp, #28]
  40573a:	e9d1 6700 	ldrd	r6, r7, [r1]
  40573e:	e519      	b.n	405174 <_vfiprintf_r+0x57c>
  405740:	46cb      	mov	fp, r9
  405742:	f7ff bbab 	b.w	404e9c <_vfiprintf_r+0x2a4>
  405746:	252d      	movs	r5, #45	; 0x2d
  405748:	4276      	negs	r6, r6
  40574a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  40574e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405752:	2201      	movs	r2, #1
  405754:	f7ff bb88 	b.w	404e68 <_vfiprintf_r+0x270>
  405758:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40575a:	b9b3      	cbnz	r3, 40578a <_vfiprintf_r+0xb92>
  40575c:	4611      	mov	r1, r2
  40575e:	2001      	movs	r0, #1
  405760:	46ca      	mov	sl, r9
  405762:	e5f2      	b.n	40534a <_vfiprintf_r+0x752>
  405764:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405768:	f001 fdcc 	bl	407304 <__retarget_lock_release_recursive>
  40576c:	f04f 33ff 	mov.w	r3, #4294967295
  405770:	9303      	str	r3, [sp, #12]
  405772:	f7ff bb50 	b.w	404e16 <_vfiprintf_r+0x21e>
  405776:	aa0f      	add	r2, sp, #60	; 0x3c
  405778:	9904      	ldr	r1, [sp, #16]
  40577a:	9806      	ldr	r0, [sp, #24]
  40577c:	f7ff f9fc 	bl	404b78 <__sprint_r.part.0>
  405780:	2800      	cmp	r0, #0
  405782:	f47f aeeb 	bne.w	40555c <_vfiprintf_r+0x964>
  405786:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405788:	e6a9      	b.n	4054de <_vfiprintf_r+0x8e6>
  40578a:	ab0e      	add	r3, sp, #56	; 0x38
  40578c:	2202      	movs	r2, #2
  40578e:	931c      	str	r3, [sp, #112]	; 0x70
  405790:	921d      	str	r2, [sp, #116]	; 0x74
  405792:	2001      	movs	r0, #1
  405794:	46ca      	mov	sl, r9
  405796:	e5d0      	b.n	40533a <_vfiprintf_r+0x742>
  405798:	aa0f      	add	r2, sp, #60	; 0x3c
  40579a:	9904      	ldr	r1, [sp, #16]
  40579c:	9806      	ldr	r0, [sp, #24]
  40579e:	f7ff f9eb 	bl	404b78 <__sprint_r.part.0>
  4057a2:	2800      	cmp	r0, #0
  4057a4:	f47f aeda 	bne.w	40555c <_vfiprintf_r+0x964>
  4057a8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4057aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4057ac:	1c48      	adds	r0, r1, #1
  4057ae:	46ca      	mov	sl, r9
  4057b0:	e5a4      	b.n	4052fc <_vfiprintf_r+0x704>
  4057b2:	9a07      	ldr	r2, [sp, #28]
  4057b4:	9903      	ldr	r1, [sp, #12]
  4057b6:	6813      	ldr	r3, [r2, #0]
  4057b8:	17cd      	asrs	r5, r1, #31
  4057ba:	4608      	mov	r0, r1
  4057bc:	3204      	adds	r2, #4
  4057be:	4629      	mov	r1, r5
  4057c0:	9207      	str	r2, [sp, #28]
  4057c2:	e9c3 0100 	strd	r0, r1, [r3]
  4057c6:	f7ff ba54 	b.w	404c72 <_vfiprintf_r+0x7a>
  4057ca:	4658      	mov	r0, fp
  4057cc:	9607      	str	r6, [sp, #28]
  4057ce:	9302      	str	r3, [sp, #8]
  4057d0:	f7fd ff36 	bl	403640 <strlen>
  4057d4:	2400      	movs	r4, #0
  4057d6:	9005      	str	r0, [sp, #20]
  4057d8:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4057dc:	f7ff bb5e 	b.w	404e9c <_vfiprintf_r+0x2a4>
  4057e0:	aa0f      	add	r2, sp, #60	; 0x3c
  4057e2:	9904      	ldr	r1, [sp, #16]
  4057e4:	9806      	ldr	r0, [sp, #24]
  4057e6:	f7ff f9c7 	bl	404b78 <__sprint_r.part.0>
  4057ea:	2800      	cmp	r0, #0
  4057ec:	f47f aeb6 	bne.w	40555c <_vfiprintf_r+0x964>
  4057f0:	9910      	ldr	r1, [sp, #64]	; 0x40
  4057f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4057f4:	1c48      	adds	r0, r1, #1
  4057f6:	46ca      	mov	sl, r9
  4057f8:	e5a7      	b.n	40534a <_vfiprintf_r+0x752>
  4057fa:	9910      	ldr	r1, [sp, #64]	; 0x40
  4057fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4057fe:	4e20      	ldr	r6, [pc, #128]	; (405880 <_vfiprintf_r+0xc88>)
  405800:	3101      	adds	r1, #1
  405802:	f7ff bb90 	b.w	404f26 <_vfiprintf_r+0x32e>
  405806:	2c06      	cmp	r4, #6
  405808:	bf28      	it	cs
  40580a:	2406      	movcs	r4, #6
  40580c:	9405      	str	r4, [sp, #20]
  40580e:	9607      	str	r6, [sp, #28]
  405810:	9401      	str	r4, [sp, #4]
  405812:	f8df b070 	ldr.w	fp, [pc, #112]	; 405884 <_vfiprintf_r+0xc8c>
  405816:	e4d5      	b.n	4051c4 <_vfiprintf_r+0x5cc>
  405818:	9810      	ldr	r0, [sp, #64]	; 0x40
  40581a:	4e19      	ldr	r6, [pc, #100]	; (405880 <_vfiprintf_r+0xc88>)
  40581c:	3001      	adds	r0, #1
  40581e:	e603      	b.n	405428 <_vfiprintf_r+0x830>
  405820:	9405      	str	r4, [sp, #20]
  405822:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405826:	9607      	str	r6, [sp, #28]
  405828:	9302      	str	r3, [sp, #8]
  40582a:	4604      	mov	r4, r0
  40582c:	f7ff bb36 	b.w	404e9c <_vfiprintf_r+0x2a4>
  405830:	4686      	mov	lr, r0
  405832:	f7ff bbce 	b.w	404fd2 <_vfiprintf_r+0x3da>
  405836:	9806      	ldr	r0, [sp, #24]
  405838:	aa0f      	add	r2, sp, #60	; 0x3c
  40583a:	4659      	mov	r1, fp
  40583c:	f7ff f99c 	bl	404b78 <__sprint_r.part.0>
  405840:	2800      	cmp	r0, #0
  405842:	f43f ae24 	beq.w	40548e <_vfiprintf_r+0x896>
  405846:	e624      	b.n	405492 <_vfiprintf_r+0x89a>
  405848:	9907      	ldr	r1, [sp, #28]
  40584a:	f898 2001 	ldrb.w	r2, [r8, #1]
  40584e:	680c      	ldr	r4, [r1, #0]
  405850:	3104      	adds	r1, #4
  405852:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  405856:	46b8      	mov	r8, r7
  405858:	9107      	str	r1, [sp, #28]
  40585a:	f7ff ba3f 	b.w	404cdc <_vfiprintf_r+0xe4>
  40585e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405862:	e43c      	b.n	4050de <_vfiprintf_r+0x4e6>
  405864:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405868:	e521      	b.n	4052ae <_vfiprintf_r+0x6b6>
  40586a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40586e:	f7ff bbf4 	b.w	40505a <_vfiprintf_r+0x462>
  405872:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405876:	e491      	b.n	40519c <_vfiprintf_r+0x5a4>
  405878:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40587c:	e469      	b.n	405152 <_vfiprintf_r+0x55a>
  40587e:	bf00      	nop
  405880:	00409a9c 	.word	0x00409a9c
  405884:	00409a70 	.word	0x00409a70

00405888 <__sbprintf>:
  405888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40588c:	460c      	mov	r4, r1
  40588e:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  405892:	8989      	ldrh	r1, [r1, #12]
  405894:	6e66      	ldr	r6, [r4, #100]	; 0x64
  405896:	89e5      	ldrh	r5, [r4, #14]
  405898:	9619      	str	r6, [sp, #100]	; 0x64
  40589a:	f021 0102 	bic.w	r1, r1, #2
  40589e:	4606      	mov	r6, r0
  4058a0:	69e0      	ldr	r0, [r4, #28]
  4058a2:	f8ad 100c 	strh.w	r1, [sp, #12]
  4058a6:	4617      	mov	r7, r2
  4058a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4058ac:	6a62      	ldr	r2, [r4, #36]	; 0x24
  4058ae:	f8ad 500e 	strh.w	r5, [sp, #14]
  4058b2:	4698      	mov	r8, r3
  4058b4:	ad1a      	add	r5, sp, #104	; 0x68
  4058b6:	2300      	movs	r3, #0
  4058b8:	9007      	str	r0, [sp, #28]
  4058ba:	a816      	add	r0, sp, #88	; 0x58
  4058bc:	9209      	str	r2, [sp, #36]	; 0x24
  4058be:	9306      	str	r3, [sp, #24]
  4058c0:	9500      	str	r5, [sp, #0]
  4058c2:	9504      	str	r5, [sp, #16]
  4058c4:	9102      	str	r1, [sp, #8]
  4058c6:	9105      	str	r1, [sp, #20]
  4058c8:	f001 fd16 	bl	4072f8 <__retarget_lock_init_recursive>
  4058cc:	4643      	mov	r3, r8
  4058ce:	463a      	mov	r2, r7
  4058d0:	4669      	mov	r1, sp
  4058d2:	4630      	mov	r0, r6
  4058d4:	f7ff f990 	bl	404bf8 <_vfiprintf_r>
  4058d8:	1e05      	subs	r5, r0, #0
  4058da:	db07      	blt.n	4058ec <__sbprintf+0x64>
  4058dc:	4630      	mov	r0, r6
  4058de:	4669      	mov	r1, sp
  4058e0:	f001 f8e8 	bl	406ab4 <_fflush_r>
  4058e4:	2800      	cmp	r0, #0
  4058e6:	bf18      	it	ne
  4058e8:	f04f 35ff 	movne.w	r5, #4294967295
  4058ec:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4058f0:	065b      	lsls	r3, r3, #25
  4058f2:	d503      	bpl.n	4058fc <__sbprintf+0x74>
  4058f4:	89a3      	ldrh	r3, [r4, #12]
  4058f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4058fa:	81a3      	strh	r3, [r4, #12]
  4058fc:	9816      	ldr	r0, [sp, #88]	; 0x58
  4058fe:	f001 fcfd 	bl	4072fc <__retarget_lock_close_recursive>
  405902:	4628      	mov	r0, r5
  405904:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  405908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040590c <__swsetup_r>:
  40590c:	b538      	push	{r3, r4, r5, lr}
  40590e:	4b30      	ldr	r3, [pc, #192]	; (4059d0 <__swsetup_r+0xc4>)
  405910:	681b      	ldr	r3, [r3, #0]
  405912:	4605      	mov	r5, r0
  405914:	460c      	mov	r4, r1
  405916:	b113      	cbz	r3, 40591e <__swsetup_r+0x12>
  405918:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40591a:	2a00      	cmp	r2, #0
  40591c:	d038      	beq.n	405990 <__swsetup_r+0x84>
  40591e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405922:	b293      	uxth	r3, r2
  405924:	0718      	lsls	r0, r3, #28
  405926:	d50c      	bpl.n	405942 <__swsetup_r+0x36>
  405928:	6920      	ldr	r0, [r4, #16]
  40592a:	b1a8      	cbz	r0, 405958 <__swsetup_r+0x4c>
  40592c:	f013 0201 	ands.w	r2, r3, #1
  405930:	d01e      	beq.n	405970 <__swsetup_r+0x64>
  405932:	6963      	ldr	r3, [r4, #20]
  405934:	2200      	movs	r2, #0
  405936:	425b      	negs	r3, r3
  405938:	61a3      	str	r3, [r4, #24]
  40593a:	60a2      	str	r2, [r4, #8]
  40593c:	b1f0      	cbz	r0, 40597c <__swsetup_r+0x70>
  40593e:	2000      	movs	r0, #0
  405940:	bd38      	pop	{r3, r4, r5, pc}
  405942:	06d9      	lsls	r1, r3, #27
  405944:	d53c      	bpl.n	4059c0 <__swsetup_r+0xb4>
  405946:	0758      	lsls	r0, r3, #29
  405948:	d426      	bmi.n	405998 <__swsetup_r+0x8c>
  40594a:	6920      	ldr	r0, [r4, #16]
  40594c:	f042 0308 	orr.w	r3, r2, #8
  405950:	81a3      	strh	r3, [r4, #12]
  405952:	b29b      	uxth	r3, r3
  405954:	2800      	cmp	r0, #0
  405956:	d1e9      	bne.n	40592c <__swsetup_r+0x20>
  405958:	f403 7220 	and.w	r2, r3, #640	; 0x280
  40595c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  405960:	d0e4      	beq.n	40592c <__swsetup_r+0x20>
  405962:	4628      	mov	r0, r5
  405964:	4621      	mov	r1, r4
  405966:	f001 fcfd 	bl	407364 <__smakebuf_r>
  40596a:	89a3      	ldrh	r3, [r4, #12]
  40596c:	6920      	ldr	r0, [r4, #16]
  40596e:	e7dd      	b.n	40592c <__swsetup_r+0x20>
  405970:	0799      	lsls	r1, r3, #30
  405972:	bf58      	it	pl
  405974:	6962      	ldrpl	r2, [r4, #20]
  405976:	60a2      	str	r2, [r4, #8]
  405978:	2800      	cmp	r0, #0
  40597a:	d1e0      	bne.n	40593e <__swsetup_r+0x32>
  40597c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405980:	061a      	lsls	r2, r3, #24
  405982:	d5dd      	bpl.n	405940 <__swsetup_r+0x34>
  405984:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405988:	81a3      	strh	r3, [r4, #12]
  40598a:	f04f 30ff 	mov.w	r0, #4294967295
  40598e:	bd38      	pop	{r3, r4, r5, pc}
  405990:	4618      	mov	r0, r3
  405992:	f001 f8e7 	bl	406b64 <__sinit>
  405996:	e7c2      	b.n	40591e <__swsetup_r+0x12>
  405998:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40599a:	b151      	cbz	r1, 4059b2 <__swsetup_r+0xa6>
  40599c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4059a0:	4299      	cmp	r1, r3
  4059a2:	d004      	beq.n	4059ae <__swsetup_r+0xa2>
  4059a4:	4628      	mov	r0, r5
  4059a6:	f001 fa03 	bl	406db0 <_free_r>
  4059aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4059ae:	2300      	movs	r3, #0
  4059b0:	6323      	str	r3, [r4, #48]	; 0x30
  4059b2:	2300      	movs	r3, #0
  4059b4:	6920      	ldr	r0, [r4, #16]
  4059b6:	6063      	str	r3, [r4, #4]
  4059b8:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4059bc:	6020      	str	r0, [r4, #0]
  4059be:	e7c5      	b.n	40594c <__swsetup_r+0x40>
  4059c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4059c4:	2309      	movs	r3, #9
  4059c6:	602b      	str	r3, [r5, #0]
  4059c8:	f04f 30ff 	mov.w	r0, #4294967295
  4059cc:	81a2      	strh	r2, [r4, #12]
  4059ce:	bd38      	pop	{r3, r4, r5, pc}
  4059d0:	20400144 	.word	0x20400144

004059d4 <register_fini>:
  4059d4:	4b02      	ldr	r3, [pc, #8]	; (4059e0 <register_fini+0xc>)
  4059d6:	b113      	cbz	r3, 4059de <register_fini+0xa>
  4059d8:	4802      	ldr	r0, [pc, #8]	; (4059e4 <register_fini+0x10>)
  4059da:	f000 b805 	b.w	4059e8 <atexit>
  4059de:	4770      	bx	lr
  4059e0:	00000000 	.word	0x00000000
  4059e4:	00406bd5 	.word	0x00406bd5

004059e8 <atexit>:
  4059e8:	2300      	movs	r3, #0
  4059ea:	4601      	mov	r1, r0
  4059ec:	461a      	mov	r2, r3
  4059ee:	4618      	mov	r0, r3
  4059f0:	f002 bc74 	b.w	4082dc <__register_exitproc>

004059f4 <quorem>:
  4059f4:	6902      	ldr	r2, [r0, #16]
  4059f6:	690b      	ldr	r3, [r1, #16]
  4059f8:	4293      	cmp	r3, r2
  4059fa:	f300 808d 	bgt.w	405b18 <quorem+0x124>
  4059fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405a02:	f103 38ff 	add.w	r8, r3, #4294967295
  405a06:	f101 0714 	add.w	r7, r1, #20
  405a0a:	f100 0b14 	add.w	fp, r0, #20
  405a0e:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  405a12:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  405a16:	ea4f 0488 	mov.w	r4, r8, lsl #2
  405a1a:	b083      	sub	sp, #12
  405a1c:	3201      	adds	r2, #1
  405a1e:	fbb3 f9f2 	udiv	r9, r3, r2
  405a22:	eb0b 0304 	add.w	r3, fp, r4
  405a26:	9400      	str	r4, [sp, #0]
  405a28:	eb07 0a04 	add.w	sl, r7, r4
  405a2c:	9301      	str	r3, [sp, #4]
  405a2e:	f1b9 0f00 	cmp.w	r9, #0
  405a32:	d039      	beq.n	405aa8 <quorem+0xb4>
  405a34:	2500      	movs	r5, #0
  405a36:	462e      	mov	r6, r5
  405a38:	46bc      	mov	ip, r7
  405a3a:	46de      	mov	lr, fp
  405a3c:	f85c 4b04 	ldr.w	r4, [ip], #4
  405a40:	f8de 3000 	ldr.w	r3, [lr]
  405a44:	b2a2      	uxth	r2, r4
  405a46:	fb09 5502 	mla	r5, r9, r2, r5
  405a4a:	0c22      	lsrs	r2, r4, #16
  405a4c:	0c2c      	lsrs	r4, r5, #16
  405a4e:	fb09 4202 	mla	r2, r9, r2, r4
  405a52:	b2ad      	uxth	r5, r5
  405a54:	1b75      	subs	r5, r6, r5
  405a56:	b296      	uxth	r6, r2
  405a58:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  405a5c:	fa15 f383 	uxtah	r3, r5, r3
  405a60:	eb06 4623 	add.w	r6, r6, r3, asr #16
  405a64:	b29b      	uxth	r3, r3
  405a66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  405a6a:	45e2      	cmp	sl, ip
  405a6c:	ea4f 4512 	mov.w	r5, r2, lsr #16
  405a70:	f84e 3b04 	str.w	r3, [lr], #4
  405a74:	ea4f 4626 	mov.w	r6, r6, asr #16
  405a78:	d2e0      	bcs.n	405a3c <quorem+0x48>
  405a7a:	9b00      	ldr	r3, [sp, #0]
  405a7c:	f85b 3003 	ldr.w	r3, [fp, r3]
  405a80:	b993      	cbnz	r3, 405aa8 <quorem+0xb4>
  405a82:	9c01      	ldr	r4, [sp, #4]
  405a84:	1f23      	subs	r3, r4, #4
  405a86:	459b      	cmp	fp, r3
  405a88:	d20c      	bcs.n	405aa4 <quorem+0xb0>
  405a8a:	f854 3c04 	ldr.w	r3, [r4, #-4]
  405a8e:	b94b      	cbnz	r3, 405aa4 <quorem+0xb0>
  405a90:	f1a4 0308 	sub.w	r3, r4, #8
  405a94:	e002      	b.n	405a9c <quorem+0xa8>
  405a96:	681a      	ldr	r2, [r3, #0]
  405a98:	3b04      	subs	r3, #4
  405a9a:	b91a      	cbnz	r2, 405aa4 <quorem+0xb0>
  405a9c:	459b      	cmp	fp, r3
  405a9e:	f108 38ff 	add.w	r8, r8, #4294967295
  405aa2:	d3f8      	bcc.n	405a96 <quorem+0xa2>
  405aa4:	f8c0 8010 	str.w	r8, [r0, #16]
  405aa8:	4604      	mov	r4, r0
  405aaa:	f002 f80d 	bl	407ac8 <__mcmp>
  405aae:	2800      	cmp	r0, #0
  405ab0:	db2e      	blt.n	405b10 <quorem+0x11c>
  405ab2:	f109 0901 	add.w	r9, r9, #1
  405ab6:	465d      	mov	r5, fp
  405ab8:	2300      	movs	r3, #0
  405aba:	f857 1b04 	ldr.w	r1, [r7], #4
  405abe:	6828      	ldr	r0, [r5, #0]
  405ac0:	b28a      	uxth	r2, r1
  405ac2:	1a9a      	subs	r2, r3, r2
  405ac4:	0c0b      	lsrs	r3, r1, #16
  405ac6:	fa12 f280 	uxtah	r2, r2, r0
  405aca:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  405ace:	eb03 4322 	add.w	r3, r3, r2, asr #16
  405ad2:	b292      	uxth	r2, r2
  405ad4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  405ad8:	45ba      	cmp	sl, r7
  405ada:	f845 2b04 	str.w	r2, [r5], #4
  405ade:	ea4f 4323 	mov.w	r3, r3, asr #16
  405ae2:	d2ea      	bcs.n	405aba <quorem+0xc6>
  405ae4:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  405ae8:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  405aec:	b982      	cbnz	r2, 405b10 <quorem+0x11c>
  405aee:	1f1a      	subs	r2, r3, #4
  405af0:	4593      	cmp	fp, r2
  405af2:	d20b      	bcs.n	405b0c <quorem+0x118>
  405af4:	f853 2c04 	ldr.w	r2, [r3, #-4]
  405af8:	b942      	cbnz	r2, 405b0c <quorem+0x118>
  405afa:	3b08      	subs	r3, #8
  405afc:	e002      	b.n	405b04 <quorem+0x110>
  405afe:	681a      	ldr	r2, [r3, #0]
  405b00:	3b04      	subs	r3, #4
  405b02:	b91a      	cbnz	r2, 405b0c <quorem+0x118>
  405b04:	459b      	cmp	fp, r3
  405b06:	f108 38ff 	add.w	r8, r8, #4294967295
  405b0a:	d3f8      	bcc.n	405afe <quorem+0x10a>
  405b0c:	f8c4 8010 	str.w	r8, [r4, #16]
  405b10:	4648      	mov	r0, r9
  405b12:	b003      	add	sp, #12
  405b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405b18:	2000      	movs	r0, #0
  405b1a:	4770      	bx	lr
  405b1c:	0000      	movs	r0, r0
	...

00405b20 <_dtoa_r>:
  405b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405b24:	6c01      	ldr	r1, [r0, #64]	; 0x40
  405b26:	b09b      	sub	sp, #108	; 0x6c
  405b28:	4604      	mov	r4, r0
  405b2a:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  405b2c:	4692      	mov	sl, r2
  405b2e:	469b      	mov	fp, r3
  405b30:	b141      	cbz	r1, 405b44 <_dtoa_r+0x24>
  405b32:	6c42      	ldr	r2, [r0, #68]	; 0x44
  405b34:	604a      	str	r2, [r1, #4]
  405b36:	2301      	movs	r3, #1
  405b38:	4093      	lsls	r3, r2
  405b3a:	608b      	str	r3, [r1, #8]
  405b3c:	f001 fdec 	bl	407718 <_Bfree>
  405b40:	2300      	movs	r3, #0
  405b42:	6423      	str	r3, [r4, #64]	; 0x40
  405b44:	f1bb 0f00 	cmp.w	fp, #0
  405b48:	465d      	mov	r5, fp
  405b4a:	db35      	blt.n	405bb8 <_dtoa_r+0x98>
  405b4c:	2300      	movs	r3, #0
  405b4e:	6033      	str	r3, [r6, #0]
  405b50:	4b9d      	ldr	r3, [pc, #628]	; (405dc8 <_dtoa_r+0x2a8>)
  405b52:	43ab      	bics	r3, r5
  405b54:	d015      	beq.n	405b82 <_dtoa_r+0x62>
  405b56:	4650      	mov	r0, sl
  405b58:	4659      	mov	r1, fp
  405b5a:	2200      	movs	r2, #0
  405b5c:	2300      	movs	r3, #0
  405b5e:	f003 f935 	bl	408dcc <__aeabi_dcmpeq>
  405b62:	4680      	mov	r8, r0
  405b64:	2800      	cmp	r0, #0
  405b66:	d02d      	beq.n	405bc4 <_dtoa_r+0xa4>
  405b68:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405b6a:	2301      	movs	r3, #1
  405b6c:	6013      	str	r3, [r2, #0]
  405b6e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405b70:	2b00      	cmp	r3, #0
  405b72:	f000 80bd 	beq.w	405cf0 <_dtoa_r+0x1d0>
  405b76:	4895      	ldr	r0, [pc, #596]	; (405dcc <_dtoa_r+0x2ac>)
  405b78:	6018      	str	r0, [r3, #0]
  405b7a:	3801      	subs	r0, #1
  405b7c:	b01b      	add	sp, #108	; 0x6c
  405b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405b82:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405b84:	f242 730f 	movw	r3, #9999	; 0x270f
  405b88:	6013      	str	r3, [r2, #0]
  405b8a:	f1ba 0f00 	cmp.w	sl, #0
  405b8e:	d10d      	bne.n	405bac <_dtoa_r+0x8c>
  405b90:	f3c5 0513 	ubfx	r5, r5, #0, #20
  405b94:	b955      	cbnz	r5, 405bac <_dtoa_r+0x8c>
  405b96:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405b98:	488d      	ldr	r0, [pc, #564]	; (405dd0 <_dtoa_r+0x2b0>)
  405b9a:	2b00      	cmp	r3, #0
  405b9c:	d0ee      	beq.n	405b7c <_dtoa_r+0x5c>
  405b9e:	f100 0308 	add.w	r3, r0, #8
  405ba2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  405ba4:	6013      	str	r3, [r2, #0]
  405ba6:	b01b      	add	sp, #108	; 0x6c
  405ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405bac:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405bae:	4889      	ldr	r0, [pc, #548]	; (405dd4 <_dtoa_r+0x2b4>)
  405bb0:	2b00      	cmp	r3, #0
  405bb2:	d0e3      	beq.n	405b7c <_dtoa_r+0x5c>
  405bb4:	1cc3      	adds	r3, r0, #3
  405bb6:	e7f4      	b.n	405ba2 <_dtoa_r+0x82>
  405bb8:	2301      	movs	r3, #1
  405bba:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  405bbe:	6033      	str	r3, [r6, #0]
  405bc0:	46ab      	mov	fp, r5
  405bc2:	e7c5      	b.n	405b50 <_dtoa_r+0x30>
  405bc4:	aa18      	add	r2, sp, #96	; 0x60
  405bc6:	ab19      	add	r3, sp, #100	; 0x64
  405bc8:	9201      	str	r2, [sp, #4]
  405bca:	9300      	str	r3, [sp, #0]
  405bcc:	4652      	mov	r2, sl
  405bce:	465b      	mov	r3, fp
  405bd0:	4620      	mov	r0, r4
  405bd2:	f002 f819 	bl	407c08 <__d2b>
  405bd6:	0d2b      	lsrs	r3, r5, #20
  405bd8:	4681      	mov	r9, r0
  405bda:	d071      	beq.n	405cc0 <_dtoa_r+0x1a0>
  405bdc:	f3cb 0213 	ubfx	r2, fp, #0, #20
  405be0:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  405be4:	9f18      	ldr	r7, [sp, #96]	; 0x60
  405be6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  405bea:	4650      	mov	r0, sl
  405bec:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  405bf0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  405bf4:	2200      	movs	r2, #0
  405bf6:	4b78      	ldr	r3, [pc, #480]	; (405dd8 <_dtoa_r+0x2b8>)
  405bf8:	f002 fccc 	bl	408594 <__aeabi_dsub>
  405bfc:	a36c      	add	r3, pc, #432	; (adr r3, 405db0 <_dtoa_r+0x290>)
  405bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
  405c02:	f002 fe7b 	bl	4088fc <__aeabi_dmul>
  405c06:	a36c      	add	r3, pc, #432	; (adr r3, 405db8 <_dtoa_r+0x298>)
  405c08:	e9d3 2300 	ldrd	r2, r3, [r3]
  405c0c:	f002 fcc4 	bl	408598 <__adddf3>
  405c10:	e9cd 0102 	strd	r0, r1, [sp, #8]
  405c14:	4630      	mov	r0, r6
  405c16:	f002 fe0b 	bl	408830 <__aeabi_i2d>
  405c1a:	a369      	add	r3, pc, #420	; (adr r3, 405dc0 <_dtoa_r+0x2a0>)
  405c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
  405c20:	f002 fe6c 	bl	4088fc <__aeabi_dmul>
  405c24:	4602      	mov	r2, r0
  405c26:	460b      	mov	r3, r1
  405c28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  405c2c:	f002 fcb4 	bl	408598 <__adddf3>
  405c30:	e9cd 0104 	strd	r0, r1, [sp, #16]
  405c34:	f003 f912 	bl	408e5c <__aeabi_d2iz>
  405c38:	2200      	movs	r2, #0
  405c3a:	9002      	str	r0, [sp, #8]
  405c3c:	2300      	movs	r3, #0
  405c3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  405c42:	f003 f8cd 	bl	408de0 <__aeabi_dcmplt>
  405c46:	2800      	cmp	r0, #0
  405c48:	f040 8173 	bne.w	405f32 <_dtoa_r+0x412>
  405c4c:	9d02      	ldr	r5, [sp, #8]
  405c4e:	2d16      	cmp	r5, #22
  405c50:	f200 815d 	bhi.w	405f0e <_dtoa_r+0x3ee>
  405c54:	4b61      	ldr	r3, [pc, #388]	; (405ddc <_dtoa_r+0x2bc>)
  405c56:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  405c5a:	e9d3 0100 	ldrd	r0, r1, [r3]
  405c5e:	4652      	mov	r2, sl
  405c60:	465b      	mov	r3, fp
  405c62:	f003 f8db 	bl	408e1c <__aeabi_dcmpgt>
  405c66:	2800      	cmp	r0, #0
  405c68:	f000 81c5 	beq.w	405ff6 <_dtoa_r+0x4d6>
  405c6c:	1e6b      	subs	r3, r5, #1
  405c6e:	9302      	str	r3, [sp, #8]
  405c70:	2300      	movs	r3, #0
  405c72:	930e      	str	r3, [sp, #56]	; 0x38
  405c74:	1bbf      	subs	r7, r7, r6
  405c76:	1e7b      	subs	r3, r7, #1
  405c78:	9306      	str	r3, [sp, #24]
  405c7a:	f100 8154 	bmi.w	405f26 <_dtoa_r+0x406>
  405c7e:	2300      	movs	r3, #0
  405c80:	9308      	str	r3, [sp, #32]
  405c82:	9b02      	ldr	r3, [sp, #8]
  405c84:	2b00      	cmp	r3, #0
  405c86:	f2c0 8145 	blt.w	405f14 <_dtoa_r+0x3f4>
  405c8a:	9a06      	ldr	r2, [sp, #24]
  405c8c:	930d      	str	r3, [sp, #52]	; 0x34
  405c8e:	4611      	mov	r1, r2
  405c90:	4419      	add	r1, r3
  405c92:	2300      	movs	r3, #0
  405c94:	9106      	str	r1, [sp, #24]
  405c96:	930c      	str	r3, [sp, #48]	; 0x30
  405c98:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405c9a:	2b09      	cmp	r3, #9
  405c9c:	d82a      	bhi.n	405cf4 <_dtoa_r+0x1d4>
  405c9e:	2b05      	cmp	r3, #5
  405ca0:	f340 865b 	ble.w	40695a <_dtoa_r+0xe3a>
  405ca4:	3b04      	subs	r3, #4
  405ca6:	9324      	str	r3, [sp, #144]	; 0x90
  405ca8:	2500      	movs	r5, #0
  405caa:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405cac:	3b02      	subs	r3, #2
  405cae:	2b03      	cmp	r3, #3
  405cb0:	f200 8642 	bhi.w	406938 <_dtoa_r+0xe18>
  405cb4:	e8df f013 	tbh	[pc, r3, lsl #1]
  405cb8:	02c903d4 	.word	0x02c903d4
  405cbc:	046103df 	.word	0x046103df
  405cc0:	9f18      	ldr	r7, [sp, #96]	; 0x60
  405cc2:	9e19      	ldr	r6, [sp, #100]	; 0x64
  405cc4:	443e      	add	r6, r7
  405cc6:	f206 4332 	addw	r3, r6, #1074	; 0x432
  405cca:	2b20      	cmp	r3, #32
  405ccc:	f340 818e 	ble.w	405fec <_dtoa_r+0x4cc>
  405cd0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  405cd4:	f206 4012 	addw	r0, r6, #1042	; 0x412
  405cd8:	409d      	lsls	r5, r3
  405cda:	fa2a f000 	lsr.w	r0, sl, r0
  405cde:	4328      	orrs	r0, r5
  405ce0:	f002 fd96 	bl	408810 <__aeabi_ui2d>
  405ce4:	2301      	movs	r3, #1
  405ce6:	3e01      	subs	r6, #1
  405ce8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  405cec:	9314      	str	r3, [sp, #80]	; 0x50
  405cee:	e781      	b.n	405bf4 <_dtoa_r+0xd4>
  405cf0:	483b      	ldr	r0, [pc, #236]	; (405de0 <_dtoa_r+0x2c0>)
  405cf2:	e743      	b.n	405b7c <_dtoa_r+0x5c>
  405cf4:	2100      	movs	r1, #0
  405cf6:	6461      	str	r1, [r4, #68]	; 0x44
  405cf8:	4620      	mov	r0, r4
  405cfa:	9125      	str	r1, [sp, #148]	; 0x94
  405cfc:	f001 fce6 	bl	4076cc <_Balloc>
  405d00:	f04f 33ff 	mov.w	r3, #4294967295
  405d04:	930a      	str	r3, [sp, #40]	; 0x28
  405d06:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405d08:	930f      	str	r3, [sp, #60]	; 0x3c
  405d0a:	2301      	movs	r3, #1
  405d0c:	9004      	str	r0, [sp, #16]
  405d0e:	6420      	str	r0, [r4, #64]	; 0x40
  405d10:	9224      	str	r2, [sp, #144]	; 0x90
  405d12:	930b      	str	r3, [sp, #44]	; 0x2c
  405d14:	9b19      	ldr	r3, [sp, #100]	; 0x64
  405d16:	2b00      	cmp	r3, #0
  405d18:	f2c0 80d9 	blt.w	405ece <_dtoa_r+0x3ae>
  405d1c:	9a02      	ldr	r2, [sp, #8]
  405d1e:	2a0e      	cmp	r2, #14
  405d20:	f300 80d5 	bgt.w	405ece <_dtoa_r+0x3ae>
  405d24:	4b2d      	ldr	r3, [pc, #180]	; (405ddc <_dtoa_r+0x2bc>)
  405d26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
  405d2e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  405d32:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405d34:	2b00      	cmp	r3, #0
  405d36:	f2c0 83ba 	blt.w	4064ae <_dtoa_r+0x98e>
  405d3a:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  405d3e:	4650      	mov	r0, sl
  405d40:	462a      	mov	r2, r5
  405d42:	4633      	mov	r3, r6
  405d44:	4659      	mov	r1, fp
  405d46:	f002 ff03 	bl	408b50 <__aeabi_ddiv>
  405d4a:	f003 f887 	bl	408e5c <__aeabi_d2iz>
  405d4e:	4680      	mov	r8, r0
  405d50:	f002 fd6e 	bl	408830 <__aeabi_i2d>
  405d54:	462a      	mov	r2, r5
  405d56:	4633      	mov	r3, r6
  405d58:	f002 fdd0 	bl	4088fc <__aeabi_dmul>
  405d5c:	460b      	mov	r3, r1
  405d5e:	4602      	mov	r2, r0
  405d60:	4659      	mov	r1, fp
  405d62:	4650      	mov	r0, sl
  405d64:	f002 fc16 	bl	408594 <__aeabi_dsub>
  405d68:	9d04      	ldr	r5, [sp, #16]
  405d6a:	f108 0330 	add.w	r3, r8, #48	; 0x30
  405d6e:	702b      	strb	r3, [r5, #0]
  405d70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405d72:	2b01      	cmp	r3, #1
  405d74:	4606      	mov	r6, r0
  405d76:	460f      	mov	r7, r1
  405d78:	f105 0501 	add.w	r5, r5, #1
  405d7c:	d068      	beq.n	405e50 <_dtoa_r+0x330>
  405d7e:	2200      	movs	r2, #0
  405d80:	4b18      	ldr	r3, [pc, #96]	; (405de4 <_dtoa_r+0x2c4>)
  405d82:	f002 fdbb 	bl	4088fc <__aeabi_dmul>
  405d86:	2200      	movs	r2, #0
  405d88:	2300      	movs	r3, #0
  405d8a:	4606      	mov	r6, r0
  405d8c:	460f      	mov	r7, r1
  405d8e:	f003 f81d 	bl	408dcc <__aeabi_dcmpeq>
  405d92:	2800      	cmp	r0, #0
  405d94:	f040 8088 	bne.w	405ea8 <_dtoa_r+0x388>
  405d98:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  405d9c:	f04f 0a00 	mov.w	sl, #0
  405da0:	f8df b040 	ldr.w	fp, [pc, #64]	; 405de4 <_dtoa_r+0x2c4>
  405da4:	940c      	str	r4, [sp, #48]	; 0x30
  405da6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  405daa:	e028      	b.n	405dfe <_dtoa_r+0x2de>
  405dac:	f3af 8000 	nop.w
  405db0:	636f4361 	.word	0x636f4361
  405db4:	3fd287a7 	.word	0x3fd287a7
  405db8:	8b60c8b3 	.word	0x8b60c8b3
  405dbc:	3fc68a28 	.word	0x3fc68a28
  405dc0:	509f79fb 	.word	0x509f79fb
  405dc4:	3fd34413 	.word	0x3fd34413
  405dc8:	7ff00000 	.word	0x7ff00000
  405dcc:	00409a79 	.word	0x00409a79
  405dd0:	00409abc 	.word	0x00409abc
  405dd4:	00409ac8 	.word	0x00409ac8
  405dd8:	3ff80000 	.word	0x3ff80000
  405ddc:	00409b00 	.word	0x00409b00
  405de0:	00409a78 	.word	0x00409a78
  405de4:	40240000 	.word	0x40240000
  405de8:	f002 fd88 	bl	4088fc <__aeabi_dmul>
  405dec:	2200      	movs	r2, #0
  405dee:	2300      	movs	r3, #0
  405df0:	4606      	mov	r6, r0
  405df2:	460f      	mov	r7, r1
  405df4:	f002 ffea 	bl	408dcc <__aeabi_dcmpeq>
  405df8:	2800      	cmp	r0, #0
  405dfa:	f040 83c1 	bne.w	406580 <_dtoa_r+0xa60>
  405dfe:	4642      	mov	r2, r8
  405e00:	464b      	mov	r3, r9
  405e02:	4630      	mov	r0, r6
  405e04:	4639      	mov	r1, r7
  405e06:	f002 fea3 	bl	408b50 <__aeabi_ddiv>
  405e0a:	f003 f827 	bl	408e5c <__aeabi_d2iz>
  405e0e:	4604      	mov	r4, r0
  405e10:	f002 fd0e 	bl	408830 <__aeabi_i2d>
  405e14:	4642      	mov	r2, r8
  405e16:	464b      	mov	r3, r9
  405e18:	f002 fd70 	bl	4088fc <__aeabi_dmul>
  405e1c:	4602      	mov	r2, r0
  405e1e:	460b      	mov	r3, r1
  405e20:	4630      	mov	r0, r6
  405e22:	4639      	mov	r1, r7
  405e24:	f002 fbb6 	bl	408594 <__aeabi_dsub>
  405e28:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  405e2c:	9e04      	ldr	r6, [sp, #16]
  405e2e:	f805 eb01 	strb.w	lr, [r5], #1
  405e32:	eba5 0e06 	sub.w	lr, r5, r6
  405e36:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  405e38:	45b6      	cmp	lr, r6
  405e3a:	e9cd 0106 	strd	r0, r1, [sp, #24]
  405e3e:	4652      	mov	r2, sl
  405e40:	465b      	mov	r3, fp
  405e42:	d1d1      	bne.n	405de8 <_dtoa_r+0x2c8>
  405e44:	46a0      	mov	r8, r4
  405e46:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  405e4a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405e4c:	4606      	mov	r6, r0
  405e4e:	460f      	mov	r7, r1
  405e50:	4632      	mov	r2, r6
  405e52:	463b      	mov	r3, r7
  405e54:	4630      	mov	r0, r6
  405e56:	4639      	mov	r1, r7
  405e58:	f002 fb9e 	bl	408598 <__adddf3>
  405e5c:	4606      	mov	r6, r0
  405e5e:	460f      	mov	r7, r1
  405e60:	4602      	mov	r2, r0
  405e62:	460b      	mov	r3, r1
  405e64:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405e68:	f002 ffba 	bl	408de0 <__aeabi_dcmplt>
  405e6c:	b948      	cbnz	r0, 405e82 <_dtoa_r+0x362>
  405e6e:	4632      	mov	r2, r6
  405e70:	463b      	mov	r3, r7
  405e72:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405e76:	f002 ffa9 	bl	408dcc <__aeabi_dcmpeq>
  405e7a:	b1a8      	cbz	r0, 405ea8 <_dtoa_r+0x388>
  405e7c:	f018 0f01 	tst.w	r8, #1
  405e80:	d012      	beq.n	405ea8 <_dtoa_r+0x388>
  405e82:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  405e86:	9a04      	ldr	r2, [sp, #16]
  405e88:	1e6b      	subs	r3, r5, #1
  405e8a:	e004      	b.n	405e96 <_dtoa_r+0x376>
  405e8c:	429a      	cmp	r2, r3
  405e8e:	f000 8401 	beq.w	406694 <_dtoa_r+0xb74>
  405e92:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  405e96:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  405e9a:	f103 0501 	add.w	r5, r3, #1
  405e9e:	d0f5      	beq.n	405e8c <_dtoa_r+0x36c>
  405ea0:	f108 0801 	add.w	r8, r8, #1
  405ea4:	f883 8000 	strb.w	r8, [r3]
  405ea8:	4649      	mov	r1, r9
  405eaa:	4620      	mov	r0, r4
  405eac:	f001 fc34 	bl	407718 <_Bfree>
  405eb0:	2200      	movs	r2, #0
  405eb2:	9b02      	ldr	r3, [sp, #8]
  405eb4:	702a      	strb	r2, [r5, #0]
  405eb6:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405eb8:	3301      	adds	r3, #1
  405eba:	6013      	str	r3, [r2, #0]
  405ebc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405ebe:	2b00      	cmp	r3, #0
  405ec0:	f000 839e 	beq.w	406600 <_dtoa_r+0xae0>
  405ec4:	9804      	ldr	r0, [sp, #16]
  405ec6:	601d      	str	r5, [r3, #0]
  405ec8:	b01b      	add	sp, #108	; 0x6c
  405eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405ece:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405ed0:	2a00      	cmp	r2, #0
  405ed2:	d03e      	beq.n	405f52 <_dtoa_r+0x432>
  405ed4:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405ed6:	2a01      	cmp	r2, #1
  405ed8:	f340 8311 	ble.w	4064fe <_dtoa_r+0x9de>
  405edc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405ede:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405ee0:	1e5f      	subs	r7, r3, #1
  405ee2:	42ba      	cmp	r2, r7
  405ee4:	f2c0 838f 	blt.w	406606 <_dtoa_r+0xae6>
  405ee8:	1bd7      	subs	r7, r2, r7
  405eea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405eec:	2b00      	cmp	r3, #0
  405eee:	f2c0 848b 	blt.w	406808 <_dtoa_r+0xce8>
  405ef2:	9d08      	ldr	r5, [sp, #32]
  405ef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405ef6:	9a08      	ldr	r2, [sp, #32]
  405ef8:	441a      	add	r2, r3
  405efa:	9208      	str	r2, [sp, #32]
  405efc:	9a06      	ldr	r2, [sp, #24]
  405efe:	2101      	movs	r1, #1
  405f00:	441a      	add	r2, r3
  405f02:	4620      	mov	r0, r4
  405f04:	9206      	str	r2, [sp, #24]
  405f06:	f001 fca1 	bl	40784c <__i2b>
  405f0a:	4606      	mov	r6, r0
  405f0c:	e024      	b.n	405f58 <_dtoa_r+0x438>
  405f0e:	2301      	movs	r3, #1
  405f10:	930e      	str	r3, [sp, #56]	; 0x38
  405f12:	e6af      	b.n	405c74 <_dtoa_r+0x154>
  405f14:	9a08      	ldr	r2, [sp, #32]
  405f16:	9b02      	ldr	r3, [sp, #8]
  405f18:	1ad2      	subs	r2, r2, r3
  405f1a:	425b      	negs	r3, r3
  405f1c:	930c      	str	r3, [sp, #48]	; 0x30
  405f1e:	2300      	movs	r3, #0
  405f20:	9208      	str	r2, [sp, #32]
  405f22:	930d      	str	r3, [sp, #52]	; 0x34
  405f24:	e6b8      	b.n	405c98 <_dtoa_r+0x178>
  405f26:	f1c7 0301 	rsb	r3, r7, #1
  405f2a:	9308      	str	r3, [sp, #32]
  405f2c:	2300      	movs	r3, #0
  405f2e:	9306      	str	r3, [sp, #24]
  405f30:	e6a7      	b.n	405c82 <_dtoa_r+0x162>
  405f32:	9d02      	ldr	r5, [sp, #8]
  405f34:	4628      	mov	r0, r5
  405f36:	f002 fc7b 	bl	408830 <__aeabi_i2d>
  405f3a:	4602      	mov	r2, r0
  405f3c:	460b      	mov	r3, r1
  405f3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  405f42:	f002 ff43 	bl	408dcc <__aeabi_dcmpeq>
  405f46:	2800      	cmp	r0, #0
  405f48:	f47f ae80 	bne.w	405c4c <_dtoa_r+0x12c>
  405f4c:	1e6b      	subs	r3, r5, #1
  405f4e:	9302      	str	r3, [sp, #8]
  405f50:	e67c      	b.n	405c4c <_dtoa_r+0x12c>
  405f52:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405f54:	9d08      	ldr	r5, [sp, #32]
  405f56:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  405f58:	2d00      	cmp	r5, #0
  405f5a:	dd0c      	ble.n	405f76 <_dtoa_r+0x456>
  405f5c:	9906      	ldr	r1, [sp, #24]
  405f5e:	2900      	cmp	r1, #0
  405f60:	460b      	mov	r3, r1
  405f62:	dd08      	ble.n	405f76 <_dtoa_r+0x456>
  405f64:	42a9      	cmp	r1, r5
  405f66:	9a08      	ldr	r2, [sp, #32]
  405f68:	bfa8      	it	ge
  405f6a:	462b      	movge	r3, r5
  405f6c:	1ad2      	subs	r2, r2, r3
  405f6e:	1aed      	subs	r5, r5, r3
  405f70:	1acb      	subs	r3, r1, r3
  405f72:	9208      	str	r2, [sp, #32]
  405f74:	9306      	str	r3, [sp, #24]
  405f76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405f78:	b1d3      	cbz	r3, 405fb0 <_dtoa_r+0x490>
  405f7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405f7c:	2b00      	cmp	r3, #0
  405f7e:	f000 82b7 	beq.w	4064f0 <_dtoa_r+0x9d0>
  405f82:	2f00      	cmp	r7, #0
  405f84:	dd10      	ble.n	405fa8 <_dtoa_r+0x488>
  405f86:	4631      	mov	r1, r6
  405f88:	463a      	mov	r2, r7
  405f8a:	4620      	mov	r0, r4
  405f8c:	f001 fcfa 	bl	407984 <__pow5mult>
  405f90:	464a      	mov	r2, r9
  405f92:	4601      	mov	r1, r0
  405f94:	4606      	mov	r6, r0
  405f96:	4620      	mov	r0, r4
  405f98:	f001 fc62 	bl	407860 <__multiply>
  405f9c:	4649      	mov	r1, r9
  405f9e:	4680      	mov	r8, r0
  405fa0:	4620      	mov	r0, r4
  405fa2:	f001 fbb9 	bl	407718 <_Bfree>
  405fa6:	46c1      	mov	r9, r8
  405fa8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405faa:	1bda      	subs	r2, r3, r7
  405fac:	f040 82a1 	bne.w	4064f2 <_dtoa_r+0x9d2>
  405fb0:	2101      	movs	r1, #1
  405fb2:	4620      	mov	r0, r4
  405fb4:	f001 fc4a 	bl	40784c <__i2b>
  405fb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405fba:	2b00      	cmp	r3, #0
  405fbc:	4680      	mov	r8, r0
  405fbe:	dd1c      	ble.n	405ffa <_dtoa_r+0x4da>
  405fc0:	4601      	mov	r1, r0
  405fc2:	461a      	mov	r2, r3
  405fc4:	4620      	mov	r0, r4
  405fc6:	f001 fcdd 	bl	407984 <__pow5mult>
  405fca:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405fcc:	2b01      	cmp	r3, #1
  405fce:	4680      	mov	r8, r0
  405fd0:	f340 8254 	ble.w	40647c <_dtoa_r+0x95c>
  405fd4:	2300      	movs	r3, #0
  405fd6:	930c      	str	r3, [sp, #48]	; 0x30
  405fd8:	f8d8 3010 	ldr.w	r3, [r8, #16]
  405fdc:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  405fe0:	6918      	ldr	r0, [r3, #16]
  405fe2:	f001 fbe3 	bl	4077ac <__hi0bits>
  405fe6:	f1c0 0020 	rsb	r0, r0, #32
  405fea:	e010      	b.n	40600e <_dtoa_r+0x4ee>
  405fec:	f1c3 0520 	rsb	r5, r3, #32
  405ff0:	fa0a f005 	lsl.w	r0, sl, r5
  405ff4:	e674      	b.n	405ce0 <_dtoa_r+0x1c0>
  405ff6:	900e      	str	r0, [sp, #56]	; 0x38
  405ff8:	e63c      	b.n	405c74 <_dtoa_r+0x154>
  405ffa:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405ffc:	2b01      	cmp	r3, #1
  405ffe:	f340 8287 	ble.w	406510 <_dtoa_r+0x9f0>
  406002:	2300      	movs	r3, #0
  406004:	930c      	str	r3, [sp, #48]	; 0x30
  406006:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406008:	2001      	movs	r0, #1
  40600a:	2b00      	cmp	r3, #0
  40600c:	d1e4      	bne.n	405fd8 <_dtoa_r+0x4b8>
  40600e:	9a06      	ldr	r2, [sp, #24]
  406010:	4410      	add	r0, r2
  406012:	f010 001f 	ands.w	r0, r0, #31
  406016:	f000 80a1 	beq.w	40615c <_dtoa_r+0x63c>
  40601a:	f1c0 0320 	rsb	r3, r0, #32
  40601e:	2b04      	cmp	r3, #4
  406020:	f340 849e 	ble.w	406960 <_dtoa_r+0xe40>
  406024:	9b08      	ldr	r3, [sp, #32]
  406026:	f1c0 001c 	rsb	r0, r0, #28
  40602a:	4403      	add	r3, r0
  40602c:	9308      	str	r3, [sp, #32]
  40602e:	4613      	mov	r3, r2
  406030:	4403      	add	r3, r0
  406032:	4405      	add	r5, r0
  406034:	9306      	str	r3, [sp, #24]
  406036:	9b08      	ldr	r3, [sp, #32]
  406038:	2b00      	cmp	r3, #0
  40603a:	dd05      	ble.n	406048 <_dtoa_r+0x528>
  40603c:	4649      	mov	r1, r9
  40603e:	461a      	mov	r2, r3
  406040:	4620      	mov	r0, r4
  406042:	f001 fcef 	bl	407a24 <__lshift>
  406046:	4681      	mov	r9, r0
  406048:	9b06      	ldr	r3, [sp, #24]
  40604a:	2b00      	cmp	r3, #0
  40604c:	dd05      	ble.n	40605a <_dtoa_r+0x53a>
  40604e:	4641      	mov	r1, r8
  406050:	461a      	mov	r2, r3
  406052:	4620      	mov	r0, r4
  406054:	f001 fce6 	bl	407a24 <__lshift>
  406058:	4680      	mov	r8, r0
  40605a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40605c:	2b00      	cmp	r3, #0
  40605e:	f040 8086 	bne.w	40616e <_dtoa_r+0x64e>
  406062:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406064:	2b00      	cmp	r3, #0
  406066:	f340 8266 	ble.w	406536 <_dtoa_r+0xa16>
  40606a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40606c:	2b00      	cmp	r3, #0
  40606e:	f000 8098 	beq.w	4061a2 <_dtoa_r+0x682>
  406072:	2d00      	cmp	r5, #0
  406074:	dd05      	ble.n	406082 <_dtoa_r+0x562>
  406076:	4631      	mov	r1, r6
  406078:	462a      	mov	r2, r5
  40607a:	4620      	mov	r0, r4
  40607c:	f001 fcd2 	bl	407a24 <__lshift>
  406080:	4606      	mov	r6, r0
  406082:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406084:	2b00      	cmp	r3, #0
  406086:	f040 8337 	bne.w	4066f8 <_dtoa_r+0xbd8>
  40608a:	9606      	str	r6, [sp, #24]
  40608c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40608e:	9a04      	ldr	r2, [sp, #16]
  406090:	f8dd b018 	ldr.w	fp, [sp, #24]
  406094:	3b01      	subs	r3, #1
  406096:	18d3      	adds	r3, r2, r3
  406098:	930b      	str	r3, [sp, #44]	; 0x2c
  40609a:	f00a 0301 	and.w	r3, sl, #1
  40609e:	930c      	str	r3, [sp, #48]	; 0x30
  4060a0:	4617      	mov	r7, r2
  4060a2:	46c2      	mov	sl, r8
  4060a4:	4651      	mov	r1, sl
  4060a6:	4648      	mov	r0, r9
  4060a8:	f7ff fca4 	bl	4059f4 <quorem>
  4060ac:	4631      	mov	r1, r6
  4060ae:	4605      	mov	r5, r0
  4060b0:	4648      	mov	r0, r9
  4060b2:	f001 fd09 	bl	407ac8 <__mcmp>
  4060b6:	465a      	mov	r2, fp
  4060b8:	900a      	str	r0, [sp, #40]	; 0x28
  4060ba:	4651      	mov	r1, sl
  4060bc:	4620      	mov	r0, r4
  4060be:	f001 fd1f 	bl	407b00 <__mdiff>
  4060c2:	68c2      	ldr	r2, [r0, #12]
  4060c4:	4680      	mov	r8, r0
  4060c6:	f105 0330 	add.w	r3, r5, #48	; 0x30
  4060ca:	2a00      	cmp	r2, #0
  4060cc:	f040 822b 	bne.w	406526 <_dtoa_r+0xa06>
  4060d0:	4601      	mov	r1, r0
  4060d2:	4648      	mov	r0, r9
  4060d4:	9308      	str	r3, [sp, #32]
  4060d6:	f001 fcf7 	bl	407ac8 <__mcmp>
  4060da:	4641      	mov	r1, r8
  4060dc:	9006      	str	r0, [sp, #24]
  4060de:	4620      	mov	r0, r4
  4060e0:	f001 fb1a 	bl	407718 <_Bfree>
  4060e4:	9a06      	ldr	r2, [sp, #24]
  4060e6:	9b08      	ldr	r3, [sp, #32]
  4060e8:	b932      	cbnz	r2, 4060f8 <_dtoa_r+0x5d8>
  4060ea:	9924      	ldr	r1, [sp, #144]	; 0x90
  4060ec:	b921      	cbnz	r1, 4060f8 <_dtoa_r+0x5d8>
  4060ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4060f0:	2a00      	cmp	r2, #0
  4060f2:	f000 83ef 	beq.w	4068d4 <_dtoa_r+0xdb4>
  4060f6:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4060f8:	990a      	ldr	r1, [sp, #40]	; 0x28
  4060fa:	2900      	cmp	r1, #0
  4060fc:	f2c0 829f 	blt.w	40663e <_dtoa_r+0xb1e>
  406100:	d105      	bne.n	40610e <_dtoa_r+0x5ee>
  406102:	9924      	ldr	r1, [sp, #144]	; 0x90
  406104:	b919      	cbnz	r1, 40610e <_dtoa_r+0x5ee>
  406106:	990c      	ldr	r1, [sp, #48]	; 0x30
  406108:	2900      	cmp	r1, #0
  40610a:	f000 8298 	beq.w	40663e <_dtoa_r+0xb1e>
  40610e:	2a00      	cmp	r2, #0
  406110:	f300 8306 	bgt.w	406720 <_dtoa_r+0xc00>
  406114:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  406116:	703b      	strb	r3, [r7, #0]
  406118:	f107 0801 	add.w	r8, r7, #1
  40611c:	4297      	cmp	r7, r2
  40611e:	4645      	mov	r5, r8
  406120:	f000 830c 	beq.w	40673c <_dtoa_r+0xc1c>
  406124:	4649      	mov	r1, r9
  406126:	2300      	movs	r3, #0
  406128:	220a      	movs	r2, #10
  40612a:	4620      	mov	r0, r4
  40612c:	f001 fafe 	bl	40772c <__multadd>
  406130:	455e      	cmp	r6, fp
  406132:	4681      	mov	r9, r0
  406134:	4631      	mov	r1, r6
  406136:	f04f 0300 	mov.w	r3, #0
  40613a:	f04f 020a 	mov.w	r2, #10
  40613e:	4620      	mov	r0, r4
  406140:	f000 81eb 	beq.w	40651a <_dtoa_r+0x9fa>
  406144:	f001 faf2 	bl	40772c <__multadd>
  406148:	4659      	mov	r1, fp
  40614a:	4606      	mov	r6, r0
  40614c:	2300      	movs	r3, #0
  40614e:	220a      	movs	r2, #10
  406150:	4620      	mov	r0, r4
  406152:	f001 faeb 	bl	40772c <__multadd>
  406156:	4647      	mov	r7, r8
  406158:	4683      	mov	fp, r0
  40615a:	e7a3      	b.n	4060a4 <_dtoa_r+0x584>
  40615c:	201c      	movs	r0, #28
  40615e:	9b08      	ldr	r3, [sp, #32]
  406160:	4403      	add	r3, r0
  406162:	9308      	str	r3, [sp, #32]
  406164:	9b06      	ldr	r3, [sp, #24]
  406166:	4403      	add	r3, r0
  406168:	4405      	add	r5, r0
  40616a:	9306      	str	r3, [sp, #24]
  40616c:	e763      	b.n	406036 <_dtoa_r+0x516>
  40616e:	4641      	mov	r1, r8
  406170:	4648      	mov	r0, r9
  406172:	f001 fca9 	bl	407ac8 <__mcmp>
  406176:	2800      	cmp	r0, #0
  406178:	f6bf af73 	bge.w	406062 <_dtoa_r+0x542>
  40617c:	9f02      	ldr	r7, [sp, #8]
  40617e:	4649      	mov	r1, r9
  406180:	2300      	movs	r3, #0
  406182:	220a      	movs	r2, #10
  406184:	4620      	mov	r0, r4
  406186:	3f01      	subs	r7, #1
  406188:	9702      	str	r7, [sp, #8]
  40618a:	f001 facf 	bl	40772c <__multadd>
  40618e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406190:	4681      	mov	r9, r0
  406192:	2b00      	cmp	r3, #0
  406194:	f040 83b6 	bne.w	406904 <_dtoa_r+0xde4>
  406198:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40619a:	2b00      	cmp	r3, #0
  40619c:	f340 83bf 	ble.w	40691e <_dtoa_r+0xdfe>
  4061a0:	930a      	str	r3, [sp, #40]	; 0x28
  4061a2:	f8dd b010 	ldr.w	fp, [sp, #16]
  4061a6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4061a8:	465d      	mov	r5, fp
  4061aa:	e002      	b.n	4061b2 <_dtoa_r+0x692>
  4061ac:	f001 fabe 	bl	40772c <__multadd>
  4061b0:	4681      	mov	r9, r0
  4061b2:	4641      	mov	r1, r8
  4061b4:	4648      	mov	r0, r9
  4061b6:	f7ff fc1d 	bl	4059f4 <quorem>
  4061ba:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  4061be:	f805 ab01 	strb.w	sl, [r5], #1
  4061c2:	eba5 030b 	sub.w	r3, r5, fp
  4061c6:	42bb      	cmp	r3, r7
  4061c8:	f04f 020a 	mov.w	r2, #10
  4061cc:	f04f 0300 	mov.w	r3, #0
  4061d0:	4649      	mov	r1, r9
  4061d2:	4620      	mov	r0, r4
  4061d4:	dbea      	blt.n	4061ac <_dtoa_r+0x68c>
  4061d6:	9b04      	ldr	r3, [sp, #16]
  4061d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4061da:	2a01      	cmp	r2, #1
  4061dc:	bfac      	ite	ge
  4061de:	189b      	addge	r3, r3, r2
  4061e0:	3301      	addlt	r3, #1
  4061e2:	461d      	mov	r5, r3
  4061e4:	f04f 0b00 	mov.w	fp, #0
  4061e8:	4649      	mov	r1, r9
  4061ea:	2201      	movs	r2, #1
  4061ec:	4620      	mov	r0, r4
  4061ee:	f001 fc19 	bl	407a24 <__lshift>
  4061f2:	4641      	mov	r1, r8
  4061f4:	4681      	mov	r9, r0
  4061f6:	f001 fc67 	bl	407ac8 <__mcmp>
  4061fa:	2800      	cmp	r0, #0
  4061fc:	f340 823d 	ble.w	40667a <_dtoa_r+0xb5a>
  406200:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  406204:	9904      	ldr	r1, [sp, #16]
  406206:	1e6b      	subs	r3, r5, #1
  406208:	e004      	b.n	406214 <_dtoa_r+0x6f4>
  40620a:	428b      	cmp	r3, r1
  40620c:	f000 81ae 	beq.w	40656c <_dtoa_r+0xa4c>
  406210:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  406214:	2a39      	cmp	r2, #57	; 0x39
  406216:	f103 0501 	add.w	r5, r3, #1
  40621a:	d0f6      	beq.n	40620a <_dtoa_r+0x6ea>
  40621c:	3201      	adds	r2, #1
  40621e:	701a      	strb	r2, [r3, #0]
  406220:	4641      	mov	r1, r8
  406222:	4620      	mov	r0, r4
  406224:	f001 fa78 	bl	407718 <_Bfree>
  406228:	2e00      	cmp	r6, #0
  40622a:	f43f ae3d 	beq.w	405ea8 <_dtoa_r+0x388>
  40622e:	f1bb 0f00 	cmp.w	fp, #0
  406232:	d005      	beq.n	406240 <_dtoa_r+0x720>
  406234:	45b3      	cmp	fp, r6
  406236:	d003      	beq.n	406240 <_dtoa_r+0x720>
  406238:	4659      	mov	r1, fp
  40623a:	4620      	mov	r0, r4
  40623c:	f001 fa6c 	bl	407718 <_Bfree>
  406240:	4631      	mov	r1, r6
  406242:	4620      	mov	r0, r4
  406244:	f001 fa68 	bl	407718 <_Bfree>
  406248:	e62e      	b.n	405ea8 <_dtoa_r+0x388>
  40624a:	2300      	movs	r3, #0
  40624c:	930b      	str	r3, [sp, #44]	; 0x2c
  40624e:	9b02      	ldr	r3, [sp, #8]
  406250:	9a25      	ldr	r2, [sp, #148]	; 0x94
  406252:	4413      	add	r3, r2
  406254:	930f      	str	r3, [sp, #60]	; 0x3c
  406256:	3301      	adds	r3, #1
  406258:	2b01      	cmp	r3, #1
  40625a:	461f      	mov	r7, r3
  40625c:	461e      	mov	r6, r3
  40625e:	930a      	str	r3, [sp, #40]	; 0x28
  406260:	bfb8      	it	lt
  406262:	2701      	movlt	r7, #1
  406264:	2100      	movs	r1, #0
  406266:	2f17      	cmp	r7, #23
  406268:	6461      	str	r1, [r4, #68]	; 0x44
  40626a:	d90a      	bls.n	406282 <_dtoa_r+0x762>
  40626c:	2201      	movs	r2, #1
  40626e:	2304      	movs	r3, #4
  406270:	005b      	lsls	r3, r3, #1
  406272:	f103 0014 	add.w	r0, r3, #20
  406276:	4287      	cmp	r7, r0
  406278:	4611      	mov	r1, r2
  40627a:	f102 0201 	add.w	r2, r2, #1
  40627e:	d2f7      	bcs.n	406270 <_dtoa_r+0x750>
  406280:	6461      	str	r1, [r4, #68]	; 0x44
  406282:	4620      	mov	r0, r4
  406284:	f001 fa22 	bl	4076cc <_Balloc>
  406288:	2e0e      	cmp	r6, #14
  40628a:	9004      	str	r0, [sp, #16]
  40628c:	6420      	str	r0, [r4, #64]	; 0x40
  40628e:	f63f ad41 	bhi.w	405d14 <_dtoa_r+0x1f4>
  406292:	2d00      	cmp	r5, #0
  406294:	f43f ad3e 	beq.w	405d14 <_dtoa_r+0x1f4>
  406298:	9902      	ldr	r1, [sp, #8]
  40629a:	2900      	cmp	r1, #0
  40629c:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  4062a0:	f340 8202 	ble.w	4066a8 <_dtoa_r+0xb88>
  4062a4:	4bb8      	ldr	r3, [pc, #736]	; (406588 <_dtoa_r+0xa68>)
  4062a6:	f001 020f 	and.w	r2, r1, #15
  4062aa:	110d      	asrs	r5, r1, #4
  4062ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4062b0:	06e9      	lsls	r1, r5, #27
  4062b2:	e9d3 6700 	ldrd	r6, r7, [r3]
  4062b6:	f140 81ae 	bpl.w	406616 <_dtoa_r+0xaf6>
  4062ba:	4bb4      	ldr	r3, [pc, #720]	; (40658c <_dtoa_r+0xa6c>)
  4062bc:	4650      	mov	r0, sl
  4062be:	4659      	mov	r1, fp
  4062c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  4062c4:	f002 fc44 	bl	408b50 <__aeabi_ddiv>
  4062c8:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  4062cc:	f005 050f 	and.w	r5, r5, #15
  4062d0:	f04f 0a03 	mov.w	sl, #3
  4062d4:	b18d      	cbz	r5, 4062fa <_dtoa_r+0x7da>
  4062d6:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 40658c <_dtoa_r+0xa6c>
  4062da:	07ea      	lsls	r2, r5, #31
  4062dc:	d509      	bpl.n	4062f2 <_dtoa_r+0x7d2>
  4062de:	4630      	mov	r0, r6
  4062e0:	4639      	mov	r1, r7
  4062e2:	e9d8 2300 	ldrd	r2, r3, [r8]
  4062e6:	f002 fb09 	bl	4088fc <__aeabi_dmul>
  4062ea:	f10a 0a01 	add.w	sl, sl, #1
  4062ee:	4606      	mov	r6, r0
  4062f0:	460f      	mov	r7, r1
  4062f2:	106d      	asrs	r5, r5, #1
  4062f4:	f108 0808 	add.w	r8, r8, #8
  4062f8:	d1ef      	bne.n	4062da <_dtoa_r+0x7ba>
  4062fa:	463b      	mov	r3, r7
  4062fc:	4632      	mov	r2, r6
  4062fe:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  406302:	f002 fc25 	bl	408b50 <__aeabi_ddiv>
  406306:	4607      	mov	r7, r0
  406308:	4688      	mov	r8, r1
  40630a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40630c:	b143      	cbz	r3, 406320 <_dtoa_r+0x800>
  40630e:	2200      	movs	r2, #0
  406310:	4b9f      	ldr	r3, [pc, #636]	; (406590 <_dtoa_r+0xa70>)
  406312:	4638      	mov	r0, r7
  406314:	4641      	mov	r1, r8
  406316:	f002 fd63 	bl	408de0 <__aeabi_dcmplt>
  40631a:	2800      	cmp	r0, #0
  40631c:	f040 8286 	bne.w	40682c <_dtoa_r+0xd0c>
  406320:	4650      	mov	r0, sl
  406322:	f002 fa85 	bl	408830 <__aeabi_i2d>
  406326:	463a      	mov	r2, r7
  406328:	4643      	mov	r3, r8
  40632a:	f002 fae7 	bl	4088fc <__aeabi_dmul>
  40632e:	4b99      	ldr	r3, [pc, #612]	; (406594 <_dtoa_r+0xa74>)
  406330:	2200      	movs	r2, #0
  406332:	f002 f931 	bl	408598 <__adddf3>
  406336:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406338:	4605      	mov	r5, r0
  40633a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40633e:	2b00      	cmp	r3, #0
  406340:	f000 813e 	beq.w	4065c0 <_dtoa_r+0xaa0>
  406344:	9b02      	ldr	r3, [sp, #8]
  406346:	9315      	str	r3, [sp, #84]	; 0x54
  406348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40634a:	9312      	str	r3, [sp, #72]	; 0x48
  40634c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40634e:	2b00      	cmp	r3, #0
  406350:	f000 81fa 	beq.w	406748 <_dtoa_r+0xc28>
  406354:	9a12      	ldr	r2, [sp, #72]	; 0x48
  406356:	4b8c      	ldr	r3, [pc, #560]	; (406588 <_dtoa_r+0xa68>)
  406358:	498f      	ldr	r1, [pc, #572]	; (406598 <_dtoa_r+0xa78>)
  40635a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40635e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  406362:	2000      	movs	r0, #0
  406364:	f002 fbf4 	bl	408b50 <__aeabi_ddiv>
  406368:	462a      	mov	r2, r5
  40636a:	4633      	mov	r3, r6
  40636c:	f002 f912 	bl	408594 <__aeabi_dsub>
  406370:	4682      	mov	sl, r0
  406372:	468b      	mov	fp, r1
  406374:	4638      	mov	r0, r7
  406376:	4641      	mov	r1, r8
  406378:	f002 fd70 	bl	408e5c <__aeabi_d2iz>
  40637c:	4605      	mov	r5, r0
  40637e:	f002 fa57 	bl	408830 <__aeabi_i2d>
  406382:	4602      	mov	r2, r0
  406384:	460b      	mov	r3, r1
  406386:	4638      	mov	r0, r7
  406388:	4641      	mov	r1, r8
  40638a:	f002 f903 	bl	408594 <__aeabi_dsub>
  40638e:	3530      	adds	r5, #48	; 0x30
  406390:	fa5f f885 	uxtb.w	r8, r5
  406394:	9d04      	ldr	r5, [sp, #16]
  406396:	4606      	mov	r6, r0
  406398:	460f      	mov	r7, r1
  40639a:	f885 8000 	strb.w	r8, [r5]
  40639e:	4602      	mov	r2, r0
  4063a0:	460b      	mov	r3, r1
  4063a2:	4650      	mov	r0, sl
  4063a4:	4659      	mov	r1, fp
  4063a6:	3501      	adds	r5, #1
  4063a8:	f002 fd38 	bl	408e1c <__aeabi_dcmpgt>
  4063ac:	2800      	cmp	r0, #0
  4063ae:	d154      	bne.n	40645a <_dtoa_r+0x93a>
  4063b0:	4632      	mov	r2, r6
  4063b2:	463b      	mov	r3, r7
  4063b4:	2000      	movs	r0, #0
  4063b6:	4976      	ldr	r1, [pc, #472]	; (406590 <_dtoa_r+0xa70>)
  4063b8:	f002 f8ec 	bl	408594 <__aeabi_dsub>
  4063bc:	4602      	mov	r2, r0
  4063be:	460b      	mov	r3, r1
  4063c0:	4650      	mov	r0, sl
  4063c2:	4659      	mov	r1, fp
  4063c4:	f002 fd2a 	bl	408e1c <__aeabi_dcmpgt>
  4063c8:	2800      	cmp	r0, #0
  4063ca:	f040 8270 	bne.w	4068ae <_dtoa_r+0xd8e>
  4063ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4063d0:	2a01      	cmp	r2, #1
  4063d2:	f000 8111 	beq.w	4065f8 <_dtoa_r+0xad8>
  4063d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4063d8:	9a04      	ldr	r2, [sp, #16]
  4063da:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  4063de:	4413      	add	r3, r2
  4063e0:	4699      	mov	r9, r3
  4063e2:	e00d      	b.n	406400 <_dtoa_r+0x8e0>
  4063e4:	2000      	movs	r0, #0
  4063e6:	496a      	ldr	r1, [pc, #424]	; (406590 <_dtoa_r+0xa70>)
  4063e8:	f002 f8d4 	bl	408594 <__aeabi_dsub>
  4063ec:	4652      	mov	r2, sl
  4063ee:	465b      	mov	r3, fp
  4063f0:	f002 fcf6 	bl	408de0 <__aeabi_dcmplt>
  4063f4:	2800      	cmp	r0, #0
  4063f6:	f040 8258 	bne.w	4068aa <_dtoa_r+0xd8a>
  4063fa:	454d      	cmp	r5, r9
  4063fc:	f000 80fa 	beq.w	4065f4 <_dtoa_r+0xad4>
  406400:	4650      	mov	r0, sl
  406402:	4659      	mov	r1, fp
  406404:	2200      	movs	r2, #0
  406406:	4b65      	ldr	r3, [pc, #404]	; (40659c <_dtoa_r+0xa7c>)
  406408:	f002 fa78 	bl	4088fc <__aeabi_dmul>
  40640c:	2200      	movs	r2, #0
  40640e:	4b63      	ldr	r3, [pc, #396]	; (40659c <_dtoa_r+0xa7c>)
  406410:	4682      	mov	sl, r0
  406412:	468b      	mov	fp, r1
  406414:	4630      	mov	r0, r6
  406416:	4639      	mov	r1, r7
  406418:	f002 fa70 	bl	4088fc <__aeabi_dmul>
  40641c:	460f      	mov	r7, r1
  40641e:	4606      	mov	r6, r0
  406420:	f002 fd1c 	bl	408e5c <__aeabi_d2iz>
  406424:	4680      	mov	r8, r0
  406426:	f002 fa03 	bl	408830 <__aeabi_i2d>
  40642a:	4602      	mov	r2, r0
  40642c:	460b      	mov	r3, r1
  40642e:	4630      	mov	r0, r6
  406430:	4639      	mov	r1, r7
  406432:	f002 f8af 	bl	408594 <__aeabi_dsub>
  406436:	f108 0830 	add.w	r8, r8, #48	; 0x30
  40643a:	fa5f f888 	uxtb.w	r8, r8
  40643e:	4652      	mov	r2, sl
  406440:	465b      	mov	r3, fp
  406442:	f805 8b01 	strb.w	r8, [r5], #1
  406446:	4606      	mov	r6, r0
  406448:	460f      	mov	r7, r1
  40644a:	f002 fcc9 	bl	408de0 <__aeabi_dcmplt>
  40644e:	4632      	mov	r2, r6
  406450:	463b      	mov	r3, r7
  406452:	2800      	cmp	r0, #0
  406454:	d0c6      	beq.n	4063e4 <_dtoa_r+0x8c4>
  406456:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40645a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40645c:	9302      	str	r3, [sp, #8]
  40645e:	e523      	b.n	405ea8 <_dtoa_r+0x388>
  406460:	2300      	movs	r3, #0
  406462:	930b      	str	r3, [sp, #44]	; 0x2c
  406464:	9b25      	ldr	r3, [sp, #148]	; 0x94
  406466:	2b00      	cmp	r3, #0
  406468:	f340 80dc 	ble.w	406624 <_dtoa_r+0xb04>
  40646c:	461f      	mov	r7, r3
  40646e:	461e      	mov	r6, r3
  406470:	930f      	str	r3, [sp, #60]	; 0x3c
  406472:	930a      	str	r3, [sp, #40]	; 0x28
  406474:	e6f6      	b.n	406264 <_dtoa_r+0x744>
  406476:	2301      	movs	r3, #1
  406478:	930b      	str	r3, [sp, #44]	; 0x2c
  40647a:	e7f3      	b.n	406464 <_dtoa_r+0x944>
  40647c:	f1ba 0f00 	cmp.w	sl, #0
  406480:	f47f ada8 	bne.w	405fd4 <_dtoa_r+0x4b4>
  406484:	f3cb 0313 	ubfx	r3, fp, #0, #20
  406488:	2b00      	cmp	r3, #0
  40648a:	f47f adba 	bne.w	406002 <_dtoa_r+0x4e2>
  40648e:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  406492:	0d3f      	lsrs	r7, r7, #20
  406494:	053f      	lsls	r7, r7, #20
  406496:	2f00      	cmp	r7, #0
  406498:	f000 820d 	beq.w	4068b6 <_dtoa_r+0xd96>
  40649c:	9b08      	ldr	r3, [sp, #32]
  40649e:	3301      	adds	r3, #1
  4064a0:	9308      	str	r3, [sp, #32]
  4064a2:	9b06      	ldr	r3, [sp, #24]
  4064a4:	3301      	adds	r3, #1
  4064a6:	9306      	str	r3, [sp, #24]
  4064a8:	2301      	movs	r3, #1
  4064aa:	930c      	str	r3, [sp, #48]	; 0x30
  4064ac:	e5ab      	b.n	406006 <_dtoa_r+0x4e6>
  4064ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4064b0:	2b00      	cmp	r3, #0
  4064b2:	f73f ac42 	bgt.w	405d3a <_dtoa_r+0x21a>
  4064b6:	f040 8221 	bne.w	4068fc <_dtoa_r+0xddc>
  4064ba:	2200      	movs	r2, #0
  4064bc:	4b38      	ldr	r3, [pc, #224]	; (4065a0 <_dtoa_r+0xa80>)
  4064be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4064c2:	f002 fa1b 	bl	4088fc <__aeabi_dmul>
  4064c6:	4652      	mov	r2, sl
  4064c8:	465b      	mov	r3, fp
  4064ca:	f002 fc9d 	bl	408e08 <__aeabi_dcmpge>
  4064ce:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  4064d2:	4646      	mov	r6, r8
  4064d4:	2800      	cmp	r0, #0
  4064d6:	d041      	beq.n	40655c <_dtoa_r+0xa3c>
  4064d8:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4064da:	9d04      	ldr	r5, [sp, #16]
  4064dc:	43db      	mvns	r3, r3
  4064de:	9302      	str	r3, [sp, #8]
  4064e0:	4641      	mov	r1, r8
  4064e2:	4620      	mov	r0, r4
  4064e4:	f001 f918 	bl	407718 <_Bfree>
  4064e8:	2e00      	cmp	r6, #0
  4064ea:	f43f acdd 	beq.w	405ea8 <_dtoa_r+0x388>
  4064ee:	e6a7      	b.n	406240 <_dtoa_r+0x720>
  4064f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4064f2:	4649      	mov	r1, r9
  4064f4:	4620      	mov	r0, r4
  4064f6:	f001 fa45 	bl	407984 <__pow5mult>
  4064fa:	4681      	mov	r9, r0
  4064fc:	e558      	b.n	405fb0 <_dtoa_r+0x490>
  4064fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
  406500:	2a00      	cmp	r2, #0
  406502:	f000 8187 	beq.w	406814 <_dtoa_r+0xcf4>
  406506:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40650a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40650c:	9d08      	ldr	r5, [sp, #32]
  40650e:	e4f2      	b.n	405ef6 <_dtoa_r+0x3d6>
  406510:	f1ba 0f00 	cmp.w	sl, #0
  406514:	f47f ad75 	bne.w	406002 <_dtoa_r+0x4e2>
  406518:	e7b4      	b.n	406484 <_dtoa_r+0x964>
  40651a:	f001 f907 	bl	40772c <__multadd>
  40651e:	4647      	mov	r7, r8
  406520:	4606      	mov	r6, r0
  406522:	4683      	mov	fp, r0
  406524:	e5be      	b.n	4060a4 <_dtoa_r+0x584>
  406526:	4601      	mov	r1, r0
  406528:	4620      	mov	r0, r4
  40652a:	9306      	str	r3, [sp, #24]
  40652c:	f001 f8f4 	bl	407718 <_Bfree>
  406530:	2201      	movs	r2, #1
  406532:	9b06      	ldr	r3, [sp, #24]
  406534:	e5e0      	b.n	4060f8 <_dtoa_r+0x5d8>
  406536:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406538:	2b02      	cmp	r3, #2
  40653a:	f77f ad96 	ble.w	40606a <_dtoa_r+0x54a>
  40653e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406540:	2b00      	cmp	r3, #0
  406542:	d1c9      	bne.n	4064d8 <_dtoa_r+0x9b8>
  406544:	4641      	mov	r1, r8
  406546:	2205      	movs	r2, #5
  406548:	4620      	mov	r0, r4
  40654a:	f001 f8ef 	bl	40772c <__multadd>
  40654e:	4601      	mov	r1, r0
  406550:	4680      	mov	r8, r0
  406552:	4648      	mov	r0, r9
  406554:	f001 fab8 	bl	407ac8 <__mcmp>
  406558:	2800      	cmp	r0, #0
  40655a:	ddbd      	ble.n	4064d8 <_dtoa_r+0x9b8>
  40655c:	9a02      	ldr	r2, [sp, #8]
  40655e:	9904      	ldr	r1, [sp, #16]
  406560:	2331      	movs	r3, #49	; 0x31
  406562:	3201      	adds	r2, #1
  406564:	9202      	str	r2, [sp, #8]
  406566:	700b      	strb	r3, [r1, #0]
  406568:	1c4d      	adds	r5, r1, #1
  40656a:	e7b9      	b.n	4064e0 <_dtoa_r+0x9c0>
  40656c:	9a02      	ldr	r2, [sp, #8]
  40656e:	3201      	adds	r2, #1
  406570:	9202      	str	r2, [sp, #8]
  406572:	9a04      	ldr	r2, [sp, #16]
  406574:	2331      	movs	r3, #49	; 0x31
  406576:	7013      	strb	r3, [r2, #0]
  406578:	e652      	b.n	406220 <_dtoa_r+0x700>
  40657a:	2301      	movs	r3, #1
  40657c:	930b      	str	r3, [sp, #44]	; 0x2c
  40657e:	e666      	b.n	40624e <_dtoa_r+0x72e>
  406580:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  406584:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  406586:	e48f      	b.n	405ea8 <_dtoa_r+0x388>
  406588:	00409b00 	.word	0x00409b00
  40658c:	00409ad8 	.word	0x00409ad8
  406590:	3ff00000 	.word	0x3ff00000
  406594:	401c0000 	.word	0x401c0000
  406598:	3fe00000 	.word	0x3fe00000
  40659c:	40240000 	.word	0x40240000
  4065a0:	40140000 	.word	0x40140000
  4065a4:	4650      	mov	r0, sl
  4065a6:	f002 f943 	bl	408830 <__aeabi_i2d>
  4065aa:	463a      	mov	r2, r7
  4065ac:	4643      	mov	r3, r8
  4065ae:	f002 f9a5 	bl	4088fc <__aeabi_dmul>
  4065b2:	2200      	movs	r2, #0
  4065b4:	4bc1      	ldr	r3, [pc, #772]	; (4068bc <_dtoa_r+0xd9c>)
  4065b6:	f001 ffef 	bl	408598 <__adddf3>
  4065ba:	4605      	mov	r5, r0
  4065bc:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4065c0:	4641      	mov	r1, r8
  4065c2:	2200      	movs	r2, #0
  4065c4:	4bbe      	ldr	r3, [pc, #760]	; (4068c0 <_dtoa_r+0xda0>)
  4065c6:	4638      	mov	r0, r7
  4065c8:	f001 ffe4 	bl	408594 <__aeabi_dsub>
  4065cc:	462a      	mov	r2, r5
  4065ce:	4633      	mov	r3, r6
  4065d0:	4682      	mov	sl, r0
  4065d2:	468b      	mov	fp, r1
  4065d4:	f002 fc22 	bl	408e1c <__aeabi_dcmpgt>
  4065d8:	4680      	mov	r8, r0
  4065da:	2800      	cmp	r0, #0
  4065dc:	f040 8110 	bne.w	406800 <_dtoa_r+0xce0>
  4065e0:	462a      	mov	r2, r5
  4065e2:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  4065e6:	4650      	mov	r0, sl
  4065e8:	4659      	mov	r1, fp
  4065ea:	f002 fbf9 	bl	408de0 <__aeabi_dcmplt>
  4065ee:	b118      	cbz	r0, 4065f8 <_dtoa_r+0xad8>
  4065f0:	4646      	mov	r6, r8
  4065f2:	e771      	b.n	4064d8 <_dtoa_r+0x9b8>
  4065f4:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4065f8:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  4065fc:	f7ff bb8a 	b.w	405d14 <_dtoa_r+0x1f4>
  406600:	9804      	ldr	r0, [sp, #16]
  406602:	f7ff babb 	b.w	405b7c <_dtoa_r+0x5c>
  406606:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406608:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40660a:	970c      	str	r7, [sp, #48]	; 0x30
  40660c:	1afb      	subs	r3, r7, r3
  40660e:	441a      	add	r2, r3
  406610:	920d      	str	r2, [sp, #52]	; 0x34
  406612:	2700      	movs	r7, #0
  406614:	e469      	b.n	405eea <_dtoa_r+0x3ca>
  406616:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  40661a:	f04f 0a02 	mov.w	sl, #2
  40661e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  406622:	e657      	b.n	4062d4 <_dtoa_r+0x7b4>
  406624:	2100      	movs	r1, #0
  406626:	2301      	movs	r3, #1
  406628:	6461      	str	r1, [r4, #68]	; 0x44
  40662a:	4620      	mov	r0, r4
  40662c:	9325      	str	r3, [sp, #148]	; 0x94
  40662e:	f001 f84d 	bl	4076cc <_Balloc>
  406632:	9b25      	ldr	r3, [sp, #148]	; 0x94
  406634:	9004      	str	r0, [sp, #16]
  406636:	6420      	str	r0, [r4, #64]	; 0x40
  406638:	930a      	str	r3, [sp, #40]	; 0x28
  40663a:	930f      	str	r3, [sp, #60]	; 0x3c
  40663c:	e629      	b.n	406292 <_dtoa_r+0x772>
  40663e:	2a00      	cmp	r2, #0
  406640:	46d0      	mov	r8, sl
  406642:	f8cd b018 	str.w	fp, [sp, #24]
  406646:	469a      	mov	sl, r3
  406648:	dd11      	ble.n	40666e <_dtoa_r+0xb4e>
  40664a:	4649      	mov	r1, r9
  40664c:	2201      	movs	r2, #1
  40664e:	4620      	mov	r0, r4
  406650:	f001 f9e8 	bl	407a24 <__lshift>
  406654:	4641      	mov	r1, r8
  406656:	4681      	mov	r9, r0
  406658:	f001 fa36 	bl	407ac8 <__mcmp>
  40665c:	2800      	cmp	r0, #0
  40665e:	f340 8146 	ble.w	4068ee <_dtoa_r+0xdce>
  406662:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  406666:	f000 8106 	beq.w	406876 <_dtoa_r+0xd56>
  40666a:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  40666e:	46b3      	mov	fp, r6
  406670:	f887 a000 	strb.w	sl, [r7]
  406674:	1c7d      	adds	r5, r7, #1
  406676:	9e06      	ldr	r6, [sp, #24]
  406678:	e5d2      	b.n	406220 <_dtoa_r+0x700>
  40667a:	d104      	bne.n	406686 <_dtoa_r+0xb66>
  40667c:	f01a 0f01 	tst.w	sl, #1
  406680:	d001      	beq.n	406686 <_dtoa_r+0xb66>
  406682:	e5bd      	b.n	406200 <_dtoa_r+0x6e0>
  406684:	4615      	mov	r5, r2
  406686:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40668a:	2b30      	cmp	r3, #48	; 0x30
  40668c:	f105 32ff 	add.w	r2, r5, #4294967295
  406690:	d0f8      	beq.n	406684 <_dtoa_r+0xb64>
  406692:	e5c5      	b.n	406220 <_dtoa_r+0x700>
  406694:	9904      	ldr	r1, [sp, #16]
  406696:	2230      	movs	r2, #48	; 0x30
  406698:	700a      	strb	r2, [r1, #0]
  40669a:	9a02      	ldr	r2, [sp, #8]
  40669c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4066a0:	3201      	adds	r2, #1
  4066a2:	9202      	str	r2, [sp, #8]
  4066a4:	f7ff bbfc 	b.w	405ea0 <_dtoa_r+0x380>
  4066a8:	f000 80bb 	beq.w	406822 <_dtoa_r+0xd02>
  4066ac:	9b02      	ldr	r3, [sp, #8]
  4066ae:	425d      	negs	r5, r3
  4066b0:	4b84      	ldr	r3, [pc, #528]	; (4068c4 <_dtoa_r+0xda4>)
  4066b2:	f005 020f 	and.w	r2, r5, #15
  4066b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4066ba:	e9d3 2300 	ldrd	r2, r3, [r3]
  4066be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  4066c2:	f002 f91b 	bl	4088fc <__aeabi_dmul>
  4066c6:	112d      	asrs	r5, r5, #4
  4066c8:	4607      	mov	r7, r0
  4066ca:	4688      	mov	r8, r1
  4066cc:	f000 812c 	beq.w	406928 <_dtoa_r+0xe08>
  4066d0:	4e7d      	ldr	r6, [pc, #500]	; (4068c8 <_dtoa_r+0xda8>)
  4066d2:	f04f 0a02 	mov.w	sl, #2
  4066d6:	07eb      	lsls	r3, r5, #31
  4066d8:	d509      	bpl.n	4066ee <_dtoa_r+0xbce>
  4066da:	4638      	mov	r0, r7
  4066dc:	4641      	mov	r1, r8
  4066de:	e9d6 2300 	ldrd	r2, r3, [r6]
  4066e2:	f002 f90b 	bl	4088fc <__aeabi_dmul>
  4066e6:	f10a 0a01 	add.w	sl, sl, #1
  4066ea:	4607      	mov	r7, r0
  4066ec:	4688      	mov	r8, r1
  4066ee:	106d      	asrs	r5, r5, #1
  4066f0:	f106 0608 	add.w	r6, r6, #8
  4066f4:	d1ef      	bne.n	4066d6 <_dtoa_r+0xbb6>
  4066f6:	e608      	b.n	40630a <_dtoa_r+0x7ea>
  4066f8:	6871      	ldr	r1, [r6, #4]
  4066fa:	4620      	mov	r0, r4
  4066fc:	f000 ffe6 	bl	4076cc <_Balloc>
  406700:	6933      	ldr	r3, [r6, #16]
  406702:	3302      	adds	r3, #2
  406704:	009a      	lsls	r2, r3, #2
  406706:	4605      	mov	r5, r0
  406708:	f106 010c 	add.w	r1, r6, #12
  40670c:	300c      	adds	r0, #12
  40670e:	f000 fedf 	bl	4074d0 <memcpy>
  406712:	4629      	mov	r1, r5
  406714:	2201      	movs	r2, #1
  406716:	4620      	mov	r0, r4
  406718:	f001 f984 	bl	407a24 <__lshift>
  40671c:	9006      	str	r0, [sp, #24]
  40671e:	e4b5      	b.n	40608c <_dtoa_r+0x56c>
  406720:	2b39      	cmp	r3, #57	; 0x39
  406722:	f8cd b018 	str.w	fp, [sp, #24]
  406726:	46d0      	mov	r8, sl
  406728:	f000 80a5 	beq.w	406876 <_dtoa_r+0xd56>
  40672c:	f103 0a01 	add.w	sl, r3, #1
  406730:	46b3      	mov	fp, r6
  406732:	f887 a000 	strb.w	sl, [r7]
  406736:	1c7d      	adds	r5, r7, #1
  406738:	9e06      	ldr	r6, [sp, #24]
  40673a:	e571      	b.n	406220 <_dtoa_r+0x700>
  40673c:	465a      	mov	r2, fp
  40673e:	46d0      	mov	r8, sl
  406740:	46b3      	mov	fp, r6
  406742:	469a      	mov	sl, r3
  406744:	4616      	mov	r6, r2
  406746:	e54f      	b.n	4061e8 <_dtoa_r+0x6c8>
  406748:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40674a:	495e      	ldr	r1, [pc, #376]	; (4068c4 <_dtoa_r+0xda4>)
  40674c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  406750:	462a      	mov	r2, r5
  406752:	4633      	mov	r3, r6
  406754:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  406758:	f002 f8d0 	bl	4088fc <__aeabi_dmul>
  40675c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  406760:	4638      	mov	r0, r7
  406762:	4641      	mov	r1, r8
  406764:	f002 fb7a 	bl	408e5c <__aeabi_d2iz>
  406768:	4605      	mov	r5, r0
  40676a:	f002 f861 	bl	408830 <__aeabi_i2d>
  40676e:	460b      	mov	r3, r1
  406770:	4602      	mov	r2, r0
  406772:	4641      	mov	r1, r8
  406774:	4638      	mov	r0, r7
  406776:	f001 ff0d 	bl	408594 <__aeabi_dsub>
  40677a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40677c:	460f      	mov	r7, r1
  40677e:	9904      	ldr	r1, [sp, #16]
  406780:	3530      	adds	r5, #48	; 0x30
  406782:	2b01      	cmp	r3, #1
  406784:	700d      	strb	r5, [r1, #0]
  406786:	4606      	mov	r6, r0
  406788:	f101 0501 	add.w	r5, r1, #1
  40678c:	d026      	beq.n	4067dc <_dtoa_r+0xcbc>
  40678e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406790:	9a04      	ldr	r2, [sp, #16]
  406792:	f8df b13c 	ldr.w	fp, [pc, #316]	; 4068d0 <_dtoa_r+0xdb0>
  406796:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40679a:	4413      	add	r3, r2
  40679c:	f04f 0a00 	mov.w	sl, #0
  4067a0:	4699      	mov	r9, r3
  4067a2:	4652      	mov	r2, sl
  4067a4:	465b      	mov	r3, fp
  4067a6:	4630      	mov	r0, r6
  4067a8:	4639      	mov	r1, r7
  4067aa:	f002 f8a7 	bl	4088fc <__aeabi_dmul>
  4067ae:	460f      	mov	r7, r1
  4067b0:	4606      	mov	r6, r0
  4067b2:	f002 fb53 	bl	408e5c <__aeabi_d2iz>
  4067b6:	4680      	mov	r8, r0
  4067b8:	f002 f83a 	bl	408830 <__aeabi_i2d>
  4067bc:	f108 0830 	add.w	r8, r8, #48	; 0x30
  4067c0:	4602      	mov	r2, r0
  4067c2:	460b      	mov	r3, r1
  4067c4:	4630      	mov	r0, r6
  4067c6:	4639      	mov	r1, r7
  4067c8:	f001 fee4 	bl	408594 <__aeabi_dsub>
  4067cc:	f805 8b01 	strb.w	r8, [r5], #1
  4067d0:	454d      	cmp	r5, r9
  4067d2:	4606      	mov	r6, r0
  4067d4:	460f      	mov	r7, r1
  4067d6:	d1e4      	bne.n	4067a2 <_dtoa_r+0xc82>
  4067d8:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4067dc:	4b3b      	ldr	r3, [pc, #236]	; (4068cc <_dtoa_r+0xdac>)
  4067de:	2200      	movs	r2, #0
  4067e0:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  4067e4:	f001 fed8 	bl	408598 <__adddf3>
  4067e8:	4632      	mov	r2, r6
  4067ea:	463b      	mov	r3, r7
  4067ec:	f002 faf8 	bl	408de0 <__aeabi_dcmplt>
  4067f0:	2800      	cmp	r0, #0
  4067f2:	d046      	beq.n	406882 <_dtoa_r+0xd62>
  4067f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4067f6:	9302      	str	r3, [sp, #8]
  4067f8:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4067fc:	f7ff bb43 	b.w	405e86 <_dtoa_r+0x366>
  406800:	f04f 0800 	mov.w	r8, #0
  406804:	4646      	mov	r6, r8
  406806:	e6a9      	b.n	40655c <_dtoa_r+0xa3c>
  406808:	9b08      	ldr	r3, [sp, #32]
  40680a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40680c:	1a9d      	subs	r5, r3, r2
  40680e:	2300      	movs	r3, #0
  406810:	f7ff bb71 	b.w	405ef6 <_dtoa_r+0x3d6>
  406814:	9b18      	ldr	r3, [sp, #96]	; 0x60
  406816:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  406818:	9d08      	ldr	r5, [sp, #32]
  40681a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40681e:	f7ff bb6a 	b.w	405ef6 <_dtoa_r+0x3d6>
  406822:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  406826:	f04f 0a02 	mov.w	sl, #2
  40682a:	e56e      	b.n	40630a <_dtoa_r+0x7ea>
  40682c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40682e:	2b00      	cmp	r3, #0
  406830:	f43f aeb8 	beq.w	4065a4 <_dtoa_r+0xa84>
  406834:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406836:	2b00      	cmp	r3, #0
  406838:	f77f aede 	ble.w	4065f8 <_dtoa_r+0xad8>
  40683c:	2200      	movs	r2, #0
  40683e:	4b24      	ldr	r3, [pc, #144]	; (4068d0 <_dtoa_r+0xdb0>)
  406840:	4638      	mov	r0, r7
  406842:	4641      	mov	r1, r8
  406844:	f002 f85a 	bl	4088fc <__aeabi_dmul>
  406848:	4607      	mov	r7, r0
  40684a:	4688      	mov	r8, r1
  40684c:	f10a 0001 	add.w	r0, sl, #1
  406850:	f001 ffee 	bl	408830 <__aeabi_i2d>
  406854:	463a      	mov	r2, r7
  406856:	4643      	mov	r3, r8
  406858:	f002 f850 	bl	4088fc <__aeabi_dmul>
  40685c:	2200      	movs	r2, #0
  40685e:	4b17      	ldr	r3, [pc, #92]	; (4068bc <_dtoa_r+0xd9c>)
  406860:	f001 fe9a 	bl	408598 <__adddf3>
  406864:	9a02      	ldr	r2, [sp, #8]
  406866:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406868:	9312      	str	r3, [sp, #72]	; 0x48
  40686a:	3a01      	subs	r2, #1
  40686c:	4605      	mov	r5, r0
  40686e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  406872:	9215      	str	r2, [sp, #84]	; 0x54
  406874:	e56a      	b.n	40634c <_dtoa_r+0x82c>
  406876:	2239      	movs	r2, #57	; 0x39
  406878:	46b3      	mov	fp, r6
  40687a:	703a      	strb	r2, [r7, #0]
  40687c:	9e06      	ldr	r6, [sp, #24]
  40687e:	1c7d      	adds	r5, r7, #1
  406880:	e4c0      	b.n	406204 <_dtoa_r+0x6e4>
  406882:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  406886:	2000      	movs	r0, #0
  406888:	4910      	ldr	r1, [pc, #64]	; (4068cc <_dtoa_r+0xdac>)
  40688a:	f001 fe83 	bl	408594 <__aeabi_dsub>
  40688e:	4632      	mov	r2, r6
  406890:	463b      	mov	r3, r7
  406892:	f002 fac3 	bl	408e1c <__aeabi_dcmpgt>
  406896:	b908      	cbnz	r0, 40689c <_dtoa_r+0xd7c>
  406898:	e6ae      	b.n	4065f8 <_dtoa_r+0xad8>
  40689a:	4615      	mov	r5, r2
  40689c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4068a0:	2b30      	cmp	r3, #48	; 0x30
  4068a2:	f105 32ff 	add.w	r2, r5, #4294967295
  4068a6:	d0f8      	beq.n	40689a <_dtoa_r+0xd7a>
  4068a8:	e5d7      	b.n	40645a <_dtoa_r+0x93a>
  4068aa:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4068ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4068b0:	9302      	str	r3, [sp, #8]
  4068b2:	f7ff bae8 	b.w	405e86 <_dtoa_r+0x366>
  4068b6:	970c      	str	r7, [sp, #48]	; 0x30
  4068b8:	f7ff bba5 	b.w	406006 <_dtoa_r+0x4e6>
  4068bc:	401c0000 	.word	0x401c0000
  4068c0:	40140000 	.word	0x40140000
  4068c4:	00409b00 	.word	0x00409b00
  4068c8:	00409ad8 	.word	0x00409ad8
  4068cc:	3fe00000 	.word	0x3fe00000
  4068d0:	40240000 	.word	0x40240000
  4068d4:	2b39      	cmp	r3, #57	; 0x39
  4068d6:	f8cd b018 	str.w	fp, [sp, #24]
  4068da:	46d0      	mov	r8, sl
  4068dc:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  4068e0:	469a      	mov	sl, r3
  4068e2:	d0c8      	beq.n	406876 <_dtoa_r+0xd56>
  4068e4:	f1bb 0f00 	cmp.w	fp, #0
  4068e8:	f73f aebf 	bgt.w	40666a <_dtoa_r+0xb4a>
  4068ec:	e6bf      	b.n	40666e <_dtoa_r+0xb4e>
  4068ee:	f47f aebe 	bne.w	40666e <_dtoa_r+0xb4e>
  4068f2:	f01a 0f01 	tst.w	sl, #1
  4068f6:	f43f aeba 	beq.w	40666e <_dtoa_r+0xb4e>
  4068fa:	e6b2      	b.n	406662 <_dtoa_r+0xb42>
  4068fc:	f04f 0800 	mov.w	r8, #0
  406900:	4646      	mov	r6, r8
  406902:	e5e9      	b.n	4064d8 <_dtoa_r+0x9b8>
  406904:	4631      	mov	r1, r6
  406906:	2300      	movs	r3, #0
  406908:	220a      	movs	r2, #10
  40690a:	4620      	mov	r0, r4
  40690c:	f000 ff0e 	bl	40772c <__multadd>
  406910:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406912:	2b00      	cmp	r3, #0
  406914:	4606      	mov	r6, r0
  406916:	dd0a      	ble.n	40692e <_dtoa_r+0xe0e>
  406918:	930a      	str	r3, [sp, #40]	; 0x28
  40691a:	f7ff bbaa 	b.w	406072 <_dtoa_r+0x552>
  40691e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406920:	2b02      	cmp	r3, #2
  406922:	dc23      	bgt.n	40696c <_dtoa_r+0xe4c>
  406924:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406926:	e43b      	b.n	4061a0 <_dtoa_r+0x680>
  406928:	f04f 0a02 	mov.w	sl, #2
  40692c:	e4ed      	b.n	40630a <_dtoa_r+0x7ea>
  40692e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406930:	2b02      	cmp	r3, #2
  406932:	dc1b      	bgt.n	40696c <_dtoa_r+0xe4c>
  406934:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406936:	e7ef      	b.n	406918 <_dtoa_r+0xdf8>
  406938:	2500      	movs	r5, #0
  40693a:	6465      	str	r5, [r4, #68]	; 0x44
  40693c:	4629      	mov	r1, r5
  40693e:	4620      	mov	r0, r4
  406940:	f000 fec4 	bl	4076cc <_Balloc>
  406944:	f04f 33ff 	mov.w	r3, #4294967295
  406948:	930a      	str	r3, [sp, #40]	; 0x28
  40694a:	930f      	str	r3, [sp, #60]	; 0x3c
  40694c:	2301      	movs	r3, #1
  40694e:	9004      	str	r0, [sp, #16]
  406950:	9525      	str	r5, [sp, #148]	; 0x94
  406952:	6420      	str	r0, [r4, #64]	; 0x40
  406954:	930b      	str	r3, [sp, #44]	; 0x2c
  406956:	f7ff b9dd 	b.w	405d14 <_dtoa_r+0x1f4>
  40695a:	2501      	movs	r5, #1
  40695c:	f7ff b9a5 	b.w	405caa <_dtoa_r+0x18a>
  406960:	f43f ab69 	beq.w	406036 <_dtoa_r+0x516>
  406964:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  406968:	f7ff bbf9 	b.w	40615e <_dtoa_r+0x63e>
  40696c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40696e:	930a      	str	r3, [sp, #40]	; 0x28
  406970:	e5e5      	b.n	40653e <_dtoa_r+0xa1e>
  406972:	bf00      	nop

00406974 <__sflush_r>:
  406974:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  406978:	b29a      	uxth	r2, r3
  40697a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40697e:	460d      	mov	r5, r1
  406980:	0711      	lsls	r1, r2, #28
  406982:	4680      	mov	r8, r0
  406984:	d43a      	bmi.n	4069fc <__sflush_r+0x88>
  406986:	686a      	ldr	r2, [r5, #4]
  406988:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40698c:	2a00      	cmp	r2, #0
  40698e:	81ab      	strh	r3, [r5, #12]
  406990:	dd6f      	ble.n	406a72 <__sflush_r+0xfe>
  406992:	6aac      	ldr	r4, [r5, #40]	; 0x28
  406994:	2c00      	cmp	r4, #0
  406996:	d049      	beq.n	406a2c <__sflush_r+0xb8>
  406998:	2200      	movs	r2, #0
  40699a:	b29b      	uxth	r3, r3
  40699c:	f8d8 6000 	ldr.w	r6, [r8]
  4069a0:	f8c8 2000 	str.w	r2, [r8]
  4069a4:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  4069a8:	d067      	beq.n	406a7a <__sflush_r+0x106>
  4069aa:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4069ac:	075f      	lsls	r7, r3, #29
  4069ae:	d505      	bpl.n	4069bc <__sflush_r+0x48>
  4069b0:	6869      	ldr	r1, [r5, #4]
  4069b2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4069b4:	1a52      	subs	r2, r2, r1
  4069b6:	b10b      	cbz	r3, 4069bc <__sflush_r+0x48>
  4069b8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4069ba:	1ad2      	subs	r2, r2, r3
  4069bc:	2300      	movs	r3, #0
  4069be:	69e9      	ldr	r1, [r5, #28]
  4069c0:	4640      	mov	r0, r8
  4069c2:	47a0      	blx	r4
  4069c4:	1c44      	adds	r4, r0, #1
  4069c6:	d03c      	beq.n	406a42 <__sflush_r+0xce>
  4069c8:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4069cc:	692a      	ldr	r2, [r5, #16]
  4069ce:	602a      	str	r2, [r5, #0]
  4069d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4069d4:	2200      	movs	r2, #0
  4069d6:	81ab      	strh	r3, [r5, #12]
  4069d8:	04db      	lsls	r3, r3, #19
  4069da:	606a      	str	r2, [r5, #4]
  4069dc:	d447      	bmi.n	406a6e <__sflush_r+0xfa>
  4069de:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4069e0:	f8c8 6000 	str.w	r6, [r8]
  4069e4:	b311      	cbz	r1, 406a2c <__sflush_r+0xb8>
  4069e6:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4069ea:	4299      	cmp	r1, r3
  4069ec:	d002      	beq.n	4069f4 <__sflush_r+0x80>
  4069ee:	4640      	mov	r0, r8
  4069f0:	f000 f9de 	bl	406db0 <_free_r>
  4069f4:	2000      	movs	r0, #0
  4069f6:	6328      	str	r0, [r5, #48]	; 0x30
  4069f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4069fc:	692e      	ldr	r6, [r5, #16]
  4069fe:	b1ae      	cbz	r6, 406a2c <__sflush_r+0xb8>
  406a00:	682c      	ldr	r4, [r5, #0]
  406a02:	602e      	str	r6, [r5, #0]
  406a04:	0791      	lsls	r1, r2, #30
  406a06:	bf0c      	ite	eq
  406a08:	696b      	ldreq	r3, [r5, #20]
  406a0a:	2300      	movne	r3, #0
  406a0c:	1ba4      	subs	r4, r4, r6
  406a0e:	60ab      	str	r3, [r5, #8]
  406a10:	e00a      	b.n	406a28 <__sflush_r+0xb4>
  406a12:	4623      	mov	r3, r4
  406a14:	4632      	mov	r2, r6
  406a16:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  406a18:	69e9      	ldr	r1, [r5, #28]
  406a1a:	4640      	mov	r0, r8
  406a1c:	47b8      	blx	r7
  406a1e:	2800      	cmp	r0, #0
  406a20:	eba4 0400 	sub.w	r4, r4, r0
  406a24:	4406      	add	r6, r0
  406a26:	dd04      	ble.n	406a32 <__sflush_r+0xbe>
  406a28:	2c00      	cmp	r4, #0
  406a2a:	dcf2      	bgt.n	406a12 <__sflush_r+0x9e>
  406a2c:	2000      	movs	r0, #0
  406a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406a32:	89ab      	ldrh	r3, [r5, #12]
  406a34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406a38:	81ab      	strh	r3, [r5, #12]
  406a3a:	f04f 30ff 	mov.w	r0, #4294967295
  406a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406a42:	f8d8 4000 	ldr.w	r4, [r8]
  406a46:	2c1d      	cmp	r4, #29
  406a48:	d8f3      	bhi.n	406a32 <__sflush_r+0xbe>
  406a4a:	4b19      	ldr	r3, [pc, #100]	; (406ab0 <__sflush_r+0x13c>)
  406a4c:	40e3      	lsrs	r3, r4
  406a4e:	43db      	mvns	r3, r3
  406a50:	f013 0301 	ands.w	r3, r3, #1
  406a54:	d1ed      	bne.n	406a32 <__sflush_r+0xbe>
  406a56:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  406a5a:	606b      	str	r3, [r5, #4]
  406a5c:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  406a60:	6929      	ldr	r1, [r5, #16]
  406a62:	81ab      	strh	r3, [r5, #12]
  406a64:	04da      	lsls	r2, r3, #19
  406a66:	6029      	str	r1, [r5, #0]
  406a68:	d5b9      	bpl.n	4069de <__sflush_r+0x6a>
  406a6a:	2c00      	cmp	r4, #0
  406a6c:	d1b7      	bne.n	4069de <__sflush_r+0x6a>
  406a6e:	6528      	str	r0, [r5, #80]	; 0x50
  406a70:	e7b5      	b.n	4069de <__sflush_r+0x6a>
  406a72:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  406a74:	2a00      	cmp	r2, #0
  406a76:	dc8c      	bgt.n	406992 <__sflush_r+0x1e>
  406a78:	e7d8      	b.n	406a2c <__sflush_r+0xb8>
  406a7a:	2301      	movs	r3, #1
  406a7c:	69e9      	ldr	r1, [r5, #28]
  406a7e:	4640      	mov	r0, r8
  406a80:	47a0      	blx	r4
  406a82:	1c43      	adds	r3, r0, #1
  406a84:	4602      	mov	r2, r0
  406a86:	d002      	beq.n	406a8e <__sflush_r+0x11a>
  406a88:	89ab      	ldrh	r3, [r5, #12]
  406a8a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  406a8c:	e78e      	b.n	4069ac <__sflush_r+0x38>
  406a8e:	f8d8 3000 	ldr.w	r3, [r8]
  406a92:	2b00      	cmp	r3, #0
  406a94:	d0f8      	beq.n	406a88 <__sflush_r+0x114>
  406a96:	2b1d      	cmp	r3, #29
  406a98:	d001      	beq.n	406a9e <__sflush_r+0x12a>
  406a9a:	2b16      	cmp	r3, #22
  406a9c:	d102      	bne.n	406aa4 <__sflush_r+0x130>
  406a9e:	f8c8 6000 	str.w	r6, [r8]
  406aa2:	e7c3      	b.n	406a2c <__sflush_r+0xb8>
  406aa4:	89ab      	ldrh	r3, [r5, #12]
  406aa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406aaa:	81ab      	strh	r3, [r5, #12]
  406aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406ab0:	20400001 	.word	0x20400001

00406ab4 <_fflush_r>:
  406ab4:	b538      	push	{r3, r4, r5, lr}
  406ab6:	460d      	mov	r5, r1
  406ab8:	4604      	mov	r4, r0
  406aba:	b108      	cbz	r0, 406ac0 <_fflush_r+0xc>
  406abc:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406abe:	b1bb      	cbz	r3, 406af0 <_fflush_r+0x3c>
  406ac0:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  406ac4:	b188      	cbz	r0, 406aea <_fflush_r+0x36>
  406ac6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  406ac8:	07db      	lsls	r3, r3, #31
  406aca:	d401      	bmi.n	406ad0 <_fflush_r+0x1c>
  406acc:	0581      	lsls	r1, r0, #22
  406ace:	d517      	bpl.n	406b00 <_fflush_r+0x4c>
  406ad0:	4620      	mov	r0, r4
  406ad2:	4629      	mov	r1, r5
  406ad4:	f7ff ff4e 	bl	406974 <__sflush_r>
  406ad8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  406ada:	07da      	lsls	r2, r3, #31
  406adc:	4604      	mov	r4, r0
  406ade:	d402      	bmi.n	406ae6 <_fflush_r+0x32>
  406ae0:	89ab      	ldrh	r3, [r5, #12]
  406ae2:	059b      	lsls	r3, r3, #22
  406ae4:	d507      	bpl.n	406af6 <_fflush_r+0x42>
  406ae6:	4620      	mov	r0, r4
  406ae8:	bd38      	pop	{r3, r4, r5, pc}
  406aea:	4604      	mov	r4, r0
  406aec:	4620      	mov	r0, r4
  406aee:	bd38      	pop	{r3, r4, r5, pc}
  406af0:	f000 f838 	bl	406b64 <__sinit>
  406af4:	e7e4      	b.n	406ac0 <_fflush_r+0xc>
  406af6:	6da8      	ldr	r0, [r5, #88]	; 0x58
  406af8:	f000 fc04 	bl	407304 <__retarget_lock_release_recursive>
  406afc:	4620      	mov	r0, r4
  406afe:	bd38      	pop	{r3, r4, r5, pc}
  406b00:	6da8      	ldr	r0, [r5, #88]	; 0x58
  406b02:	f000 fbfd 	bl	407300 <__retarget_lock_acquire_recursive>
  406b06:	e7e3      	b.n	406ad0 <_fflush_r+0x1c>

00406b08 <_cleanup_r>:
  406b08:	4901      	ldr	r1, [pc, #4]	; (406b10 <_cleanup_r+0x8>)
  406b0a:	f000 bbaf 	b.w	40726c <_fwalk_reent>
  406b0e:	bf00      	nop
  406b10:	00408425 	.word	0x00408425

00406b14 <std.isra.0>:
  406b14:	b510      	push	{r4, lr}
  406b16:	2300      	movs	r3, #0
  406b18:	4604      	mov	r4, r0
  406b1a:	8181      	strh	r1, [r0, #12]
  406b1c:	81c2      	strh	r2, [r0, #14]
  406b1e:	6003      	str	r3, [r0, #0]
  406b20:	6043      	str	r3, [r0, #4]
  406b22:	6083      	str	r3, [r0, #8]
  406b24:	6643      	str	r3, [r0, #100]	; 0x64
  406b26:	6103      	str	r3, [r0, #16]
  406b28:	6143      	str	r3, [r0, #20]
  406b2a:	6183      	str	r3, [r0, #24]
  406b2c:	4619      	mov	r1, r3
  406b2e:	2208      	movs	r2, #8
  406b30:	305c      	adds	r0, #92	; 0x5c
  406b32:	f7fc fb9b 	bl	40326c <memset>
  406b36:	4807      	ldr	r0, [pc, #28]	; (406b54 <std.isra.0+0x40>)
  406b38:	4907      	ldr	r1, [pc, #28]	; (406b58 <std.isra.0+0x44>)
  406b3a:	4a08      	ldr	r2, [pc, #32]	; (406b5c <std.isra.0+0x48>)
  406b3c:	4b08      	ldr	r3, [pc, #32]	; (406b60 <std.isra.0+0x4c>)
  406b3e:	6220      	str	r0, [r4, #32]
  406b40:	61e4      	str	r4, [r4, #28]
  406b42:	6261      	str	r1, [r4, #36]	; 0x24
  406b44:	62a2      	str	r2, [r4, #40]	; 0x28
  406b46:	62e3      	str	r3, [r4, #44]	; 0x2c
  406b48:	f104 0058 	add.w	r0, r4, #88	; 0x58
  406b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  406b50:	f000 bbd2 	b.w	4072f8 <__retarget_lock_init_recursive>
  406b54:	0040800d 	.word	0x0040800d
  406b58:	00408031 	.word	0x00408031
  406b5c:	0040806d 	.word	0x0040806d
  406b60:	0040808d 	.word	0x0040808d

00406b64 <__sinit>:
  406b64:	b510      	push	{r4, lr}
  406b66:	4604      	mov	r4, r0
  406b68:	4812      	ldr	r0, [pc, #72]	; (406bb4 <__sinit+0x50>)
  406b6a:	f000 fbc9 	bl	407300 <__retarget_lock_acquire_recursive>
  406b6e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  406b70:	b9d2      	cbnz	r2, 406ba8 <__sinit+0x44>
  406b72:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  406b76:	4810      	ldr	r0, [pc, #64]	; (406bb8 <__sinit+0x54>)
  406b78:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  406b7c:	2103      	movs	r1, #3
  406b7e:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  406b82:	63e0      	str	r0, [r4, #60]	; 0x3c
  406b84:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  406b88:	6860      	ldr	r0, [r4, #4]
  406b8a:	2104      	movs	r1, #4
  406b8c:	f7ff ffc2 	bl	406b14 <std.isra.0>
  406b90:	2201      	movs	r2, #1
  406b92:	2109      	movs	r1, #9
  406b94:	68a0      	ldr	r0, [r4, #8]
  406b96:	f7ff ffbd 	bl	406b14 <std.isra.0>
  406b9a:	2202      	movs	r2, #2
  406b9c:	2112      	movs	r1, #18
  406b9e:	68e0      	ldr	r0, [r4, #12]
  406ba0:	f7ff ffb8 	bl	406b14 <std.isra.0>
  406ba4:	2301      	movs	r3, #1
  406ba6:	63a3      	str	r3, [r4, #56]	; 0x38
  406ba8:	4802      	ldr	r0, [pc, #8]	; (406bb4 <__sinit+0x50>)
  406baa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  406bae:	f000 bba9 	b.w	407304 <__retarget_lock_release_recursive>
  406bb2:	bf00      	nop
  406bb4:	20400fc0 	.word	0x20400fc0
  406bb8:	00406b09 	.word	0x00406b09

00406bbc <__sfp_lock_acquire>:
  406bbc:	4801      	ldr	r0, [pc, #4]	; (406bc4 <__sfp_lock_acquire+0x8>)
  406bbe:	f000 bb9f 	b.w	407300 <__retarget_lock_acquire_recursive>
  406bc2:	bf00      	nop
  406bc4:	20400fd4 	.word	0x20400fd4

00406bc8 <__sfp_lock_release>:
  406bc8:	4801      	ldr	r0, [pc, #4]	; (406bd0 <__sfp_lock_release+0x8>)
  406bca:	f000 bb9b 	b.w	407304 <__retarget_lock_release_recursive>
  406bce:	bf00      	nop
  406bd0:	20400fd4 	.word	0x20400fd4

00406bd4 <__libc_fini_array>:
  406bd4:	b538      	push	{r3, r4, r5, lr}
  406bd6:	4c0a      	ldr	r4, [pc, #40]	; (406c00 <__libc_fini_array+0x2c>)
  406bd8:	4d0a      	ldr	r5, [pc, #40]	; (406c04 <__libc_fini_array+0x30>)
  406bda:	1b64      	subs	r4, r4, r5
  406bdc:	10a4      	asrs	r4, r4, #2
  406bde:	d00a      	beq.n	406bf6 <__libc_fini_array+0x22>
  406be0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  406be4:	3b01      	subs	r3, #1
  406be6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  406bea:	3c01      	subs	r4, #1
  406bec:	f855 3904 	ldr.w	r3, [r5], #-4
  406bf0:	4798      	blx	r3
  406bf2:	2c00      	cmp	r4, #0
  406bf4:	d1f9      	bne.n	406bea <__libc_fini_array+0x16>
  406bf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  406bfa:	f003 b877 	b.w	409cec <_fini>
  406bfe:	bf00      	nop
  406c00:	00409cfc 	.word	0x00409cfc
  406c04:	00409cf8 	.word	0x00409cf8

00406c08 <__fputwc>:
  406c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406c0c:	b082      	sub	sp, #8
  406c0e:	4680      	mov	r8, r0
  406c10:	4689      	mov	r9, r1
  406c12:	4614      	mov	r4, r2
  406c14:	f000 fb54 	bl	4072c0 <__locale_mb_cur_max>
  406c18:	2801      	cmp	r0, #1
  406c1a:	d036      	beq.n	406c8a <__fputwc+0x82>
  406c1c:	464a      	mov	r2, r9
  406c1e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  406c22:	a901      	add	r1, sp, #4
  406c24:	4640      	mov	r0, r8
  406c26:	f001 fb0b 	bl	408240 <_wcrtomb_r>
  406c2a:	1c42      	adds	r2, r0, #1
  406c2c:	4606      	mov	r6, r0
  406c2e:	d025      	beq.n	406c7c <__fputwc+0x74>
  406c30:	b3a8      	cbz	r0, 406c9e <__fputwc+0x96>
  406c32:	f89d e004 	ldrb.w	lr, [sp, #4]
  406c36:	2500      	movs	r5, #0
  406c38:	f10d 0a04 	add.w	sl, sp, #4
  406c3c:	e009      	b.n	406c52 <__fputwc+0x4a>
  406c3e:	6823      	ldr	r3, [r4, #0]
  406c40:	1c5a      	adds	r2, r3, #1
  406c42:	6022      	str	r2, [r4, #0]
  406c44:	f883 e000 	strb.w	lr, [r3]
  406c48:	3501      	adds	r5, #1
  406c4a:	42b5      	cmp	r5, r6
  406c4c:	d227      	bcs.n	406c9e <__fputwc+0x96>
  406c4e:	f815 e00a 	ldrb.w	lr, [r5, sl]
  406c52:	68a3      	ldr	r3, [r4, #8]
  406c54:	3b01      	subs	r3, #1
  406c56:	2b00      	cmp	r3, #0
  406c58:	60a3      	str	r3, [r4, #8]
  406c5a:	daf0      	bge.n	406c3e <__fputwc+0x36>
  406c5c:	69a7      	ldr	r7, [r4, #24]
  406c5e:	42bb      	cmp	r3, r7
  406c60:	4671      	mov	r1, lr
  406c62:	4622      	mov	r2, r4
  406c64:	4640      	mov	r0, r8
  406c66:	db02      	blt.n	406c6e <__fputwc+0x66>
  406c68:	f1be 0f0a 	cmp.w	lr, #10
  406c6c:	d1e7      	bne.n	406c3e <__fputwc+0x36>
  406c6e:	f001 fa8f 	bl	408190 <__swbuf_r>
  406c72:	1c43      	adds	r3, r0, #1
  406c74:	d1e8      	bne.n	406c48 <__fputwc+0x40>
  406c76:	b002      	add	sp, #8
  406c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406c7c:	89a3      	ldrh	r3, [r4, #12]
  406c7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406c82:	81a3      	strh	r3, [r4, #12]
  406c84:	b002      	add	sp, #8
  406c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406c8a:	f109 33ff 	add.w	r3, r9, #4294967295
  406c8e:	2bfe      	cmp	r3, #254	; 0xfe
  406c90:	d8c4      	bhi.n	406c1c <__fputwc+0x14>
  406c92:	fa5f fe89 	uxtb.w	lr, r9
  406c96:	4606      	mov	r6, r0
  406c98:	f88d e004 	strb.w	lr, [sp, #4]
  406c9c:	e7cb      	b.n	406c36 <__fputwc+0x2e>
  406c9e:	4648      	mov	r0, r9
  406ca0:	b002      	add	sp, #8
  406ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406ca6:	bf00      	nop

00406ca8 <_fputwc_r>:
  406ca8:	b530      	push	{r4, r5, lr}
  406caa:	6e53      	ldr	r3, [r2, #100]	; 0x64
  406cac:	f013 0f01 	tst.w	r3, #1
  406cb0:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  406cb4:	4614      	mov	r4, r2
  406cb6:	b083      	sub	sp, #12
  406cb8:	4605      	mov	r5, r0
  406cba:	b29a      	uxth	r2, r3
  406cbc:	d101      	bne.n	406cc2 <_fputwc_r+0x1a>
  406cbe:	0590      	lsls	r0, r2, #22
  406cc0:	d51c      	bpl.n	406cfc <_fputwc_r+0x54>
  406cc2:	0490      	lsls	r0, r2, #18
  406cc4:	d406      	bmi.n	406cd4 <_fputwc_r+0x2c>
  406cc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
  406cc8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  406ccc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  406cd0:	81a3      	strh	r3, [r4, #12]
  406cd2:	6662      	str	r2, [r4, #100]	; 0x64
  406cd4:	4628      	mov	r0, r5
  406cd6:	4622      	mov	r2, r4
  406cd8:	f7ff ff96 	bl	406c08 <__fputwc>
  406cdc:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406cde:	07da      	lsls	r2, r3, #31
  406ce0:	4605      	mov	r5, r0
  406ce2:	d402      	bmi.n	406cea <_fputwc_r+0x42>
  406ce4:	89a3      	ldrh	r3, [r4, #12]
  406ce6:	059b      	lsls	r3, r3, #22
  406ce8:	d502      	bpl.n	406cf0 <_fputwc_r+0x48>
  406cea:	4628      	mov	r0, r5
  406cec:	b003      	add	sp, #12
  406cee:	bd30      	pop	{r4, r5, pc}
  406cf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406cf2:	f000 fb07 	bl	407304 <__retarget_lock_release_recursive>
  406cf6:	4628      	mov	r0, r5
  406cf8:	b003      	add	sp, #12
  406cfa:	bd30      	pop	{r4, r5, pc}
  406cfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406cfe:	9101      	str	r1, [sp, #4]
  406d00:	f000 fafe 	bl	407300 <__retarget_lock_acquire_recursive>
  406d04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406d08:	9901      	ldr	r1, [sp, #4]
  406d0a:	b29a      	uxth	r2, r3
  406d0c:	e7d9      	b.n	406cc2 <_fputwc_r+0x1a>
  406d0e:	bf00      	nop

00406d10 <_malloc_trim_r>:
  406d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406d12:	4f24      	ldr	r7, [pc, #144]	; (406da4 <_malloc_trim_r+0x94>)
  406d14:	460c      	mov	r4, r1
  406d16:	4606      	mov	r6, r0
  406d18:	f7fc faf6 	bl	403308 <__malloc_lock>
  406d1c:	68bb      	ldr	r3, [r7, #8]
  406d1e:	685d      	ldr	r5, [r3, #4]
  406d20:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  406d24:	310f      	adds	r1, #15
  406d26:	f025 0503 	bic.w	r5, r5, #3
  406d2a:	4429      	add	r1, r5
  406d2c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  406d30:	f021 010f 	bic.w	r1, r1, #15
  406d34:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  406d38:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  406d3c:	db07      	blt.n	406d4e <_malloc_trim_r+0x3e>
  406d3e:	2100      	movs	r1, #0
  406d40:	4630      	mov	r0, r6
  406d42:	f7fc faed 	bl	403320 <_sbrk_r>
  406d46:	68bb      	ldr	r3, [r7, #8]
  406d48:	442b      	add	r3, r5
  406d4a:	4298      	cmp	r0, r3
  406d4c:	d004      	beq.n	406d58 <_malloc_trim_r+0x48>
  406d4e:	4630      	mov	r0, r6
  406d50:	f7fc fae0 	bl	403314 <__malloc_unlock>
  406d54:	2000      	movs	r0, #0
  406d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406d58:	4261      	negs	r1, r4
  406d5a:	4630      	mov	r0, r6
  406d5c:	f7fc fae0 	bl	403320 <_sbrk_r>
  406d60:	3001      	adds	r0, #1
  406d62:	d00d      	beq.n	406d80 <_malloc_trim_r+0x70>
  406d64:	4b10      	ldr	r3, [pc, #64]	; (406da8 <_malloc_trim_r+0x98>)
  406d66:	68ba      	ldr	r2, [r7, #8]
  406d68:	6819      	ldr	r1, [r3, #0]
  406d6a:	1b2d      	subs	r5, r5, r4
  406d6c:	f045 0501 	orr.w	r5, r5, #1
  406d70:	4630      	mov	r0, r6
  406d72:	1b09      	subs	r1, r1, r4
  406d74:	6055      	str	r5, [r2, #4]
  406d76:	6019      	str	r1, [r3, #0]
  406d78:	f7fc facc 	bl	403314 <__malloc_unlock>
  406d7c:	2001      	movs	r0, #1
  406d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406d80:	2100      	movs	r1, #0
  406d82:	4630      	mov	r0, r6
  406d84:	f7fc facc 	bl	403320 <_sbrk_r>
  406d88:	68ba      	ldr	r2, [r7, #8]
  406d8a:	1a83      	subs	r3, r0, r2
  406d8c:	2b0f      	cmp	r3, #15
  406d8e:	ddde      	ble.n	406d4e <_malloc_trim_r+0x3e>
  406d90:	4c06      	ldr	r4, [pc, #24]	; (406dac <_malloc_trim_r+0x9c>)
  406d92:	4905      	ldr	r1, [pc, #20]	; (406da8 <_malloc_trim_r+0x98>)
  406d94:	6824      	ldr	r4, [r4, #0]
  406d96:	f043 0301 	orr.w	r3, r3, #1
  406d9a:	1b00      	subs	r0, r0, r4
  406d9c:	6053      	str	r3, [r2, #4]
  406d9e:	6008      	str	r0, [r1, #0]
  406da0:	e7d5      	b.n	406d4e <_malloc_trim_r+0x3e>
  406da2:	bf00      	nop
  406da4:	20400570 	.word	0x20400570
  406da8:	20400f54 	.word	0x20400f54
  406dac:	20400978 	.word	0x20400978

00406db0 <_free_r>:
  406db0:	2900      	cmp	r1, #0
  406db2:	d044      	beq.n	406e3e <_free_r+0x8e>
  406db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406db8:	460d      	mov	r5, r1
  406dba:	4680      	mov	r8, r0
  406dbc:	f7fc faa4 	bl	403308 <__malloc_lock>
  406dc0:	f855 7c04 	ldr.w	r7, [r5, #-4]
  406dc4:	4969      	ldr	r1, [pc, #420]	; (406f6c <_free_r+0x1bc>)
  406dc6:	f027 0301 	bic.w	r3, r7, #1
  406dca:	f1a5 0408 	sub.w	r4, r5, #8
  406dce:	18e2      	adds	r2, r4, r3
  406dd0:	688e      	ldr	r6, [r1, #8]
  406dd2:	6850      	ldr	r0, [r2, #4]
  406dd4:	42b2      	cmp	r2, r6
  406dd6:	f020 0003 	bic.w	r0, r0, #3
  406dda:	d05e      	beq.n	406e9a <_free_r+0xea>
  406ddc:	07fe      	lsls	r6, r7, #31
  406dde:	6050      	str	r0, [r2, #4]
  406de0:	d40b      	bmi.n	406dfa <_free_r+0x4a>
  406de2:	f855 7c08 	ldr.w	r7, [r5, #-8]
  406de6:	1be4      	subs	r4, r4, r7
  406de8:	f101 0e08 	add.w	lr, r1, #8
  406dec:	68a5      	ldr	r5, [r4, #8]
  406dee:	4575      	cmp	r5, lr
  406df0:	443b      	add	r3, r7
  406df2:	d06d      	beq.n	406ed0 <_free_r+0x120>
  406df4:	68e7      	ldr	r7, [r4, #12]
  406df6:	60ef      	str	r7, [r5, #12]
  406df8:	60bd      	str	r5, [r7, #8]
  406dfa:	1815      	adds	r5, r2, r0
  406dfc:	686d      	ldr	r5, [r5, #4]
  406dfe:	07ed      	lsls	r5, r5, #31
  406e00:	d53e      	bpl.n	406e80 <_free_r+0xd0>
  406e02:	f043 0201 	orr.w	r2, r3, #1
  406e06:	6062      	str	r2, [r4, #4]
  406e08:	50e3      	str	r3, [r4, r3]
  406e0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406e0e:	d217      	bcs.n	406e40 <_free_r+0x90>
  406e10:	08db      	lsrs	r3, r3, #3
  406e12:	1c58      	adds	r0, r3, #1
  406e14:	109a      	asrs	r2, r3, #2
  406e16:	684d      	ldr	r5, [r1, #4]
  406e18:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  406e1c:	60a7      	str	r7, [r4, #8]
  406e1e:	2301      	movs	r3, #1
  406e20:	4093      	lsls	r3, r2
  406e22:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  406e26:	432b      	orrs	r3, r5
  406e28:	3a08      	subs	r2, #8
  406e2a:	60e2      	str	r2, [r4, #12]
  406e2c:	604b      	str	r3, [r1, #4]
  406e2e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  406e32:	60fc      	str	r4, [r7, #12]
  406e34:	4640      	mov	r0, r8
  406e36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406e3a:	f7fc ba6b 	b.w	403314 <__malloc_unlock>
  406e3e:	4770      	bx	lr
  406e40:	0a5a      	lsrs	r2, r3, #9
  406e42:	2a04      	cmp	r2, #4
  406e44:	d852      	bhi.n	406eec <_free_r+0x13c>
  406e46:	099a      	lsrs	r2, r3, #6
  406e48:	f102 0739 	add.w	r7, r2, #57	; 0x39
  406e4c:	00ff      	lsls	r7, r7, #3
  406e4e:	f102 0538 	add.w	r5, r2, #56	; 0x38
  406e52:	19c8      	adds	r0, r1, r7
  406e54:	59ca      	ldr	r2, [r1, r7]
  406e56:	3808      	subs	r0, #8
  406e58:	4290      	cmp	r0, r2
  406e5a:	d04f      	beq.n	406efc <_free_r+0x14c>
  406e5c:	6851      	ldr	r1, [r2, #4]
  406e5e:	f021 0103 	bic.w	r1, r1, #3
  406e62:	428b      	cmp	r3, r1
  406e64:	d232      	bcs.n	406ecc <_free_r+0x11c>
  406e66:	6892      	ldr	r2, [r2, #8]
  406e68:	4290      	cmp	r0, r2
  406e6a:	d1f7      	bne.n	406e5c <_free_r+0xac>
  406e6c:	68c3      	ldr	r3, [r0, #12]
  406e6e:	60a0      	str	r0, [r4, #8]
  406e70:	60e3      	str	r3, [r4, #12]
  406e72:	609c      	str	r4, [r3, #8]
  406e74:	60c4      	str	r4, [r0, #12]
  406e76:	4640      	mov	r0, r8
  406e78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406e7c:	f7fc ba4a 	b.w	403314 <__malloc_unlock>
  406e80:	6895      	ldr	r5, [r2, #8]
  406e82:	4f3b      	ldr	r7, [pc, #236]	; (406f70 <_free_r+0x1c0>)
  406e84:	42bd      	cmp	r5, r7
  406e86:	4403      	add	r3, r0
  406e88:	d040      	beq.n	406f0c <_free_r+0x15c>
  406e8a:	68d0      	ldr	r0, [r2, #12]
  406e8c:	60e8      	str	r0, [r5, #12]
  406e8e:	f043 0201 	orr.w	r2, r3, #1
  406e92:	6085      	str	r5, [r0, #8]
  406e94:	6062      	str	r2, [r4, #4]
  406e96:	50e3      	str	r3, [r4, r3]
  406e98:	e7b7      	b.n	406e0a <_free_r+0x5a>
  406e9a:	07ff      	lsls	r7, r7, #31
  406e9c:	4403      	add	r3, r0
  406e9e:	d407      	bmi.n	406eb0 <_free_r+0x100>
  406ea0:	f855 2c08 	ldr.w	r2, [r5, #-8]
  406ea4:	1aa4      	subs	r4, r4, r2
  406ea6:	4413      	add	r3, r2
  406ea8:	68a0      	ldr	r0, [r4, #8]
  406eaa:	68e2      	ldr	r2, [r4, #12]
  406eac:	60c2      	str	r2, [r0, #12]
  406eae:	6090      	str	r0, [r2, #8]
  406eb0:	4a30      	ldr	r2, [pc, #192]	; (406f74 <_free_r+0x1c4>)
  406eb2:	6812      	ldr	r2, [r2, #0]
  406eb4:	f043 0001 	orr.w	r0, r3, #1
  406eb8:	4293      	cmp	r3, r2
  406eba:	6060      	str	r0, [r4, #4]
  406ebc:	608c      	str	r4, [r1, #8]
  406ebe:	d3b9      	bcc.n	406e34 <_free_r+0x84>
  406ec0:	4b2d      	ldr	r3, [pc, #180]	; (406f78 <_free_r+0x1c8>)
  406ec2:	4640      	mov	r0, r8
  406ec4:	6819      	ldr	r1, [r3, #0]
  406ec6:	f7ff ff23 	bl	406d10 <_malloc_trim_r>
  406eca:	e7b3      	b.n	406e34 <_free_r+0x84>
  406ecc:	4610      	mov	r0, r2
  406ece:	e7cd      	b.n	406e6c <_free_r+0xbc>
  406ed0:	1811      	adds	r1, r2, r0
  406ed2:	6849      	ldr	r1, [r1, #4]
  406ed4:	07c9      	lsls	r1, r1, #31
  406ed6:	d444      	bmi.n	406f62 <_free_r+0x1b2>
  406ed8:	6891      	ldr	r1, [r2, #8]
  406eda:	68d2      	ldr	r2, [r2, #12]
  406edc:	60ca      	str	r2, [r1, #12]
  406ede:	4403      	add	r3, r0
  406ee0:	f043 0001 	orr.w	r0, r3, #1
  406ee4:	6091      	str	r1, [r2, #8]
  406ee6:	6060      	str	r0, [r4, #4]
  406ee8:	50e3      	str	r3, [r4, r3]
  406eea:	e7a3      	b.n	406e34 <_free_r+0x84>
  406eec:	2a14      	cmp	r2, #20
  406eee:	d816      	bhi.n	406f1e <_free_r+0x16e>
  406ef0:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  406ef4:	00ff      	lsls	r7, r7, #3
  406ef6:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  406efa:	e7aa      	b.n	406e52 <_free_r+0xa2>
  406efc:	10aa      	asrs	r2, r5, #2
  406efe:	2301      	movs	r3, #1
  406f00:	684d      	ldr	r5, [r1, #4]
  406f02:	4093      	lsls	r3, r2
  406f04:	432b      	orrs	r3, r5
  406f06:	604b      	str	r3, [r1, #4]
  406f08:	4603      	mov	r3, r0
  406f0a:	e7b0      	b.n	406e6e <_free_r+0xbe>
  406f0c:	f043 0201 	orr.w	r2, r3, #1
  406f10:	614c      	str	r4, [r1, #20]
  406f12:	610c      	str	r4, [r1, #16]
  406f14:	60e5      	str	r5, [r4, #12]
  406f16:	60a5      	str	r5, [r4, #8]
  406f18:	6062      	str	r2, [r4, #4]
  406f1a:	50e3      	str	r3, [r4, r3]
  406f1c:	e78a      	b.n	406e34 <_free_r+0x84>
  406f1e:	2a54      	cmp	r2, #84	; 0x54
  406f20:	d806      	bhi.n	406f30 <_free_r+0x180>
  406f22:	0b1a      	lsrs	r2, r3, #12
  406f24:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  406f28:	00ff      	lsls	r7, r7, #3
  406f2a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  406f2e:	e790      	b.n	406e52 <_free_r+0xa2>
  406f30:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406f34:	d806      	bhi.n	406f44 <_free_r+0x194>
  406f36:	0bda      	lsrs	r2, r3, #15
  406f38:	f102 0778 	add.w	r7, r2, #120	; 0x78
  406f3c:	00ff      	lsls	r7, r7, #3
  406f3e:	f102 0577 	add.w	r5, r2, #119	; 0x77
  406f42:	e786      	b.n	406e52 <_free_r+0xa2>
  406f44:	f240 5054 	movw	r0, #1364	; 0x554
  406f48:	4282      	cmp	r2, r0
  406f4a:	d806      	bhi.n	406f5a <_free_r+0x1aa>
  406f4c:	0c9a      	lsrs	r2, r3, #18
  406f4e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  406f52:	00ff      	lsls	r7, r7, #3
  406f54:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  406f58:	e77b      	b.n	406e52 <_free_r+0xa2>
  406f5a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  406f5e:	257e      	movs	r5, #126	; 0x7e
  406f60:	e777      	b.n	406e52 <_free_r+0xa2>
  406f62:	f043 0101 	orr.w	r1, r3, #1
  406f66:	6061      	str	r1, [r4, #4]
  406f68:	6013      	str	r3, [r2, #0]
  406f6a:	e763      	b.n	406e34 <_free_r+0x84>
  406f6c:	20400570 	.word	0x20400570
  406f70:	20400578 	.word	0x20400578
  406f74:	2040097c 	.word	0x2040097c
  406f78:	20400f84 	.word	0x20400f84

00406f7c <__sfvwrite_r>:
  406f7c:	6893      	ldr	r3, [r2, #8]
  406f7e:	2b00      	cmp	r3, #0
  406f80:	d073      	beq.n	40706a <__sfvwrite_r+0xee>
  406f82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406f86:	898b      	ldrh	r3, [r1, #12]
  406f88:	b083      	sub	sp, #12
  406f8a:	460c      	mov	r4, r1
  406f8c:	0719      	lsls	r1, r3, #28
  406f8e:	9000      	str	r0, [sp, #0]
  406f90:	4616      	mov	r6, r2
  406f92:	d526      	bpl.n	406fe2 <__sfvwrite_r+0x66>
  406f94:	6922      	ldr	r2, [r4, #16]
  406f96:	b322      	cbz	r2, 406fe2 <__sfvwrite_r+0x66>
  406f98:	f013 0002 	ands.w	r0, r3, #2
  406f9c:	6835      	ldr	r5, [r6, #0]
  406f9e:	d02c      	beq.n	406ffa <__sfvwrite_r+0x7e>
  406fa0:	f04f 0900 	mov.w	r9, #0
  406fa4:	4fb0      	ldr	r7, [pc, #704]	; (407268 <__sfvwrite_r+0x2ec>)
  406fa6:	46c8      	mov	r8, r9
  406fa8:	46b2      	mov	sl, r6
  406faa:	45b8      	cmp	r8, r7
  406fac:	4643      	mov	r3, r8
  406fae:	464a      	mov	r2, r9
  406fb0:	bf28      	it	cs
  406fb2:	463b      	movcs	r3, r7
  406fb4:	9800      	ldr	r0, [sp, #0]
  406fb6:	f1b8 0f00 	cmp.w	r8, #0
  406fba:	d050      	beq.n	40705e <__sfvwrite_r+0xe2>
  406fbc:	69e1      	ldr	r1, [r4, #28]
  406fbe:	6a66      	ldr	r6, [r4, #36]	; 0x24
  406fc0:	47b0      	blx	r6
  406fc2:	2800      	cmp	r0, #0
  406fc4:	dd58      	ble.n	407078 <__sfvwrite_r+0xfc>
  406fc6:	f8da 3008 	ldr.w	r3, [sl, #8]
  406fca:	1a1b      	subs	r3, r3, r0
  406fcc:	4481      	add	r9, r0
  406fce:	eba8 0800 	sub.w	r8, r8, r0
  406fd2:	f8ca 3008 	str.w	r3, [sl, #8]
  406fd6:	2b00      	cmp	r3, #0
  406fd8:	d1e7      	bne.n	406faa <__sfvwrite_r+0x2e>
  406fda:	2000      	movs	r0, #0
  406fdc:	b003      	add	sp, #12
  406fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406fe2:	4621      	mov	r1, r4
  406fe4:	9800      	ldr	r0, [sp, #0]
  406fe6:	f7fe fc91 	bl	40590c <__swsetup_r>
  406fea:	2800      	cmp	r0, #0
  406fec:	f040 8133 	bne.w	407256 <__sfvwrite_r+0x2da>
  406ff0:	89a3      	ldrh	r3, [r4, #12]
  406ff2:	6835      	ldr	r5, [r6, #0]
  406ff4:	f013 0002 	ands.w	r0, r3, #2
  406ff8:	d1d2      	bne.n	406fa0 <__sfvwrite_r+0x24>
  406ffa:	f013 0901 	ands.w	r9, r3, #1
  406ffe:	d145      	bne.n	40708c <__sfvwrite_r+0x110>
  407000:	464f      	mov	r7, r9
  407002:	9601      	str	r6, [sp, #4]
  407004:	b337      	cbz	r7, 407054 <__sfvwrite_r+0xd8>
  407006:	059a      	lsls	r2, r3, #22
  407008:	f8d4 8008 	ldr.w	r8, [r4, #8]
  40700c:	f140 8083 	bpl.w	407116 <__sfvwrite_r+0x19a>
  407010:	4547      	cmp	r7, r8
  407012:	46c3      	mov	fp, r8
  407014:	f0c0 80ab 	bcc.w	40716e <__sfvwrite_r+0x1f2>
  407018:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40701c:	f040 80ac 	bne.w	407178 <__sfvwrite_r+0x1fc>
  407020:	6820      	ldr	r0, [r4, #0]
  407022:	46ba      	mov	sl, r7
  407024:	465a      	mov	r2, fp
  407026:	4649      	mov	r1, r9
  407028:	f000 faec 	bl	407604 <memmove>
  40702c:	68a2      	ldr	r2, [r4, #8]
  40702e:	6823      	ldr	r3, [r4, #0]
  407030:	eba2 0208 	sub.w	r2, r2, r8
  407034:	445b      	add	r3, fp
  407036:	60a2      	str	r2, [r4, #8]
  407038:	6023      	str	r3, [r4, #0]
  40703a:	9a01      	ldr	r2, [sp, #4]
  40703c:	6893      	ldr	r3, [r2, #8]
  40703e:	eba3 030a 	sub.w	r3, r3, sl
  407042:	44d1      	add	r9, sl
  407044:	eba7 070a 	sub.w	r7, r7, sl
  407048:	6093      	str	r3, [r2, #8]
  40704a:	2b00      	cmp	r3, #0
  40704c:	d0c5      	beq.n	406fda <__sfvwrite_r+0x5e>
  40704e:	89a3      	ldrh	r3, [r4, #12]
  407050:	2f00      	cmp	r7, #0
  407052:	d1d8      	bne.n	407006 <__sfvwrite_r+0x8a>
  407054:	f8d5 9000 	ldr.w	r9, [r5]
  407058:	686f      	ldr	r7, [r5, #4]
  40705a:	3508      	adds	r5, #8
  40705c:	e7d2      	b.n	407004 <__sfvwrite_r+0x88>
  40705e:	f8d5 9000 	ldr.w	r9, [r5]
  407062:	f8d5 8004 	ldr.w	r8, [r5, #4]
  407066:	3508      	adds	r5, #8
  407068:	e79f      	b.n	406faa <__sfvwrite_r+0x2e>
  40706a:	2000      	movs	r0, #0
  40706c:	4770      	bx	lr
  40706e:	4621      	mov	r1, r4
  407070:	9800      	ldr	r0, [sp, #0]
  407072:	f7ff fd1f 	bl	406ab4 <_fflush_r>
  407076:	b370      	cbz	r0, 4070d6 <__sfvwrite_r+0x15a>
  407078:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40707c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407080:	f04f 30ff 	mov.w	r0, #4294967295
  407084:	81a3      	strh	r3, [r4, #12]
  407086:	b003      	add	sp, #12
  407088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40708c:	4681      	mov	r9, r0
  40708e:	4633      	mov	r3, r6
  407090:	464e      	mov	r6, r9
  407092:	46a8      	mov	r8, r5
  407094:	469a      	mov	sl, r3
  407096:	464d      	mov	r5, r9
  407098:	b34e      	cbz	r6, 4070ee <__sfvwrite_r+0x172>
  40709a:	b380      	cbz	r0, 4070fe <__sfvwrite_r+0x182>
  40709c:	6820      	ldr	r0, [r4, #0]
  40709e:	6923      	ldr	r3, [r4, #16]
  4070a0:	6962      	ldr	r2, [r4, #20]
  4070a2:	45b1      	cmp	r9, r6
  4070a4:	46cb      	mov	fp, r9
  4070a6:	bf28      	it	cs
  4070a8:	46b3      	movcs	fp, r6
  4070aa:	4298      	cmp	r0, r3
  4070ac:	465f      	mov	r7, fp
  4070ae:	d904      	bls.n	4070ba <__sfvwrite_r+0x13e>
  4070b0:	68a3      	ldr	r3, [r4, #8]
  4070b2:	4413      	add	r3, r2
  4070b4:	459b      	cmp	fp, r3
  4070b6:	f300 80a6 	bgt.w	407206 <__sfvwrite_r+0x28a>
  4070ba:	4593      	cmp	fp, r2
  4070bc:	db4b      	blt.n	407156 <__sfvwrite_r+0x1da>
  4070be:	4613      	mov	r3, r2
  4070c0:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4070c2:	69e1      	ldr	r1, [r4, #28]
  4070c4:	9800      	ldr	r0, [sp, #0]
  4070c6:	462a      	mov	r2, r5
  4070c8:	47b8      	blx	r7
  4070ca:	1e07      	subs	r7, r0, #0
  4070cc:	ddd4      	ble.n	407078 <__sfvwrite_r+0xfc>
  4070ce:	ebb9 0907 	subs.w	r9, r9, r7
  4070d2:	d0cc      	beq.n	40706e <__sfvwrite_r+0xf2>
  4070d4:	2001      	movs	r0, #1
  4070d6:	f8da 3008 	ldr.w	r3, [sl, #8]
  4070da:	1bdb      	subs	r3, r3, r7
  4070dc:	443d      	add	r5, r7
  4070de:	1bf6      	subs	r6, r6, r7
  4070e0:	f8ca 3008 	str.w	r3, [sl, #8]
  4070e4:	2b00      	cmp	r3, #0
  4070e6:	f43f af78 	beq.w	406fda <__sfvwrite_r+0x5e>
  4070ea:	2e00      	cmp	r6, #0
  4070ec:	d1d5      	bne.n	40709a <__sfvwrite_r+0x11e>
  4070ee:	f108 0308 	add.w	r3, r8, #8
  4070f2:	e913 0060 	ldmdb	r3, {r5, r6}
  4070f6:	4698      	mov	r8, r3
  4070f8:	3308      	adds	r3, #8
  4070fa:	2e00      	cmp	r6, #0
  4070fc:	d0f9      	beq.n	4070f2 <__sfvwrite_r+0x176>
  4070fe:	4632      	mov	r2, r6
  407100:	210a      	movs	r1, #10
  407102:	4628      	mov	r0, r5
  407104:	f000 f994 	bl	407430 <memchr>
  407108:	2800      	cmp	r0, #0
  40710a:	f000 80a1 	beq.w	407250 <__sfvwrite_r+0x2d4>
  40710e:	3001      	adds	r0, #1
  407110:	eba0 0905 	sub.w	r9, r0, r5
  407114:	e7c2      	b.n	40709c <__sfvwrite_r+0x120>
  407116:	6820      	ldr	r0, [r4, #0]
  407118:	6923      	ldr	r3, [r4, #16]
  40711a:	4298      	cmp	r0, r3
  40711c:	d802      	bhi.n	407124 <__sfvwrite_r+0x1a8>
  40711e:	6963      	ldr	r3, [r4, #20]
  407120:	429f      	cmp	r7, r3
  407122:	d25d      	bcs.n	4071e0 <__sfvwrite_r+0x264>
  407124:	45b8      	cmp	r8, r7
  407126:	bf28      	it	cs
  407128:	46b8      	movcs	r8, r7
  40712a:	4642      	mov	r2, r8
  40712c:	4649      	mov	r1, r9
  40712e:	f000 fa69 	bl	407604 <memmove>
  407132:	68a3      	ldr	r3, [r4, #8]
  407134:	6822      	ldr	r2, [r4, #0]
  407136:	eba3 0308 	sub.w	r3, r3, r8
  40713a:	4442      	add	r2, r8
  40713c:	60a3      	str	r3, [r4, #8]
  40713e:	6022      	str	r2, [r4, #0]
  407140:	b10b      	cbz	r3, 407146 <__sfvwrite_r+0x1ca>
  407142:	46c2      	mov	sl, r8
  407144:	e779      	b.n	40703a <__sfvwrite_r+0xbe>
  407146:	4621      	mov	r1, r4
  407148:	9800      	ldr	r0, [sp, #0]
  40714a:	f7ff fcb3 	bl	406ab4 <_fflush_r>
  40714e:	2800      	cmp	r0, #0
  407150:	d192      	bne.n	407078 <__sfvwrite_r+0xfc>
  407152:	46c2      	mov	sl, r8
  407154:	e771      	b.n	40703a <__sfvwrite_r+0xbe>
  407156:	465a      	mov	r2, fp
  407158:	4629      	mov	r1, r5
  40715a:	f000 fa53 	bl	407604 <memmove>
  40715e:	68a2      	ldr	r2, [r4, #8]
  407160:	6823      	ldr	r3, [r4, #0]
  407162:	eba2 020b 	sub.w	r2, r2, fp
  407166:	445b      	add	r3, fp
  407168:	60a2      	str	r2, [r4, #8]
  40716a:	6023      	str	r3, [r4, #0]
  40716c:	e7af      	b.n	4070ce <__sfvwrite_r+0x152>
  40716e:	6820      	ldr	r0, [r4, #0]
  407170:	46b8      	mov	r8, r7
  407172:	46ba      	mov	sl, r7
  407174:	46bb      	mov	fp, r7
  407176:	e755      	b.n	407024 <__sfvwrite_r+0xa8>
  407178:	6962      	ldr	r2, [r4, #20]
  40717a:	6820      	ldr	r0, [r4, #0]
  40717c:	6921      	ldr	r1, [r4, #16]
  40717e:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  407182:	eba0 0a01 	sub.w	sl, r0, r1
  407186:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40718a:	f10a 0001 	add.w	r0, sl, #1
  40718e:	ea4f 0868 	mov.w	r8, r8, asr #1
  407192:	4438      	add	r0, r7
  407194:	4540      	cmp	r0, r8
  407196:	4642      	mov	r2, r8
  407198:	bf84      	itt	hi
  40719a:	4680      	movhi	r8, r0
  40719c:	4642      	movhi	r2, r8
  40719e:	055b      	lsls	r3, r3, #21
  4071a0:	d544      	bpl.n	40722c <__sfvwrite_r+0x2b0>
  4071a2:	4611      	mov	r1, r2
  4071a4:	9800      	ldr	r0, [sp, #0]
  4071a6:	f7fb fdb1 	bl	402d0c <_malloc_r>
  4071aa:	4683      	mov	fp, r0
  4071ac:	2800      	cmp	r0, #0
  4071ae:	d055      	beq.n	40725c <__sfvwrite_r+0x2e0>
  4071b0:	4652      	mov	r2, sl
  4071b2:	6921      	ldr	r1, [r4, #16]
  4071b4:	f000 f98c 	bl	4074d0 <memcpy>
  4071b8:	89a3      	ldrh	r3, [r4, #12]
  4071ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  4071be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4071c2:	81a3      	strh	r3, [r4, #12]
  4071c4:	eb0b 000a 	add.w	r0, fp, sl
  4071c8:	eba8 030a 	sub.w	r3, r8, sl
  4071cc:	f8c4 b010 	str.w	fp, [r4, #16]
  4071d0:	f8c4 8014 	str.w	r8, [r4, #20]
  4071d4:	6020      	str	r0, [r4, #0]
  4071d6:	60a3      	str	r3, [r4, #8]
  4071d8:	46b8      	mov	r8, r7
  4071da:	46ba      	mov	sl, r7
  4071dc:	46bb      	mov	fp, r7
  4071de:	e721      	b.n	407024 <__sfvwrite_r+0xa8>
  4071e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  4071e4:	42b9      	cmp	r1, r7
  4071e6:	bf28      	it	cs
  4071e8:	4639      	movcs	r1, r7
  4071ea:	464a      	mov	r2, r9
  4071ec:	fb91 f1f3 	sdiv	r1, r1, r3
  4071f0:	9800      	ldr	r0, [sp, #0]
  4071f2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4071f4:	fb03 f301 	mul.w	r3, r3, r1
  4071f8:	69e1      	ldr	r1, [r4, #28]
  4071fa:	47b0      	blx	r6
  4071fc:	f1b0 0a00 	subs.w	sl, r0, #0
  407200:	f73f af1b 	bgt.w	40703a <__sfvwrite_r+0xbe>
  407204:	e738      	b.n	407078 <__sfvwrite_r+0xfc>
  407206:	461a      	mov	r2, r3
  407208:	4629      	mov	r1, r5
  40720a:	9301      	str	r3, [sp, #4]
  40720c:	f000 f9fa 	bl	407604 <memmove>
  407210:	6822      	ldr	r2, [r4, #0]
  407212:	9b01      	ldr	r3, [sp, #4]
  407214:	9800      	ldr	r0, [sp, #0]
  407216:	441a      	add	r2, r3
  407218:	6022      	str	r2, [r4, #0]
  40721a:	4621      	mov	r1, r4
  40721c:	f7ff fc4a 	bl	406ab4 <_fflush_r>
  407220:	9b01      	ldr	r3, [sp, #4]
  407222:	2800      	cmp	r0, #0
  407224:	f47f af28 	bne.w	407078 <__sfvwrite_r+0xfc>
  407228:	461f      	mov	r7, r3
  40722a:	e750      	b.n	4070ce <__sfvwrite_r+0x152>
  40722c:	9800      	ldr	r0, [sp, #0]
  40722e:	f000 fd47 	bl	407cc0 <_realloc_r>
  407232:	4683      	mov	fp, r0
  407234:	2800      	cmp	r0, #0
  407236:	d1c5      	bne.n	4071c4 <__sfvwrite_r+0x248>
  407238:	9d00      	ldr	r5, [sp, #0]
  40723a:	6921      	ldr	r1, [r4, #16]
  40723c:	4628      	mov	r0, r5
  40723e:	f7ff fdb7 	bl	406db0 <_free_r>
  407242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407246:	220c      	movs	r2, #12
  407248:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40724c:	602a      	str	r2, [r5, #0]
  40724e:	e715      	b.n	40707c <__sfvwrite_r+0x100>
  407250:	f106 0901 	add.w	r9, r6, #1
  407254:	e722      	b.n	40709c <__sfvwrite_r+0x120>
  407256:	f04f 30ff 	mov.w	r0, #4294967295
  40725a:	e6bf      	b.n	406fdc <__sfvwrite_r+0x60>
  40725c:	9a00      	ldr	r2, [sp, #0]
  40725e:	230c      	movs	r3, #12
  407260:	6013      	str	r3, [r2, #0]
  407262:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407266:	e709      	b.n	40707c <__sfvwrite_r+0x100>
  407268:	7ffffc00 	.word	0x7ffffc00

0040726c <_fwalk_reent>:
  40726c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407270:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  407274:	d01f      	beq.n	4072b6 <_fwalk_reent+0x4a>
  407276:	4688      	mov	r8, r1
  407278:	4606      	mov	r6, r0
  40727a:	f04f 0900 	mov.w	r9, #0
  40727e:	687d      	ldr	r5, [r7, #4]
  407280:	68bc      	ldr	r4, [r7, #8]
  407282:	3d01      	subs	r5, #1
  407284:	d411      	bmi.n	4072aa <_fwalk_reent+0x3e>
  407286:	89a3      	ldrh	r3, [r4, #12]
  407288:	2b01      	cmp	r3, #1
  40728a:	f105 35ff 	add.w	r5, r5, #4294967295
  40728e:	d908      	bls.n	4072a2 <_fwalk_reent+0x36>
  407290:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  407294:	3301      	adds	r3, #1
  407296:	4621      	mov	r1, r4
  407298:	4630      	mov	r0, r6
  40729a:	d002      	beq.n	4072a2 <_fwalk_reent+0x36>
  40729c:	47c0      	blx	r8
  40729e:	ea49 0900 	orr.w	r9, r9, r0
  4072a2:	1c6b      	adds	r3, r5, #1
  4072a4:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4072a8:	d1ed      	bne.n	407286 <_fwalk_reent+0x1a>
  4072aa:	683f      	ldr	r7, [r7, #0]
  4072ac:	2f00      	cmp	r7, #0
  4072ae:	d1e6      	bne.n	40727e <_fwalk_reent+0x12>
  4072b0:	4648      	mov	r0, r9
  4072b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4072b6:	46b9      	mov	r9, r7
  4072b8:	4648      	mov	r0, r9
  4072ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4072be:	bf00      	nop

004072c0 <__locale_mb_cur_max>:
  4072c0:	4b04      	ldr	r3, [pc, #16]	; (4072d4 <__locale_mb_cur_max+0x14>)
  4072c2:	4a05      	ldr	r2, [pc, #20]	; (4072d8 <__locale_mb_cur_max+0x18>)
  4072c4:	681b      	ldr	r3, [r3, #0]
  4072c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  4072c8:	2b00      	cmp	r3, #0
  4072ca:	bf08      	it	eq
  4072cc:	4613      	moveq	r3, r2
  4072ce:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  4072d2:	4770      	bx	lr
  4072d4:	20400144 	.word	0x20400144
  4072d8:	20400984 	.word	0x20400984

004072dc <_localeconv_r>:
  4072dc:	4a04      	ldr	r2, [pc, #16]	; (4072f0 <_localeconv_r+0x14>)
  4072de:	4b05      	ldr	r3, [pc, #20]	; (4072f4 <_localeconv_r+0x18>)
  4072e0:	6812      	ldr	r2, [r2, #0]
  4072e2:	6b50      	ldr	r0, [r2, #52]	; 0x34
  4072e4:	2800      	cmp	r0, #0
  4072e6:	bf08      	it	eq
  4072e8:	4618      	moveq	r0, r3
  4072ea:	30f0      	adds	r0, #240	; 0xf0
  4072ec:	4770      	bx	lr
  4072ee:	bf00      	nop
  4072f0:	20400144 	.word	0x20400144
  4072f4:	20400984 	.word	0x20400984

004072f8 <__retarget_lock_init_recursive>:
  4072f8:	4770      	bx	lr
  4072fa:	bf00      	nop

004072fc <__retarget_lock_close_recursive>:
  4072fc:	4770      	bx	lr
  4072fe:	bf00      	nop

00407300 <__retarget_lock_acquire_recursive>:
  407300:	4770      	bx	lr
  407302:	bf00      	nop

00407304 <__retarget_lock_release_recursive>:
  407304:	4770      	bx	lr
  407306:	bf00      	nop

00407308 <__swhatbuf_r>:
  407308:	b570      	push	{r4, r5, r6, lr}
  40730a:	460c      	mov	r4, r1
  40730c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407310:	2900      	cmp	r1, #0
  407312:	b090      	sub	sp, #64	; 0x40
  407314:	4615      	mov	r5, r2
  407316:	461e      	mov	r6, r3
  407318:	db14      	blt.n	407344 <__swhatbuf_r+0x3c>
  40731a:	aa01      	add	r2, sp, #4
  40731c:	f001 f8e4 	bl	4084e8 <_fstat_r>
  407320:	2800      	cmp	r0, #0
  407322:	db0f      	blt.n	407344 <__swhatbuf_r+0x3c>
  407324:	9a02      	ldr	r2, [sp, #8]
  407326:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40732a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40732e:	fab2 f282 	clz	r2, r2
  407332:	0952      	lsrs	r2, r2, #5
  407334:	f44f 6380 	mov.w	r3, #1024	; 0x400
  407338:	f44f 6000 	mov.w	r0, #2048	; 0x800
  40733c:	6032      	str	r2, [r6, #0]
  40733e:	602b      	str	r3, [r5, #0]
  407340:	b010      	add	sp, #64	; 0x40
  407342:	bd70      	pop	{r4, r5, r6, pc}
  407344:	89a2      	ldrh	r2, [r4, #12]
  407346:	2300      	movs	r3, #0
  407348:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  40734c:	6033      	str	r3, [r6, #0]
  40734e:	d004      	beq.n	40735a <__swhatbuf_r+0x52>
  407350:	2240      	movs	r2, #64	; 0x40
  407352:	4618      	mov	r0, r3
  407354:	602a      	str	r2, [r5, #0]
  407356:	b010      	add	sp, #64	; 0x40
  407358:	bd70      	pop	{r4, r5, r6, pc}
  40735a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40735e:	602b      	str	r3, [r5, #0]
  407360:	b010      	add	sp, #64	; 0x40
  407362:	bd70      	pop	{r4, r5, r6, pc}

00407364 <__smakebuf_r>:
  407364:	898a      	ldrh	r2, [r1, #12]
  407366:	0792      	lsls	r2, r2, #30
  407368:	460b      	mov	r3, r1
  40736a:	d506      	bpl.n	40737a <__smakebuf_r+0x16>
  40736c:	f101 0243 	add.w	r2, r1, #67	; 0x43
  407370:	2101      	movs	r1, #1
  407372:	601a      	str	r2, [r3, #0]
  407374:	611a      	str	r2, [r3, #16]
  407376:	6159      	str	r1, [r3, #20]
  407378:	4770      	bx	lr
  40737a:	b5f0      	push	{r4, r5, r6, r7, lr}
  40737c:	b083      	sub	sp, #12
  40737e:	ab01      	add	r3, sp, #4
  407380:	466a      	mov	r2, sp
  407382:	460c      	mov	r4, r1
  407384:	4606      	mov	r6, r0
  407386:	f7ff ffbf 	bl	407308 <__swhatbuf_r>
  40738a:	9900      	ldr	r1, [sp, #0]
  40738c:	4605      	mov	r5, r0
  40738e:	4630      	mov	r0, r6
  407390:	f7fb fcbc 	bl	402d0c <_malloc_r>
  407394:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407398:	b1d8      	cbz	r0, 4073d2 <__smakebuf_r+0x6e>
  40739a:	9a01      	ldr	r2, [sp, #4]
  40739c:	4f15      	ldr	r7, [pc, #84]	; (4073f4 <__smakebuf_r+0x90>)
  40739e:	9900      	ldr	r1, [sp, #0]
  4073a0:	63f7      	str	r7, [r6, #60]	; 0x3c
  4073a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4073a6:	81a3      	strh	r3, [r4, #12]
  4073a8:	6020      	str	r0, [r4, #0]
  4073aa:	6120      	str	r0, [r4, #16]
  4073ac:	6161      	str	r1, [r4, #20]
  4073ae:	b91a      	cbnz	r2, 4073b8 <__smakebuf_r+0x54>
  4073b0:	432b      	orrs	r3, r5
  4073b2:	81a3      	strh	r3, [r4, #12]
  4073b4:	b003      	add	sp, #12
  4073b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4073b8:	4630      	mov	r0, r6
  4073ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4073be:	f001 f8a7 	bl	408510 <_isatty_r>
  4073c2:	b1a0      	cbz	r0, 4073ee <__smakebuf_r+0x8a>
  4073c4:	89a3      	ldrh	r3, [r4, #12]
  4073c6:	f023 0303 	bic.w	r3, r3, #3
  4073ca:	f043 0301 	orr.w	r3, r3, #1
  4073ce:	b21b      	sxth	r3, r3
  4073d0:	e7ee      	b.n	4073b0 <__smakebuf_r+0x4c>
  4073d2:	059a      	lsls	r2, r3, #22
  4073d4:	d4ee      	bmi.n	4073b4 <__smakebuf_r+0x50>
  4073d6:	f023 0303 	bic.w	r3, r3, #3
  4073da:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4073de:	f043 0302 	orr.w	r3, r3, #2
  4073e2:	2101      	movs	r1, #1
  4073e4:	81a3      	strh	r3, [r4, #12]
  4073e6:	6022      	str	r2, [r4, #0]
  4073e8:	6122      	str	r2, [r4, #16]
  4073ea:	6161      	str	r1, [r4, #20]
  4073ec:	e7e2      	b.n	4073b4 <__smakebuf_r+0x50>
  4073ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4073f2:	e7dd      	b.n	4073b0 <__smakebuf_r+0x4c>
  4073f4:	00406b09 	.word	0x00406b09

004073f8 <__ascii_mbtowc>:
  4073f8:	b082      	sub	sp, #8
  4073fa:	b149      	cbz	r1, 407410 <__ascii_mbtowc+0x18>
  4073fc:	b15a      	cbz	r2, 407416 <__ascii_mbtowc+0x1e>
  4073fe:	b16b      	cbz	r3, 40741c <__ascii_mbtowc+0x24>
  407400:	7813      	ldrb	r3, [r2, #0]
  407402:	600b      	str	r3, [r1, #0]
  407404:	7812      	ldrb	r2, [r2, #0]
  407406:	1c10      	adds	r0, r2, #0
  407408:	bf18      	it	ne
  40740a:	2001      	movne	r0, #1
  40740c:	b002      	add	sp, #8
  40740e:	4770      	bx	lr
  407410:	a901      	add	r1, sp, #4
  407412:	2a00      	cmp	r2, #0
  407414:	d1f3      	bne.n	4073fe <__ascii_mbtowc+0x6>
  407416:	4610      	mov	r0, r2
  407418:	b002      	add	sp, #8
  40741a:	4770      	bx	lr
  40741c:	f06f 0001 	mvn.w	r0, #1
  407420:	e7f4      	b.n	40740c <__ascii_mbtowc+0x14>
  407422:	bf00      	nop
	...

00407430 <memchr>:
  407430:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  407434:	2a10      	cmp	r2, #16
  407436:	db2b      	blt.n	407490 <memchr+0x60>
  407438:	f010 0f07 	tst.w	r0, #7
  40743c:	d008      	beq.n	407450 <memchr+0x20>
  40743e:	f810 3b01 	ldrb.w	r3, [r0], #1
  407442:	3a01      	subs	r2, #1
  407444:	428b      	cmp	r3, r1
  407446:	d02d      	beq.n	4074a4 <memchr+0x74>
  407448:	f010 0f07 	tst.w	r0, #7
  40744c:	b342      	cbz	r2, 4074a0 <memchr+0x70>
  40744e:	d1f6      	bne.n	40743e <memchr+0xe>
  407450:	b4f0      	push	{r4, r5, r6, r7}
  407452:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  407456:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40745a:	f022 0407 	bic.w	r4, r2, #7
  40745e:	f07f 0700 	mvns.w	r7, #0
  407462:	2300      	movs	r3, #0
  407464:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  407468:	3c08      	subs	r4, #8
  40746a:	ea85 0501 	eor.w	r5, r5, r1
  40746e:	ea86 0601 	eor.w	r6, r6, r1
  407472:	fa85 f547 	uadd8	r5, r5, r7
  407476:	faa3 f587 	sel	r5, r3, r7
  40747a:	fa86 f647 	uadd8	r6, r6, r7
  40747e:	faa5 f687 	sel	r6, r5, r7
  407482:	b98e      	cbnz	r6, 4074a8 <memchr+0x78>
  407484:	d1ee      	bne.n	407464 <memchr+0x34>
  407486:	bcf0      	pop	{r4, r5, r6, r7}
  407488:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40748c:	f002 0207 	and.w	r2, r2, #7
  407490:	b132      	cbz	r2, 4074a0 <memchr+0x70>
  407492:	f810 3b01 	ldrb.w	r3, [r0], #1
  407496:	3a01      	subs	r2, #1
  407498:	ea83 0301 	eor.w	r3, r3, r1
  40749c:	b113      	cbz	r3, 4074a4 <memchr+0x74>
  40749e:	d1f8      	bne.n	407492 <memchr+0x62>
  4074a0:	2000      	movs	r0, #0
  4074a2:	4770      	bx	lr
  4074a4:	3801      	subs	r0, #1
  4074a6:	4770      	bx	lr
  4074a8:	2d00      	cmp	r5, #0
  4074aa:	bf06      	itte	eq
  4074ac:	4635      	moveq	r5, r6
  4074ae:	3803      	subeq	r0, #3
  4074b0:	3807      	subne	r0, #7
  4074b2:	f015 0f01 	tst.w	r5, #1
  4074b6:	d107      	bne.n	4074c8 <memchr+0x98>
  4074b8:	3001      	adds	r0, #1
  4074ba:	f415 7f80 	tst.w	r5, #256	; 0x100
  4074be:	bf02      	ittt	eq
  4074c0:	3001      	addeq	r0, #1
  4074c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4074c6:	3001      	addeq	r0, #1
  4074c8:	bcf0      	pop	{r4, r5, r6, r7}
  4074ca:	3801      	subs	r0, #1
  4074cc:	4770      	bx	lr
  4074ce:	bf00      	nop

004074d0 <memcpy>:
  4074d0:	4684      	mov	ip, r0
  4074d2:	ea41 0300 	orr.w	r3, r1, r0
  4074d6:	f013 0303 	ands.w	r3, r3, #3
  4074da:	d16d      	bne.n	4075b8 <memcpy+0xe8>
  4074dc:	3a40      	subs	r2, #64	; 0x40
  4074de:	d341      	bcc.n	407564 <memcpy+0x94>
  4074e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4074e4:	f840 3b04 	str.w	r3, [r0], #4
  4074e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4074ec:	f840 3b04 	str.w	r3, [r0], #4
  4074f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4074f4:	f840 3b04 	str.w	r3, [r0], #4
  4074f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4074fc:	f840 3b04 	str.w	r3, [r0], #4
  407500:	f851 3b04 	ldr.w	r3, [r1], #4
  407504:	f840 3b04 	str.w	r3, [r0], #4
  407508:	f851 3b04 	ldr.w	r3, [r1], #4
  40750c:	f840 3b04 	str.w	r3, [r0], #4
  407510:	f851 3b04 	ldr.w	r3, [r1], #4
  407514:	f840 3b04 	str.w	r3, [r0], #4
  407518:	f851 3b04 	ldr.w	r3, [r1], #4
  40751c:	f840 3b04 	str.w	r3, [r0], #4
  407520:	f851 3b04 	ldr.w	r3, [r1], #4
  407524:	f840 3b04 	str.w	r3, [r0], #4
  407528:	f851 3b04 	ldr.w	r3, [r1], #4
  40752c:	f840 3b04 	str.w	r3, [r0], #4
  407530:	f851 3b04 	ldr.w	r3, [r1], #4
  407534:	f840 3b04 	str.w	r3, [r0], #4
  407538:	f851 3b04 	ldr.w	r3, [r1], #4
  40753c:	f840 3b04 	str.w	r3, [r0], #4
  407540:	f851 3b04 	ldr.w	r3, [r1], #4
  407544:	f840 3b04 	str.w	r3, [r0], #4
  407548:	f851 3b04 	ldr.w	r3, [r1], #4
  40754c:	f840 3b04 	str.w	r3, [r0], #4
  407550:	f851 3b04 	ldr.w	r3, [r1], #4
  407554:	f840 3b04 	str.w	r3, [r0], #4
  407558:	f851 3b04 	ldr.w	r3, [r1], #4
  40755c:	f840 3b04 	str.w	r3, [r0], #4
  407560:	3a40      	subs	r2, #64	; 0x40
  407562:	d2bd      	bcs.n	4074e0 <memcpy+0x10>
  407564:	3230      	adds	r2, #48	; 0x30
  407566:	d311      	bcc.n	40758c <memcpy+0xbc>
  407568:	f851 3b04 	ldr.w	r3, [r1], #4
  40756c:	f840 3b04 	str.w	r3, [r0], #4
  407570:	f851 3b04 	ldr.w	r3, [r1], #4
  407574:	f840 3b04 	str.w	r3, [r0], #4
  407578:	f851 3b04 	ldr.w	r3, [r1], #4
  40757c:	f840 3b04 	str.w	r3, [r0], #4
  407580:	f851 3b04 	ldr.w	r3, [r1], #4
  407584:	f840 3b04 	str.w	r3, [r0], #4
  407588:	3a10      	subs	r2, #16
  40758a:	d2ed      	bcs.n	407568 <memcpy+0x98>
  40758c:	320c      	adds	r2, #12
  40758e:	d305      	bcc.n	40759c <memcpy+0xcc>
  407590:	f851 3b04 	ldr.w	r3, [r1], #4
  407594:	f840 3b04 	str.w	r3, [r0], #4
  407598:	3a04      	subs	r2, #4
  40759a:	d2f9      	bcs.n	407590 <memcpy+0xc0>
  40759c:	3204      	adds	r2, #4
  40759e:	d008      	beq.n	4075b2 <memcpy+0xe2>
  4075a0:	07d2      	lsls	r2, r2, #31
  4075a2:	bf1c      	itt	ne
  4075a4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4075a8:	f800 3b01 	strbne.w	r3, [r0], #1
  4075ac:	d301      	bcc.n	4075b2 <memcpy+0xe2>
  4075ae:	880b      	ldrh	r3, [r1, #0]
  4075b0:	8003      	strh	r3, [r0, #0]
  4075b2:	4660      	mov	r0, ip
  4075b4:	4770      	bx	lr
  4075b6:	bf00      	nop
  4075b8:	2a08      	cmp	r2, #8
  4075ba:	d313      	bcc.n	4075e4 <memcpy+0x114>
  4075bc:	078b      	lsls	r3, r1, #30
  4075be:	d08d      	beq.n	4074dc <memcpy+0xc>
  4075c0:	f010 0303 	ands.w	r3, r0, #3
  4075c4:	d08a      	beq.n	4074dc <memcpy+0xc>
  4075c6:	f1c3 0304 	rsb	r3, r3, #4
  4075ca:	1ad2      	subs	r2, r2, r3
  4075cc:	07db      	lsls	r3, r3, #31
  4075ce:	bf1c      	itt	ne
  4075d0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4075d4:	f800 3b01 	strbne.w	r3, [r0], #1
  4075d8:	d380      	bcc.n	4074dc <memcpy+0xc>
  4075da:	f831 3b02 	ldrh.w	r3, [r1], #2
  4075de:	f820 3b02 	strh.w	r3, [r0], #2
  4075e2:	e77b      	b.n	4074dc <memcpy+0xc>
  4075e4:	3a04      	subs	r2, #4
  4075e6:	d3d9      	bcc.n	40759c <memcpy+0xcc>
  4075e8:	3a01      	subs	r2, #1
  4075ea:	f811 3b01 	ldrb.w	r3, [r1], #1
  4075ee:	f800 3b01 	strb.w	r3, [r0], #1
  4075f2:	d2f9      	bcs.n	4075e8 <memcpy+0x118>
  4075f4:	780b      	ldrb	r3, [r1, #0]
  4075f6:	7003      	strb	r3, [r0, #0]
  4075f8:	784b      	ldrb	r3, [r1, #1]
  4075fa:	7043      	strb	r3, [r0, #1]
  4075fc:	788b      	ldrb	r3, [r1, #2]
  4075fe:	7083      	strb	r3, [r0, #2]
  407600:	4660      	mov	r0, ip
  407602:	4770      	bx	lr

00407604 <memmove>:
  407604:	4288      	cmp	r0, r1
  407606:	b5f0      	push	{r4, r5, r6, r7, lr}
  407608:	d90d      	bls.n	407626 <memmove+0x22>
  40760a:	188b      	adds	r3, r1, r2
  40760c:	4298      	cmp	r0, r3
  40760e:	d20a      	bcs.n	407626 <memmove+0x22>
  407610:	1884      	adds	r4, r0, r2
  407612:	2a00      	cmp	r2, #0
  407614:	d051      	beq.n	4076ba <memmove+0xb6>
  407616:	4622      	mov	r2, r4
  407618:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40761c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  407620:	4299      	cmp	r1, r3
  407622:	d1f9      	bne.n	407618 <memmove+0x14>
  407624:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407626:	2a0f      	cmp	r2, #15
  407628:	d948      	bls.n	4076bc <memmove+0xb8>
  40762a:	ea41 0300 	orr.w	r3, r1, r0
  40762e:	079b      	lsls	r3, r3, #30
  407630:	d146      	bne.n	4076c0 <memmove+0xbc>
  407632:	f100 0410 	add.w	r4, r0, #16
  407636:	f101 0310 	add.w	r3, r1, #16
  40763a:	4615      	mov	r5, r2
  40763c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  407640:	f844 6c10 	str.w	r6, [r4, #-16]
  407644:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  407648:	f844 6c0c 	str.w	r6, [r4, #-12]
  40764c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  407650:	f844 6c08 	str.w	r6, [r4, #-8]
  407654:	3d10      	subs	r5, #16
  407656:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40765a:	f844 6c04 	str.w	r6, [r4, #-4]
  40765e:	2d0f      	cmp	r5, #15
  407660:	f103 0310 	add.w	r3, r3, #16
  407664:	f104 0410 	add.w	r4, r4, #16
  407668:	d8e8      	bhi.n	40763c <memmove+0x38>
  40766a:	f1a2 0310 	sub.w	r3, r2, #16
  40766e:	f023 030f 	bic.w	r3, r3, #15
  407672:	f002 0e0f 	and.w	lr, r2, #15
  407676:	3310      	adds	r3, #16
  407678:	f1be 0f03 	cmp.w	lr, #3
  40767c:	4419      	add	r1, r3
  40767e:	4403      	add	r3, r0
  407680:	d921      	bls.n	4076c6 <memmove+0xc2>
  407682:	1f1e      	subs	r6, r3, #4
  407684:	460d      	mov	r5, r1
  407686:	4674      	mov	r4, lr
  407688:	3c04      	subs	r4, #4
  40768a:	f855 7b04 	ldr.w	r7, [r5], #4
  40768e:	f846 7f04 	str.w	r7, [r6, #4]!
  407692:	2c03      	cmp	r4, #3
  407694:	d8f8      	bhi.n	407688 <memmove+0x84>
  407696:	f1ae 0404 	sub.w	r4, lr, #4
  40769a:	f024 0403 	bic.w	r4, r4, #3
  40769e:	3404      	adds	r4, #4
  4076a0:	4421      	add	r1, r4
  4076a2:	4423      	add	r3, r4
  4076a4:	f002 0203 	and.w	r2, r2, #3
  4076a8:	b162      	cbz	r2, 4076c4 <memmove+0xc0>
  4076aa:	3b01      	subs	r3, #1
  4076ac:	440a      	add	r2, r1
  4076ae:	f811 4b01 	ldrb.w	r4, [r1], #1
  4076b2:	f803 4f01 	strb.w	r4, [r3, #1]!
  4076b6:	428a      	cmp	r2, r1
  4076b8:	d1f9      	bne.n	4076ae <memmove+0xaa>
  4076ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4076bc:	4603      	mov	r3, r0
  4076be:	e7f3      	b.n	4076a8 <memmove+0xa4>
  4076c0:	4603      	mov	r3, r0
  4076c2:	e7f2      	b.n	4076aa <memmove+0xa6>
  4076c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4076c6:	4672      	mov	r2, lr
  4076c8:	e7ee      	b.n	4076a8 <memmove+0xa4>
  4076ca:	bf00      	nop

004076cc <_Balloc>:
  4076cc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4076ce:	b570      	push	{r4, r5, r6, lr}
  4076d0:	4605      	mov	r5, r0
  4076d2:	460c      	mov	r4, r1
  4076d4:	b14b      	cbz	r3, 4076ea <_Balloc+0x1e>
  4076d6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  4076da:	b180      	cbz	r0, 4076fe <_Balloc+0x32>
  4076dc:	6802      	ldr	r2, [r0, #0]
  4076de:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  4076e2:	2300      	movs	r3, #0
  4076e4:	6103      	str	r3, [r0, #16]
  4076e6:	60c3      	str	r3, [r0, #12]
  4076e8:	bd70      	pop	{r4, r5, r6, pc}
  4076ea:	2221      	movs	r2, #33	; 0x21
  4076ec:	2104      	movs	r1, #4
  4076ee:	f000 fe57 	bl	4083a0 <_calloc_r>
  4076f2:	64e8      	str	r0, [r5, #76]	; 0x4c
  4076f4:	4603      	mov	r3, r0
  4076f6:	2800      	cmp	r0, #0
  4076f8:	d1ed      	bne.n	4076d6 <_Balloc+0xa>
  4076fa:	2000      	movs	r0, #0
  4076fc:	bd70      	pop	{r4, r5, r6, pc}
  4076fe:	2101      	movs	r1, #1
  407700:	fa01 f604 	lsl.w	r6, r1, r4
  407704:	1d72      	adds	r2, r6, #5
  407706:	4628      	mov	r0, r5
  407708:	0092      	lsls	r2, r2, #2
  40770a:	f000 fe49 	bl	4083a0 <_calloc_r>
  40770e:	2800      	cmp	r0, #0
  407710:	d0f3      	beq.n	4076fa <_Balloc+0x2e>
  407712:	6044      	str	r4, [r0, #4]
  407714:	6086      	str	r6, [r0, #8]
  407716:	e7e4      	b.n	4076e2 <_Balloc+0x16>

00407718 <_Bfree>:
  407718:	b131      	cbz	r1, 407728 <_Bfree+0x10>
  40771a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40771c:	684a      	ldr	r2, [r1, #4]
  40771e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  407722:	6008      	str	r0, [r1, #0]
  407724:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  407728:	4770      	bx	lr
  40772a:	bf00      	nop

0040772c <__multadd>:
  40772c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40772e:	690c      	ldr	r4, [r1, #16]
  407730:	b083      	sub	sp, #12
  407732:	460d      	mov	r5, r1
  407734:	4606      	mov	r6, r0
  407736:	f101 0e14 	add.w	lr, r1, #20
  40773a:	2700      	movs	r7, #0
  40773c:	f8de 0000 	ldr.w	r0, [lr]
  407740:	b281      	uxth	r1, r0
  407742:	fb02 3301 	mla	r3, r2, r1, r3
  407746:	0c01      	lsrs	r1, r0, #16
  407748:	0c18      	lsrs	r0, r3, #16
  40774a:	fb02 0101 	mla	r1, r2, r1, r0
  40774e:	b29b      	uxth	r3, r3
  407750:	3701      	adds	r7, #1
  407752:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  407756:	42bc      	cmp	r4, r7
  407758:	f84e 3b04 	str.w	r3, [lr], #4
  40775c:	ea4f 4311 	mov.w	r3, r1, lsr #16
  407760:	dcec      	bgt.n	40773c <__multadd+0x10>
  407762:	b13b      	cbz	r3, 407774 <__multadd+0x48>
  407764:	68aa      	ldr	r2, [r5, #8]
  407766:	4294      	cmp	r4, r2
  407768:	da07      	bge.n	40777a <__multadd+0x4e>
  40776a:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40776e:	3401      	adds	r4, #1
  407770:	6153      	str	r3, [r2, #20]
  407772:	612c      	str	r4, [r5, #16]
  407774:	4628      	mov	r0, r5
  407776:	b003      	add	sp, #12
  407778:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40777a:	6869      	ldr	r1, [r5, #4]
  40777c:	9301      	str	r3, [sp, #4]
  40777e:	3101      	adds	r1, #1
  407780:	4630      	mov	r0, r6
  407782:	f7ff ffa3 	bl	4076cc <_Balloc>
  407786:	692a      	ldr	r2, [r5, #16]
  407788:	3202      	adds	r2, #2
  40778a:	f105 010c 	add.w	r1, r5, #12
  40778e:	4607      	mov	r7, r0
  407790:	0092      	lsls	r2, r2, #2
  407792:	300c      	adds	r0, #12
  407794:	f7ff fe9c 	bl	4074d0 <memcpy>
  407798:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  40779a:	6869      	ldr	r1, [r5, #4]
  40779c:	9b01      	ldr	r3, [sp, #4]
  40779e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  4077a2:	6028      	str	r0, [r5, #0]
  4077a4:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  4077a8:	463d      	mov	r5, r7
  4077aa:	e7de      	b.n	40776a <__multadd+0x3e>

004077ac <__hi0bits>:
  4077ac:	0c02      	lsrs	r2, r0, #16
  4077ae:	0412      	lsls	r2, r2, #16
  4077b0:	4603      	mov	r3, r0
  4077b2:	b9b2      	cbnz	r2, 4077e2 <__hi0bits+0x36>
  4077b4:	0403      	lsls	r3, r0, #16
  4077b6:	2010      	movs	r0, #16
  4077b8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  4077bc:	bf04      	itt	eq
  4077be:	021b      	lsleq	r3, r3, #8
  4077c0:	3008      	addeq	r0, #8
  4077c2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  4077c6:	bf04      	itt	eq
  4077c8:	011b      	lsleq	r3, r3, #4
  4077ca:	3004      	addeq	r0, #4
  4077cc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  4077d0:	bf04      	itt	eq
  4077d2:	009b      	lsleq	r3, r3, #2
  4077d4:	3002      	addeq	r0, #2
  4077d6:	2b00      	cmp	r3, #0
  4077d8:	db02      	blt.n	4077e0 <__hi0bits+0x34>
  4077da:	005b      	lsls	r3, r3, #1
  4077dc:	d403      	bmi.n	4077e6 <__hi0bits+0x3a>
  4077de:	2020      	movs	r0, #32
  4077e0:	4770      	bx	lr
  4077e2:	2000      	movs	r0, #0
  4077e4:	e7e8      	b.n	4077b8 <__hi0bits+0xc>
  4077e6:	3001      	adds	r0, #1
  4077e8:	4770      	bx	lr
  4077ea:	bf00      	nop

004077ec <__lo0bits>:
  4077ec:	6803      	ldr	r3, [r0, #0]
  4077ee:	f013 0207 	ands.w	r2, r3, #7
  4077f2:	4601      	mov	r1, r0
  4077f4:	d007      	beq.n	407806 <__lo0bits+0x1a>
  4077f6:	07da      	lsls	r2, r3, #31
  4077f8:	d421      	bmi.n	40783e <__lo0bits+0x52>
  4077fa:	0798      	lsls	r0, r3, #30
  4077fc:	d421      	bmi.n	407842 <__lo0bits+0x56>
  4077fe:	089b      	lsrs	r3, r3, #2
  407800:	600b      	str	r3, [r1, #0]
  407802:	2002      	movs	r0, #2
  407804:	4770      	bx	lr
  407806:	b298      	uxth	r0, r3
  407808:	b198      	cbz	r0, 407832 <__lo0bits+0x46>
  40780a:	4610      	mov	r0, r2
  40780c:	f013 0fff 	tst.w	r3, #255	; 0xff
  407810:	bf04      	itt	eq
  407812:	0a1b      	lsreq	r3, r3, #8
  407814:	3008      	addeq	r0, #8
  407816:	071a      	lsls	r2, r3, #28
  407818:	bf04      	itt	eq
  40781a:	091b      	lsreq	r3, r3, #4
  40781c:	3004      	addeq	r0, #4
  40781e:	079a      	lsls	r2, r3, #30
  407820:	bf04      	itt	eq
  407822:	089b      	lsreq	r3, r3, #2
  407824:	3002      	addeq	r0, #2
  407826:	07da      	lsls	r2, r3, #31
  407828:	d407      	bmi.n	40783a <__lo0bits+0x4e>
  40782a:	085b      	lsrs	r3, r3, #1
  40782c:	d104      	bne.n	407838 <__lo0bits+0x4c>
  40782e:	2020      	movs	r0, #32
  407830:	4770      	bx	lr
  407832:	0c1b      	lsrs	r3, r3, #16
  407834:	2010      	movs	r0, #16
  407836:	e7e9      	b.n	40780c <__lo0bits+0x20>
  407838:	3001      	adds	r0, #1
  40783a:	600b      	str	r3, [r1, #0]
  40783c:	4770      	bx	lr
  40783e:	2000      	movs	r0, #0
  407840:	4770      	bx	lr
  407842:	085b      	lsrs	r3, r3, #1
  407844:	600b      	str	r3, [r1, #0]
  407846:	2001      	movs	r0, #1
  407848:	4770      	bx	lr
  40784a:	bf00      	nop

0040784c <__i2b>:
  40784c:	b510      	push	{r4, lr}
  40784e:	460c      	mov	r4, r1
  407850:	2101      	movs	r1, #1
  407852:	f7ff ff3b 	bl	4076cc <_Balloc>
  407856:	2201      	movs	r2, #1
  407858:	6144      	str	r4, [r0, #20]
  40785a:	6102      	str	r2, [r0, #16]
  40785c:	bd10      	pop	{r4, pc}
  40785e:	bf00      	nop

00407860 <__multiply>:
  407860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407864:	690c      	ldr	r4, [r1, #16]
  407866:	6915      	ldr	r5, [r2, #16]
  407868:	42ac      	cmp	r4, r5
  40786a:	b083      	sub	sp, #12
  40786c:	468b      	mov	fp, r1
  40786e:	4616      	mov	r6, r2
  407870:	da04      	bge.n	40787c <__multiply+0x1c>
  407872:	4622      	mov	r2, r4
  407874:	46b3      	mov	fp, r6
  407876:	462c      	mov	r4, r5
  407878:	460e      	mov	r6, r1
  40787a:	4615      	mov	r5, r2
  40787c:	f8db 3008 	ldr.w	r3, [fp, #8]
  407880:	f8db 1004 	ldr.w	r1, [fp, #4]
  407884:	eb04 0805 	add.w	r8, r4, r5
  407888:	4598      	cmp	r8, r3
  40788a:	bfc8      	it	gt
  40788c:	3101      	addgt	r1, #1
  40788e:	f7ff ff1d 	bl	4076cc <_Balloc>
  407892:	f100 0914 	add.w	r9, r0, #20
  407896:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  40789a:	45d1      	cmp	r9, sl
  40789c:	9000      	str	r0, [sp, #0]
  40789e:	d205      	bcs.n	4078ac <__multiply+0x4c>
  4078a0:	464b      	mov	r3, r9
  4078a2:	2100      	movs	r1, #0
  4078a4:	f843 1b04 	str.w	r1, [r3], #4
  4078a8:	459a      	cmp	sl, r3
  4078aa:	d8fb      	bhi.n	4078a4 <__multiply+0x44>
  4078ac:	f106 0c14 	add.w	ip, r6, #20
  4078b0:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  4078b4:	f10b 0b14 	add.w	fp, fp, #20
  4078b8:	459c      	cmp	ip, r3
  4078ba:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  4078be:	d24c      	bcs.n	40795a <__multiply+0xfa>
  4078c0:	f8cd a004 	str.w	sl, [sp, #4]
  4078c4:	469a      	mov	sl, r3
  4078c6:	f8dc 5000 	ldr.w	r5, [ip]
  4078ca:	b2af      	uxth	r7, r5
  4078cc:	b1ef      	cbz	r7, 40790a <__multiply+0xaa>
  4078ce:	2100      	movs	r1, #0
  4078d0:	464d      	mov	r5, r9
  4078d2:	465e      	mov	r6, fp
  4078d4:	460c      	mov	r4, r1
  4078d6:	f856 2b04 	ldr.w	r2, [r6], #4
  4078da:	6828      	ldr	r0, [r5, #0]
  4078dc:	b293      	uxth	r3, r2
  4078de:	b281      	uxth	r1, r0
  4078e0:	fb07 1303 	mla	r3, r7, r3, r1
  4078e4:	0c12      	lsrs	r2, r2, #16
  4078e6:	0c01      	lsrs	r1, r0, #16
  4078e8:	4423      	add	r3, r4
  4078ea:	fb07 1102 	mla	r1, r7, r2, r1
  4078ee:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  4078f2:	b29b      	uxth	r3, r3
  4078f4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  4078f8:	45b6      	cmp	lr, r6
  4078fa:	f845 3b04 	str.w	r3, [r5], #4
  4078fe:	ea4f 4411 	mov.w	r4, r1, lsr #16
  407902:	d8e8      	bhi.n	4078d6 <__multiply+0x76>
  407904:	602c      	str	r4, [r5, #0]
  407906:	f8dc 5000 	ldr.w	r5, [ip]
  40790a:	0c2d      	lsrs	r5, r5, #16
  40790c:	d01d      	beq.n	40794a <__multiply+0xea>
  40790e:	f8d9 3000 	ldr.w	r3, [r9]
  407912:	4648      	mov	r0, r9
  407914:	461c      	mov	r4, r3
  407916:	4659      	mov	r1, fp
  407918:	2200      	movs	r2, #0
  40791a:	880e      	ldrh	r6, [r1, #0]
  40791c:	0c24      	lsrs	r4, r4, #16
  40791e:	fb05 4406 	mla	r4, r5, r6, r4
  407922:	4422      	add	r2, r4
  407924:	b29b      	uxth	r3, r3
  407926:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40792a:	f840 3b04 	str.w	r3, [r0], #4
  40792e:	f851 3b04 	ldr.w	r3, [r1], #4
  407932:	6804      	ldr	r4, [r0, #0]
  407934:	0c1b      	lsrs	r3, r3, #16
  407936:	b2a6      	uxth	r6, r4
  407938:	fb05 6303 	mla	r3, r5, r3, r6
  40793c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  407940:	458e      	cmp	lr, r1
  407942:	ea4f 4213 	mov.w	r2, r3, lsr #16
  407946:	d8e8      	bhi.n	40791a <__multiply+0xba>
  407948:	6003      	str	r3, [r0, #0]
  40794a:	f10c 0c04 	add.w	ip, ip, #4
  40794e:	45e2      	cmp	sl, ip
  407950:	f109 0904 	add.w	r9, r9, #4
  407954:	d8b7      	bhi.n	4078c6 <__multiply+0x66>
  407956:	f8dd a004 	ldr.w	sl, [sp, #4]
  40795a:	f1b8 0f00 	cmp.w	r8, #0
  40795e:	dd0b      	ble.n	407978 <__multiply+0x118>
  407960:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  407964:	f1aa 0a04 	sub.w	sl, sl, #4
  407968:	b11b      	cbz	r3, 407972 <__multiply+0x112>
  40796a:	e005      	b.n	407978 <__multiply+0x118>
  40796c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  407970:	b913      	cbnz	r3, 407978 <__multiply+0x118>
  407972:	f1b8 0801 	subs.w	r8, r8, #1
  407976:	d1f9      	bne.n	40796c <__multiply+0x10c>
  407978:	9800      	ldr	r0, [sp, #0]
  40797a:	f8c0 8010 	str.w	r8, [r0, #16]
  40797e:	b003      	add	sp, #12
  407980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00407984 <__pow5mult>:
  407984:	f012 0303 	ands.w	r3, r2, #3
  407988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40798c:	4614      	mov	r4, r2
  40798e:	4607      	mov	r7, r0
  407990:	d12e      	bne.n	4079f0 <__pow5mult+0x6c>
  407992:	460d      	mov	r5, r1
  407994:	10a4      	asrs	r4, r4, #2
  407996:	d01c      	beq.n	4079d2 <__pow5mult+0x4e>
  407998:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  40799a:	b396      	cbz	r6, 407a02 <__pow5mult+0x7e>
  40799c:	07e3      	lsls	r3, r4, #31
  40799e:	f04f 0800 	mov.w	r8, #0
  4079a2:	d406      	bmi.n	4079b2 <__pow5mult+0x2e>
  4079a4:	1064      	asrs	r4, r4, #1
  4079a6:	d014      	beq.n	4079d2 <__pow5mult+0x4e>
  4079a8:	6830      	ldr	r0, [r6, #0]
  4079aa:	b1a8      	cbz	r0, 4079d8 <__pow5mult+0x54>
  4079ac:	4606      	mov	r6, r0
  4079ae:	07e3      	lsls	r3, r4, #31
  4079b0:	d5f8      	bpl.n	4079a4 <__pow5mult+0x20>
  4079b2:	4632      	mov	r2, r6
  4079b4:	4629      	mov	r1, r5
  4079b6:	4638      	mov	r0, r7
  4079b8:	f7ff ff52 	bl	407860 <__multiply>
  4079bc:	b1b5      	cbz	r5, 4079ec <__pow5mult+0x68>
  4079be:	686a      	ldr	r2, [r5, #4]
  4079c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4079c2:	1064      	asrs	r4, r4, #1
  4079c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4079c8:	6029      	str	r1, [r5, #0]
  4079ca:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  4079ce:	4605      	mov	r5, r0
  4079d0:	d1ea      	bne.n	4079a8 <__pow5mult+0x24>
  4079d2:	4628      	mov	r0, r5
  4079d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4079d8:	4632      	mov	r2, r6
  4079da:	4631      	mov	r1, r6
  4079dc:	4638      	mov	r0, r7
  4079de:	f7ff ff3f 	bl	407860 <__multiply>
  4079e2:	6030      	str	r0, [r6, #0]
  4079e4:	f8c0 8000 	str.w	r8, [r0]
  4079e8:	4606      	mov	r6, r0
  4079ea:	e7e0      	b.n	4079ae <__pow5mult+0x2a>
  4079ec:	4605      	mov	r5, r0
  4079ee:	e7d9      	b.n	4079a4 <__pow5mult+0x20>
  4079f0:	1e5a      	subs	r2, r3, #1
  4079f2:	4d0b      	ldr	r5, [pc, #44]	; (407a20 <__pow5mult+0x9c>)
  4079f4:	2300      	movs	r3, #0
  4079f6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  4079fa:	f7ff fe97 	bl	40772c <__multadd>
  4079fe:	4605      	mov	r5, r0
  407a00:	e7c8      	b.n	407994 <__pow5mult+0x10>
  407a02:	2101      	movs	r1, #1
  407a04:	4638      	mov	r0, r7
  407a06:	f7ff fe61 	bl	4076cc <_Balloc>
  407a0a:	f240 2171 	movw	r1, #625	; 0x271
  407a0e:	2201      	movs	r2, #1
  407a10:	2300      	movs	r3, #0
  407a12:	6141      	str	r1, [r0, #20]
  407a14:	6102      	str	r2, [r0, #16]
  407a16:	4606      	mov	r6, r0
  407a18:	64b8      	str	r0, [r7, #72]	; 0x48
  407a1a:	6003      	str	r3, [r0, #0]
  407a1c:	e7be      	b.n	40799c <__pow5mult+0x18>
  407a1e:	bf00      	nop
  407a20:	00409bc8 	.word	0x00409bc8

00407a24 <__lshift>:
  407a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407a28:	4691      	mov	r9, r2
  407a2a:	690a      	ldr	r2, [r1, #16]
  407a2c:	688b      	ldr	r3, [r1, #8]
  407a2e:	ea4f 1469 	mov.w	r4, r9, asr #5
  407a32:	eb04 0802 	add.w	r8, r4, r2
  407a36:	f108 0501 	add.w	r5, r8, #1
  407a3a:	429d      	cmp	r5, r3
  407a3c:	460e      	mov	r6, r1
  407a3e:	4607      	mov	r7, r0
  407a40:	6849      	ldr	r1, [r1, #4]
  407a42:	dd04      	ble.n	407a4e <__lshift+0x2a>
  407a44:	005b      	lsls	r3, r3, #1
  407a46:	429d      	cmp	r5, r3
  407a48:	f101 0101 	add.w	r1, r1, #1
  407a4c:	dcfa      	bgt.n	407a44 <__lshift+0x20>
  407a4e:	4638      	mov	r0, r7
  407a50:	f7ff fe3c 	bl	4076cc <_Balloc>
  407a54:	2c00      	cmp	r4, #0
  407a56:	f100 0314 	add.w	r3, r0, #20
  407a5a:	dd06      	ble.n	407a6a <__lshift+0x46>
  407a5c:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  407a60:	2100      	movs	r1, #0
  407a62:	f843 1b04 	str.w	r1, [r3], #4
  407a66:	429a      	cmp	r2, r3
  407a68:	d1fb      	bne.n	407a62 <__lshift+0x3e>
  407a6a:	6934      	ldr	r4, [r6, #16]
  407a6c:	f106 0114 	add.w	r1, r6, #20
  407a70:	f019 091f 	ands.w	r9, r9, #31
  407a74:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  407a78:	d01d      	beq.n	407ab6 <__lshift+0x92>
  407a7a:	f1c9 0c20 	rsb	ip, r9, #32
  407a7e:	2200      	movs	r2, #0
  407a80:	680c      	ldr	r4, [r1, #0]
  407a82:	fa04 f409 	lsl.w	r4, r4, r9
  407a86:	4314      	orrs	r4, r2
  407a88:	f843 4b04 	str.w	r4, [r3], #4
  407a8c:	f851 2b04 	ldr.w	r2, [r1], #4
  407a90:	458e      	cmp	lr, r1
  407a92:	fa22 f20c 	lsr.w	r2, r2, ip
  407a96:	d8f3      	bhi.n	407a80 <__lshift+0x5c>
  407a98:	601a      	str	r2, [r3, #0]
  407a9a:	b10a      	cbz	r2, 407aa0 <__lshift+0x7c>
  407a9c:	f108 0502 	add.w	r5, r8, #2
  407aa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  407aa2:	6872      	ldr	r2, [r6, #4]
  407aa4:	3d01      	subs	r5, #1
  407aa6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  407aaa:	6105      	str	r5, [r0, #16]
  407aac:	6031      	str	r1, [r6, #0]
  407aae:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  407ab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407ab6:	3b04      	subs	r3, #4
  407ab8:	f851 2b04 	ldr.w	r2, [r1], #4
  407abc:	f843 2f04 	str.w	r2, [r3, #4]!
  407ac0:	458e      	cmp	lr, r1
  407ac2:	d8f9      	bhi.n	407ab8 <__lshift+0x94>
  407ac4:	e7ec      	b.n	407aa0 <__lshift+0x7c>
  407ac6:	bf00      	nop

00407ac8 <__mcmp>:
  407ac8:	b430      	push	{r4, r5}
  407aca:	690b      	ldr	r3, [r1, #16]
  407acc:	4605      	mov	r5, r0
  407ace:	6900      	ldr	r0, [r0, #16]
  407ad0:	1ac0      	subs	r0, r0, r3
  407ad2:	d10f      	bne.n	407af4 <__mcmp+0x2c>
  407ad4:	009b      	lsls	r3, r3, #2
  407ad6:	3514      	adds	r5, #20
  407ad8:	3114      	adds	r1, #20
  407ada:	4419      	add	r1, r3
  407adc:	442b      	add	r3, r5
  407ade:	e001      	b.n	407ae4 <__mcmp+0x1c>
  407ae0:	429d      	cmp	r5, r3
  407ae2:	d207      	bcs.n	407af4 <__mcmp+0x2c>
  407ae4:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  407ae8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  407aec:	4294      	cmp	r4, r2
  407aee:	d0f7      	beq.n	407ae0 <__mcmp+0x18>
  407af0:	d302      	bcc.n	407af8 <__mcmp+0x30>
  407af2:	2001      	movs	r0, #1
  407af4:	bc30      	pop	{r4, r5}
  407af6:	4770      	bx	lr
  407af8:	f04f 30ff 	mov.w	r0, #4294967295
  407afc:	e7fa      	b.n	407af4 <__mcmp+0x2c>
  407afe:	bf00      	nop

00407b00 <__mdiff>:
  407b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407b04:	690f      	ldr	r7, [r1, #16]
  407b06:	460e      	mov	r6, r1
  407b08:	6911      	ldr	r1, [r2, #16]
  407b0a:	1a7f      	subs	r7, r7, r1
  407b0c:	2f00      	cmp	r7, #0
  407b0e:	4690      	mov	r8, r2
  407b10:	d117      	bne.n	407b42 <__mdiff+0x42>
  407b12:	0089      	lsls	r1, r1, #2
  407b14:	f106 0514 	add.w	r5, r6, #20
  407b18:	f102 0e14 	add.w	lr, r2, #20
  407b1c:	186b      	adds	r3, r5, r1
  407b1e:	4471      	add	r1, lr
  407b20:	e001      	b.n	407b26 <__mdiff+0x26>
  407b22:	429d      	cmp	r5, r3
  407b24:	d25c      	bcs.n	407be0 <__mdiff+0xe0>
  407b26:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  407b2a:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  407b2e:	42a2      	cmp	r2, r4
  407b30:	d0f7      	beq.n	407b22 <__mdiff+0x22>
  407b32:	d25e      	bcs.n	407bf2 <__mdiff+0xf2>
  407b34:	4633      	mov	r3, r6
  407b36:	462c      	mov	r4, r5
  407b38:	4646      	mov	r6, r8
  407b3a:	4675      	mov	r5, lr
  407b3c:	4698      	mov	r8, r3
  407b3e:	2701      	movs	r7, #1
  407b40:	e005      	b.n	407b4e <__mdiff+0x4e>
  407b42:	db58      	blt.n	407bf6 <__mdiff+0xf6>
  407b44:	f106 0514 	add.w	r5, r6, #20
  407b48:	f108 0414 	add.w	r4, r8, #20
  407b4c:	2700      	movs	r7, #0
  407b4e:	6871      	ldr	r1, [r6, #4]
  407b50:	f7ff fdbc 	bl	4076cc <_Balloc>
  407b54:	f8d8 3010 	ldr.w	r3, [r8, #16]
  407b58:	6936      	ldr	r6, [r6, #16]
  407b5a:	60c7      	str	r7, [r0, #12]
  407b5c:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  407b60:	46a6      	mov	lr, r4
  407b62:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  407b66:	f100 0414 	add.w	r4, r0, #20
  407b6a:	2300      	movs	r3, #0
  407b6c:	f85e 1b04 	ldr.w	r1, [lr], #4
  407b70:	f855 8b04 	ldr.w	r8, [r5], #4
  407b74:	b28a      	uxth	r2, r1
  407b76:	fa13 f388 	uxtah	r3, r3, r8
  407b7a:	0c09      	lsrs	r1, r1, #16
  407b7c:	1a9a      	subs	r2, r3, r2
  407b7e:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  407b82:	eb03 4322 	add.w	r3, r3, r2, asr #16
  407b86:	b292      	uxth	r2, r2
  407b88:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  407b8c:	45f4      	cmp	ip, lr
  407b8e:	f844 2b04 	str.w	r2, [r4], #4
  407b92:	ea4f 4323 	mov.w	r3, r3, asr #16
  407b96:	d8e9      	bhi.n	407b6c <__mdiff+0x6c>
  407b98:	42af      	cmp	r7, r5
  407b9a:	d917      	bls.n	407bcc <__mdiff+0xcc>
  407b9c:	46a4      	mov	ip, r4
  407b9e:	46ae      	mov	lr, r5
  407ba0:	f85e 2b04 	ldr.w	r2, [lr], #4
  407ba4:	fa13 f382 	uxtah	r3, r3, r2
  407ba8:	1419      	asrs	r1, r3, #16
  407baa:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  407bae:	b29b      	uxth	r3, r3
  407bb0:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  407bb4:	4577      	cmp	r7, lr
  407bb6:	f84c 2b04 	str.w	r2, [ip], #4
  407bba:	ea4f 4321 	mov.w	r3, r1, asr #16
  407bbe:	d8ef      	bhi.n	407ba0 <__mdiff+0xa0>
  407bc0:	43ed      	mvns	r5, r5
  407bc2:	442f      	add	r7, r5
  407bc4:	f027 0703 	bic.w	r7, r7, #3
  407bc8:	3704      	adds	r7, #4
  407bca:	443c      	add	r4, r7
  407bcc:	3c04      	subs	r4, #4
  407bce:	b922      	cbnz	r2, 407bda <__mdiff+0xda>
  407bd0:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  407bd4:	3e01      	subs	r6, #1
  407bd6:	2b00      	cmp	r3, #0
  407bd8:	d0fa      	beq.n	407bd0 <__mdiff+0xd0>
  407bda:	6106      	str	r6, [r0, #16]
  407bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407be0:	2100      	movs	r1, #0
  407be2:	f7ff fd73 	bl	4076cc <_Balloc>
  407be6:	2201      	movs	r2, #1
  407be8:	2300      	movs	r3, #0
  407bea:	6102      	str	r2, [r0, #16]
  407bec:	6143      	str	r3, [r0, #20]
  407bee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407bf2:	4674      	mov	r4, lr
  407bf4:	e7ab      	b.n	407b4e <__mdiff+0x4e>
  407bf6:	4633      	mov	r3, r6
  407bf8:	f106 0414 	add.w	r4, r6, #20
  407bfc:	f102 0514 	add.w	r5, r2, #20
  407c00:	4616      	mov	r6, r2
  407c02:	2701      	movs	r7, #1
  407c04:	4698      	mov	r8, r3
  407c06:	e7a2      	b.n	407b4e <__mdiff+0x4e>

00407c08 <__d2b>:
  407c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407c0c:	b082      	sub	sp, #8
  407c0e:	2101      	movs	r1, #1
  407c10:	461c      	mov	r4, r3
  407c12:	f3c3 570a 	ubfx	r7, r3, #20, #11
  407c16:	4615      	mov	r5, r2
  407c18:	9e08      	ldr	r6, [sp, #32]
  407c1a:	f7ff fd57 	bl	4076cc <_Balloc>
  407c1e:	f3c4 0413 	ubfx	r4, r4, #0, #20
  407c22:	4680      	mov	r8, r0
  407c24:	b10f      	cbz	r7, 407c2a <__d2b+0x22>
  407c26:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  407c2a:	9401      	str	r4, [sp, #4]
  407c2c:	b31d      	cbz	r5, 407c76 <__d2b+0x6e>
  407c2e:	a802      	add	r0, sp, #8
  407c30:	f840 5d08 	str.w	r5, [r0, #-8]!
  407c34:	f7ff fdda 	bl	4077ec <__lo0bits>
  407c38:	2800      	cmp	r0, #0
  407c3a:	d134      	bne.n	407ca6 <__d2b+0x9e>
  407c3c:	e89d 000c 	ldmia.w	sp, {r2, r3}
  407c40:	f8c8 2014 	str.w	r2, [r8, #20]
  407c44:	2b00      	cmp	r3, #0
  407c46:	bf0c      	ite	eq
  407c48:	2101      	moveq	r1, #1
  407c4a:	2102      	movne	r1, #2
  407c4c:	f8c8 3018 	str.w	r3, [r8, #24]
  407c50:	f8c8 1010 	str.w	r1, [r8, #16]
  407c54:	b9df      	cbnz	r7, 407c8e <__d2b+0x86>
  407c56:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  407c5a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  407c5e:	6030      	str	r0, [r6, #0]
  407c60:	6918      	ldr	r0, [r3, #16]
  407c62:	f7ff fda3 	bl	4077ac <__hi0bits>
  407c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407c68:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  407c6c:	6018      	str	r0, [r3, #0]
  407c6e:	4640      	mov	r0, r8
  407c70:	b002      	add	sp, #8
  407c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407c76:	a801      	add	r0, sp, #4
  407c78:	f7ff fdb8 	bl	4077ec <__lo0bits>
  407c7c:	9b01      	ldr	r3, [sp, #4]
  407c7e:	f8c8 3014 	str.w	r3, [r8, #20]
  407c82:	2101      	movs	r1, #1
  407c84:	3020      	adds	r0, #32
  407c86:	f8c8 1010 	str.w	r1, [r8, #16]
  407c8a:	2f00      	cmp	r7, #0
  407c8c:	d0e3      	beq.n	407c56 <__d2b+0x4e>
  407c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407c90:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  407c94:	4407      	add	r7, r0
  407c96:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  407c9a:	6037      	str	r7, [r6, #0]
  407c9c:	6018      	str	r0, [r3, #0]
  407c9e:	4640      	mov	r0, r8
  407ca0:	b002      	add	sp, #8
  407ca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407ca6:	e89d 000a 	ldmia.w	sp, {r1, r3}
  407caa:	f1c0 0220 	rsb	r2, r0, #32
  407cae:	fa03 f202 	lsl.w	r2, r3, r2
  407cb2:	430a      	orrs	r2, r1
  407cb4:	40c3      	lsrs	r3, r0
  407cb6:	9301      	str	r3, [sp, #4]
  407cb8:	f8c8 2014 	str.w	r2, [r8, #20]
  407cbc:	e7c2      	b.n	407c44 <__d2b+0x3c>
  407cbe:	bf00      	nop

00407cc0 <_realloc_r>:
  407cc0:	2900      	cmp	r1, #0
  407cc2:	f000 8095 	beq.w	407df0 <_realloc_r+0x130>
  407cc6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407cca:	460d      	mov	r5, r1
  407ccc:	4616      	mov	r6, r2
  407cce:	b083      	sub	sp, #12
  407cd0:	4680      	mov	r8, r0
  407cd2:	f106 070b 	add.w	r7, r6, #11
  407cd6:	f7fb fb17 	bl	403308 <__malloc_lock>
  407cda:	f855 ec04 	ldr.w	lr, [r5, #-4]
  407cde:	2f16      	cmp	r7, #22
  407ce0:	f02e 0403 	bic.w	r4, lr, #3
  407ce4:	f1a5 0908 	sub.w	r9, r5, #8
  407ce8:	d83c      	bhi.n	407d64 <_realloc_r+0xa4>
  407cea:	2210      	movs	r2, #16
  407cec:	4617      	mov	r7, r2
  407cee:	42be      	cmp	r6, r7
  407cf0:	d83d      	bhi.n	407d6e <_realloc_r+0xae>
  407cf2:	4294      	cmp	r4, r2
  407cf4:	da43      	bge.n	407d7e <_realloc_r+0xbe>
  407cf6:	4bc4      	ldr	r3, [pc, #784]	; (408008 <_realloc_r+0x348>)
  407cf8:	6899      	ldr	r1, [r3, #8]
  407cfa:	eb09 0004 	add.w	r0, r9, r4
  407cfe:	4288      	cmp	r0, r1
  407d00:	f000 80b4 	beq.w	407e6c <_realloc_r+0x1ac>
  407d04:	6843      	ldr	r3, [r0, #4]
  407d06:	f023 0101 	bic.w	r1, r3, #1
  407d0a:	4401      	add	r1, r0
  407d0c:	6849      	ldr	r1, [r1, #4]
  407d0e:	07c9      	lsls	r1, r1, #31
  407d10:	d54c      	bpl.n	407dac <_realloc_r+0xec>
  407d12:	f01e 0f01 	tst.w	lr, #1
  407d16:	f000 809b 	beq.w	407e50 <_realloc_r+0x190>
  407d1a:	4631      	mov	r1, r6
  407d1c:	4640      	mov	r0, r8
  407d1e:	f7fa fff5 	bl	402d0c <_malloc_r>
  407d22:	4606      	mov	r6, r0
  407d24:	2800      	cmp	r0, #0
  407d26:	d03a      	beq.n	407d9e <_realloc_r+0xde>
  407d28:	f855 3c04 	ldr.w	r3, [r5, #-4]
  407d2c:	f023 0301 	bic.w	r3, r3, #1
  407d30:	444b      	add	r3, r9
  407d32:	f1a0 0208 	sub.w	r2, r0, #8
  407d36:	429a      	cmp	r2, r3
  407d38:	f000 8121 	beq.w	407f7e <_realloc_r+0x2be>
  407d3c:	1f22      	subs	r2, r4, #4
  407d3e:	2a24      	cmp	r2, #36	; 0x24
  407d40:	f200 8107 	bhi.w	407f52 <_realloc_r+0x292>
  407d44:	2a13      	cmp	r2, #19
  407d46:	f200 80db 	bhi.w	407f00 <_realloc_r+0x240>
  407d4a:	4603      	mov	r3, r0
  407d4c:	462a      	mov	r2, r5
  407d4e:	6811      	ldr	r1, [r2, #0]
  407d50:	6019      	str	r1, [r3, #0]
  407d52:	6851      	ldr	r1, [r2, #4]
  407d54:	6059      	str	r1, [r3, #4]
  407d56:	6892      	ldr	r2, [r2, #8]
  407d58:	609a      	str	r2, [r3, #8]
  407d5a:	4629      	mov	r1, r5
  407d5c:	4640      	mov	r0, r8
  407d5e:	f7ff f827 	bl	406db0 <_free_r>
  407d62:	e01c      	b.n	407d9e <_realloc_r+0xde>
  407d64:	f027 0707 	bic.w	r7, r7, #7
  407d68:	2f00      	cmp	r7, #0
  407d6a:	463a      	mov	r2, r7
  407d6c:	dabf      	bge.n	407cee <_realloc_r+0x2e>
  407d6e:	2600      	movs	r6, #0
  407d70:	230c      	movs	r3, #12
  407d72:	4630      	mov	r0, r6
  407d74:	f8c8 3000 	str.w	r3, [r8]
  407d78:	b003      	add	sp, #12
  407d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407d7e:	462e      	mov	r6, r5
  407d80:	1be3      	subs	r3, r4, r7
  407d82:	2b0f      	cmp	r3, #15
  407d84:	d81e      	bhi.n	407dc4 <_realloc_r+0x104>
  407d86:	f8d9 3004 	ldr.w	r3, [r9, #4]
  407d8a:	f003 0301 	and.w	r3, r3, #1
  407d8e:	4323      	orrs	r3, r4
  407d90:	444c      	add	r4, r9
  407d92:	f8c9 3004 	str.w	r3, [r9, #4]
  407d96:	6863      	ldr	r3, [r4, #4]
  407d98:	f043 0301 	orr.w	r3, r3, #1
  407d9c:	6063      	str	r3, [r4, #4]
  407d9e:	4640      	mov	r0, r8
  407da0:	f7fb fab8 	bl	403314 <__malloc_unlock>
  407da4:	4630      	mov	r0, r6
  407da6:	b003      	add	sp, #12
  407da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407dac:	f023 0303 	bic.w	r3, r3, #3
  407db0:	18e1      	adds	r1, r4, r3
  407db2:	4291      	cmp	r1, r2
  407db4:	db1f      	blt.n	407df6 <_realloc_r+0x136>
  407db6:	68c3      	ldr	r3, [r0, #12]
  407db8:	6882      	ldr	r2, [r0, #8]
  407dba:	462e      	mov	r6, r5
  407dbc:	60d3      	str	r3, [r2, #12]
  407dbe:	460c      	mov	r4, r1
  407dc0:	609a      	str	r2, [r3, #8]
  407dc2:	e7dd      	b.n	407d80 <_realloc_r+0xc0>
  407dc4:	f8d9 2004 	ldr.w	r2, [r9, #4]
  407dc8:	eb09 0107 	add.w	r1, r9, r7
  407dcc:	f002 0201 	and.w	r2, r2, #1
  407dd0:	444c      	add	r4, r9
  407dd2:	f043 0301 	orr.w	r3, r3, #1
  407dd6:	4317      	orrs	r7, r2
  407dd8:	f8c9 7004 	str.w	r7, [r9, #4]
  407ddc:	604b      	str	r3, [r1, #4]
  407dde:	6863      	ldr	r3, [r4, #4]
  407de0:	f043 0301 	orr.w	r3, r3, #1
  407de4:	3108      	adds	r1, #8
  407de6:	6063      	str	r3, [r4, #4]
  407de8:	4640      	mov	r0, r8
  407dea:	f7fe ffe1 	bl	406db0 <_free_r>
  407dee:	e7d6      	b.n	407d9e <_realloc_r+0xde>
  407df0:	4611      	mov	r1, r2
  407df2:	f7fa bf8b 	b.w	402d0c <_malloc_r>
  407df6:	f01e 0f01 	tst.w	lr, #1
  407dfa:	d18e      	bne.n	407d1a <_realloc_r+0x5a>
  407dfc:	f855 1c08 	ldr.w	r1, [r5, #-8]
  407e00:	eba9 0a01 	sub.w	sl, r9, r1
  407e04:	f8da 1004 	ldr.w	r1, [sl, #4]
  407e08:	f021 0103 	bic.w	r1, r1, #3
  407e0c:	440b      	add	r3, r1
  407e0e:	4423      	add	r3, r4
  407e10:	4293      	cmp	r3, r2
  407e12:	db25      	blt.n	407e60 <_realloc_r+0x1a0>
  407e14:	68c2      	ldr	r2, [r0, #12]
  407e16:	6881      	ldr	r1, [r0, #8]
  407e18:	4656      	mov	r6, sl
  407e1a:	60ca      	str	r2, [r1, #12]
  407e1c:	6091      	str	r1, [r2, #8]
  407e1e:	f8da 100c 	ldr.w	r1, [sl, #12]
  407e22:	f856 0f08 	ldr.w	r0, [r6, #8]!
  407e26:	1f22      	subs	r2, r4, #4
  407e28:	2a24      	cmp	r2, #36	; 0x24
  407e2a:	60c1      	str	r1, [r0, #12]
  407e2c:	6088      	str	r0, [r1, #8]
  407e2e:	f200 8094 	bhi.w	407f5a <_realloc_r+0x29a>
  407e32:	2a13      	cmp	r2, #19
  407e34:	d96f      	bls.n	407f16 <_realloc_r+0x256>
  407e36:	6829      	ldr	r1, [r5, #0]
  407e38:	f8ca 1008 	str.w	r1, [sl, #8]
  407e3c:	6869      	ldr	r1, [r5, #4]
  407e3e:	f8ca 100c 	str.w	r1, [sl, #12]
  407e42:	2a1b      	cmp	r2, #27
  407e44:	f200 80a2 	bhi.w	407f8c <_realloc_r+0x2cc>
  407e48:	3508      	adds	r5, #8
  407e4a:	f10a 0210 	add.w	r2, sl, #16
  407e4e:	e063      	b.n	407f18 <_realloc_r+0x258>
  407e50:	f855 3c08 	ldr.w	r3, [r5, #-8]
  407e54:	eba9 0a03 	sub.w	sl, r9, r3
  407e58:	f8da 1004 	ldr.w	r1, [sl, #4]
  407e5c:	f021 0103 	bic.w	r1, r1, #3
  407e60:	1863      	adds	r3, r4, r1
  407e62:	4293      	cmp	r3, r2
  407e64:	f6ff af59 	blt.w	407d1a <_realloc_r+0x5a>
  407e68:	4656      	mov	r6, sl
  407e6a:	e7d8      	b.n	407e1e <_realloc_r+0x15e>
  407e6c:	6841      	ldr	r1, [r0, #4]
  407e6e:	f021 0b03 	bic.w	fp, r1, #3
  407e72:	44a3      	add	fp, r4
  407e74:	f107 0010 	add.w	r0, r7, #16
  407e78:	4583      	cmp	fp, r0
  407e7a:	da56      	bge.n	407f2a <_realloc_r+0x26a>
  407e7c:	f01e 0f01 	tst.w	lr, #1
  407e80:	f47f af4b 	bne.w	407d1a <_realloc_r+0x5a>
  407e84:	f855 1c08 	ldr.w	r1, [r5, #-8]
  407e88:	eba9 0a01 	sub.w	sl, r9, r1
  407e8c:	f8da 1004 	ldr.w	r1, [sl, #4]
  407e90:	f021 0103 	bic.w	r1, r1, #3
  407e94:	448b      	add	fp, r1
  407e96:	4558      	cmp	r0, fp
  407e98:	dce2      	bgt.n	407e60 <_realloc_r+0x1a0>
  407e9a:	4656      	mov	r6, sl
  407e9c:	f8da 100c 	ldr.w	r1, [sl, #12]
  407ea0:	f856 0f08 	ldr.w	r0, [r6, #8]!
  407ea4:	1f22      	subs	r2, r4, #4
  407ea6:	2a24      	cmp	r2, #36	; 0x24
  407ea8:	60c1      	str	r1, [r0, #12]
  407eaa:	6088      	str	r0, [r1, #8]
  407eac:	f200 808f 	bhi.w	407fce <_realloc_r+0x30e>
  407eb0:	2a13      	cmp	r2, #19
  407eb2:	f240 808a 	bls.w	407fca <_realloc_r+0x30a>
  407eb6:	6829      	ldr	r1, [r5, #0]
  407eb8:	f8ca 1008 	str.w	r1, [sl, #8]
  407ebc:	6869      	ldr	r1, [r5, #4]
  407ebe:	f8ca 100c 	str.w	r1, [sl, #12]
  407ec2:	2a1b      	cmp	r2, #27
  407ec4:	f200 808a 	bhi.w	407fdc <_realloc_r+0x31c>
  407ec8:	3508      	adds	r5, #8
  407eca:	f10a 0210 	add.w	r2, sl, #16
  407ece:	6829      	ldr	r1, [r5, #0]
  407ed0:	6011      	str	r1, [r2, #0]
  407ed2:	6869      	ldr	r1, [r5, #4]
  407ed4:	6051      	str	r1, [r2, #4]
  407ed6:	68a9      	ldr	r1, [r5, #8]
  407ed8:	6091      	str	r1, [r2, #8]
  407eda:	eb0a 0107 	add.w	r1, sl, r7
  407ede:	ebab 0207 	sub.w	r2, fp, r7
  407ee2:	f042 0201 	orr.w	r2, r2, #1
  407ee6:	6099      	str	r1, [r3, #8]
  407ee8:	604a      	str	r2, [r1, #4]
  407eea:	f8da 3004 	ldr.w	r3, [sl, #4]
  407eee:	f003 0301 	and.w	r3, r3, #1
  407ef2:	431f      	orrs	r7, r3
  407ef4:	4640      	mov	r0, r8
  407ef6:	f8ca 7004 	str.w	r7, [sl, #4]
  407efa:	f7fb fa0b 	bl	403314 <__malloc_unlock>
  407efe:	e751      	b.n	407da4 <_realloc_r+0xe4>
  407f00:	682b      	ldr	r3, [r5, #0]
  407f02:	6003      	str	r3, [r0, #0]
  407f04:	686b      	ldr	r3, [r5, #4]
  407f06:	6043      	str	r3, [r0, #4]
  407f08:	2a1b      	cmp	r2, #27
  407f0a:	d82d      	bhi.n	407f68 <_realloc_r+0x2a8>
  407f0c:	f100 0308 	add.w	r3, r0, #8
  407f10:	f105 0208 	add.w	r2, r5, #8
  407f14:	e71b      	b.n	407d4e <_realloc_r+0x8e>
  407f16:	4632      	mov	r2, r6
  407f18:	6829      	ldr	r1, [r5, #0]
  407f1a:	6011      	str	r1, [r2, #0]
  407f1c:	6869      	ldr	r1, [r5, #4]
  407f1e:	6051      	str	r1, [r2, #4]
  407f20:	68a9      	ldr	r1, [r5, #8]
  407f22:	6091      	str	r1, [r2, #8]
  407f24:	461c      	mov	r4, r3
  407f26:	46d1      	mov	r9, sl
  407f28:	e72a      	b.n	407d80 <_realloc_r+0xc0>
  407f2a:	eb09 0107 	add.w	r1, r9, r7
  407f2e:	ebab 0b07 	sub.w	fp, fp, r7
  407f32:	f04b 0201 	orr.w	r2, fp, #1
  407f36:	6099      	str	r1, [r3, #8]
  407f38:	604a      	str	r2, [r1, #4]
  407f3a:	f855 3c04 	ldr.w	r3, [r5, #-4]
  407f3e:	f003 0301 	and.w	r3, r3, #1
  407f42:	431f      	orrs	r7, r3
  407f44:	4640      	mov	r0, r8
  407f46:	f845 7c04 	str.w	r7, [r5, #-4]
  407f4a:	f7fb f9e3 	bl	403314 <__malloc_unlock>
  407f4e:	462e      	mov	r6, r5
  407f50:	e728      	b.n	407da4 <_realloc_r+0xe4>
  407f52:	4629      	mov	r1, r5
  407f54:	f7ff fb56 	bl	407604 <memmove>
  407f58:	e6ff      	b.n	407d5a <_realloc_r+0x9a>
  407f5a:	4629      	mov	r1, r5
  407f5c:	4630      	mov	r0, r6
  407f5e:	461c      	mov	r4, r3
  407f60:	46d1      	mov	r9, sl
  407f62:	f7ff fb4f 	bl	407604 <memmove>
  407f66:	e70b      	b.n	407d80 <_realloc_r+0xc0>
  407f68:	68ab      	ldr	r3, [r5, #8]
  407f6a:	6083      	str	r3, [r0, #8]
  407f6c:	68eb      	ldr	r3, [r5, #12]
  407f6e:	60c3      	str	r3, [r0, #12]
  407f70:	2a24      	cmp	r2, #36	; 0x24
  407f72:	d017      	beq.n	407fa4 <_realloc_r+0x2e4>
  407f74:	f100 0310 	add.w	r3, r0, #16
  407f78:	f105 0210 	add.w	r2, r5, #16
  407f7c:	e6e7      	b.n	407d4e <_realloc_r+0x8e>
  407f7e:	f850 3c04 	ldr.w	r3, [r0, #-4]
  407f82:	f023 0303 	bic.w	r3, r3, #3
  407f86:	441c      	add	r4, r3
  407f88:	462e      	mov	r6, r5
  407f8a:	e6f9      	b.n	407d80 <_realloc_r+0xc0>
  407f8c:	68a9      	ldr	r1, [r5, #8]
  407f8e:	f8ca 1010 	str.w	r1, [sl, #16]
  407f92:	68e9      	ldr	r1, [r5, #12]
  407f94:	f8ca 1014 	str.w	r1, [sl, #20]
  407f98:	2a24      	cmp	r2, #36	; 0x24
  407f9a:	d00c      	beq.n	407fb6 <_realloc_r+0x2f6>
  407f9c:	3510      	adds	r5, #16
  407f9e:	f10a 0218 	add.w	r2, sl, #24
  407fa2:	e7b9      	b.n	407f18 <_realloc_r+0x258>
  407fa4:	692b      	ldr	r3, [r5, #16]
  407fa6:	6103      	str	r3, [r0, #16]
  407fa8:	696b      	ldr	r3, [r5, #20]
  407faa:	6143      	str	r3, [r0, #20]
  407fac:	f105 0218 	add.w	r2, r5, #24
  407fb0:	f100 0318 	add.w	r3, r0, #24
  407fb4:	e6cb      	b.n	407d4e <_realloc_r+0x8e>
  407fb6:	692a      	ldr	r2, [r5, #16]
  407fb8:	f8ca 2018 	str.w	r2, [sl, #24]
  407fbc:	696a      	ldr	r2, [r5, #20]
  407fbe:	f8ca 201c 	str.w	r2, [sl, #28]
  407fc2:	3518      	adds	r5, #24
  407fc4:	f10a 0220 	add.w	r2, sl, #32
  407fc8:	e7a6      	b.n	407f18 <_realloc_r+0x258>
  407fca:	4632      	mov	r2, r6
  407fcc:	e77f      	b.n	407ece <_realloc_r+0x20e>
  407fce:	4629      	mov	r1, r5
  407fd0:	4630      	mov	r0, r6
  407fd2:	9301      	str	r3, [sp, #4]
  407fd4:	f7ff fb16 	bl	407604 <memmove>
  407fd8:	9b01      	ldr	r3, [sp, #4]
  407fda:	e77e      	b.n	407eda <_realloc_r+0x21a>
  407fdc:	68a9      	ldr	r1, [r5, #8]
  407fde:	f8ca 1010 	str.w	r1, [sl, #16]
  407fe2:	68e9      	ldr	r1, [r5, #12]
  407fe4:	f8ca 1014 	str.w	r1, [sl, #20]
  407fe8:	2a24      	cmp	r2, #36	; 0x24
  407fea:	d003      	beq.n	407ff4 <_realloc_r+0x334>
  407fec:	3510      	adds	r5, #16
  407fee:	f10a 0218 	add.w	r2, sl, #24
  407ff2:	e76c      	b.n	407ece <_realloc_r+0x20e>
  407ff4:	692a      	ldr	r2, [r5, #16]
  407ff6:	f8ca 2018 	str.w	r2, [sl, #24]
  407ffa:	696a      	ldr	r2, [r5, #20]
  407ffc:	f8ca 201c 	str.w	r2, [sl, #28]
  408000:	3518      	adds	r5, #24
  408002:	f10a 0220 	add.w	r2, sl, #32
  408006:	e762      	b.n	407ece <_realloc_r+0x20e>
  408008:	20400570 	.word	0x20400570

0040800c <__sread>:
  40800c:	b510      	push	{r4, lr}
  40800e:	460c      	mov	r4, r1
  408010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408014:	f000 faa4 	bl	408560 <_read_r>
  408018:	2800      	cmp	r0, #0
  40801a:	db03      	blt.n	408024 <__sread+0x18>
  40801c:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40801e:	4403      	add	r3, r0
  408020:	6523      	str	r3, [r4, #80]	; 0x50
  408022:	bd10      	pop	{r4, pc}
  408024:	89a3      	ldrh	r3, [r4, #12]
  408026:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40802a:	81a3      	strh	r3, [r4, #12]
  40802c:	bd10      	pop	{r4, pc}
  40802e:	bf00      	nop

00408030 <__swrite>:
  408030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408034:	4616      	mov	r6, r2
  408036:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  40803a:	461f      	mov	r7, r3
  40803c:	05d3      	lsls	r3, r2, #23
  40803e:	460c      	mov	r4, r1
  408040:	4605      	mov	r5, r0
  408042:	d507      	bpl.n	408054 <__swrite+0x24>
  408044:	2200      	movs	r2, #0
  408046:	2302      	movs	r3, #2
  408048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40804c:	f000 fa72 	bl	408534 <_lseek_r>
  408050:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408054:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  408058:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  40805c:	81a2      	strh	r2, [r4, #12]
  40805e:	463b      	mov	r3, r7
  408060:	4632      	mov	r2, r6
  408062:	4628      	mov	r0, r5
  408064:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  408068:	f000 b922 	b.w	4082b0 <_write_r>

0040806c <__sseek>:
  40806c:	b510      	push	{r4, lr}
  40806e:	460c      	mov	r4, r1
  408070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408074:	f000 fa5e 	bl	408534 <_lseek_r>
  408078:	89a3      	ldrh	r3, [r4, #12]
  40807a:	1c42      	adds	r2, r0, #1
  40807c:	bf0e      	itee	eq
  40807e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  408082:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  408086:	6520      	strne	r0, [r4, #80]	; 0x50
  408088:	81a3      	strh	r3, [r4, #12]
  40808a:	bd10      	pop	{r4, pc}

0040808c <__sclose>:
  40808c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408090:	f000 b9b6 	b.w	408400 <_close_r>

00408094 <__ssprint_r>:
  408094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408098:	6893      	ldr	r3, [r2, #8]
  40809a:	b083      	sub	sp, #12
  40809c:	4690      	mov	r8, r2
  40809e:	2b00      	cmp	r3, #0
  4080a0:	d070      	beq.n	408184 <__ssprint_r+0xf0>
  4080a2:	4682      	mov	sl, r0
  4080a4:	460c      	mov	r4, r1
  4080a6:	6817      	ldr	r7, [r2, #0]
  4080a8:	688d      	ldr	r5, [r1, #8]
  4080aa:	6808      	ldr	r0, [r1, #0]
  4080ac:	e042      	b.n	408134 <__ssprint_r+0xa0>
  4080ae:	89a3      	ldrh	r3, [r4, #12]
  4080b0:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4080b4:	d02e      	beq.n	408114 <__ssprint_r+0x80>
  4080b6:	6965      	ldr	r5, [r4, #20]
  4080b8:	6921      	ldr	r1, [r4, #16]
  4080ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  4080be:	eba0 0b01 	sub.w	fp, r0, r1
  4080c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  4080c6:	f10b 0001 	add.w	r0, fp, #1
  4080ca:	106d      	asrs	r5, r5, #1
  4080cc:	4430      	add	r0, r6
  4080ce:	42a8      	cmp	r0, r5
  4080d0:	462a      	mov	r2, r5
  4080d2:	bf84      	itt	hi
  4080d4:	4605      	movhi	r5, r0
  4080d6:	462a      	movhi	r2, r5
  4080d8:	055b      	lsls	r3, r3, #21
  4080da:	d538      	bpl.n	40814e <__ssprint_r+0xba>
  4080dc:	4611      	mov	r1, r2
  4080de:	4650      	mov	r0, sl
  4080e0:	f7fa fe14 	bl	402d0c <_malloc_r>
  4080e4:	2800      	cmp	r0, #0
  4080e6:	d03c      	beq.n	408162 <__ssprint_r+0xce>
  4080e8:	465a      	mov	r2, fp
  4080ea:	6921      	ldr	r1, [r4, #16]
  4080ec:	9001      	str	r0, [sp, #4]
  4080ee:	f7ff f9ef 	bl	4074d0 <memcpy>
  4080f2:	89a2      	ldrh	r2, [r4, #12]
  4080f4:	9b01      	ldr	r3, [sp, #4]
  4080f6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  4080fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  4080fe:	81a2      	strh	r2, [r4, #12]
  408100:	eba5 020b 	sub.w	r2, r5, fp
  408104:	eb03 000b 	add.w	r0, r3, fp
  408108:	6165      	str	r5, [r4, #20]
  40810a:	6123      	str	r3, [r4, #16]
  40810c:	6020      	str	r0, [r4, #0]
  40810e:	60a2      	str	r2, [r4, #8]
  408110:	4635      	mov	r5, r6
  408112:	46b3      	mov	fp, r6
  408114:	465a      	mov	r2, fp
  408116:	4649      	mov	r1, r9
  408118:	f7ff fa74 	bl	407604 <memmove>
  40811c:	f8d8 3008 	ldr.w	r3, [r8, #8]
  408120:	68a2      	ldr	r2, [r4, #8]
  408122:	6820      	ldr	r0, [r4, #0]
  408124:	1b55      	subs	r5, r2, r5
  408126:	4458      	add	r0, fp
  408128:	1b9e      	subs	r6, r3, r6
  40812a:	60a5      	str	r5, [r4, #8]
  40812c:	6020      	str	r0, [r4, #0]
  40812e:	f8c8 6008 	str.w	r6, [r8, #8]
  408132:	b33e      	cbz	r6, 408184 <__ssprint_r+0xf0>
  408134:	687e      	ldr	r6, [r7, #4]
  408136:	463b      	mov	r3, r7
  408138:	3708      	adds	r7, #8
  40813a:	2e00      	cmp	r6, #0
  40813c:	d0fa      	beq.n	408134 <__ssprint_r+0xa0>
  40813e:	42ae      	cmp	r6, r5
  408140:	f8d3 9000 	ldr.w	r9, [r3]
  408144:	46ab      	mov	fp, r5
  408146:	d2b2      	bcs.n	4080ae <__ssprint_r+0x1a>
  408148:	4635      	mov	r5, r6
  40814a:	46b3      	mov	fp, r6
  40814c:	e7e2      	b.n	408114 <__ssprint_r+0x80>
  40814e:	4650      	mov	r0, sl
  408150:	f7ff fdb6 	bl	407cc0 <_realloc_r>
  408154:	4603      	mov	r3, r0
  408156:	2800      	cmp	r0, #0
  408158:	d1d2      	bne.n	408100 <__ssprint_r+0x6c>
  40815a:	6921      	ldr	r1, [r4, #16]
  40815c:	4650      	mov	r0, sl
  40815e:	f7fe fe27 	bl	406db0 <_free_r>
  408162:	230c      	movs	r3, #12
  408164:	f8ca 3000 	str.w	r3, [sl]
  408168:	89a3      	ldrh	r3, [r4, #12]
  40816a:	2200      	movs	r2, #0
  40816c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408170:	f04f 30ff 	mov.w	r0, #4294967295
  408174:	81a3      	strh	r3, [r4, #12]
  408176:	f8c8 2008 	str.w	r2, [r8, #8]
  40817a:	f8c8 2004 	str.w	r2, [r8, #4]
  40817e:	b003      	add	sp, #12
  408180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408184:	2000      	movs	r0, #0
  408186:	f8c8 0004 	str.w	r0, [r8, #4]
  40818a:	b003      	add	sp, #12
  40818c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00408190 <__swbuf_r>:
  408190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408192:	460d      	mov	r5, r1
  408194:	4614      	mov	r4, r2
  408196:	4606      	mov	r6, r0
  408198:	b110      	cbz	r0, 4081a0 <__swbuf_r+0x10>
  40819a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40819c:	2b00      	cmp	r3, #0
  40819e:	d04b      	beq.n	408238 <__swbuf_r+0xa8>
  4081a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4081a4:	69a3      	ldr	r3, [r4, #24]
  4081a6:	60a3      	str	r3, [r4, #8]
  4081a8:	b291      	uxth	r1, r2
  4081aa:	0708      	lsls	r0, r1, #28
  4081ac:	d539      	bpl.n	408222 <__swbuf_r+0x92>
  4081ae:	6923      	ldr	r3, [r4, #16]
  4081b0:	2b00      	cmp	r3, #0
  4081b2:	d036      	beq.n	408222 <__swbuf_r+0x92>
  4081b4:	b2ed      	uxtb	r5, r5
  4081b6:	0489      	lsls	r1, r1, #18
  4081b8:	462f      	mov	r7, r5
  4081ba:	d515      	bpl.n	4081e8 <__swbuf_r+0x58>
  4081bc:	6822      	ldr	r2, [r4, #0]
  4081be:	6961      	ldr	r1, [r4, #20]
  4081c0:	1ad3      	subs	r3, r2, r3
  4081c2:	428b      	cmp	r3, r1
  4081c4:	da1c      	bge.n	408200 <__swbuf_r+0x70>
  4081c6:	3301      	adds	r3, #1
  4081c8:	68a1      	ldr	r1, [r4, #8]
  4081ca:	1c50      	adds	r0, r2, #1
  4081cc:	3901      	subs	r1, #1
  4081ce:	60a1      	str	r1, [r4, #8]
  4081d0:	6020      	str	r0, [r4, #0]
  4081d2:	7015      	strb	r5, [r2, #0]
  4081d4:	6962      	ldr	r2, [r4, #20]
  4081d6:	429a      	cmp	r2, r3
  4081d8:	d01a      	beq.n	408210 <__swbuf_r+0x80>
  4081da:	89a3      	ldrh	r3, [r4, #12]
  4081dc:	07db      	lsls	r3, r3, #31
  4081de:	d501      	bpl.n	4081e4 <__swbuf_r+0x54>
  4081e0:	2d0a      	cmp	r5, #10
  4081e2:	d015      	beq.n	408210 <__swbuf_r+0x80>
  4081e4:	4638      	mov	r0, r7
  4081e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4081e8:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4081ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4081ee:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4081f2:	81a2      	strh	r2, [r4, #12]
  4081f4:	6822      	ldr	r2, [r4, #0]
  4081f6:	6661      	str	r1, [r4, #100]	; 0x64
  4081f8:	6961      	ldr	r1, [r4, #20]
  4081fa:	1ad3      	subs	r3, r2, r3
  4081fc:	428b      	cmp	r3, r1
  4081fe:	dbe2      	blt.n	4081c6 <__swbuf_r+0x36>
  408200:	4621      	mov	r1, r4
  408202:	4630      	mov	r0, r6
  408204:	f7fe fc56 	bl	406ab4 <_fflush_r>
  408208:	b940      	cbnz	r0, 40821c <__swbuf_r+0x8c>
  40820a:	6822      	ldr	r2, [r4, #0]
  40820c:	2301      	movs	r3, #1
  40820e:	e7db      	b.n	4081c8 <__swbuf_r+0x38>
  408210:	4621      	mov	r1, r4
  408212:	4630      	mov	r0, r6
  408214:	f7fe fc4e 	bl	406ab4 <_fflush_r>
  408218:	2800      	cmp	r0, #0
  40821a:	d0e3      	beq.n	4081e4 <__swbuf_r+0x54>
  40821c:	f04f 37ff 	mov.w	r7, #4294967295
  408220:	e7e0      	b.n	4081e4 <__swbuf_r+0x54>
  408222:	4621      	mov	r1, r4
  408224:	4630      	mov	r0, r6
  408226:	f7fd fb71 	bl	40590c <__swsetup_r>
  40822a:	2800      	cmp	r0, #0
  40822c:	d1f6      	bne.n	40821c <__swbuf_r+0x8c>
  40822e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408232:	6923      	ldr	r3, [r4, #16]
  408234:	b291      	uxth	r1, r2
  408236:	e7bd      	b.n	4081b4 <__swbuf_r+0x24>
  408238:	f7fe fc94 	bl	406b64 <__sinit>
  40823c:	e7b0      	b.n	4081a0 <__swbuf_r+0x10>
  40823e:	bf00      	nop

00408240 <_wcrtomb_r>:
  408240:	b5f0      	push	{r4, r5, r6, r7, lr}
  408242:	4606      	mov	r6, r0
  408244:	b085      	sub	sp, #20
  408246:	461f      	mov	r7, r3
  408248:	b189      	cbz	r1, 40826e <_wcrtomb_r+0x2e>
  40824a:	4c10      	ldr	r4, [pc, #64]	; (40828c <_wcrtomb_r+0x4c>)
  40824c:	4d10      	ldr	r5, [pc, #64]	; (408290 <_wcrtomb_r+0x50>)
  40824e:	6824      	ldr	r4, [r4, #0]
  408250:	6b64      	ldr	r4, [r4, #52]	; 0x34
  408252:	2c00      	cmp	r4, #0
  408254:	bf08      	it	eq
  408256:	462c      	moveq	r4, r5
  408258:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  40825c:	47a0      	blx	r4
  40825e:	1c43      	adds	r3, r0, #1
  408260:	d103      	bne.n	40826a <_wcrtomb_r+0x2a>
  408262:	2200      	movs	r2, #0
  408264:	238a      	movs	r3, #138	; 0x8a
  408266:	603a      	str	r2, [r7, #0]
  408268:	6033      	str	r3, [r6, #0]
  40826a:	b005      	add	sp, #20
  40826c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40826e:	460c      	mov	r4, r1
  408270:	4906      	ldr	r1, [pc, #24]	; (40828c <_wcrtomb_r+0x4c>)
  408272:	4a07      	ldr	r2, [pc, #28]	; (408290 <_wcrtomb_r+0x50>)
  408274:	6809      	ldr	r1, [r1, #0]
  408276:	6b49      	ldr	r1, [r1, #52]	; 0x34
  408278:	2900      	cmp	r1, #0
  40827a:	bf08      	it	eq
  40827c:	4611      	moveq	r1, r2
  40827e:	4622      	mov	r2, r4
  408280:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  408284:	a901      	add	r1, sp, #4
  408286:	47a0      	blx	r4
  408288:	e7e9      	b.n	40825e <_wcrtomb_r+0x1e>
  40828a:	bf00      	nop
  40828c:	20400144 	.word	0x20400144
  408290:	20400984 	.word	0x20400984

00408294 <__ascii_wctomb>:
  408294:	b121      	cbz	r1, 4082a0 <__ascii_wctomb+0xc>
  408296:	2aff      	cmp	r2, #255	; 0xff
  408298:	d804      	bhi.n	4082a4 <__ascii_wctomb+0x10>
  40829a:	700a      	strb	r2, [r1, #0]
  40829c:	2001      	movs	r0, #1
  40829e:	4770      	bx	lr
  4082a0:	4608      	mov	r0, r1
  4082a2:	4770      	bx	lr
  4082a4:	238a      	movs	r3, #138	; 0x8a
  4082a6:	6003      	str	r3, [r0, #0]
  4082a8:	f04f 30ff 	mov.w	r0, #4294967295
  4082ac:	4770      	bx	lr
  4082ae:	bf00      	nop

004082b0 <_write_r>:
  4082b0:	b570      	push	{r4, r5, r6, lr}
  4082b2:	460d      	mov	r5, r1
  4082b4:	4c08      	ldr	r4, [pc, #32]	; (4082d8 <_write_r+0x28>)
  4082b6:	4611      	mov	r1, r2
  4082b8:	4606      	mov	r6, r0
  4082ba:	461a      	mov	r2, r3
  4082bc:	4628      	mov	r0, r5
  4082be:	2300      	movs	r3, #0
  4082c0:	6023      	str	r3, [r4, #0]
  4082c2:	f7f8 fb4f 	bl	400964 <_write>
  4082c6:	1c43      	adds	r3, r0, #1
  4082c8:	d000      	beq.n	4082cc <_write_r+0x1c>
  4082ca:	bd70      	pop	{r4, r5, r6, pc}
  4082cc:	6823      	ldr	r3, [r4, #0]
  4082ce:	2b00      	cmp	r3, #0
  4082d0:	d0fb      	beq.n	4082ca <_write_r+0x1a>
  4082d2:	6033      	str	r3, [r6, #0]
  4082d4:	bd70      	pop	{r4, r5, r6, pc}
  4082d6:	bf00      	nop
  4082d8:	20400fd8 	.word	0x20400fd8

004082dc <__register_exitproc>:
  4082dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4082e0:	4d2c      	ldr	r5, [pc, #176]	; (408394 <__register_exitproc+0xb8>)
  4082e2:	4606      	mov	r6, r0
  4082e4:	6828      	ldr	r0, [r5, #0]
  4082e6:	4698      	mov	r8, r3
  4082e8:	460f      	mov	r7, r1
  4082ea:	4691      	mov	r9, r2
  4082ec:	f7ff f808 	bl	407300 <__retarget_lock_acquire_recursive>
  4082f0:	4b29      	ldr	r3, [pc, #164]	; (408398 <__register_exitproc+0xbc>)
  4082f2:	681c      	ldr	r4, [r3, #0]
  4082f4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4082f8:	2b00      	cmp	r3, #0
  4082fa:	d03e      	beq.n	40837a <__register_exitproc+0x9e>
  4082fc:	685a      	ldr	r2, [r3, #4]
  4082fe:	2a1f      	cmp	r2, #31
  408300:	dc1c      	bgt.n	40833c <__register_exitproc+0x60>
  408302:	f102 0e01 	add.w	lr, r2, #1
  408306:	b176      	cbz	r6, 408326 <__register_exitproc+0x4a>
  408308:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  40830c:	2401      	movs	r4, #1
  40830e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  408312:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  408316:	4094      	lsls	r4, r2
  408318:	4320      	orrs	r0, r4
  40831a:	2e02      	cmp	r6, #2
  40831c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  408320:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  408324:	d023      	beq.n	40836e <__register_exitproc+0x92>
  408326:	3202      	adds	r2, #2
  408328:	f8c3 e004 	str.w	lr, [r3, #4]
  40832c:	6828      	ldr	r0, [r5, #0]
  40832e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  408332:	f7fe ffe7 	bl	407304 <__retarget_lock_release_recursive>
  408336:	2000      	movs	r0, #0
  408338:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40833c:	4b17      	ldr	r3, [pc, #92]	; (40839c <__register_exitproc+0xc0>)
  40833e:	b30b      	cbz	r3, 408384 <__register_exitproc+0xa8>
  408340:	f44f 70c8 	mov.w	r0, #400	; 0x190
  408344:	f7fa fcda 	bl	402cfc <malloc>
  408348:	4603      	mov	r3, r0
  40834a:	b1d8      	cbz	r0, 408384 <__register_exitproc+0xa8>
  40834c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  408350:	6002      	str	r2, [r0, #0]
  408352:	2100      	movs	r1, #0
  408354:	6041      	str	r1, [r0, #4]
  408356:	460a      	mov	r2, r1
  408358:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  40835c:	f04f 0e01 	mov.w	lr, #1
  408360:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  408364:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  408368:	2e00      	cmp	r6, #0
  40836a:	d0dc      	beq.n	408326 <__register_exitproc+0x4a>
  40836c:	e7cc      	b.n	408308 <__register_exitproc+0x2c>
  40836e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  408372:	430c      	orrs	r4, r1
  408374:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  408378:	e7d5      	b.n	408326 <__register_exitproc+0x4a>
  40837a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40837e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  408382:	e7bb      	b.n	4082fc <__register_exitproc+0x20>
  408384:	6828      	ldr	r0, [r5, #0]
  408386:	f7fe ffbd 	bl	407304 <__retarget_lock_release_recursive>
  40838a:	f04f 30ff 	mov.w	r0, #4294967295
  40838e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408392:	bf00      	nop
  408394:	20400980 	.word	0x20400980
  408398:	00409a34 	.word	0x00409a34
  40839c:	00402cfd 	.word	0x00402cfd

004083a0 <_calloc_r>:
  4083a0:	b510      	push	{r4, lr}
  4083a2:	fb02 f101 	mul.w	r1, r2, r1
  4083a6:	f7fa fcb1 	bl	402d0c <_malloc_r>
  4083aa:	4604      	mov	r4, r0
  4083ac:	b1d8      	cbz	r0, 4083e6 <_calloc_r+0x46>
  4083ae:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4083b2:	f022 0203 	bic.w	r2, r2, #3
  4083b6:	3a04      	subs	r2, #4
  4083b8:	2a24      	cmp	r2, #36	; 0x24
  4083ba:	d818      	bhi.n	4083ee <_calloc_r+0x4e>
  4083bc:	2a13      	cmp	r2, #19
  4083be:	d914      	bls.n	4083ea <_calloc_r+0x4a>
  4083c0:	2300      	movs	r3, #0
  4083c2:	2a1b      	cmp	r2, #27
  4083c4:	6003      	str	r3, [r0, #0]
  4083c6:	6043      	str	r3, [r0, #4]
  4083c8:	d916      	bls.n	4083f8 <_calloc_r+0x58>
  4083ca:	2a24      	cmp	r2, #36	; 0x24
  4083cc:	6083      	str	r3, [r0, #8]
  4083ce:	60c3      	str	r3, [r0, #12]
  4083d0:	bf11      	iteee	ne
  4083d2:	f100 0210 	addne.w	r2, r0, #16
  4083d6:	6103      	streq	r3, [r0, #16]
  4083d8:	6143      	streq	r3, [r0, #20]
  4083da:	f100 0218 	addeq.w	r2, r0, #24
  4083de:	2300      	movs	r3, #0
  4083e0:	6013      	str	r3, [r2, #0]
  4083e2:	6053      	str	r3, [r2, #4]
  4083e4:	6093      	str	r3, [r2, #8]
  4083e6:	4620      	mov	r0, r4
  4083e8:	bd10      	pop	{r4, pc}
  4083ea:	4602      	mov	r2, r0
  4083ec:	e7f7      	b.n	4083de <_calloc_r+0x3e>
  4083ee:	2100      	movs	r1, #0
  4083f0:	f7fa ff3c 	bl	40326c <memset>
  4083f4:	4620      	mov	r0, r4
  4083f6:	bd10      	pop	{r4, pc}
  4083f8:	f100 0208 	add.w	r2, r0, #8
  4083fc:	e7ef      	b.n	4083de <_calloc_r+0x3e>
  4083fe:	bf00      	nop

00408400 <_close_r>:
  408400:	b538      	push	{r3, r4, r5, lr}
  408402:	4c07      	ldr	r4, [pc, #28]	; (408420 <_close_r+0x20>)
  408404:	2300      	movs	r3, #0
  408406:	4605      	mov	r5, r0
  408408:	4608      	mov	r0, r1
  40840a:	6023      	str	r3, [r4, #0]
  40840c:	f7f9 ff02 	bl	402214 <_close>
  408410:	1c43      	adds	r3, r0, #1
  408412:	d000      	beq.n	408416 <_close_r+0x16>
  408414:	bd38      	pop	{r3, r4, r5, pc}
  408416:	6823      	ldr	r3, [r4, #0]
  408418:	2b00      	cmp	r3, #0
  40841a:	d0fb      	beq.n	408414 <_close_r+0x14>
  40841c:	602b      	str	r3, [r5, #0]
  40841e:	bd38      	pop	{r3, r4, r5, pc}
  408420:	20400fd8 	.word	0x20400fd8

00408424 <_fclose_r>:
  408424:	b570      	push	{r4, r5, r6, lr}
  408426:	b159      	cbz	r1, 408440 <_fclose_r+0x1c>
  408428:	4605      	mov	r5, r0
  40842a:	460c      	mov	r4, r1
  40842c:	b110      	cbz	r0, 408434 <_fclose_r+0x10>
  40842e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408430:	2b00      	cmp	r3, #0
  408432:	d03c      	beq.n	4084ae <_fclose_r+0x8a>
  408434:	6e63      	ldr	r3, [r4, #100]	; 0x64
  408436:	07d8      	lsls	r0, r3, #31
  408438:	d505      	bpl.n	408446 <_fclose_r+0x22>
  40843a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40843e:	b92b      	cbnz	r3, 40844c <_fclose_r+0x28>
  408440:	2600      	movs	r6, #0
  408442:	4630      	mov	r0, r6
  408444:	bd70      	pop	{r4, r5, r6, pc}
  408446:	89a3      	ldrh	r3, [r4, #12]
  408448:	0599      	lsls	r1, r3, #22
  40844a:	d53c      	bpl.n	4084c6 <_fclose_r+0xa2>
  40844c:	4621      	mov	r1, r4
  40844e:	4628      	mov	r0, r5
  408450:	f7fe fa90 	bl	406974 <__sflush_r>
  408454:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  408456:	4606      	mov	r6, r0
  408458:	b133      	cbz	r3, 408468 <_fclose_r+0x44>
  40845a:	69e1      	ldr	r1, [r4, #28]
  40845c:	4628      	mov	r0, r5
  40845e:	4798      	blx	r3
  408460:	2800      	cmp	r0, #0
  408462:	bfb8      	it	lt
  408464:	f04f 36ff 	movlt.w	r6, #4294967295
  408468:	89a3      	ldrh	r3, [r4, #12]
  40846a:	061a      	lsls	r2, r3, #24
  40846c:	d422      	bmi.n	4084b4 <_fclose_r+0x90>
  40846e:	6b21      	ldr	r1, [r4, #48]	; 0x30
  408470:	b141      	cbz	r1, 408484 <_fclose_r+0x60>
  408472:	f104 0340 	add.w	r3, r4, #64	; 0x40
  408476:	4299      	cmp	r1, r3
  408478:	d002      	beq.n	408480 <_fclose_r+0x5c>
  40847a:	4628      	mov	r0, r5
  40847c:	f7fe fc98 	bl	406db0 <_free_r>
  408480:	2300      	movs	r3, #0
  408482:	6323      	str	r3, [r4, #48]	; 0x30
  408484:	6c61      	ldr	r1, [r4, #68]	; 0x44
  408486:	b121      	cbz	r1, 408492 <_fclose_r+0x6e>
  408488:	4628      	mov	r0, r5
  40848a:	f7fe fc91 	bl	406db0 <_free_r>
  40848e:	2300      	movs	r3, #0
  408490:	6463      	str	r3, [r4, #68]	; 0x44
  408492:	f7fe fb93 	bl	406bbc <__sfp_lock_acquire>
  408496:	6e63      	ldr	r3, [r4, #100]	; 0x64
  408498:	2200      	movs	r2, #0
  40849a:	07db      	lsls	r3, r3, #31
  40849c:	81a2      	strh	r2, [r4, #12]
  40849e:	d50e      	bpl.n	4084be <_fclose_r+0x9a>
  4084a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4084a2:	f7fe ff2b 	bl	4072fc <__retarget_lock_close_recursive>
  4084a6:	f7fe fb8f 	bl	406bc8 <__sfp_lock_release>
  4084aa:	4630      	mov	r0, r6
  4084ac:	bd70      	pop	{r4, r5, r6, pc}
  4084ae:	f7fe fb59 	bl	406b64 <__sinit>
  4084b2:	e7bf      	b.n	408434 <_fclose_r+0x10>
  4084b4:	6921      	ldr	r1, [r4, #16]
  4084b6:	4628      	mov	r0, r5
  4084b8:	f7fe fc7a 	bl	406db0 <_free_r>
  4084bc:	e7d7      	b.n	40846e <_fclose_r+0x4a>
  4084be:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4084c0:	f7fe ff20 	bl	407304 <__retarget_lock_release_recursive>
  4084c4:	e7ec      	b.n	4084a0 <_fclose_r+0x7c>
  4084c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4084c8:	f7fe ff1a 	bl	407300 <__retarget_lock_acquire_recursive>
  4084cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4084d0:	2b00      	cmp	r3, #0
  4084d2:	d1bb      	bne.n	40844c <_fclose_r+0x28>
  4084d4:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4084d6:	f016 0601 	ands.w	r6, r6, #1
  4084da:	d1b1      	bne.n	408440 <_fclose_r+0x1c>
  4084dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4084de:	f7fe ff11 	bl	407304 <__retarget_lock_release_recursive>
  4084e2:	4630      	mov	r0, r6
  4084e4:	bd70      	pop	{r4, r5, r6, pc}
  4084e6:	bf00      	nop

004084e8 <_fstat_r>:
  4084e8:	b538      	push	{r3, r4, r5, lr}
  4084ea:	460b      	mov	r3, r1
  4084ec:	4c07      	ldr	r4, [pc, #28]	; (40850c <_fstat_r+0x24>)
  4084ee:	4605      	mov	r5, r0
  4084f0:	4611      	mov	r1, r2
  4084f2:	4618      	mov	r0, r3
  4084f4:	2300      	movs	r3, #0
  4084f6:	6023      	str	r3, [r4, #0]
  4084f8:	f7f9 fe8f 	bl	40221a <_fstat>
  4084fc:	1c43      	adds	r3, r0, #1
  4084fe:	d000      	beq.n	408502 <_fstat_r+0x1a>
  408500:	bd38      	pop	{r3, r4, r5, pc}
  408502:	6823      	ldr	r3, [r4, #0]
  408504:	2b00      	cmp	r3, #0
  408506:	d0fb      	beq.n	408500 <_fstat_r+0x18>
  408508:	602b      	str	r3, [r5, #0]
  40850a:	bd38      	pop	{r3, r4, r5, pc}
  40850c:	20400fd8 	.word	0x20400fd8

00408510 <_isatty_r>:
  408510:	b538      	push	{r3, r4, r5, lr}
  408512:	4c07      	ldr	r4, [pc, #28]	; (408530 <_isatty_r+0x20>)
  408514:	2300      	movs	r3, #0
  408516:	4605      	mov	r5, r0
  408518:	4608      	mov	r0, r1
  40851a:	6023      	str	r3, [r4, #0]
  40851c:	f7f9 fe82 	bl	402224 <_isatty>
  408520:	1c43      	adds	r3, r0, #1
  408522:	d000      	beq.n	408526 <_isatty_r+0x16>
  408524:	bd38      	pop	{r3, r4, r5, pc}
  408526:	6823      	ldr	r3, [r4, #0]
  408528:	2b00      	cmp	r3, #0
  40852a:	d0fb      	beq.n	408524 <_isatty_r+0x14>
  40852c:	602b      	str	r3, [r5, #0]
  40852e:	bd38      	pop	{r3, r4, r5, pc}
  408530:	20400fd8 	.word	0x20400fd8

00408534 <_lseek_r>:
  408534:	b570      	push	{r4, r5, r6, lr}
  408536:	460d      	mov	r5, r1
  408538:	4c08      	ldr	r4, [pc, #32]	; (40855c <_lseek_r+0x28>)
  40853a:	4611      	mov	r1, r2
  40853c:	4606      	mov	r6, r0
  40853e:	461a      	mov	r2, r3
  408540:	4628      	mov	r0, r5
  408542:	2300      	movs	r3, #0
  408544:	6023      	str	r3, [r4, #0]
  408546:	f7f9 fe6f 	bl	402228 <_lseek>
  40854a:	1c43      	adds	r3, r0, #1
  40854c:	d000      	beq.n	408550 <_lseek_r+0x1c>
  40854e:	bd70      	pop	{r4, r5, r6, pc}
  408550:	6823      	ldr	r3, [r4, #0]
  408552:	2b00      	cmp	r3, #0
  408554:	d0fb      	beq.n	40854e <_lseek_r+0x1a>
  408556:	6033      	str	r3, [r6, #0]
  408558:	bd70      	pop	{r4, r5, r6, pc}
  40855a:	bf00      	nop
  40855c:	20400fd8 	.word	0x20400fd8

00408560 <_read_r>:
  408560:	b570      	push	{r4, r5, r6, lr}
  408562:	460d      	mov	r5, r1
  408564:	4c08      	ldr	r4, [pc, #32]	; (408588 <_read_r+0x28>)
  408566:	4611      	mov	r1, r2
  408568:	4606      	mov	r6, r0
  40856a:	461a      	mov	r2, r3
  40856c:	4628      	mov	r0, r5
  40856e:	2300      	movs	r3, #0
  408570:	6023      	str	r3, [r4, #0]
  408572:	f7f8 f9d9 	bl	400928 <_read>
  408576:	1c43      	adds	r3, r0, #1
  408578:	d000      	beq.n	40857c <_read_r+0x1c>
  40857a:	bd70      	pop	{r4, r5, r6, pc}
  40857c:	6823      	ldr	r3, [r4, #0]
  40857e:	2b00      	cmp	r3, #0
  408580:	d0fb      	beq.n	40857a <_read_r+0x1a>
  408582:	6033      	str	r3, [r6, #0]
  408584:	bd70      	pop	{r4, r5, r6, pc}
  408586:	bf00      	nop
  408588:	20400fd8 	.word	0x20400fd8

0040858c <__aeabi_drsub>:
  40858c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  408590:	e002      	b.n	408598 <__adddf3>
  408592:	bf00      	nop

00408594 <__aeabi_dsub>:
  408594:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00408598 <__adddf3>:
  408598:	b530      	push	{r4, r5, lr}
  40859a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40859e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4085a2:	ea94 0f05 	teq	r4, r5
  4085a6:	bf08      	it	eq
  4085a8:	ea90 0f02 	teqeq	r0, r2
  4085ac:	bf1f      	itttt	ne
  4085ae:	ea54 0c00 	orrsne.w	ip, r4, r0
  4085b2:	ea55 0c02 	orrsne.w	ip, r5, r2
  4085b6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4085ba:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4085be:	f000 80e2 	beq.w	408786 <__adddf3+0x1ee>
  4085c2:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4085c6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4085ca:	bfb8      	it	lt
  4085cc:	426d      	neglt	r5, r5
  4085ce:	dd0c      	ble.n	4085ea <__adddf3+0x52>
  4085d0:	442c      	add	r4, r5
  4085d2:	ea80 0202 	eor.w	r2, r0, r2
  4085d6:	ea81 0303 	eor.w	r3, r1, r3
  4085da:	ea82 0000 	eor.w	r0, r2, r0
  4085de:	ea83 0101 	eor.w	r1, r3, r1
  4085e2:	ea80 0202 	eor.w	r2, r0, r2
  4085e6:	ea81 0303 	eor.w	r3, r1, r3
  4085ea:	2d36      	cmp	r5, #54	; 0x36
  4085ec:	bf88      	it	hi
  4085ee:	bd30      	pophi	{r4, r5, pc}
  4085f0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4085f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4085f8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4085fc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  408600:	d002      	beq.n	408608 <__adddf3+0x70>
  408602:	4240      	negs	r0, r0
  408604:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  408608:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40860c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  408610:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  408614:	d002      	beq.n	40861c <__adddf3+0x84>
  408616:	4252      	negs	r2, r2
  408618:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40861c:	ea94 0f05 	teq	r4, r5
  408620:	f000 80a7 	beq.w	408772 <__adddf3+0x1da>
  408624:	f1a4 0401 	sub.w	r4, r4, #1
  408628:	f1d5 0e20 	rsbs	lr, r5, #32
  40862c:	db0d      	blt.n	40864a <__adddf3+0xb2>
  40862e:	fa02 fc0e 	lsl.w	ip, r2, lr
  408632:	fa22 f205 	lsr.w	r2, r2, r5
  408636:	1880      	adds	r0, r0, r2
  408638:	f141 0100 	adc.w	r1, r1, #0
  40863c:	fa03 f20e 	lsl.w	r2, r3, lr
  408640:	1880      	adds	r0, r0, r2
  408642:	fa43 f305 	asr.w	r3, r3, r5
  408646:	4159      	adcs	r1, r3
  408648:	e00e      	b.n	408668 <__adddf3+0xd0>
  40864a:	f1a5 0520 	sub.w	r5, r5, #32
  40864e:	f10e 0e20 	add.w	lr, lr, #32
  408652:	2a01      	cmp	r2, #1
  408654:	fa03 fc0e 	lsl.w	ip, r3, lr
  408658:	bf28      	it	cs
  40865a:	f04c 0c02 	orrcs.w	ip, ip, #2
  40865e:	fa43 f305 	asr.w	r3, r3, r5
  408662:	18c0      	adds	r0, r0, r3
  408664:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  408668:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40866c:	d507      	bpl.n	40867e <__adddf3+0xe6>
  40866e:	f04f 0e00 	mov.w	lr, #0
  408672:	f1dc 0c00 	rsbs	ip, ip, #0
  408676:	eb7e 0000 	sbcs.w	r0, lr, r0
  40867a:	eb6e 0101 	sbc.w	r1, lr, r1
  40867e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  408682:	d31b      	bcc.n	4086bc <__adddf3+0x124>
  408684:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  408688:	d30c      	bcc.n	4086a4 <__adddf3+0x10c>
  40868a:	0849      	lsrs	r1, r1, #1
  40868c:	ea5f 0030 	movs.w	r0, r0, rrx
  408690:	ea4f 0c3c 	mov.w	ip, ip, rrx
  408694:	f104 0401 	add.w	r4, r4, #1
  408698:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40869c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  4086a0:	f080 809a 	bcs.w	4087d8 <__adddf3+0x240>
  4086a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4086a8:	bf08      	it	eq
  4086aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4086ae:	f150 0000 	adcs.w	r0, r0, #0
  4086b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4086b6:	ea41 0105 	orr.w	r1, r1, r5
  4086ba:	bd30      	pop	{r4, r5, pc}
  4086bc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4086c0:	4140      	adcs	r0, r0
  4086c2:	eb41 0101 	adc.w	r1, r1, r1
  4086c6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4086ca:	f1a4 0401 	sub.w	r4, r4, #1
  4086ce:	d1e9      	bne.n	4086a4 <__adddf3+0x10c>
  4086d0:	f091 0f00 	teq	r1, #0
  4086d4:	bf04      	itt	eq
  4086d6:	4601      	moveq	r1, r0
  4086d8:	2000      	moveq	r0, #0
  4086da:	fab1 f381 	clz	r3, r1
  4086de:	bf08      	it	eq
  4086e0:	3320      	addeq	r3, #32
  4086e2:	f1a3 030b 	sub.w	r3, r3, #11
  4086e6:	f1b3 0220 	subs.w	r2, r3, #32
  4086ea:	da0c      	bge.n	408706 <__adddf3+0x16e>
  4086ec:	320c      	adds	r2, #12
  4086ee:	dd08      	ble.n	408702 <__adddf3+0x16a>
  4086f0:	f102 0c14 	add.w	ip, r2, #20
  4086f4:	f1c2 020c 	rsb	r2, r2, #12
  4086f8:	fa01 f00c 	lsl.w	r0, r1, ip
  4086fc:	fa21 f102 	lsr.w	r1, r1, r2
  408700:	e00c      	b.n	40871c <__adddf3+0x184>
  408702:	f102 0214 	add.w	r2, r2, #20
  408706:	bfd8      	it	le
  408708:	f1c2 0c20 	rsble	ip, r2, #32
  40870c:	fa01 f102 	lsl.w	r1, r1, r2
  408710:	fa20 fc0c 	lsr.w	ip, r0, ip
  408714:	bfdc      	itt	le
  408716:	ea41 010c 	orrle.w	r1, r1, ip
  40871a:	4090      	lslle	r0, r2
  40871c:	1ae4      	subs	r4, r4, r3
  40871e:	bfa2      	ittt	ge
  408720:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  408724:	4329      	orrge	r1, r5
  408726:	bd30      	popge	{r4, r5, pc}
  408728:	ea6f 0404 	mvn.w	r4, r4
  40872c:	3c1f      	subs	r4, #31
  40872e:	da1c      	bge.n	40876a <__adddf3+0x1d2>
  408730:	340c      	adds	r4, #12
  408732:	dc0e      	bgt.n	408752 <__adddf3+0x1ba>
  408734:	f104 0414 	add.w	r4, r4, #20
  408738:	f1c4 0220 	rsb	r2, r4, #32
  40873c:	fa20 f004 	lsr.w	r0, r0, r4
  408740:	fa01 f302 	lsl.w	r3, r1, r2
  408744:	ea40 0003 	orr.w	r0, r0, r3
  408748:	fa21 f304 	lsr.w	r3, r1, r4
  40874c:	ea45 0103 	orr.w	r1, r5, r3
  408750:	bd30      	pop	{r4, r5, pc}
  408752:	f1c4 040c 	rsb	r4, r4, #12
  408756:	f1c4 0220 	rsb	r2, r4, #32
  40875a:	fa20 f002 	lsr.w	r0, r0, r2
  40875e:	fa01 f304 	lsl.w	r3, r1, r4
  408762:	ea40 0003 	orr.w	r0, r0, r3
  408766:	4629      	mov	r1, r5
  408768:	bd30      	pop	{r4, r5, pc}
  40876a:	fa21 f004 	lsr.w	r0, r1, r4
  40876e:	4629      	mov	r1, r5
  408770:	bd30      	pop	{r4, r5, pc}
  408772:	f094 0f00 	teq	r4, #0
  408776:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40877a:	bf06      	itte	eq
  40877c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  408780:	3401      	addeq	r4, #1
  408782:	3d01      	subne	r5, #1
  408784:	e74e      	b.n	408624 <__adddf3+0x8c>
  408786:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40878a:	bf18      	it	ne
  40878c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  408790:	d029      	beq.n	4087e6 <__adddf3+0x24e>
  408792:	ea94 0f05 	teq	r4, r5
  408796:	bf08      	it	eq
  408798:	ea90 0f02 	teqeq	r0, r2
  40879c:	d005      	beq.n	4087aa <__adddf3+0x212>
  40879e:	ea54 0c00 	orrs.w	ip, r4, r0
  4087a2:	bf04      	itt	eq
  4087a4:	4619      	moveq	r1, r3
  4087a6:	4610      	moveq	r0, r2
  4087a8:	bd30      	pop	{r4, r5, pc}
  4087aa:	ea91 0f03 	teq	r1, r3
  4087ae:	bf1e      	ittt	ne
  4087b0:	2100      	movne	r1, #0
  4087b2:	2000      	movne	r0, #0
  4087b4:	bd30      	popne	{r4, r5, pc}
  4087b6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  4087ba:	d105      	bne.n	4087c8 <__adddf3+0x230>
  4087bc:	0040      	lsls	r0, r0, #1
  4087be:	4149      	adcs	r1, r1
  4087c0:	bf28      	it	cs
  4087c2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4087c6:	bd30      	pop	{r4, r5, pc}
  4087c8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  4087cc:	bf3c      	itt	cc
  4087ce:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  4087d2:	bd30      	popcc	{r4, r5, pc}
  4087d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4087d8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4087dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4087e0:	f04f 0000 	mov.w	r0, #0
  4087e4:	bd30      	pop	{r4, r5, pc}
  4087e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4087ea:	bf1a      	itte	ne
  4087ec:	4619      	movne	r1, r3
  4087ee:	4610      	movne	r0, r2
  4087f0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4087f4:	bf1c      	itt	ne
  4087f6:	460b      	movne	r3, r1
  4087f8:	4602      	movne	r2, r0
  4087fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4087fe:	bf06      	itte	eq
  408800:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  408804:	ea91 0f03 	teqeq	r1, r3
  408808:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40880c:	bd30      	pop	{r4, r5, pc}
  40880e:	bf00      	nop

00408810 <__aeabi_ui2d>:
  408810:	f090 0f00 	teq	r0, #0
  408814:	bf04      	itt	eq
  408816:	2100      	moveq	r1, #0
  408818:	4770      	bxeq	lr
  40881a:	b530      	push	{r4, r5, lr}
  40881c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  408820:	f104 0432 	add.w	r4, r4, #50	; 0x32
  408824:	f04f 0500 	mov.w	r5, #0
  408828:	f04f 0100 	mov.w	r1, #0
  40882c:	e750      	b.n	4086d0 <__adddf3+0x138>
  40882e:	bf00      	nop

00408830 <__aeabi_i2d>:
  408830:	f090 0f00 	teq	r0, #0
  408834:	bf04      	itt	eq
  408836:	2100      	moveq	r1, #0
  408838:	4770      	bxeq	lr
  40883a:	b530      	push	{r4, r5, lr}
  40883c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  408840:	f104 0432 	add.w	r4, r4, #50	; 0x32
  408844:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  408848:	bf48      	it	mi
  40884a:	4240      	negmi	r0, r0
  40884c:	f04f 0100 	mov.w	r1, #0
  408850:	e73e      	b.n	4086d0 <__adddf3+0x138>
  408852:	bf00      	nop

00408854 <__aeabi_f2d>:
  408854:	0042      	lsls	r2, r0, #1
  408856:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40885a:	ea4f 0131 	mov.w	r1, r1, rrx
  40885e:	ea4f 7002 	mov.w	r0, r2, lsl #28
  408862:	bf1f      	itttt	ne
  408864:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  408868:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40886c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  408870:	4770      	bxne	lr
  408872:	f092 0f00 	teq	r2, #0
  408876:	bf14      	ite	ne
  408878:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40887c:	4770      	bxeq	lr
  40887e:	b530      	push	{r4, r5, lr}
  408880:	f44f 7460 	mov.w	r4, #896	; 0x380
  408884:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  408888:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40888c:	e720      	b.n	4086d0 <__adddf3+0x138>
  40888e:	bf00      	nop

00408890 <__aeabi_ul2d>:
  408890:	ea50 0201 	orrs.w	r2, r0, r1
  408894:	bf08      	it	eq
  408896:	4770      	bxeq	lr
  408898:	b530      	push	{r4, r5, lr}
  40889a:	f04f 0500 	mov.w	r5, #0
  40889e:	e00a      	b.n	4088b6 <__aeabi_l2d+0x16>

004088a0 <__aeabi_l2d>:
  4088a0:	ea50 0201 	orrs.w	r2, r0, r1
  4088a4:	bf08      	it	eq
  4088a6:	4770      	bxeq	lr
  4088a8:	b530      	push	{r4, r5, lr}
  4088aa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4088ae:	d502      	bpl.n	4088b6 <__aeabi_l2d+0x16>
  4088b0:	4240      	negs	r0, r0
  4088b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4088b6:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4088ba:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4088be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4088c2:	f43f aedc 	beq.w	40867e <__adddf3+0xe6>
  4088c6:	f04f 0203 	mov.w	r2, #3
  4088ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4088ce:	bf18      	it	ne
  4088d0:	3203      	addne	r2, #3
  4088d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4088d6:	bf18      	it	ne
  4088d8:	3203      	addne	r2, #3
  4088da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4088de:	f1c2 0320 	rsb	r3, r2, #32
  4088e2:	fa00 fc03 	lsl.w	ip, r0, r3
  4088e6:	fa20 f002 	lsr.w	r0, r0, r2
  4088ea:	fa01 fe03 	lsl.w	lr, r1, r3
  4088ee:	ea40 000e 	orr.w	r0, r0, lr
  4088f2:	fa21 f102 	lsr.w	r1, r1, r2
  4088f6:	4414      	add	r4, r2
  4088f8:	e6c1      	b.n	40867e <__adddf3+0xe6>
  4088fa:	bf00      	nop

004088fc <__aeabi_dmul>:
  4088fc:	b570      	push	{r4, r5, r6, lr}
  4088fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
  408902:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  408906:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40890a:	bf1d      	ittte	ne
  40890c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  408910:	ea94 0f0c 	teqne	r4, ip
  408914:	ea95 0f0c 	teqne	r5, ip
  408918:	f000 f8de 	bleq	408ad8 <__aeabi_dmul+0x1dc>
  40891c:	442c      	add	r4, r5
  40891e:	ea81 0603 	eor.w	r6, r1, r3
  408922:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  408926:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40892a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40892e:	bf18      	it	ne
  408930:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  408934:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408938:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40893c:	d038      	beq.n	4089b0 <__aeabi_dmul+0xb4>
  40893e:	fba0 ce02 	umull	ip, lr, r0, r2
  408942:	f04f 0500 	mov.w	r5, #0
  408946:	fbe1 e502 	umlal	lr, r5, r1, r2
  40894a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40894e:	fbe0 e503 	umlal	lr, r5, r0, r3
  408952:	f04f 0600 	mov.w	r6, #0
  408956:	fbe1 5603 	umlal	r5, r6, r1, r3
  40895a:	f09c 0f00 	teq	ip, #0
  40895e:	bf18      	it	ne
  408960:	f04e 0e01 	orrne.w	lr, lr, #1
  408964:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  408968:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40896c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  408970:	d204      	bcs.n	40897c <__aeabi_dmul+0x80>
  408972:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  408976:	416d      	adcs	r5, r5
  408978:	eb46 0606 	adc.w	r6, r6, r6
  40897c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  408980:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  408984:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  408988:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40898c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  408990:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  408994:	bf88      	it	hi
  408996:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40899a:	d81e      	bhi.n	4089da <__aeabi_dmul+0xde>
  40899c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  4089a0:	bf08      	it	eq
  4089a2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  4089a6:	f150 0000 	adcs.w	r0, r0, #0
  4089aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4089ae:	bd70      	pop	{r4, r5, r6, pc}
  4089b0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4089b4:	ea46 0101 	orr.w	r1, r6, r1
  4089b8:	ea40 0002 	orr.w	r0, r0, r2
  4089bc:	ea81 0103 	eor.w	r1, r1, r3
  4089c0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4089c4:	bfc2      	ittt	gt
  4089c6:	ebd4 050c 	rsbsgt	r5, r4, ip
  4089ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4089ce:	bd70      	popgt	{r4, r5, r6, pc}
  4089d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4089d4:	f04f 0e00 	mov.w	lr, #0
  4089d8:	3c01      	subs	r4, #1
  4089da:	f300 80ab 	bgt.w	408b34 <__aeabi_dmul+0x238>
  4089de:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4089e2:	bfde      	ittt	le
  4089e4:	2000      	movle	r0, #0
  4089e6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4089ea:	bd70      	pople	{r4, r5, r6, pc}
  4089ec:	f1c4 0400 	rsb	r4, r4, #0
  4089f0:	3c20      	subs	r4, #32
  4089f2:	da35      	bge.n	408a60 <__aeabi_dmul+0x164>
  4089f4:	340c      	adds	r4, #12
  4089f6:	dc1b      	bgt.n	408a30 <__aeabi_dmul+0x134>
  4089f8:	f104 0414 	add.w	r4, r4, #20
  4089fc:	f1c4 0520 	rsb	r5, r4, #32
  408a00:	fa00 f305 	lsl.w	r3, r0, r5
  408a04:	fa20 f004 	lsr.w	r0, r0, r4
  408a08:	fa01 f205 	lsl.w	r2, r1, r5
  408a0c:	ea40 0002 	orr.w	r0, r0, r2
  408a10:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  408a14:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  408a18:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  408a1c:	fa21 f604 	lsr.w	r6, r1, r4
  408a20:	eb42 0106 	adc.w	r1, r2, r6
  408a24:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  408a28:	bf08      	it	eq
  408a2a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  408a2e:	bd70      	pop	{r4, r5, r6, pc}
  408a30:	f1c4 040c 	rsb	r4, r4, #12
  408a34:	f1c4 0520 	rsb	r5, r4, #32
  408a38:	fa00 f304 	lsl.w	r3, r0, r4
  408a3c:	fa20 f005 	lsr.w	r0, r0, r5
  408a40:	fa01 f204 	lsl.w	r2, r1, r4
  408a44:	ea40 0002 	orr.w	r0, r0, r2
  408a48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408a4c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  408a50:	f141 0100 	adc.w	r1, r1, #0
  408a54:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  408a58:	bf08      	it	eq
  408a5a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  408a5e:	bd70      	pop	{r4, r5, r6, pc}
  408a60:	f1c4 0520 	rsb	r5, r4, #32
  408a64:	fa00 f205 	lsl.w	r2, r0, r5
  408a68:	ea4e 0e02 	orr.w	lr, lr, r2
  408a6c:	fa20 f304 	lsr.w	r3, r0, r4
  408a70:	fa01 f205 	lsl.w	r2, r1, r5
  408a74:	ea43 0302 	orr.w	r3, r3, r2
  408a78:	fa21 f004 	lsr.w	r0, r1, r4
  408a7c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408a80:	fa21 f204 	lsr.w	r2, r1, r4
  408a84:	ea20 0002 	bic.w	r0, r0, r2
  408a88:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  408a8c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  408a90:	bf08      	it	eq
  408a92:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  408a96:	bd70      	pop	{r4, r5, r6, pc}
  408a98:	f094 0f00 	teq	r4, #0
  408a9c:	d10f      	bne.n	408abe <__aeabi_dmul+0x1c2>
  408a9e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  408aa2:	0040      	lsls	r0, r0, #1
  408aa4:	eb41 0101 	adc.w	r1, r1, r1
  408aa8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408aac:	bf08      	it	eq
  408aae:	3c01      	subeq	r4, #1
  408ab0:	d0f7      	beq.n	408aa2 <__aeabi_dmul+0x1a6>
  408ab2:	ea41 0106 	orr.w	r1, r1, r6
  408ab6:	f095 0f00 	teq	r5, #0
  408aba:	bf18      	it	ne
  408abc:	4770      	bxne	lr
  408abe:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  408ac2:	0052      	lsls	r2, r2, #1
  408ac4:	eb43 0303 	adc.w	r3, r3, r3
  408ac8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  408acc:	bf08      	it	eq
  408ace:	3d01      	subeq	r5, #1
  408ad0:	d0f7      	beq.n	408ac2 <__aeabi_dmul+0x1c6>
  408ad2:	ea43 0306 	orr.w	r3, r3, r6
  408ad6:	4770      	bx	lr
  408ad8:	ea94 0f0c 	teq	r4, ip
  408adc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  408ae0:	bf18      	it	ne
  408ae2:	ea95 0f0c 	teqne	r5, ip
  408ae6:	d00c      	beq.n	408b02 <__aeabi_dmul+0x206>
  408ae8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  408aec:	bf18      	it	ne
  408aee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  408af2:	d1d1      	bne.n	408a98 <__aeabi_dmul+0x19c>
  408af4:	ea81 0103 	eor.w	r1, r1, r3
  408af8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408afc:	f04f 0000 	mov.w	r0, #0
  408b00:	bd70      	pop	{r4, r5, r6, pc}
  408b02:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  408b06:	bf06      	itte	eq
  408b08:	4610      	moveq	r0, r2
  408b0a:	4619      	moveq	r1, r3
  408b0c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  408b10:	d019      	beq.n	408b46 <__aeabi_dmul+0x24a>
  408b12:	ea94 0f0c 	teq	r4, ip
  408b16:	d102      	bne.n	408b1e <__aeabi_dmul+0x222>
  408b18:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  408b1c:	d113      	bne.n	408b46 <__aeabi_dmul+0x24a>
  408b1e:	ea95 0f0c 	teq	r5, ip
  408b22:	d105      	bne.n	408b30 <__aeabi_dmul+0x234>
  408b24:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  408b28:	bf1c      	itt	ne
  408b2a:	4610      	movne	r0, r2
  408b2c:	4619      	movne	r1, r3
  408b2e:	d10a      	bne.n	408b46 <__aeabi_dmul+0x24a>
  408b30:	ea81 0103 	eor.w	r1, r1, r3
  408b34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408b38:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  408b3c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  408b40:	f04f 0000 	mov.w	r0, #0
  408b44:	bd70      	pop	{r4, r5, r6, pc}
  408b46:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  408b4a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  408b4e:	bd70      	pop	{r4, r5, r6, pc}

00408b50 <__aeabi_ddiv>:
  408b50:	b570      	push	{r4, r5, r6, lr}
  408b52:	f04f 0cff 	mov.w	ip, #255	; 0xff
  408b56:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  408b5a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  408b5e:	bf1d      	ittte	ne
  408b60:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  408b64:	ea94 0f0c 	teqne	r4, ip
  408b68:	ea95 0f0c 	teqne	r5, ip
  408b6c:	f000 f8a7 	bleq	408cbe <__aeabi_ddiv+0x16e>
  408b70:	eba4 0405 	sub.w	r4, r4, r5
  408b74:	ea81 0e03 	eor.w	lr, r1, r3
  408b78:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  408b7c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  408b80:	f000 8088 	beq.w	408c94 <__aeabi_ddiv+0x144>
  408b84:	ea4f 3303 	mov.w	r3, r3, lsl #12
  408b88:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  408b8c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  408b90:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  408b94:	ea4f 2202 	mov.w	r2, r2, lsl #8
  408b98:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  408b9c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  408ba0:	ea4f 2600 	mov.w	r6, r0, lsl #8
  408ba4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  408ba8:	429d      	cmp	r5, r3
  408baa:	bf08      	it	eq
  408bac:	4296      	cmpeq	r6, r2
  408bae:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  408bb2:	f504 7440 	add.w	r4, r4, #768	; 0x300
  408bb6:	d202      	bcs.n	408bbe <__aeabi_ddiv+0x6e>
  408bb8:	085b      	lsrs	r3, r3, #1
  408bba:	ea4f 0232 	mov.w	r2, r2, rrx
  408bbe:	1ab6      	subs	r6, r6, r2
  408bc0:	eb65 0503 	sbc.w	r5, r5, r3
  408bc4:	085b      	lsrs	r3, r3, #1
  408bc6:	ea4f 0232 	mov.w	r2, r2, rrx
  408bca:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  408bce:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  408bd2:	ebb6 0e02 	subs.w	lr, r6, r2
  408bd6:	eb75 0e03 	sbcs.w	lr, r5, r3
  408bda:	bf22      	ittt	cs
  408bdc:	1ab6      	subcs	r6, r6, r2
  408bde:	4675      	movcs	r5, lr
  408be0:	ea40 000c 	orrcs.w	r0, r0, ip
  408be4:	085b      	lsrs	r3, r3, #1
  408be6:	ea4f 0232 	mov.w	r2, r2, rrx
  408bea:	ebb6 0e02 	subs.w	lr, r6, r2
  408bee:	eb75 0e03 	sbcs.w	lr, r5, r3
  408bf2:	bf22      	ittt	cs
  408bf4:	1ab6      	subcs	r6, r6, r2
  408bf6:	4675      	movcs	r5, lr
  408bf8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  408bfc:	085b      	lsrs	r3, r3, #1
  408bfe:	ea4f 0232 	mov.w	r2, r2, rrx
  408c02:	ebb6 0e02 	subs.w	lr, r6, r2
  408c06:	eb75 0e03 	sbcs.w	lr, r5, r3
  408c0a:	bf22      	ittt	cs
  408c0c:	1ab6      	subcs	r6, r6, r2
  408c0e:	4675      	movcs	r5, lr
  408c10:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  408c14:	085b      	lsrs	r3, r3, #1
  408c16:	ea4f 0232 	mov.w	r2, r2, rrx
  408c1a:	ebb6 0e02 	subs.w	lr, r6, r2
  408c1e:	eb75 0e03 	sbcs.w	lr, r5, r3
  408c22:	bf22      	ittt	cs
  408c24:	1ab6      	subcs	r6, r6, r2
  408c26:	4675      	movcs	r5, lr
  408c28:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  408c2c:	ea55 0e06 	orrs.w	lr, r5, r6
  408c30:	d018      	beq.n	408c64 <__aeabi_ddiv+0x114>
  408c32:	ea4f 1505 	mov.w	r5, r5, lsl #4
  408c36:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  408c3a:	ea4f 1606 	mov.w	r6, r6, lsl #4
  408c3e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  408c42:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  408c46:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  408c4a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  408c4e:	d1c0      	bne.n	408bd2 <__aeabi_ddiv+0x82>
  408c50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408c54:	d10b      	bne.n	408c6e <__aeabi_ddiv+0x11e>
  408c56:	ea41 0100 	orr.w	r1, r1, r0
  408c5a:	f04f 0000 	mov.w	r0, #0
  408c5e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  408c62:	e7b6      	b.n	408bd2 <__aeabi_ddiv+0x82>
  408c64:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408c68:	bf04      	itt	eq
  408c6a:	4301      	orreq	r1, r0
  408c6c:	2000      	moveq	r0, #0
  408c6e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  408c72:	bf88      	it	hi
  408c74:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  408c78:	f63f aeaf 	bhi.w	4089da <__aeabi_dmul+0xde>
  408c7c:	ebb5 0c03 	subs.w	ip, r5, r3
  408c80:	bf04      	itt	eq
  408c82:	ebb6 0c02 	subseq.w	ip, r6, r2
  408c86:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  408c8a:	f150 0000 	adcs.w	r0, r0, #0
  408c8e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  408c92:	bd70      	pop	{r4, r5, r6, pc}
  408c94:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  408c98:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  408c9c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  408ca0:	bfc2      	ittt	gt
  408ca2:	ebd4 050c 	rsbsgt	r5, r4, ip
  408ca6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  408caa:	bd70      	popgt	{r4, r5, r6, pc}
  408cac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408cb0:	f04f 0e00 	mov.w	lr, #0
  408cb4:	3c01      	subs	r4, #1
  408cb6:	e690      	b.n	4089da <__aeabi_dmul+0xde>
  408cb8:	ea45 0e06 	orr.w	lr, r5, r6
  408cbc:	e68d      	b.n	4089da <__aeabi_dmul+0xde>
  408cbe:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  408cc2:	ea94 0f0c 	teq	r4, ip
  408cc6:	bf08      	it	eq
  408cc8:	ea95 0f0c 	teqeq	r5, ip
  408ccc:	f43f af3b 	beq.w	408b46 <__aeabi_dmul+0x24a>
  408cd0:	ea94 0f0c 	teq	r4, ip
  408cd4:	d10a      	bne.n	408cec <__aeabi_ddiv+0x19c>
  408cd6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  408cda:	f47f af34 	bne.w	408b46 <__aeabi_dmul+0x24a>
  408cde:	ea95 0f0c 	teq	r5, ip
  408ce2:	f47f af25 	bne.w	408b30 <__aeabi_dmul+0x234>
  408ce6:	4610      	mov	r0, r2
  408ce8:	4619      	mov	r1, r3
  408cea:	e72c      	b.n	408b46 <__aeabi_dmul+0x24a>
  408cec:	ea95 0f0c 	teq	r5, ip
  408cf0:	d106      	bne.n	408d00 <__aeabi_ddiv+0x1b0>
  408cf2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  408cf6:	f43f aefd 	beq.w	408af4 <__aeabi_dmul+0x1f8>
  408cfa:	4610      	mov	r0, r2
  408cfc:	4619      	mov	r1, r3
  408cfe:	e722      	b.n	408b46 <__aeabi_dmul+0x24a>
  408d00:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  408d04:	bf18      	it	ne
  408d06:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  408d0a:	f47f aec5 	bne.w	408a98 <__aeabi_dmul+0x19c>
  408d0e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  408d12:	f47f af0d 	bne.w	408b30 <__aeabi_dmul+0x234>
  408d16:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  408d1a:	f47f aeeb 	bne.w	408af4 <__aeabi_dmul+0x1f8>
  408d1e:	e712      	b.n	408b46 <__aeabi_dmul+0x24a>

00408d20 <__gedf2>:
  408d20:	f04f 3cff 	mov.w	ip, #4294967295
  408d24:	e006      	b.n	408d34 <__cmpdf2+0x4>
  408d26:	bf00      	nop

00408d28 <__ledf2>:
  408d28:	f04f 0c01 	mov.w	ip, #1
  408d2c:	e002      	b.n	408d34 <__cmpdf2+0x4>
  408d2e:	bf00      	nop

00408d30 <__cmpdf2>:
  408d30:	f04f 0c01 	mov.w	ip, #1
  408d34:	f84d cd04 	str.w	ip, [sp, #-4]!
  408d38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408d3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408d40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408d44:	bf18      	it	ne
  408d46:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  408d4a:	d01b      	beq.n	408d84 <__cmpdf2+0x54>
  408d4c:	b001      	add	sp, #4
  408d4e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  408d52:	bf0c      	ite	eq
  408d54:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  408d58:	ea91 0f03 	teqne	r1, r3
  408d5c:	bf02      	ittt	eq
  408d5e:	ea90 0f02 	teqeq	r0, r2
  408d62:	2000      	moveq	r0, #0
  408d64:	4770      	bxeq	lr
  408d66:	f110 0f00 	cmn.w	r0, #0
  408d6a:	ea91 0f03 	teq	r1, r3
  408d6e:	bf58      	it	pl
  408d70:	4299      	cmppl	r1, r3
  408d72:	bf08      	it	eq
  408d74:	4290      	cmpeq	r0, r2
  408d76:	bf2c      	ite	cs
  408d78:	17d8      	asrcs	r0, r3, #31
  408d7a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  408d7e:	f040 0001 	orr.w	r0, r0, #1
  408d82:	4770      	bx	lr
  408d84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408d88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408d8c:	d102      	bne.n	408d94 <__cmpdf2+0x64>
  408d8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  408d92:	d107      	bne.n	408da4 <__cmpdf2+0x74>
  408d94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408d98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408d9c:	d1d6      	bne.n	408d4c <__cmpdf2+0x1c>
  408d9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  408da2:	d0d3      	beq.n	408d4c <__cmpdf2+0x1c>
  408da4:	f85d 0b04 	ldr.w	r0, [sp], #4
  408da8:	4770      	bx	lr
  408daa:	bf00      	nop

00408dac <__aeabi_cdrcmple>:
  408dac:	4684      	mov	ip, r0
  408dae:	4610      	mov	r0, r2
  408db0:	4662      	mov	r2, ip
  408db2:	468c      	mov	ip, r1
  408db4:	4619      	mov	r1, r3
  408db6:	4663      	mov	r3, ip
  408db8:	e000      	b.n	408dbc <__aeabi_cdcmpeq>
  408dba:	bf00      	nop

00408dbc <__aeabi_cdcmpeq>:
  408dbc:	b501      	push	{r0, lr}
  408dbe:	f7ff ffb7 	bl	408d30 <__cmpdf2>
  408dc2:	2800      	cmp	r0, #0
  408dc4:	bf48      	it	mi
  408dc6:	f110 0f00 	cmnmi.w	r0, #0
  408dca:	bd01      	pop	{r0, pc}

00408dcc <__aeabi_dcmpeq>:
  408dcc:	f84d ed08 	str.w	lr, [sp, #-8]!
  408dd0:	f7ff fff4 	bl	408dbc <__aeabi_cdcmpeq>
  408dd4:	bf0c      	ite	eq
  408dd6:	2001      	moveq	r0, #1
  408dd8:	2000      	movne	r0, #0
  408dda:	f85d fb08 	ldr.w	pc, [sp], #8
  408dde:	bf00      	nop

00408de0 <__aeabi_dcmplt>:
  408de0:	f84d ed08 	str.w	lr, [sp, #-8]!
  408de4:	f7ff ffea 	bl	408dbc <__aeabi_cdcmpeq>
  408de8:	bf34      	ite	cc
  408dea:	2001      	movcc	r0, #1
  408dec:	2000      	movcs	r0, #0
  408dee:	f85d fb08 	ldr.w	pc, [sp], #8
  408df2:	bf00      	nop

00408df4 <__aeabi_dcmple>:
  408df4:	f84d ed08 	str.w	lr, [sp, #-8]!
  408df8:	f7ff ffe0 	bl	408dbc <__aeabi_cdcmpeq>
  408dfc:	bf94      	ite	ls
  408dfe:	2001      	movls	r0, #1
  408e00:	2000      	movhi	r0, #0
  408e02:	f85d fb08 	ldr.w	pc, [sp], #8
  408e06:	bf00      	nop

00408e08 <__aeabi_dcmpge>:
  408e08:	f84d ed08 	str.w	lr, [sp, #-8]!
  408e0c:	f7ff ffce 	bl	408dac <__aeabi_cdrcmple>
  408e10:	bf94      	ite	ls
  408e12:	2001      	movls	r0, #1
  408e14:	2000      	movhi	r0, #0
  408e16:	f85d fb08 	ldr.w	pc, [sp], #8
  408e1a:	bf00      	nop

00408e1c <__aeabi_dcmpgt>:
  408e1c:	f84d ed08 	str.w	lr, [sp, #-8]!
  408e20:	f7ff ffc4 	bl	408dac <__aeabi_cdrcmple>
  408e24:	bf34      	ite	cc
  408e26:	2001      	movcc	r0, #1
  408e28:	2000      	movcs	r0, #0
  408e2a:	f85d fb08 	ldr.w	pc, [sp], #8
  408e2e:	bf00      	nop

00408e30 <__aeabi_dcmpun>:
  408e30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408e34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408e38:	d102      	bne.n	408e40 <__aeabi_dcmpun+0x10>
  408e3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  408e3e:	d10a      	bne.n	408e56 <__aeabi_dcmpun+0x26>
  408e40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408e44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408e48:	d102      	bne.n	408e50 <__aeabi_dcmpun+0x20>
  408e4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  408e4e:	d102      	bne.n	408e56 <__aeabi_dcmpun+0x26>
  408e50:	f04f 0000 	mov.w	r0, #0
  408e54:	4770      	bx	lr
  408e56:	f04f 0001 	mov.w	r0, #1
  408e5a:	4770      	bx	lr

00408e5c <__aeabi_d2iz>:
  408e5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  408e60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  408e64:	d215      	bcs.n	408e92 <__aeabi_d2iz+0x36>
  408e66:	d511      	bpl.n	408e8c <__aeabi_d2iz+0x30>
  408e68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  408e6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  408e70:	d912      	bls.n	408e98 <__aeabi_d2iz+0x3c>
  408e72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  408e76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  408e7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  408e7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  408e82:	fa23 f002 	lsr.w	r0, r3, r2
  408e86:	bf18      	it	ne
  408e88:	4240      	negne	r0, r0
  408e8a:	4770      	bx	lr
  408e8c:	f04f 0000 	mov.w	r0, #0
  408e90:	4770      	bx	lr
  408e92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  408e96:	d105      	bne.n	408ea4 <__aeabi_d2iz+0x48>
  408e98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  408e9c:	bf08      	it	eq
  408e9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  408ea2:	4770      	bx	lr
  408ea4:	f04f 0000 	mov.w	r0, #0
  408ea8:	4770      	bx	lr
  408eaa:	bf00      	nop

00408eac <__aeabi_uldivmod>:
  408eac:	b953      	cbnz	r3, 408ec4 <__aeabi_uldivmod+0x18>
  408eae:	b94a      	cbnz	r2, 408ec4 <__aeabi_uldivmod+0x18>
  408eb0:	2900      	cmp	r1, #0
  408eb2:	bf08      	it	eq
  408eb4:	2800      	cmpeq	r0, #0
  408eb6:	bf1c      	itt	ne
  408eb8:	f04f 31ff 	movne.w	r1, #4294967295
  408ebc:	f04f 30ff 	movne.w	r0, #4294967295
  408ec0:	f000 b97a 	b.w	4091b8 <__aeabi_idiv0>
  408ec4:	f1ad 0c08 	sub.w	ip, sp, #8
  408ec8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  408ecc:	f000 f806 	bl	408edc <__udivmoddi4>
  408ed0:	f8dd e004 	ldr.w	lr, [sp, #4]
  408ed4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  408ed8:	b004      	add	sp, #16
  408eda:	4770      	bx	lr

00408edc <__udivmoddi4>:
  408edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408ee0:	468c      	mov	ip, r1
  408ee2:	460d      	mov	r5, r1
  408ee4:	4604      	mov	r4, r0
  408ee6:	9e08      	ldr	r6, [sp, #32]
  408ee8:	2b00      	cmp	r3, #0
  408eea:	d151      	bne.n	408f90 <__udivmoddi4+0xb4>
  408eec:	428a      	cmp	r2, r1
  408eee:	4617      	mov	r7, r2
  408ef0:	d96d      	bls.n	408fce <__udivmoddi4+0xf2>
  408ef2:	fab2 fe82 	clz	lr, r2
  408ef6:	f1be 0f00 	cmp.w	lr, #0
  408efa:	d00b      	beq.n	408f14 <__udivmoddi4+0x38>
  408efc:	f1ce 0c20 	rsb	ip, lr, #32
  408f00:	fa01 f50e 	lsl.w	r5, r1, lr
  408f04:	fa20 fc0c 	lsr.w	ip, r0, ip
  408f08:	fa02 f70e 	lsl.w	r7, r2, lr
  408f0c:	ea4c 0c05 	orr.w	ip, ip, r5
  408f10:	fa00 f40e 	lsl.w	r4, r0, lr
  408f14:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  408f18:	0c25      	lsrs	r5, r4, #16
  408f1a:	fbbc f8fa 	udiv	r8, ip, sl
  408f1e:	fa1f f987 	uxth.w	r9, r7
  408f22:	fb0a cc18 	mls	ip, sl, r8, ip
  408f26:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  408f2a:	fb08 f309 	mul.w	r3, r8, r9
  408f2e:	42ab      	cmp	r3, r5
  408f30:	d90a      	bls.n	408f48 <__udivmoddi4+0x6c>
  408f32:	19ed      	adds	r5, r5, r7
  408f34:	f108 32ff 	add.w	r2, r8, #4294967295
  408f38:	f080 8123 	bcs.w	409182 <__udivmoddi4+0x2a6>
  408f3c:	42ab      	cmp	r3, r5
  408f3e:	f240 8120 	bls.w	409182 <__udivmoddi4+0x2a6>
  408f42:	f1a8 0802 	sub.w	r8, r8, #2
  408f46:	443d      	add	r5, r7
  408f48:	1aed      	subs	r5, r5, r3
  408f4a:	b2a4      	uxth	r4, r4
  408f4c:	fbb5 f0fa 	udiv	r0, r5, sl
  408f50:	fb0a 5510 	mls	r5, sl, r0, r5
  408f54:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  408f58:	fb00 f909 	mul.w	r9, r0, r9
  408f5c:	45a1      	cmp	r9, r4
  408f5e:	d909      	bls.n	408f74 <__udivmoddi4+0x98>
  408f60:	19e4      	adds	r4, r4, r7
  408f62:	f100 33ff 	add.w	r3, r0, #4294967295
  408f66:	f080 810a 	bcs.w	40917e <__udivmoddi4+0x2a2>
  408f6a:	45a1      	cmp	r9, r4
  408f6c:	f240 8107 	bls.w	40917e <__udivmoddi4+0x2a2>
  408f70:	3802      	subs	r0, #2
  408f72:	443c      	add	r4, r7
  408f74:	eba4 0409 	sub.w	r4, r4, r9
  408f78:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  408f7c:	2100      	movs	r1, #0
  408f7e:	2e00      	cmp	r6, #0
  408f80:	d061      	beq.n	409046 <__udivmoddi4+0x16a>
  408f82:	fa24 f40e 	lsr.w	r4, r4, lr
  408f86:	2300      	movs	r3, #0
  408f88:	6034      	str	r4, [r6, #0]
  408f8a:	6073      	str	r3, [r6, #4]
  408f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408f90:	428b      	cmp	r3, r1
  408f92:	d907      	bls.n	408fa4 <__udivmoddi4+0xc8>
  408f94:	2e00      	cmp	r6, #0
  408f96:	d054      	beq.n	409042 <__udivmoddi4+0x166>
  408f98:	2100      	movs	r1, #0
  408f9a:	e886 0021 	stmia.w	r6, {r0, r5}
  408f9e:	4608      	mov	r0, r1
  408fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408fa4:	fab3 f183 	clz	r1, r3
  408fa8:	2900      	cmp	r1, #0
  408faa:	f040 808e 	bne.w	4090ca <__udivmoddi4+0x1ee>
  408fae:	42ab      	cmp	r3, r5
  408fb0:	d302      	bcc.n	408fb8 <__udivmoddi4+0xdc>
  408fb2:	4282      	cmp	r2, r0
  408fb4:	f200 80fa 	bhi.w	4091ac <__udivmoddi4+0x2d0>
  408fb8:	1a84      	subs	r4, r0, r2
  408fba:	eb65 0503 	sbc.w	r5, r5, r3
  408fbe:	2001      	movs	r0, #1
  408fc0:	46ac      	mov	ip, r5
  408fc2:	2e00      	cmp	r6, #0
  408fc4:	d03f      	beq.n	409046 <__udivmoddi4+0x16a>
  408fc6:	e886 1010 	stmia.w	r6, {r4, ip}
  408fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408fce:	b912      	cbnz	r2, 408fd6 <__udivmoddi4+0xfa>
  408fd0:	2701      	movs	r7, #1
  408fd2:	fbb7 f7f2 	udiv	r7, r7, r2
  408fd6:	fab7 fe87 	clz	lr, r7
  408fda:	f1be 0f00 	cmp.w	lr, #0
  408fde:	d134      	bne.n	40904a <__udivmoddi4+0x16e>
  408fe0:	1beb      	subs	r3, r5, r7
  408fe2:	0c3a      	lsrs	r2, r7, #16
  408fe4:	fa1f fc87 	uxth.w	ip, r7
  408fe8:	2101      	movs	r1, #1
  408fea:	fbb3 f8f2 	udiv	r8, r3, r2
  408fee:	0c25      	lsrs	r5, r4, #16
  408ff0:	fb02 3318 	mls	r3, r2, r8, r3
  408ff4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  408ff8:	fb0c f308 	mul.w	r3, ip, r8
  408ffc:	42ab      	cmp	r3, r5
  408ffe:	d907      	bls.n	409010 <__udivmoddi4+0x134>
  409000:	19ed      	adds	r5, r5, r7
  409002:	f108 30ff 	add.w	r0, r8, #4294967295
  409006:	d202      	bcs.n	40900e <__udivmoddi4+0x132>
  409008:	42ab      	cmp	r3, r5
  40900a:	f200 80d1 	bhi.w	4091b0 <__udivmoddi4+0x2d4>
  40900e:	4680      	mov	r8, r0
  409010:	1aed      	subs	r5, r5, r3
  409012:	b2a3      	uxth	r3, r4
  409014:	fbb5 f0f2 	udiv	r0, r5, r2
  409018:	fb02 5510 	mls	r5, r2, r0, r5
  40901c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  409020:	fb0c fc00 	mul.w	ip, ip, r0
  409024:	45a4      	cmp	ip, r4
  409026:	d907      	bls.n	409038 <__udivmoddi4+0x15c>
  409028:	19e4      	adds	r4, r4, r7
  40902a:	f100 33ff 	add.w	r3, r0, #4294967295
  40902e:	d202      	bcs.n	409036 <__udivmoddi4+0x15a>
  409030:	45a4      	cmp	ip, r4
  409032:	f200 80b8 	bhi.w	4091a6 <__udivmoddi4+0x2ca>
  409036:	4618      	mov	r0, r3
  409038:	eba4 040c 	sub.w	r4, r4, ip
  40903c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  409040:	e79d      	b.n	408f7e <__udivmoddi4+0xa2>
  409042:	4631      	mov	r1, r6
  409044:	4630      	mov	r0, r6
  409046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40904a:	f1ce 0420 	rsb	r4, lr, #32
  40904e:	fa05 f30e 	lsl.w	r3, r5, lr
  409052:	fa07 f70e 	lsl.w	r7, r7, lr
  409056:	fa20 f804 	lsr.w	r8, r0, r4
  40905a:	0c3a      	lsrs	r2, r7, #16
  40905c:	fa25 f404 	lsr.w	r4, r5, r4
  409060:	ea48 0803 	orr.w	r8, r8, r3
  409064:	fbb4 f1f2 	udiv	r1, r4, r2
  409068:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40906c:	fb02 4411 	mls	r4, r2, r1, r4
  409070:	fa1f fc87 	uxth.w	ip, r7
  409074:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  409078:	fb01 f30c 	mul.w	r3, r1, ip
  40907c:	42ab      	cmp	r3, r5
  40907e:	fa00 f40e 	lsl.w	r4, r0, lr
  409082:	d909      	bls.n	409098 <__udivmoddi4+0x1bc>
  409084:	19ed      	adds	r5, r5, r7
  409086:	f101 30ff 	add.w	r0, r1, #4294967295
  40908a:	f080 808a 	bcs.w	4091a2 <__udivmoddi4+0x2c6>
  40908e:	42ab      	cmp	r3, r5
  409090:	f240 8087 	bls.w	4091a2 <__udivmoddi4+0x2c6>
  409094:	3902      	subs	r1, #2
  409096:	443d      	add	r5, r7
  409098:	1aeb      	subs	r3, r5, r3
  40909a:	fa1f f588 	uxth.w	r5, r8
  40909e:	fbb3 f0f2 	udiv	r0, r3, r2
  4090a2:	fb02 3310 	mls	r3, r2, r0, r3
  4090a6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4090aa:	fb00 f30c 	mul.w	r3, r0, ip
  4090ae:	42ab      	cmp	r3, r5
  4090b0:	d907      	bls.n	4090c2 <__udivmoddi4+0x1e6>
  4090b2:	19ed      	adds	r5, r5, r7
  4090b4:	f100 38ff 	add.w	r8, r0, #4294967295
  4090b8:	d26f      	bcs.n	40919a <__udivmoddi4+0x2be>
  4090ba:	42ab      	cmp	r3, r5
  4090bc:	d96d      	bls.n	40919a <__udivmoddi4+0x2be>
  4090be:	3802      	subs	r0, #2
  4090c0:	443d      	add	r5, r7
  4090c2:	1aeb      	subs	r3, r5, r3
  4090c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4090c8:	e78f      	b.n	408fea <__udivmoddi4+0x10e>
  4090ca:	f1c1 0720 	rsb	r7, r1, #32
  4090ce:	fa22 f807 	lsr.w	r8, r2, r7
  4090d2:	408b      	lsls	r3, r1
  4090d4:	fa05 f401 	lsl.w	r4, r5, r1
  4090d8:	ea48 0303 	orr.w	r3, r8, r3
  4090dc:	fa20 fe07 	lsr.w	lr, r0, r7
  4090e0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4090e4:	40fd      	lsrs	r5, r7
  4090e6:	ea4e 0e04 	orr.w	lr, lr, r4
  4090ea:	fbb5 f9fc 	udiv	r9, r5, ip
  4090ee:	ea4f 441e 	mov.w	r4, lr, lsr #16
  4090f2:	fb0c 5519 	mls	r5, ip, r9, r5
  4090f6:	fa1f f883 	uxth.w	r8, r3
  4090fa:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  4090fe:	fb09 f408 	mul.w	r4, r9, r8
  409102:	42ac      	cmp	r4, r5
  409104:	fa02 f201 	lsl.w	r2, r2, r1
  409108:	fa00 fa01 	lsl.w	sl, r0, r1
  40910c:	d908      	bls.n	409120 <__udivmoddi4+0x244>
  40910e:	18ed      	adds	r5, r5, r3
  409110:	f109 30ff 	add.w	r0, r9, #4294967295
  409114:	d243      	bcs.n	40919e <__udivmoddi4+0x2c2>
  409116:	42ac      	cmp	r4, r5
  409118:	d941      	bls.n	40919e <__udivmoddi4+0x2c2>
  40911a:	f1a9 0902 	sub.w	r9, r9, #2
  40911e:	441d      	add	r5, r3
  409120:	1b2d      	subs	r5, r5, r4
  409122:	fa1f fe8e 	uxth.w	lr, lr
  409126:	fbb5 f0fc 	udiv	r0, r5, ip
  40912a:	fb0c 5510 	mls	r5, ip, r0, r5
  40912e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  409132:	fb00 f808 	mul.w	r8, r0, r8
  409136:	45a0      	cmp	r8, r4
  409138:	d907      	bls.n	40914a <__udivmoddi4+0x26e>
  40913a:	18e4      	adds	r4, r4, r3
  40913c:	f100 35ff 	add.w	r5, r0, #4294967295
  409140:	d229      	bcs.n	409196 <__udivmoddi4+0x2ba>
  409142:	45a0      	cmp	r8, r4
  409144:	d927      	bls.n	409196 <__udivmoddi4+0x2ba>
  409146:	3802      	subs	r0, #2
  409148:	441c      	add	r4, r3
  40914a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40914e:	eba4 0408 	sub.w	r4, r4, r8
  409152:	fba0 8902 	umull	r8, r9, r0, r2
  409156:	454c      	cmp	r4, r9
  409158:	46c6      	mov	lr, r8
  40915a:	464d      	mov	r5, r9
  40915c:	d315      	bcc.n	40918a <__udivmoddi4+0x2ae>
  40915e:	d012      	beq.n	409186 <__udivmoddi4+0x2aa>
  409160:	b156      	cbz	r6, 409178 <__udivmoddi4+0x29c>
  409162:	ebba 030e 	subs.w	r3, sl, lr
  409166:	eb64 0405 	sbc.w	r4, r4, r5
  40916a:	fa04 f707 	lsl.w	r7, r4, r7
  40916e:	40cb      	lsrs	r3, r1
  409170:	431f      	orrs	r7, r3
  409172:	40cc      	lsrs	r4, r1
  409174:	6037      	str	r7, [r6, #0]
  409176:	6074      	str	r4, [r6, #4]
  409178:	2100      	movs	r1, #0
  40917a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40917e:	4618      	mov	r0, r3
  409180:	e6f8      	b.n	408f74 <__udivmoddi4+0x98>
  409182:	4690      	mov	r8, r2
  409184:	e6e0      	b.n	408f48 <__udivmoddi4+0x6c>
  409186:	45c2      	cmp	sl, r8
  409188:	d2ea      	bcs.n	409160 <__udivmoddi4+0x284>
  40918a:	ebb8 0e02 	subs.w	lr, r8, r2
  40918e:	eb69 0503 	sbc.w	r5, r9, r3
  409192:	3801      	subs	r0, #1
  409194:	e7e4      	b.n	409160 <__udivmoddi4+0x284>
  409196:	4628      	mov	r0, r5
  409198:	e7d7      	b.n	40914a <__udivmoddi4+0x26e>
  40919a:	4640      	mov	r0, r8
  40919c:	e791      	b.n	4090c2 <__udivmoddi4+0x1e6>
  40919e:	4681      	mov	r9, r0
  4091a0:	e7be      	b.n	409120 <__udivmoddi4+0x244>
  4091a2:	4601      	mov	r1, r0
  4091a4:	e778      	b.n	409098 <__udivmoddi4+0x1bc>
  4091a6:	3802      	subs	r0, #2
  4091a8:	443c      	add	r4, r7
  4091aa:	e745      	b.n	409038 <__udivmoddi4+0x15c>
  4091ac:	4608      	mov	r0, r1
  4091ae:	e708      	b.n	408fc2 <__udivmoddi4+0xe6>
  4091b0:	f1a8 0802 	sub.w	r8, r8, #2
  4091b4:	443d      	add	r5, r7
  4091b6:	e72b      	b.n	409010 <__udivmoddi4+0x134>

004091b8 <__aeabi_idiv0>:
  4091b8:	4770      	bx	lr
  4091ba:	bf00      	nop

004091bc <p_uc_charset10x14>:
	...
  4091d8:	ccff ccff 0000 0000 0000 0000 0000 0000     ................
  4091e8:	00f0 00f0 0000 0000 00f0 00f0 0000 0000     ................
  4091f8:	c00c c00c fcff fcff c00c c00c fcff fcff     ................
  409208:	c00c c00c 600c 701e 303f 3033 fcff fcff     .....`.p?030....
  409218:	3033 f033 e039 c018 0060 0cf0 3cf0 f060     303.9...`....<`.
  409228:	c003 000f 183c 3cf0 3cc0 1800 f03c f87f     ....<..<.<..<...
  409238:	1cc3 8cc7 cccf ecdc 7878 3030 fc00 cc00     ........xx00....
  409248:	0000 0000 0000 0044 00ec 00f8 0070 0000     ......D.....p...
	...
  409260:	c00f f03f 7878 1860 0cc0 0cc0 0000 0000     ..?.xx`.........
  409270:	0000 0000 0cc0 0cc0 1860 7878 f03f c00f     ........`.xx?...
  409280:	0000 0000 600c e00e c007 8003 f83f f83f     .....`......?.?.
  409290:	8003 c007 e00e 600c 0003 0003 0003 0003     .......`........
  4092a0:	f03f f03f 0003 0003 0003 0003 4400 ec00     ?.?..........D..
  4092b0:	f800 7000 0000 0000 0000 0000 0000 0000     ...p............
  4092c0:	0003 0003 0003 0003 0003 0003 0003 0003     ................
  4092d0:	0003 0003 1800 3c00 3c00 1800 0000 0000     .......<.<......
	...
  4092e8:	0000 0c00 3c00 f000 c003 000f 003c 00f0     .....<......<...
  4092f8:	00c0 0000 f03f f87f fce0 ccc1 8cc3 0cc7     ....?...........
  409308:	0cce 1cfc f87f f03f 0000 0000 0c30 0c70     ......?.....0.p.
  409318:	fcff fcff 0c00 0c00 0000 0000 0c30 1c70     ............0.p.
  409328:	3ce0 7cc0 ecc0 ccc1 8cc3 0ce7 0c7e 0c3c     .<.|........~.<.
  409338:	3030 3870 1ce0 0cc0 0cc0 0cc3 0cc3 1ce3     00p8............
  409348:	f87f f03c c003 c007 c00e c01c c038 c070     ..<.........8.p.
  409358:	fcff fcff c000 c000 30fc 38fc 1ccc 0ccc     .........0.8....
  409368:	0ccc 0ccc 0ccc 1cce f8c7 f0c3 f03f f87f     ............?...
  409378:	1ce3 0cc3 0cc3 0cc3 0cc3 9ce3 f871 f030     ............q.0.
  409388:	00c0 00c0 00c0 00c0 fcc3 fcc7 00ce 00dc     ................
  409398:	00f8 00f0 f03c f87f 9ce7 0cc3 0cc3 0cc3     ....<...........
  4093a8:	0cc3 9ce7 f87f f03c 003c 007e 0ce7 0cc3     ......<.<.~.....
  4093b8:	1cc3 38c3 70c3 e0e7 c07f 803f 0000 0000     ...8.p....?.....
  4093c8:	0000 6018 f03c f03c 6018 0000 0000 0000     ...`<.<..`......
  4093d8:	0000 0000 0000 4418 ec3c f83c 7018 0000     .......D<.<..p..
  4093e8:	0000 0000 0000 0003 8007 c00f e01c 7038     ..............8p
  4093f8:	3870 1ce0 0cc0 0000 c00c c00c c00c c00c     p8..............
  409408:	c00c c00c c00c c00c c00c c00c 0000 0cc0     ................
  409418:	1ce0 3870 7038 e01c c00f 8007 0003 0000     ..p88p..........
  409428:	0030 0070 00e0 00c0 ecc1 ecc3 00c3 00e6     0.p.............
  409438:	007e 003c f030 f871 9ce3 0cc3 fcc3 fcc3     ~.<.0.q.........
  409448:	0cc0 1ce0 f87f f03f fc3f fc7f c0e0 c0c0     ......?.?.......
  409458:	c0c0 c0c0 c0c0 c0e0 fc7f fc3f fcff fcff     ..........?.....
  409468:	0cc3 0cc3 0cc3 0cc3 0cc3 9ce7 f87f f03c     ..............<.
  409478:	f03f f87f 1ce0 0cc0 0cc0 0cc0 0cc0 1ce0     ?...............
  409488:	3870 3030 fcff fcff 0cc0 0cc0 0cc0 0cc0     p800............
  409498:	0cc0 1ce0 f87f f03f fcff fcff 0cc3 0cc3     ......?.........
  4094a8:	0cc3 0cc3 0cc3 0cc3 0cc0 0cc0 fcff fcff     ................
  4094b8:	00c3 00c3 00c3 00c3 00c3 00c3 00c0 00c0     ................
  4094c8:	f03f f87f 1ce0 0cc0 0cc0 0cc3 0cc3 1ce3     ?...............
  4094d8:	f873 f033 fcff fcff 0003 0003 0003 0003     s.3.............
  4094e8:	0003 0003 fcff fcff 0000 0000 0cc0 0cc0     ................
  4094f8:	fcff fcff 0cc0 0cc0 0000 0000 3000 3800     .............0.8
  409508:	1cc0 0cc0 0cc0 1cc0 f8ff f0ff 00c0 00c0     ................
  409518:	fcff fcff 8007 8007 c00f e01c 7038 3870     ............8pp8
  409528:	1ce0 0cc0 fcff fcff 0c00 0c00 0c00 0c00     ................
  409538:	0c00 0c00 0c00 0c00 fcff fcff 0070 0038     ............p.8.
  409548:	001f 001f 0038 0070 fcff fcff fcff fcff     ....8.p.........
  409558:	001c 000e 0007 8003 c001 e000 fcff fcff     ................
  409568:	f03f f87f 1ce0 0cc0 0cc0 0cc0 0cc0 1ce0     ?...............
  409578:	f87f f03f fcff fcff 00c3 00c3 00c3 00c3     ..?.............
  409588:	00c3 00e7 007e 003c f03f f87f 1ce0 0cc0     ....~.<.?.......
  409598:	ccc0 ecc0 7cc0 38e0 fc7f ec3f fcff fcff     .....|.8..?.....
  4095a8:	00c3 80c3 80c3 c0c3 c0c3 70e7 3c7e 1c3c     ...........p~<<.
  4095b8:	183c 1c7e 0ce7 0cc3 0cc3 0cc3 0cc3 9cc3     <.~.............
  4095c8:	f8e1 f060 00c0 00c0 00c0 00c0 fcff fcff     ..`.............
  4095d8:	00c0 00c0 00c0 00c0 f0ff f8ff 1c00 0c00     ................
  4095e8:	0c00 0c00 0c00 1c00 f8ff f0ff c0ff e0ff     ................
  4095f8:	7000 3800 1c00 1c00 3800 7000 e0ff c0ff     .p.8.....8.p....
  409608:	f0ff f8ff 1c00 3c00 f800 f800 3c00 1c00     .......<.....<..
  409618:	f8ff f0ff 3cf0 7cf8 e01c c00f 8007 8007     .....<.|........
  409628:	c00f e01c 7cf8 3cf0 00fc 00fe 0007 8003     .....|.<........
  409638:	fc01 fc01 8003 0007 00fe 00fc 3cc0 7cc0     .............<.|
  409648:	ecc0 ccc1 8cc3 0cc7 0cce 0cdc 0cf8 0cf0     ................
  409658:	0000 0000 fcff fcff 0cc0 0cc0 0cc0 0000     ................
  409668:	0000 0000 0030 0030 000c 000c 0003 0003     ....0.0.........
  409678:	c000 c000 3000 3000 0000 0000 0cc0 0cc0     .....0.0........
  409688:	0cc0 fcff fcff 0000 0000 0000 000c 001c     ................
  409698:	0038 0070 00e0 00e0 0070 0038 001c 000c     8.p.....p.8.....
  4096a8:	0c00 0c00 0c00 0c00 0c00 0c00 0c00 0c00     ................
  4096b8:	0c00 0c00 0000 0000 00c0 00e0 0070 0038     ............p.8.
  4096c8:	0018 0000 0000 0000 3000 7806 fc0e cc0c     .........0.x....
  4096d8:	cc0c cc0c cc0c cc0e fc07 f803 fcff fcff     ................
  4096e8:	0c03 0c03 0c03 0c03 0c03 9c03 f801 f000     ................
  4096f8:	f003 f807 1c0e 0c0c 0c0c 0c0c 0c0c 1c0e     ................
  409708:	3807 3003 f000 f801 9c03 0c03 0c03 0c03     .8.0............
  409718:	0c03 0c03 fcff fcff f003 f807 dc0e cc0c     ................
  409728:	cc0c cc0c cc0c dc0e d807 9003 0000 0003     ................
  409738:	fc3f fc7f 00e3 00e3 0070 0030 0000 0000     ?.......p.0.....
  409748:	1803 9c07 cc0f cc0c cc0c cc0c cc0c dc0c     ................
  409758:	f80f f007 fcff fcff 0003 0003 0003 0003     ................
  409768:	8003 fc01 fc00 0000 0000 0000 0000 0000     ................
  409778:	fc1b fc1b 0000 0000 0000 0000 0000 3000     ...............0
  409788:	3800 1c00 0c00 0c00 1c00 f8cf f0cf 0000     .8..............
  409798:	0000 fcff fcff e000 e001 f003 3807 1c0e     .............8..
  4097a8:	0c0c 0000 0000 0000 0cc0 0cc0 fcff fcff     ................
  4097b8:	0c00 0c00 0000 0000 fc0f fc0f 000e 0007     ................
  4097c8:	c003 c003 0007 000e fc0f fc0f fc0f fc0f     ................
  4097d8:	0003 0007 000e 000c 000c 000e fc07 fc03     ................
  4097e8:	f003 f807 1c0e 0c0c 0c0c 0c0c 0c0c 1c0e     ................
  4097f8:	f807 f003 fc0f fc0f c00c c00c c00c c00c     ................
  409808:	c00c c00f 8007 0003 0003 8007 c00f c00c     ................
  409818:	c00c c00c c00c c00c fc0f fc0f fc0f fc0f     ................
  409828:	8003 0007 000e 000c 000c 000e 0007 0003     ................
  409838:	1803 9c07 cc0f cc0c cc0c cc0c cc0c fc0c     ................
  409848:	780e 3006 0000 000c 000c f0ff f8ff 1c0c     .x.0............
  409858:	1c0c 380c 300c 0000 f00f f80f 1c00 0c00     ...8.0..........
  409868:	0c00 0c00 0c00 1c00 f80f f00f c00f e00f     ................
  409878:	7000 3800 1c00 1c00 3800 7000 e00f c00f     .p.8.....8.p....
  409888:	f00f f80f 1c00 1c00 f800 f800 1c00 1c00     ................
  409898:	f80f f00f 0c0c 1c0e 3807 f003 e001 e001     .........8......
  4098a8:	f003 3807 1c0e 0c0c 000c 000e 0c07 9c03     ...8............
  4098b8:	f801 f001 8003 0007 000e 000c 0c0c 1c0c     ................
  4098c8:	3c0c 7c0c ec0c cc0d 8c0f 0c0f 0c0e 0c0c     .<.|............
  4098d8:	0000 0003 8007 f03f f87c 1ce0 0cc0 0cc0     ......?.|.......
  4098e8:	0cc0 0000 0c03 0c03 fc3f fc7f 0ce3 0cc3     ........?.......
  4098f8:	0cc0 0ce0 0c70 0c30 0000 0cc0 0cc0 0cc0     ....p.0.........
  409908:	1ce0 f87c f03f 8007 0003 0000 00c0 00c0     ..|.?...........
  409918:	00c0 00c0 00c0 00c0 00c0 00c0 00c0 00c0     ................
  409928:	fcff fcff fcff fcff fcff fcff fcff fcff     ................
  409938:	fcff fcff 000d 0a05 004b 0000 1932 0000     ........K...2...
  409948:	008b 0e00 0008 3280 0205 030a 2003 0f02     .......2..... ..
  409958:	0a0f 0000 0000 1818 2020 0000 0000 0a00     ........  ......
  409968:	0000 0202 0000 1818 0000 0003 0000 0000     ................
  409978:	0002 1801 1e1e 1e1e 1e1e 1e1e 1e1e 1e1e     ................
  409988:	1e1e 0000 0000 0000 0000 0000 0000 0000     ................
  409998:	0000 0000 6425 3a20 6425 6420 2065 6425     ....%d :%d de %d
  4099a8:	6d20 6e69 002e 0000 4341 4241 554f 4120      min....ACABOU A
  4099b8:	4c20 5641 4741 4d45 5320 5545 4320 524f      LAVAGEM SEU COR
  4099c8:	4f4e 0000 4943 4c43 204f 6425 0000 0000     NO..CICLO %d....
  4099d8:	0d0a 616d 5458 756f 6863 6420 7461 2061     ..maXTouch data 
  4099e8:	5355 5241 2054 7274 6e61 6d73 7469 6574     USART transmitte
  4099f8:	0a72 000d 724e 203a 3125 2c64 5820 253a     r...Nr: %1d, X:%
  409a08:	6434 202c 3a59 3425 2c64 5320 6174 7574     4d, Y:%4d, Statu
  409a18:	3a73 7830 3225 2078 6f63 766e 5820 253a     s:0x%2x conv X:%
  409a28:	6433 5920 253a 6433 0d0a 0000               3d Y:%3d....

00409a34 <_global_impure_ptr>:
  409a34:	0148 2040 4e49 0046 6e69 0066 414e 004e     H.@ INF.inf.NAN.
  409a44:	616e 006e 3130 3332 3534 3736 3938 4241     nan.0123456789AB
  409a54:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  409a64:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  409a74:	296c 0000 0030 0000                         l)..0...

00409a7c <blanks.7223>:
  409a7c:	2020 2020 2020 2020 2020 2020 2020 2020                     

00409a8c <zeroes.7224>:
  409a8c:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

00409a9c <blanks.7217>:
  409a9c:	2020 2020 2020 2020 2020 2020 2020 2020                     

00409aac <zeroes.7218>:
  409aac:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  409abc:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
  409acc:	0043 0000 4f50 4953 0058 0000               C...POSIX...

00409ad8 <__mprec_bigtens>:
  409ad8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  409ae8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  409af8:	bf3c 7f73 4fdd 7515                         <.s..O.u

00409b00 <__mprec_tens>:
  409b00:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  409b10:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  409b20:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  409b30:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  409b40:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  409b50:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  409b60:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  409b70:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  409b80:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  409b90:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  409ba0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  409bb0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  409bc0:	9db4 79d9 7843 44ea                         ...yCx.D

00409bc8 <p05.6055>:
  409bc8:	0005 0000 0019 0000 007d 0000               ........}...

00409bd4 <_ctype_>:
  409bd4:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  409be4:	2020 2020 2020 2020 2020 2020 2020 2020                     
  409bf4:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  409c04:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  409c14:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  409c24:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  409c34:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  409c44:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  409c54:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00409cd8 <_init>:
  409cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409cda:	bf00      	nop
  409cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  409cde:	bc08      	pop	{r3}
  409ce0:	469e      	mov	lr, r3
  409ce2:	4770      	bx	lr

00409ce4 <__init_array_start>:
  409ce4:	004059d5 	.word	0x004059d5

00409ce8 <__frame_dummy_init_array_entry>:
  409ce8:	0040018d                                ..@.

00409cec <_fini>:
  409cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409cee:	bf00      	nop
  409cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  409cf2:	bc08      	pop	{r3}
  409cf4:	469e      	mov	lr, r3
  409cf6:	4770      	bx	lr

00409cf8 <__fini_array_start>:
  409cf8:	00400169 	.word	0x00400169

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <c_centrifuga>:
20400010:	6543 746e 6972 7566 6167 0000 0000 0000     Centrifuga......
	...
20400038:	04b0 0000 000a 0000 0000 0000 0000 0000     ................
20400048:	0000 0000                                   ....

2040004c <c_diario>:
2040004c:	6944 7261 6f69 0000 0000 0000 0000 0000     Diario..........
	...
2040006c:	000f 0000 0002 0000 04b0 0000 0008 0000     ................
2040007c:	0100 0000 0000 0000 0000 0000               ............

20400088 <c_enxague>:
20400088:	6e45 6178 7567 0065 0000 0000 0000 0000     Enxague.........
	...
204000a8:	000a 0000 0001 0000 0000 0000 0000 0000     ................
	...

204000c4 <c_pesado>:
204000c4:	6550 6173 6f64 0000 0000 0000 0000 0000     Pesado..........
	...
204000e4:	000a 0000 0003 0000 04b0 0000 000a 0000     ................
204000f4:	0101 0000 0000 0000 0000 0000               ............

20400100 <c_rapido>:
20400100:	6152 6970 6f64 0000 0000 0000 0000 0000     Rapido..........
	...
20400120:	0005 0000 0003 0000 0384 0000 0005 0000     ................
20400130:	0100 0000 0000 0000 0000 0000               ............

2040013c <last_state.11325>:
2040013c:	00ff 0000                                   ....

20400140 <selection>:
20400140:	0001 0000                                   ....

20400144 <_impure_ptr>:
20400144:	0148 2040                                   H.@ 

20400148 <impure_data>:
20400148:	0000 0000 0434 2040 049c 2040 0504 2040     ....4.@ ..@ ..@ 
	...
204001f0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20400200:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400570 <__malloc_av_>:
	...
20400578:	0570 2040 0570 2040 0578 2040 0578 2040     p.@ p.@ x.@ x.@ 
20400588:	0580 2040 0580 2040 0588 2040 0588 2040     ..@ ..@ ..@ ..@ 
20400598:	0590 2040 0590 2040 0598 2040 0598 2040     ..@ ..@ ..@ ..@ 
204005a8:	05a0 2040 05a0 2040 05a8 2040 05a8 2040     ..@ ..@ ..@ ..@ 
204005b8:	05b0 2040 05b0 2040 05b8 2040 05b8 2040     ..@ ..@ ..@ ..@ 
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 
20400848:	0840 2040 0840 2040 0848 2040 0848 2040     @.@ @.@ H.@ H.@ 
20400858:	0850 2040 0850 2040 0858 2040 0858 2040     P.@ P.@ X.@ X.@ 
20400868:	0860 2040 0860 2040 0868 2040 0868 2040     `.@ `.@ h.@ h.@ 
20400878:	0870 2040 0870 2040 0878 2040 0878 2040     p.@ p.@ x.@ x.@ 
20400888:	0880 2040 0880 2040 0888 2040 0888 2040     ..@ ..@ ..@ ..@ 
20400898:	0890 2040 0890 2040 0898 2040 0898 2040     ..@ ..@ ..@ ..@ 
204008a8:	08a0 2040 08a0 2040 08a8 2040 08a8 2040     ..@ ..@ ..@ ..@ 
204008b8:	08b0 2040 08b0 2040 08b8 2040 08b8 2040     ..@ ..@ ..@ ..@ 
204008c8:	08c0 2040 08c0 2040 08c8 2040 08c8 2040     ..@ ..@ ..@ ..@ 
204008d8:	08d0 2040 08d0 2040 08d8 2040 08d8 2040     ..@ ..@ ..@ ..@ 
204008e8:	08e0 2040 08e0 2040 08e8 2040 08e8 2040     ..@ ..@ ..@ ..@ 
204008f8:	08f0 2040 08f0 2040 08f8 2040 08f8 2040     ..@ ..@ ..@ ..@ 
20400908:	0900 2040 0900 2040 0908 2040 0908 2040     ..@ ..@ ..@ ..@ 
20400918:	0910 2040 0910 2040 0918 2040 0918 2040     ..@ ..@ ..@ ..@ 
20400928:	0920 2040 0920 2040 0928 2040 0928 2040      .@  .@ (.@ (.@ 
20400938:	0930 2040 0930 2040 0938 2040 0938 2040     0.@ 0.@ 8.@ 8.@ 
20400948:	0940 2040 0940 2040 0948 2040 0948 2040     @.@ @.@ H.@ H.@ 
20400958:	0950 2040 0950 2040 0958 2040 0958 2040     P.@ P.@ X.@ X.@ 
20400968:	0960 2040 0960 2040 0968 2040 0968 2040     `.@ `.@ h.@ h.@ 

20400978 <__malloc_sbrk_base>:
20400978:	ffff ffff                                   ....

2040097c <__malloc_trim_threshold>:
2040097c:	0000 0002                                   ....

20400980 <__atexit_recursive_mutex>:
20400980:	0fb4 2040                                   ..@ 

20400984 <__global_locale>:
20400984:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204009a4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204009c4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204009e4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400a04:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400a24:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400a44:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400a64:	8295 0040 73f9 0040 0000 0000 9bd4 0040     ..@..s@.......@.
20400a74:	99ac 0040 9a58 0040 9a58 0040 9a58 0040     ..@.X.@.X.@.X.@.
20400a84:	9a58 0040 9a58 0040 9a58 0040 9a58 0040     X.@.X.@.X.@.X.@.
20400a94:	9a58 0040 9a58 0040 ffff ffff ffff ffff     X.@.X.@.........
20400aa4:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
20400acc:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
