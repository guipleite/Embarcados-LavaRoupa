
MXT_EXAMPLE_USART1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009a34  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00409a34  00409a34  00019a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c0  20400000  00409a3c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000004e4  204009c0  0040a3fc  000209c0  2**2
                  ALLOC
  4 .stack        00002004  20400ea4  0040a8e0  000209c0  2**0
                  ALLOC
  5 .heap         00000200  20402ea8  0040c8e4  000209c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209ee  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001fc04  00000000  00000000  00020a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004378  00000000  00000000  0004064b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00009537  00000000  00000000  000449c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000e60  00000000  00000000  0004defa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000fb0  00000000  00000000  0004ed5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002370b  00000000  00000000  0004fd0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00010d03  00000000  00000000  00073415  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009577a  00000000  00000000  00084118  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000035d4  00000000  00000000  00119894  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	a8 2e 40 20 b9 1e 40 00 b7 1e 40 00 b7 1e 40 00     ..@ ..@...@...@.
  400010:	b7 1e 40 00 b7 1e 40 00 b7 1e 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	b7 1e 40 00 b7 1e 40 00 00 00 00 00 b7 1e 40 00     ..@...@.......@.
  40003c:	b7 1e 40 00 b7 1e 40 00 b7 1e 40 00 b7 1e 40 00     ..@...@...@...@.
  40004c:	b7 1e 40 00 b7 1e 40 00 b7 1e 40 00 b7 1e 40 00     ..@...@...@...@.
  40005c:	b7 1e 40 00 b7 1e 40 00 00 00 00 00 75 16 40 00     ..@...@.....u.@.
  40006c:	89 16 40 00 9d 16 40 00 b7 1e 40 00 b7 1e 40 00     ..@...@...@...@.
  40007c:	b7 1e 40 00 b1 16 40 00 c5 16 40 00 b7 1e 40 00     ..@...@...@...@.
  40008c:	b7 1e 40 00 b7 1e 40 00 b7 1e 40 00 b7 1e 40 00     ..@...@...@...@.
  40009c:	b7 1e 40 00 b7 1e 40 00 b7 1e 40 00 b7 1e 40 00     ..@...@...@...@.
  4000ac:	b7 1e 40 00 b7 1e 40 00 b7 1e 40 00 b7 1e 40 00     ..@...@...@...@.
  4000bc:	b7 1e 40 00 b7 1e 40 00 b7 1e 40 00 b7 1e 40 00     ..@...@...@...@.
  4000cc:	b7 1e 40 00 b7 1e 40 00 b7 1e 40 00 b7 1e 40 00     ..@...@...@...@.
  4000dc:	b7 1e 40 00 b7 1e 40 00 b7 1e 40 00 b7 1e 40 00     ..@...@...@...@.
  4000ec:	b7 1e 40 00 b7 1e 40 00 b7 1e 40 00 b7 1e 40 00     ..@...@...@...@.
  4000fc:	b7 1e 40 00 b7 1e 40 00 b7 1e 40 00 b7 1e 40 00     ..@...@...@...@.
  40010c:	b7 1e 40 00 b7 1e 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 b7 1e 40 00 b7 1e 40 00 b7 1e 40 00     ......@...@...@.
  40012c:	b7 1e 40 00 b7 1e 40 00 b7 1e 40 00 b7 1e 40 00     ..@...@...@...@.
  40013c:	b7 1e 40 00 b7 1e 40 00 b7 1e 40 00 b7 1e 40 00     ..@...@...@...@.
  40014c:	b7 1e 40 00 b7 1e 40 00 b7 1e 40 00 b7 1e 40 00     ..@...@...@...@.
  40015c:	b7 1e 40 00 b7 1e 40 00 b7 1e 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204009c0 	.word	0x204009c0
  400184:	00000000 	.word	0x00000000
  400188:	00409a3c 	.word	0x00409a3c

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00409a3c 	.word	0x00409a3c
  4001c8:	204009c4 	.word	0x204009c4
  4001cc:	00409a3c 	.word	0x00409a3c
  4001d0:	00000000 	.word	0x00000000

004001d4 <mxt_init_device>:
 * \param chgpin IOPORT pin instance attached to the maXTouch device's /CHG pin
 * \return Operation result status code
 */
status_code_t mxt_init_device(struct mxt_device *device,
		twihs_master_t interface, uint8_t chip_adr, uint32_t chgpin)
{
  4001d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4001d6:	b087      	sub	sp, #28
  4001d8:	4604      	mov	r4, r0
  4001da:	460e      	mov	r6, r1
  4001dc:	4617      	mov	r7, r2
	int8_t status;

	/* Set TWI interface, TWI address and CHG-pin of the maXTouch device. */
	device->interface = interface;
  4001de:	6081      	str	r1, [r0, #8]
	device->mxt_chip_adr = chip_adr;
  4001e0:	7302      	strb	r2, [r0, #12]
	device->chgpin = chgpin;
  4001e2:	6183      	str	r3, [r0, #24]
	device->handler = NULL;
  4001e4:	2500      	movs	r5, #0
  4001e6:	6105      	str	r5, [r0, #16]
			malloc(sizeof(struct mxt_info_object));
  4001e8:	2007      	movs	r0, #7
  4001ea:	4b9d      	ldr	r3, [pc, #628]	; (400460 <mxt_init_device+0x28c>)
  4001ec:	4798      	blx	r3
	device->info_object = (struct mxt_info_object *)
  4001ee:	6020      	str	r0, [r4, #0]
	twihs_package_t packet = {
  4001f0:	9501      	str	r5, [sp, #4]
  4001f2:	9505      	str	r5, [sp, #20]
  4001f4:	2302      	movs	r3, #2
  4001f6:	9302      	str	r3, [sp, #8]
  4001f8:	9003      	str	r0, [sp, #12]
  4001fa:	2307      	movs	r3, #7
  4001fc:	9304      	str	r3, [sp, #16]
  4001fe:	f88d 7014 	strb.w	r7, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  400202:	a901      	add	r1, sp, #4
  400204:	4630      	mov	r0, r6
  400206:	4b97      	ldr	r3, [pc, #604]	; (400464 <mxt_init_device+0x290>)
  400208:	4798      	blx	r3
  40020a:	1b40      	subs	r0, r0, r5
  40020c:	bf18      	it	ne
  40020e:	2001      	movne	r0, #1
  400210:	4240      	negs	r0, r0
	if ((status = mxt_read_id_block(device)) != STATUS_OK) {
  400212:	b108      	cbz	r0, 400218 <mxt_init_device+0x44>
	}

	device->multitouch_report_offset = status;

	return STATUS_OK;
}
  400214:	b007      	add	sp, #28
  400216:	bdf0      	pop	{r4, r5, r6, r7, pc}
			malloc(device->info_object->obj_count *
  400218:	6825      	ldr	r5, [r4, #0]
  40021a:	79a8      	ldrb	r0, [r5, #6]
  40021c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  400220:	0040      	lsls	r0, r0, #1
  400222:	4b8f      	ldr	r3, [pc, #572]	; (400460 <mxt_init_device+0x28c>)
  400224:	4798      	blx	r3
	device->object_list = (struct mxt_object *)
  400226:	6060      	str	r0, [r4, #4]
	twihs_package_t packet = {
  400228:	2300      	movs	r3, #0
  40022a:	9301      	str	r3, [sp, #4]
  40022c:	9304      	str	r3, [sp, #16]
  40022e:	9305      	str	r3, [sp, #20]
  400230:	2307      	movs	r3, #7
  400232:	f88d 3004 	strb.w	r3, [sp, #4]
  400236:	2302      	movs	r3, #2
  400238:	9302      	str	r3, [sp, #8]
  40023a:	9003      	str	r0, [sp, #12]
		.length       = device->info_object->obj_count *
  40023c:	79ab      	ldrb	r3, [r5, #6]
  40023e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  400242:	005b      	lsls	r3, r3, #1
	twihs_package_t packet = {
  400244:	9304      	str	r3, [sp, #16]
  400246:	7b23      	ldrb	r3, [r4, #12]
  400248:	f88d 3014 	strb.w	r3, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  40024c:	a901      	add	r1, sp, #4
  40024e:	68a0      	ldr	r0, [r4, #8]
  400250:	4b84      	ldr	r3, [pc, #528]	; (400464 <mxt_init_device+0x290>)
  400252:	4798      	blx	r3
  400254:	3000      	adds	r0, #0
  400256:	bf18      	it	ne
  400258:	2001      	movne	r0, #1
  40025a:	4240      	negs	r0, r0
	if (status != STATUS_OK) {
  40025c:	2800      	cmp	r0, #0
  40025e:	d1d9      	bne.n	400214 <mxt_init_device+0x40>
	uint8_t *id_pointer = (uint8_t *)device->info_object;
  400260:	6827      	ldr	r7, [r4, #0]
	uint8_t *objects_pointer = (uint8_t *)device->object_list;
  400262:	6860      	ldr	r0, [r4, #4]
			(device->info_object->obj_count *
  400264:	79bb      	ldrb	r3, [r7, #6]
  400266:	eb03 0643 	add.w	r6, r3, r3, lsl #1
  40026a:	0076      	lsls	r6, r6, #1
	crc_area_size = MXT_ID_BLOCK_SIZE +
  40026c:	3607      	adds	r6, #7
  40026e:	b2b6      	uxth	r6, r6
  400270:	463a      	mov	r2, r7
  400272:	3706      	adds	r7, #6
	uint32_t crc_tmp = 0;
  400274:	2100      	movs	r1, #0
		result ^= crcpoly;
  400276:	f8df c1f0 	ldr.w	ip, [pc, #496]	; 400468 <mxt_init_device+0x294>
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  40027a:	f892 e001 	ldrb.w	lr, [r2, #1]
  40027e:	7815      	ldrb	r5, [r2, #0]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  400280:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
  400284:	ea85 0141 	eor.w	r1, r5, r1, lsl #1
	if (result & 0x1000000) {
  400288:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
		result ^= crcpoly;
  40028c:	bf18      	it	ne
  40028e:	ea81 010c 	eorne.w	r1, r1, ip
  400292:	3202      	adds	r2, #2
	for (i = 0; i < MXT_ID_BLOCK_SIZE - 1; i += 2) {
  400294:	42ba      	cmp	r2, r7
  400296:	d1f0      	bne.n	40027a <mxt_init_device+0xa6>
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  400298:	7802      	ldrb	r2, [r0, #0]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  40029a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  40029e:	ea83 0241 	eor.w	r2, r3, r1, lsl #1
	if (result & 0x1000000) {
  4002a2:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
  4002a6:	d003      	beq.n	4002b0 <mxt_init_device+0xdc>
		result ^= crcpoly;
  4002a8:	f482 0200 	eor.w	r2, r2, #8388608	; 0x800000
  4002ac:	f082 021b 	eor.w	r2, r2, #27
	for (i = 1; i < (crc_area_size - MXT_ID_BLOCK_SIZE - 1); i += 2) {
  4002b0:	f1a6 0708 	sub.w	r7, r6, #8
  4002b4:	2f01      	cmp	r7, #1
  4002b6:	dd12      	ble.n	4002de <mxt_init_device+0x10a>
  4002b8:	2301      	movs	r3, #1
		result ^= crcpoly;
  4002ba:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 400468 <mxt_init_device+0x294>
		crc_tmp = mxt_crc_24(crc_tmp, objects_pointer[i],
  4002be:	18c1      	adds	r1, r0, r3
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  4002c0:	784d      	ldrb	r5, [r1, #1]
  4002c2:	5cc1      	ldrb	r1, [r0, r3]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  4002c4:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  4002c8:	ea81 0242 	eor.w	r2, r1, r2, lsl #1
	if (result & 0x1000000) {
  4002cc:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		result ^= crcpoly;
  4002d0:	bf18      	it	ne
  4002d2:	ea82 020e 	eorne.w	r2, r2, lr
	for (i = 1; i < (crc_area_size - MXT_ID_BLOCK_SIZE - 1); i += 2) {
  4002d6:	3302      	adds	r3, #2
  4002d8:	b29b      	uxth	r3, r3
  4002da:	42bb      	cmp	r3, r7
  4002dc:	dbef      	blt.n	4002be <mxt_init_device+0xea>
	crc_tmp = mxt_crc_24(crc_tmp,
  4002de:	4430      	add	r0, r6
	result = ((crc << 1u) ^ (uint32_t)data_word);
  4002e0:	f810 3c08 	ldrb.w	r3, [r0, #-8]
  4002e4:	ea83 0242 	eor.w	r2, r3, r2, lsl #1
	if (result & 0x1000000) {
  4002e8:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
  4002ec:	d003      	beq.n	4002f6 <mxt_init_device+0x122>
		result ^= crcpoly;
  4002ee:	f482 0200 	eor.w	r2, r2, #8388608	; 0x800000
  4002f2:	f082 021b 	eor.w	r2, r2, #27
	*crc = (crc_tmp & 0x00FFFFFF);
  4002f6:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	twihs_package_t packet = {
  4002fa:	2300      	movs	r3, #0
  4002fc:	9301      	str	r3, [sp, #4]
  4002fe:	9305      	str	r3, [sp, #20]
  400300:	f88d 6004 	strb.w	r6, [sp, #4]
  400304:	0a36      	lsrs	r6, r6, #8
  400306:	f88d 6005 	strb.w	r6, [sp, #5]
  40030a:	2302      	movs	r3, #2
  40030c:	9302      	str	r3, [sp, #8]
  40030e:	f8cd d00c 	str.w	sp, [sp, #12]
  400312:	2303      	movs	r3, #3
  400314:	9304      	str	r3, [sp, #16]
  400316:	7b23      	ldrb	r3, [r4, #12]
  400318:	f88d 3014 	strb.w	r3, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  40031c:	a901      	add	r1, sp, #4
  40031e:	68a0      	ldr	r0, [r4, #8]
  400320:	4b50      	ldr	r3, [pc, #320]	; (400464 <mxt_init_device+0x290>)
  400322:	4798      	blx	r3
  400324:	b328      	cbz	r0, 400372 <mxt_init_device+0x19e>
		return ERR_IO_ERROR;
  400326:	f04f 33ff 	mov.w	r3, #4294967295
	if (crc_calculated != crc_read) {
  40032a:	42ab      	cmp	r3, r5
  40032c:	f040 808b 	bne.w	400446 <mxt_init_device+0x272>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  400330:	6825      	ldr	r5, [r4, #0]
  400332:	79a8      	ldrb	r0, [r5, #6]
  400334:	b198      	cbz	r0, 40035e <mxt_init_device+0x18a>
  400336:	2300      	movs	r3, #0
  400338:	3301      	adds	r3, #1
  40033a:	b2da      	uxtb	r2, r3
  40033c:	4290      	cmp	r0, r2
  40033e:	d8fb      	bhi.n	400338 <mxt_init_device+0x164>
		tot_report_ids += (device->object_list[i].num_report_ids);
  400340:	6862      	ldr	r2, [r4, #4]
  400342:	1e43      	subs	r3, r0, #1
  400344:	b2db      	uxtb	r3, r3
  400346:	3301      	adds	r3, #1
  400348:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40034c:	eb02 0143 	add.w	r1, r2, r3, lsl #1
  400350:	2000      	movs	r0, #0
  400352:	7953      	ldrb	r3, [r2, #5]
  400354:	4418      	add	r0, r3
  400356:	b2c0      	uxtb	r0, r0
  400358:	3206      	adds	r2, #6
	for (i = 0; i < device->info_object->obj_count; ++i) {
  40035a:	4291      	cmp	r1, r2
  40035c:	d1f9      	bne.n	400352 <mxt_init_device+0x17e>
			malloc(sizeof(struct mxt_report_id_map) *
  40035e:	0040      	lsls	r0, r0, #1
  400360:	4b3f      	ldr	r3, [pc, #252]	; (400460 <mxt_init_device+0x28c>)
  400362:	4798      	blx	r3
	device->report_id_map = (struct mxt_report_id_map *)
  400364:	6160      	str	r0, [r4, #20]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  400366:	79ab      	ldrb	r3, [r5, #6]
  400368:	b173      	cbz	r3, 400388 <mxt_init_device+0x1b4>
  40036a:	2700      	movs	r7, #0
  40036c:	2601      	movs	r6, #1
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  40036e:	46be      	mov	lr, r7
  400370:	e037      	b.n	4003e2 <mxt_init_device+0x20e>
		return ((uint32_t)crc[2] << 16) | ((uint16_t)crc[1] << 8) | crc[0];
  400372:	f89d 2002 	ldrb.w	r2, [sp, #2]
  400376:	f89d 3000 	ldrb.w	r3, [sp]
  40037a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40037e:	f89d 2001 	ldrb.w	r2, [sp, #1]
  400382:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400386:	e7d0      	b.n	40032a <mxt_init_device+0x156>
		return ERR_BAD_DATA;
  400388:	f06f 0003 	mvn.w	r0, #3
  40038c:	e742      	b.n	400214 <mxt_init_device+0x40>
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  40038e:	3001      	adds	r0, #1
  400390:	b2c0      	uxtb	r0, r0
  400392:	6862      	ldr	r2, [r4, #4]
  400394:	1953      	adds	r3, r2, r5
  400396:	7919      	ldrb	r1, [r3, #4]
  400398:	4281      	cmp	r1, r0
  40039a:	d31c      	bcc.n	4003d6 <mxt_init_device+0x202>
			if (device->object_list[i].num_report_ids != 0) {
  40039c:	795b      	ldrb	r3, [r3, #5]
  40039e:	2b00      	cmp	r3, #0
  4003a0:	d0f5      	beq.n	40038e <mxt_init_device+0x1ba>
				for (k = 0; k < device->object_list[i].num_report_ids; ++k) {
  4003a2:	6862      	ldr	r2, [r4, #4]
  4003a4:	442a      	add	r2, r5
  4003a6:	7953      	ldrb	r3, [r2, #5]
  4003a8:	2b00      	cmp	r3, #0
  4003aa:	d0f0      	beq.n	40038e <mxt_init_device+0x1ba>
  4003ac:	4633      	mov	r3, r6
							device->object_list[i].type;
  4003ae:	7811      	ldrb	r1, [r2, #0]
					device->report_id_map[id_index].object_type =
  4003b0:	6962      	ldr	r2, [r4, #20]
  4003b2:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
					device->report_id_map[id_index].instance = j;
  4003b6:	6962      	ldr	r2, [r4, #20]
  4003b8:	eb02 0243 	add.w	r2, r2, r3, lsl #1
  4003bc:	7050      	strb	r0, [r2, #1]
					id_index++;
  4003be:	3301      	adds	r3, #1
  4003c0:	b2db      	uxtb	r3, r3
				for (k = 0; k < device->object_list[i].num_report_ids; ++k) {
  4003c2:	6862      	ldr	r2, [r4, #4]
  4003c4:	442a      	add	r2, r5
  4003c6:	1b99      	subs	r1, r3, r6
  4003c8:	f892 c005 	ldrb.w	ip, [r2, #5]
  4003cc:	b2c9      	uxtb	r1, r1
  4003ce:	458c      	cmp	ip, r1
  4003d0:	d8ed      	bhi.n	4003ae <mxt_init_device+0x1da>
					id_index++;
  4003d2:	461e      	mov	r6, r3
  4003d4:	e7db      	b.n	40038e <mxt_init_device+0x1ba>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4003d6:	3701      	adds	r7, #1
  4003d8:	b2ff      	uxtb	r7, r7
  4003da:	6823      	ldr	r3, [r4, #0]
  4003dc:	799b      	ldrb	r3, [r3, #6]
  4003de:	429f      	cmp	r7, r3
  4003e0:	d207      	bcs.n	4003f2 <mxt_init_device+0x21e>
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  4003e2:	eb07 0347 	add.w	r3, r7, r7, lsl #1
  4003e6:	005a      	lsls	r2, r3, #1
  4003e8:	4615      	mov	r5, r2
  4003ea:	6863      	ldr	r3, [r4, #4]
  4003ec:	4413      	add	r3, r2
  4003ee:	4670      	mov	r0, lr
  4003f0:	e7d4      	b.n	40039c <mxt_init_device+0x1c8>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4003f2:	b35b      	cbz	r3, 40044c <mxt_init_device+0x278>
  4003f4:	4610      	mov	r0, r2
  4003f6:	3b01      	subs	r3, #1
  4003f8:	b2db      	uxtb	r3, r3
  4003fa:	3301      	adds	r3, #1
  4003fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  400400:	eb02 0243 	add.w	r2, r2, r3, lsl #1
  400404:	2100      	movs	r1, #0
		tot_report_ids += (device->object_list[i].num_report_ids);
  400406:	7943      	ldrb	r3, [r0, #5]
  400408:	4419      	add	r1, r3
  40040a:	b2c9      	uxtb	r1, r1
  40040c:	3006      	adds	r0, #6
	for (i = 0; i < device->info_object->obj_count; ++i) {
  40040e:	4282      	cmp	r2, r0
  400410:	d1f9      	bne.n	400406 <mxt_init_device+0x232>
	for (i = 0; i < tot_rpt_id; ++i) {
  400412:	b1f1      	cbz	r1, 400452 <mxt_init_device+0x27e>
		if (device->report_id_map[i].object_type == object_type) {
  400414:	6962      	ldr	r2, [r4, #20]
  400416:	7813      	ldrb	r3, [r2, #0]
  400418:	2b09      	cmp	r3, #9
  40041a:	d00f      	beq.n	40043c <mxt_init_device+0x268>
  40041c:	2300      	movs	r3, #0
	for (i = 0; i < tot_rpt_id; ++i) {
  40041e:	3301      	adds	r3, #1
  400420:	b2db      	uxtb	r3, r3
  400422:	428b      	cmp	r3, r1
  400424:	d00c      	beq.n	400440 <mxt_init_device+0x26c>
		if (device->report_id_map[i].object_type == object_type) {
  400426:	f812 0f02 	ldrb.w	r0, [r2, #2]!
  40042a:	2809      	cmp	r0, #9
  40042c:	d1f7      	bne.n	40041e <mxt_init_device+0x24a>
			return i;
  40042e:	b25b      	sxtb	r3, r3
	if (status == -1) {
  400430:	f1b3 3fff 	cmp.w	r3, #4294967295
  400434:	d010      	beq.n	400458 <mxt_init_device+0x284>
	device->multitouch_report_offset = status;
  400436:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
  400438:	2000      	movs	r0, #0
  40043a:	e6eb      	b.n	400214 <mxt_init_device+0x40>
		if (device->report_id_map[i].object_type == object_type) {
  40043c:	2300      	movs	r3, #0
  40043e:	e7f6      	b.n	40042e <mxt_init_device+0x25a>
		return ERR_BAD_DATA;
  400440:	f06f 0003 	mvn.w	r0, #3
  400444:	e6e6      	b.n	400214 <mxt_init_device+0x40>
		return ERR_BAD_DATA;
  400446:	f06f 0003 	mvn.w	r0, #3
  40044a:	e6e3      	b.n	400214 <mxt_init_device+0x40>
		return ERR_BAD_DATA;
  40044c:	f06f 0003 	mvn.w	r0, #3
  400450:	e6e0      	b.n	400214 <mxt_init_device+0x40>
  400452:	f06f 0003 	mvn.w	r0, #3
  400456:	e6dd      	b.n	400214 <mxt_init_device+0x40>
  400458:	f06f 0003 	mvn.w	r0, #3
  40045c:	e6da      	b.n	400214 <mxt_init_device+0x40>
  40045e:	bf00      	nop
  400460:	00402a2d 	.word	0x00402a2d
  400464:	00401c35 	.word	0x00401c35
  400468:	0080001b 	.word	0x0080001b

0040046c <mxt_get_object_address>:
uint16_t mxt_get_object_address(struct mxt_device *device, uint8_t object_id,
		uint8_t instance)
{
	uint8_t i;

	for (i = 0; i < device->info_object->obj_count; i++) {
  40046c:	6803      	ldr	r3, [r0, #0]
  40046e:	799a      	ldrb	r2, [r3, #6]
  400470:	b1d2      	cbz	r2, 4004a8 <mxt_get_object_address+0x3c>
{
  400472:	b410      	push	{r4}
		if (object_id == device->object_list[i].type) {
  400474:	6844      	ldr	r4, [r0, #4]
  400476:	7823      	ldrb	r3, [r4, #0]
  400478:	428b      	cmp	r3, r1
  40047a:	d00e      	beq.n	40049a <mxt_get_object_address+0x2e>
  40047c:	1da3      	adds	r3, r4, #6
  40047e:	3a01      	subs	r2, #1
  400480:	b2d2      	uxtb	r2, r2
  400482:	3201      	adds	r2, #1
  400484:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  400488:	eb04 0242 	add.w	r2, r4, r2, lsl #1
	for (i = 0; i < device->info_object->obj_count; i++) {
  40048c:	4293      	cmp	r3, r2
  40048e:	d009      	beq.n	4004a4 <mxt_get_object_address+0x38>
		if (object_id == device->object_list[i].type) {
  400490:	461c      	mov	r4, r3
  400492:	f813 0b06 	ldrb.w	r0, [r3], #6
  400496:	4288      	cmp	r0, r1
  400498:	d1f8      	bne.n	40048c <mxt_get_object_address+0x20>
			return device->object_list[i].start_address;
  40049a:	f8b4 0001 	ldrh.w	r0, [r4, #1]
		}
	}

	return 0;
}
  40049e:	f85d 4b04 	ldr.w	r4, [sp], #4
  4004a2:	4770      	bx	lr
	return 0;
  4004a4:	2000      	movs	r0, #0
  4004a6:	e7fa      	b.n	40049e <mxt_get_object_address+0x32>
  4004a8:	2000      	movs	r0, #0
  4004aa:	4770      	bx	lr

004004ac <mxt_write_config_object>:
 * \param *obj_data Pointer to memory buffer containing object data
 * \result Operation result status code
 */
status_code_t mxt_write_config_object(struct mxt_device *device,
		mxt_memory_adr memory_adr, void *obj_data)
{
  4004ac:	b530      	push	{r4, r5, lr}
  4004ae:	b087      	sub	sp, #28
	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  4004b0:	2300      	movs	r3, #0
  4004b2:	9301      	str	r3, [sp, #4]
  4004b4:	9304      	str	r3, [sp, #16]
  4004b6:	9305      	str	r3, [sp, #20]
  4004b8:	f88d 1004 	strb.w	r1, [sp, #4]
  4004bc:	0a0b      	lsrs	r3, r1, #8
  4004be:	f88d 3005 	strb.w	r3, [sp, #5]
  4004c2:	2302      	movs	r3, #2
  4004c4:	9302      	str	r3, [sp, #8]
  4004c6:	9203      	str	r2, [sp, #12]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4004c8:	6803      	ldr	r3, [r0, #0]
  4004ca:	799a      	ldrb	r2, [r3, #6]
  4004cc:	b1ba      	cbz	r2, 4004fe <mxt_write_config_object+0x52>
		if (device->object_list[i].start_address == mem_adr) {
  4004ce:	6844      	ldr	r4, [r0, #4]
  4004d0:	f8b4 3001 	ldrh.w	r3, [r4, #1]
  4004d4:	428b      	cmp	r3, r1
  4004d6:	d00f      	beq.n	4004f8 <mxt_write_config_object+0x4c>
  4004d8:	1da3      	adds	r3, r4, #6
  4004da:	3a01      	subs	r2, #1
  4004dc:	b2d2      	uxtb	r2, r2
  4004de:	3201      	adds	r2, #1
  4004e0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  4004e4:	eb04 0242 	add.w	r2, r4, r2, lsl #1
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4004e8:	4293      	cmp	r3, r2
  4004ea:	d016      	beq.n	40051a <mxt_write_config_object+0x6e>
		if (device->object_list[i].start_address == mem_adr) {
  4004ec:	461c      	mov	r4, r3
  4004ee:	3306      	adds	r3, #6
  4004f0:	f8b4 5001 	ldrh.w	r5, [r4, #1]
  4004f4:	428d      	cmp	r5, r1
  4004f6:	d1f7      	bne.n	4004e8 <mxt_write_config_object+0x3c>
			return (device->object_list[i].size + 1);
  4004f8:	78e2      	ldrb	r2, [r4, #3]
  4004fa:	3201      	adds	r2, #1
  4004fc:	b2d2      	uxtb	r2, r2
		.addr[0]      = memory_adr,
		.addr[1]      = memory_adr >> 8,
		.addr_length  = sizeof(mxt_memory_adr),
		.chip         = device->mxt_chip_adr,
		.buffer       = obj_data,
		.length       = mxt_get_object_size(device, memory_adr)
  4004fe:	9204      	str	r2, [sp, #16]
	twihs_package_t packet = {
  400500:	7b03      	ldrb	r3, [r0, #12]
  400502:	f88d 3014 	strb.w	r3, [sp, #20]
	};

	if (twihs_master_write(device->interface, &packet) != STATUS_OK) {
  400506:	a901      	add	r1, sp, #4
  400508:	6880      	ldr	r0, [r0, #8]
  40050a:	4b05      	ldr	r3, [pc, #20]	; (400520 <mxt_write_config_object+0x74>)
  40050c:	4798      	blx	r3
  40050e:	3000      	adds	r0, #0
  400510:	bf18      	it	ne
  400512:	2001      	movne	r0, #1
		return ERR_IO_ERROR;
	} else {
		return STATUS_OK;
	}

}
  400514:	4240      	negs	r0, r0
  400516:	b007      	add	sp, #28
  400518:	bd30      	pop	{r4, r5, pc}
	return 0;
  40051a:	2200      	movs	r2, #0
  40051c:	e7ef      	b.n	4004fe <mxt_write_config_object+0x52>
  40051e:	bf00      	nop
  400520:	00401ce1 	.word	0x00401ce1

00400524 <mxt_write_config_reg>:
 * \param value Value to be written to register
 * \result Operation result status code
 */
status_code_t mxt_write_config_reg(struct mxt_device *device,
		mxt_memory_adr memory_adr, uint8_t value)
{
  400524:	b500      	push	{lr}
  400526:	b089      	sub	sp, #36	; 0x24
  400528:	f88d 2007 	strb.w	r2, [sp, #7]
	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  40052c:	2300      	movs	r3, #0
  40052e:	9303      	str	r3, [sp, #12]
  400530:	9307      	str	r3, [sp, #28]
  400532:	f88d 100c 	strb.w	r1, [sp, #12]
  400536:	0a09      	lsrs	r1, r1, #8
  400538:	f88d 100d 	strb.w	r1, [sp, #13]
  40053c:	2302      	movs	r3, #2
  40053e:	9304      	str	r3, [sp, #16]
  400540:	f10d 0307 	add.w	r3, sp, #7
  400544:	9305      	str	r3, [sp, #20]
  400546:	2301      	movs	r3, #1
  400548:	9306      	str	r3, [sp, #24]
  40054a:	7b03      	ldrb	r3, [r0, #12]
  40054c:	f88d 301c 	strb.w	r3, [sp, #28]
		.chip         = device->mxt_chip_adr,
		.buffer       = &value,
		.length       = sizeof(value)
	};

	if (twihs_master_write(device->interface, &packet) != STATUS_OK) {
  400550:	a903      	add	r1, sp, #12
  400552:	6880      	ldr	r0, [r0, #8]
  400554:	4b04      	ldr	r3, [pc, #16]	; (400568 <mxt_write_config_reg+0x44>)
  400556:	4798      	blx	r3
  400558:	3000      	adds	r0, #0
  40055a:	bf18      	it	ne
  40055c:	2001      	movne	r0, #1
		return ERR_IO_ERROR;
	} else {
		return STATUS_OK;
	}
}
  40055e:	4240      	negs	r0, r0
  400560:	b009      	add	sp, #36	; 0x24
  400562:	f85d fb04 	ldr.w	pc, [sp], #4
  400566:	bf00      	nop
  400568:	00401ce1 	.word	0x00401ce1

0040056c <mxt_is_message_pending>:
 * \param *device Pointer to mxt_device instance
 * \return Return /CHG pin status
 */
bool mxt_is_message_pending(struct mxt_device *device)
{
	if (ioport_get_pin_level(device->chgpin) == false) {
  40056c:	6982      	ldr	r2, [r0, #24]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40056e:	4b07      	ldr	r3, [pc, #28]	; (40058c <mxt_is_message_pending+0x20>)
  400570:	eb03 1352 	add.w	r3, r3, r2, lsr #5
  400574:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  400576:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
	return 1U << (pin & 0x1F);
  400578:	f002 021f 	and.w	r2, r2, #31
  40057c:	2301      	movs	r3, #1
  40057e:	fa03 f202 	lsl.w	r2, r3, r2
  400582:	420a      	tst	r2, r1
		return true;
	} else {
		return false;
	}
}
  400584:	bf0c      	ite	eq
  400586:	4618      	moveq	r0, r3
  400588:	2000      	movne	r0, #0
  40058a:	4770      	bx	lr
  40058c:	00200707 	.word	0x00200707

00400590 <mxt_read_message>:
 * \param *message Pointer to mxt_message instance
 * \return Operation result status code
 */
status_code_t mxt_read_message(struct mxt_device *device,
		struct mxt_conf_messageprocessor_t5 *message)
{
  400590:	b530      	push	{r4, r5, lr}
  400592:	b087      	sub	sp, #28
  400594:	4604      	mov	r4, r0
  400596:	460d      	mov	r5, r1
	uint16_t obj_adr = mxt_get_object_address(device,
  400598:	2200      	movs	r2, #0
  40059a:	2105      	movs	r1, #5
  40059c:	4b0d      	ldr	r3, [pc, #52]	; (4005d4 <mxt_read_message+0x44>)
  40059e:	4798      	blx	r3
			MXT_GEN_MESSAGEPROCESSOR_T5, 0);

	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  4005a0:	2300      	movs	r3, #0
  4005a2:	9301      	str	r3, [sp, #4]
  4005a4:	9305      	str	r3, [sp, #20]
  4005a6:	f88d 0004 	strb.w	r0, [sp, #4]
  4005aa:	0a00      	lsrs	r0, r0, #8
  4005ac:	f88d 0005 	strb.w	r0, [sp, #5]
  4005b0:	2302      	movs	r3, #2
  4005b2:	9302      	str	r3, [sp, #8]
  4005b4:	9503      	str	r5, [sp, #12]
  4005b6:	2309      	movs	r3, #9
  4005b8:	9304      	str	r3, [sp, #16]
  4005ba:	7b23      	ldrb	r3, [r4, #12]
  4005bc:	f88d 3014 	strb.w	r3, [sp, #20]
		.buffer       = message,
		.length       = MXT_TWI_MSG_SIZE_T5
	};

	/* Read information from the slave */
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  4005c0:	a901      	add	r1, sp, #4
  4005c2:	68a0      	ldr	r0, [r4, #8]
  4005c4:	4b04      	ldr	r3, [pc, #16]	; (4005d8 <mxt_read_message+0x48>)
  4005c6:	4798      	blx	r3
  4005c8:	3000      	adds	r0, #0
  4005ca:	bf18      	it	ne
  4005cc:	2001      	movne	r0, #1
		return mxt_validate_message(&packet);
#else
		return STATUS_OK;
#endif
	}
}
  4005ce:	4240      	negs	r0, r0
  4005d0:	b007      	add	sp, #28
  4005d2:	bd30      	pop	{r4, r5, pc}
  4005d4:	0040046d 	.word	0x0040046d
  4005d8:	00401c35 	.word	0x00401c35

004005dc <mxt_read_touch_event>:
 * \param *touch_event Pointer to mxt_touch_event instance
 * \return Operation result status code
 */
status_code_t mxt_read_touch_event(struct mxt_device *device,
		struct mxt_touch_event *touch_event)
{
  4005dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4005de:	b085      	sub	sp, #20
  4005e0:	4604      	mov	r4, r0
  4005e2:	460e      	mov	r6, r1
	uint8_t obj_type, status;
	struct mxt_conf_messageprocessor_t5 message;

	while (mxt_is_message_pending(device)) {
  4005e4:	4d17      	ldr	r5, [pc, #92]	; (400644 <mxt_read_touch_event+0x68>)
		if((status = mxt_read_message(device, &message)) != STATUS_OK) {
  4005e6:	4f18      	ldr	r7, [pc, #96]	; (400648 <mxt_read_touch_event+0x6c>)
	while (mxt_is_message_pending(device)) {
  4005e8:	4620      	mov	r0, r4
  4005ea:	47a8      	blx	r5
  4005ec:	b328      	cbz	r0, 40063a <mxt_read_touch_event+0x5e>
		if((status = mxt_read_message(device, &message)) != STATUS_OK) {
  4005ee:	a901      	add	r1, sp, #4
  4005f0:	4620      	mov	r0, r4
  4005f2:	47b8      	blx	r7
  4005f4:	4603      	mov	r3, r0
  4005f6:	bb10      	cbnz	r0, 40063e <mxt_read_touch_event+0x62>
 * \return Operation
 */
enum mxt_object_type mxt_get_object_type(struct mxt_device *device,
		struct mxt_conf_messageprocessor_t5 *message)
{
	return (enum mxt_object_type)(device->report_id_map[message->reportid].object_type);
  4005f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
  4005fc:	6962      	ldr	r2, [r4, #20]
		if (obj_type == MXT_TOUCH_MULTITOUCHSCREEN_T9) {
  4005fe:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
  400602:	2a09      	cmp	r2, #9
  400604:	d1f0      	bne.n	4005e8 <mxt_read_touch_event+0xc>
			touch_event->id = (message.reportid -
  400606:	7f22      	ldrb	r2, [r4, #28]
  400608:	1a9b      	subs	r3, r3, r2
  40060a:	7033      	strb	r3, [r6, #0]
			touch_event->status = message.message[0];
  40060c:	f89d 3005 	ldrb.w	r3, [sp, #5]
  400610:	7073      	strb	r3, [r6, #1]
					((message.message[3] & 0xf0) >> 4);
  400612:	f89d 3008 	ldrb.w	r3, [sp, #8]
			touch_event->x = (message.message[1] << 4) |
  400616:	f89d 1006 	ldrb.w	r1, [sp, #6]
					((message.message[3] & 0xf0) >> 4);
  40061a:	091a      	lsrs	r2, r3, #4
			touch_event->x = (message.message[1] << 4) |
  40061c:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
  400620:	8072      	strh	r2, [r6, #2]
			touch_event->y = (message.message[2] << 4) |
  400622:	f89d 2007 	ldrb.w	r2, [sp, #7]
					(message.message[3] & 0x0f);
  400626:	f003 030f 	and.w	r3, r3, #15
			touch_event->y = (message.message[2] << 4) |
  40062a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  40062e:	80b3      	strh	r3, [r6, #4]
			touch_event->size = message.message[4];
  400630:	f89d 3009 	ldrb.w	r3, [sp, #9]
  400634:	71b3      	strb	r3, [r6, #6]
			return STATUS_OK;
  400636:	2300      	movs	r3, #0
  400638:	e001      	b.n	40063e <mxt_read_touch_event+0x62>
	return ERR_BAD_DATA;
  40063a:	f06f 0303 	mvn.w	r3, #3
}
  40063e:	4618      	mov	r0, r3
  400640:	b005      	add	sp, #20
  400642:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400644:	0040056d 	.word	0x0040056d
  400648:	00400591 	.word	0x00400591

0040064c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40064c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40064e:	4810      	ldr	r0, [pc, #64]	; (400690 <sysclk_init+0x44>)
  400650:	4b10      	ldr	r3, [pc, #64]	; (400694 <sysclk_init+0x48>)
  400652:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400654:	213e      	movs	r1, #62	; 0x3e
  400656:	2000      	movs	r0, #0
  400658:	4b0f      	ldr	r3, [pc, #60]	; (400698 <sysclk_init+0x4c>)
  40065a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40065c:	4c0f      	ldr	r4, [pc, #60]	; (40069c <sysclk_init+0x50>)
  40065e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400660:	2800      	cmp	r0, #0
  400662:	d0fc      	beq.n	40065e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400664:	4b0e      	ldr	r3, [pc, #56]	; (4006a0 <sysclk_init+0x54>)
  400666:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400668:	4a0e      	ldr	r2, [pc, #56]	; (4006a4 <sysclk_init+0x58>)
  40066a:	4b0f      	ldr	r3, [pc, #60]	; (4006a8 <sysclk_init+0x5c>)
  40066c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  40066e:	4c0f      	ldr	r4, [pc, #60]	; (4006ac <sysclk_init+0x60>)
  400670:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400672:	2800      	cmp	r0, #0
  400674:	d0fc      	beq.n	400670 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400676:	2002      	movs	r0, #2
  400678:	4b0d      	ldr	r3, [pc, #52]	; (4006b0 <sysclk_init+0x64>)
  40067a:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40067c:	2000      	movs	r0, #0
  40067e:	4b0d      	ldr	r3, [pc, #52]	; (4006b4 <sysclk_init+0x68>)
  400680:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400682:	4b0d      	ldr	r3, [pc, #52]	; (4006b8 <sysclk_init+0x6c>)
  400684:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400686:	480d      	ldr	r0, [pc, #52]	; (4006bc <sysclk_init+0x70>)
  400688:	4b02      	ldr	r3, [pc, #8]	; (400694 <sysclk_init+0x48>)
  40068a:	4798      	blx	r3
  40068c:	bd10      	pop	{r4, pc}
  40068e:	bf00      	nop
  400690:	07270e00 	.word	0x07270e00
  400694:	0040208d 	.word	0x0040208d
  400698:	00401775 	.word	0x00401775
  40069c:	004017c9 	.word	0x004017c9
  4006a0:	004017d9 	.word	0x004017d9
  4006a4:	20183f01 	.word	0x20183f01
  4006a8:	400e0600 	.word	0x400e0600
  4006ac:	004017e9 	.word	0x004017e9
  4006b0:	004016d9 	.word	0x004016d9
  4006b4:	00401711 	.word	0x00401711
  4006b8:	00401f81 	.word	0x00401f81
  4006bc:	11e1a300 	.word	0x11e1a300

004006c0 <usart_serial_write_packet>:
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
	while (len) {
  4006c0:	2a00      	cmp	r2, #0
  4006c2:	d054      	beq.n	40076e <usart_serial_write_packet+0xae>
{
  4006c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4006c8:	4692      	mov	sl, r2
  4006ca:	4606      	mov	r6, r0
  4006cc:	460f      	mov	r7, r1
  4006ce:	448a      	add	sl, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4006d0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 40078c <usart_serial_write_packet+0xcc>
		while (uart_write((Uart*)p_usart, c)!=0);
  4006d4:	4d27      	ldr	r5, [pc, #156]	; (400774 <usart_serial_write_packet+0xb4>)
		return 1;
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4006d6:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 400790 <usart_serial_write_packet+0xd0>
  4006da:	e006      	b.n	4006ea <usart_serial_write_packet+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  4006dc:	4621      	mov	r1, r4
  4006de:	4640      	mov	r0, r8
  4006e0:	47a8      	blx	r5
  4006e2:	2800      	cmp	r0, #0
  4006e4:	d1fa      	bne.n	4006dc <usart_serial_write_packet+0x1c>
	while (len) {
  4006e6:	45ba      	cmp	sl, r7
  4006e8:	d03e      	beq.n	400768 <usart_serial_write_packet+0xa8>
		usart_serial_putchar(usart, *data);
  4006ea:	f817 4b01 	ldrb.w	r4, [r7], #1
	if (UART0 == (Uart*)p_usart) {
  4006ee:	4546      	cmp	r6, r8
  4006f0:	d0f4      	beq.n	4006dc <usart_serial_write_packet+0x1c>
	if (UART1 == (Uart*)p_usart) {
  4006f2:	454e      	cmp	r6, r9
  4006f4:	d016      	beq.n	400724 <usart_serial_write_packet+0x64>
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4006f6:	4b20      	ldr	r3, [pc, #128]	; (400778 <usart_serial_write_packet+0xb8>)
  4006f8:	429e      	cmp	r6, r3
  4006fa:	d019      	beq.n	400730 <usart_serial_write_packet+0x70>
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4006fc:	4b1f      	ldr	r3, [pc, #124]	; (40077c <usart_serial_write_packet+0xbc>)
  4006fe:	429e      	cmp	r6, r3
  400700:	d01c      	beq.n	40073c <usart_serial_write_packet+0x7c>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400702:	4b1f      	ldr	r3, [pc, #124]	; (400780 <usart_serial_write_packet+0xc0>)
  400704:	429e      	cmp	r6, r3
  400706:	d01f      	beq.n	400748 <usart_serial_write_packet+0x88>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400708:	4b1e      	ldr	r3, [pc, #120]	; (400784 <usart_serial_write_packet+0xc4>)
  40070a:	429e      	cmp	r6, r3
  40070c:	d024      	beq.n	400758 <usart_serial_write_packet+0x98>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  40070e:	4b1e      	ldr	r3, [pc, #120]	; (400788 <usart_serial_write_packet+0xc8>)
  400710:	429e      	cmp	r6, r3
  400712:	d1e8      	bne.n	4006e6 <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  400714:	f8df b07c 	ldr.w	fp, [pc, #124]	; 400794 <usart_serial_write_packet+0xd4>
  400718:	4621      	mov	r1, r4
  40071a:	481b      	ldr	r0, [pc, #108]	; (400788 <usart_serial_write_packet+0xc8>)
  40071c:	47d8      	blx	fp
  40071e:	2800      	cmp	r0, #0
  400720:	d1fa      	bne.n	400718 <usart_serial_write_packet+0x58>
  400722:	e7e0      	b.n	4006e6 <usart_serial_write_packet+0x26>
		while (uart_write((Uart*)p_usart, c)!=0);
  400724:	4621      	mov	r1, r4
  400726:	4648      	mov	r0, r9
  400728:	47a8      	blx	r5
  40072a:	2800      	cmp	r0, #0
  40072c:	d1fa      	bne.n	400724 <usart_serial_write_packet+0x64>
  40072e:	e7da      	b.n	4006e6 <usart_serial_write_packet+0x26>
		while (uart_write((Uart*)p_usart, c)!=0);
  400730:	4621      	mov	r1, r4
  400732:	4811      	ldr	r0, [pc, #68]	; (400778 <usart_serial_write_packet+0xb8>)
  400734:	47a8      	blx	r5
  400736:	2800      	cmp	r0, #0
  400738:	d1fa      	bne.n	400730 <usart_serial_write_packet+0x70>
  40073a:	e7d4      	b.n	4006e6 <usart_serial_write_packet+0x26>
		while (uart_write((Uart*)p_usart, c)!=0);
  40073c:	4621      	mov	r1, r4
  40073e:	480f      	ldr	r0, [pc, #60]	; (40077c <usart_serial_write_packet+0xbc>)
  400740:	47a8      	blx	r5
  400742:	2800      	cmp	r0, #0
  400744:	d1fa      	bne.n	40073c <usart_serial_write_packet+0x7c>
  400746:	e7ce      	b.n	4006e6 <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  400748:	f8df b048 	ldr.w	fp, [pc, #72]	; 400794 <usart_serial_write_packet+0xd4>
  40074c:	4621      	mov	r1, r4
  40074e:	480c      	ldr	r0, [pc, #48]	; (400780 <usart_serial_write_packet+0xc0>)
  400750:	47d8      	blx	fp
  400752:	2800      	cmp	r0, #0
  400754:	d1fa      	bne.n	40074c <usart_serial_write_packet+0x8c>
  400756:	e7c6      	b.n	4006e6 <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  400758:	f8df b038 	ldr.w	fp, [pc, #56]	; 400794 <usart_serial_write_packet+0xd4>
  40075c:	4621      	mov	r1, r4
  40075e:	4809      	ldr	r0, [pc, #36]	; (400784 <usart_serial_write_packet+0xc4>)
  400760:	47d8      	blx	fp
  400762:	2800      	cmp	r0, #0
  400764:	d1fa      	bne.n	40075c <usart_serial_write_packet+0x9c>
  400766:	e7be      	b.n	4006e6 <usart_serial_write_packet+0x26>
		len--;
		data++;
	}
	return STATUS_OK;
}
  400768:	2000      	movs	r0, #0
  40076a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40076e:	2000      	movs	r0, #0
  400770:	4770      	bx	lr
  400772:	bf00      	nop
  400774:	00401d81 	.word	0x00401d81
  400778:	400e1a00 	.word	0x400e1a00
  40077c:	400e1c00 	.word	0x400e1c00
  400780:	40024000 	.word	0x40024000
  400784:	40028000 	.word	0x40028000
  400788:	4002c000 	.word	0x4002c000
  40078c:	400e0800 	.word	0x400e0800
  400790:	400e0a00 	.word	0x400e0a00
  400794:	00401e89 	.word	0x00401e89

00400798 <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
  400798:	b510      	push	{r4, lr}
  40079a:	4604      	mov	r4, r0
#if SAMG55
	flexcom_enable(BOARD_FLEXCOM_SPI);
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
#else
	spi_enable_clock(p_spi);
  40079c:	4b10      	ldr	r3, [pc, #64]	; (4007e0 <spi_master_init+0x48>)
  40079e:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
  4007a0:	2380      	movs	r3, #128	; 0x80
  4007a2:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  4007a4:	6863      	ldr	r3, [r4, #4]
  4007a6:	f043 0301 	orr.w	r3, r3, #1
  4007aa:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  4007ac:	6863      	ldr	r3, [r4, #4]
  4007ae:	f043 0310 	orr.w	r3, r3, #16
  4007b2:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  4007b4:	6863      	ldr	r3, [r4, #4]
  4007b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4007ba:	6063      	str	r3, [r4, #4]
#endif
	spi_reset(p_spi);
	spi_set_master_mode(p_spi);
	spi_disable_mode_fault_detect(p_spi);
	spi_disable_loopback(p_spi);
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
  4007bc:	2100      	movs	r1, #0
  4007be:	4620      	mov	r0, r4
  4007c0:	4b08      	ldr	r3, [pc, #32]	; (4007e4 <spi_master_init+0x4c>)
  4007c2:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  4007c4:	6863      	ldr	r3, [r4, #4]
  4007c6:	f023 0302 	bic.w	r3, r3, #2
  4007ca:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
  4007cc:	6863      	ldr	r3, [r4, #4]
  4007ce:	f023 0304 	bic.w	r3, r3, #4
  4007d2:	6063      	str	r3, [r4, #4]
	spi_set_fixed_peripheral_select(p_spi);
	spi_disable_peripheral_select_decode(p_spi);
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
  4007d4:	2100      	movs	r1, #0
  4007d6:	4620      	mov	r0, r4
  4007d8:	4b03      	ldr	r3, [pc, #12]	; (4007e8 <spi_master_init+0x50>)
  4007da:	4798      	blx	r3
  4007dc:	bd10      	pop	{r4, pc}
  4007de:	bf00      	nop
  4007e0:	004019d5 	.word	0x004019d5
  4007e4:	00401a01 	.word	0x00401a01
  4007e8:	00401a17 	.word	0x00401a17

004007ec <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
  4007ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4007f0:	4604      	mov	r4, r0
  4007f2:	460d      	mov	r5, r1
  4007f4:	4616      	mov	r6, r2
#if (SAM4L)
    int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_pba_hz());
#else
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_peripheral_hz());
  4007f6:	4915      	ldr	r1, [pc, #84]	; (40084c <spi_master_setup_device+0x60>)
  4007f8:	4618      	mov	r0, r3
  4007fa:	4b15      	ldr	r3, [pc, #84]	; (400850 <spi_master_setup_device+0x64>)
  4007fc:	4798      	blx	r3
  4007fe:	4607      	mov	r7, r0
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
  400800:	2300      	movs	r3, #0
  400802:	461a      	mov	r2, r3
  400804:	6829      	ldr	r1, [r5, #0]
  400806:	4620      	mov	r0, r4
  400808:	f8df 805c 	ldr.w	r8, [pc, #92]	; 400868 <spi_master_setup_device+0x7c>
  40080c:	47c0      	blx	r8
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
  40080e:	2208      	movs	r2, #8
  400810:	6829      	ldr	r1, [r5, #0]
  400812:	4620      	mov	r0, r4
  400814:	4b0f      	ldr	r3, [pc, #60]	; (400854 <spi_master_setup_device+0x68>)
  400816:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
  400818:	b2fa      	uxtb	r2, r7
  40081a:	6829      	ldr	r1, [r5, #0]
  40081c:	4620      	mov	r0, r4
  40081e:	4b0e      	ldr	r3, [pc, #56]	; (400858 <spi_master_setup_device+0x6c>)
  400820:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
  400822:	2208      	movs	r2, #8
  400824:	6829      	ldr	r1, [r5, #0]
  400826:	4620      	mov	r0, r4
  400828:	4b0c      	ldr	r3, [pc, #48]	; (40085c <spi_master_setup_device+0x70>)
  40082a:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
  40082c:	0872      	lsrs	r2, r6, #1
  40082e:	6829      	ldr	r1, [r5, #0]
  400830:	4620      	mov	r0, r4
  400832:	4b0b      	ldr	r3, [pc, #44]	; (400860 <spi_master_setup_device+0x74>)
  400834:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
  400836:	f086 0201 	eor.w	r2, r6, #1
  40083a:	f002 0201 	and.w	r2, r2, #1
  40083e:	6829      	ldr	r1, [r5, #0]
  400840:	4620      	mov	r0, r4
  400842:	4b08      	ldr	r3, [pc, #32]	; (400864 <spi_master_setup_device+0x78>)
  400844:	4798      	blx	r3
  400846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40084a:	bf00      	nop
  40084c:	08f0d180 	.word	0x08f0d180
  400850:	00401af3 	.word	0x00401af3
  400854:	00401adf 	.word	0x00401adf
  400858:	00401b09 	.word	0x00401b09
  40085c:	00401a99 	.word	0x00401a99
  400860:	00401a5d 	.word	0x00401a5d
  400864:	00401a7b 	.word	0x00401a7b
  400868:	00401b31 	.word	0x00401b31

0040086c <spi_select_device>:
 * \param p_spi   Base address of the SPI instance.
 * \param device  SPI device.
 *
 */
void spi_select_device(Spi *p_spi, struct spi_device *device)
{
  40086c:	b508      	push	{r3, lr}
	if (p_spi->SPI_MR & SPI_MR_PCSDEC) {
  40086e:	6843      	ldr	r3, [r0, #4]
	if (spi_get_peripheral_select_decode_setting(p_spi)) {
  400870:	f013 0f04 	tst.w	r3, #4
  400874:	d006      	beq.n	400884 <spi_select_device+0x18>
		if (device->id < MAX_NUM_WITH_DECODER) {
  400876:	6809      	ldr	r1, [r1, #0]
  400878:	290f      	cmp	r1, #15
  40087a:	d900      	bls.n	40087e <spi_select_device+0x12>
  40087c:	bd08      	pop	{r3, pc}
			spi_set_peripheral_chip_select_value(p_spi, device->id);
  40087e:	4b06      	ldr	r3, [pc, #24]	; (400898 <spi_select_device+0x2c>)
  400880:	4798      	blx	r3
  400882:	bd08      	pop	{r3, pc}
		}
	} else {
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
  400884:	6809      	ldr	r1, [r1, #0]
  400886:	2903      	cmp	r1, #3
  400888:	d8f8      	bhi.n	40087c <spi_select_device+0x10>
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
  40088a:	2301      	movs	r3, #1
  40088c:	fa03 f101 	lsl.w	r1, r3, r1
  400890:	43c9      	mvns	r1, r1
  400892:	4b01      	ldr	r3, [pc, #4]	; (400898 <spi_select_device+0x2c>)
  400894:	4798      	blx	r3
		}
	}
}
  400896:	e7f1      	b.n	40087c <spi_select_device+0x10>
  400898:	00401a01 	.word	0x00401a01

0040089c <spi_write_packet>:
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t i = 0;
	uint8_t val;

	while (len) {
  40089c:	b11a      	cbz	r2, 4008a6 <spi_write_packet+0xa>
{
  40089e:	b410      	push	{r4}
  4008a0:	460c      	mov	r4, r1
  4008a2:	4411      	add	r1, r2
  4008a4:	e006      	b.n	4008b4 <spi_write_packet+0x18>
		spi_write_single(p_spi, val);
		i++;
		len--;
	}

	return STATUS_OK;
  4008a6:	2000      	movs	r0, #0
  4008a8:	4770      	bx	lr
		val = data[i];
  4008aa:	f814 3b01 	ldrb.w	r3, [r4], #1
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4008ae:	60c3      	str	r3, [r0, #12]
	while (len) {
  4008b0:	42a1      	cmp	r1, r4
  4008b2:	d00c      	beq.n	4008ce <spi_write_packet+0x32>
{
  4008b4:	f643 2399 	movw	r3, #15001	; 0x3a99
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_ready(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
  4008b8:	6902      	ldr	r2, [r0, #16]
		while (!spi_is_tx_ready(p_spi)) {
  4008ba:	f012 0f02 	tst.w	r2, #2
  4008be:	d1f4      	bne.n	4008aa <spi_write_packet+0xe>
			if (!timeout--) {
  4008c0:	3b01      	subs	r3, #1
  4008c2:	d1f9      	bne.n	4008b8 <spi_write_packet+0x1c>
				return ERR_TIMEOUT;
  4008c4:	f06f 0002 	mvn.w	r0, #2
}
  4008c8:	f85d 4b04 	ldr.w	r4, [sp], #4
  4008cc:	4770      	bx	lr
	return STATUS_OK;
  4008ce:	2000      	movs	r0, #0
  4008d0:	e7fa      	b.n	4008c8 <spi_write_packet+0x2c>

004008d2 <spi_read_packet>:
{
	uint32_t timeout = SPI_TIMEOUT;
	uint8_t val;
	uint32_t i = 0;

	while (len) {
  4008d2:	b13a      	cbz	r2, 4008e4 <spi_read_packet+0x12>
{
  4008d4:	b470      	push	{r4, r5, r6}
  4008d6:	4615      	mov	r5, r2
  4008d8:	460c      	mov	r4, r1
  4008da:	440d      	add	r5, r1
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4008dc:	26ff      	movs	r6, #255	; 0xff
 *
 * \return 1 if the SPI Receiver is ready, otherwise 0.
 */
static inline uint32_t spi_is_rx_ready(Spi *p_spi)
{
	if ((p_spi->SPI_SR & (SPI_SR_RDRF | SPI_SR_TXEMPTY))
  4008de:	f240 2101 	movw	r1, #513	; 0x201
  4008e2:	e012      	b.n	40090a <spi_read_packet+0x38>
		data[i] = val;
		i++;
		len--;
	}

	return STATUS_OK;
  4008e4:	2000      	movs	r0, #0
  4008e6:	4770      	bx	lr
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4008e8:	60c6      	str	r6, [r0, #12]
		while (!spi_is_rx_ready(p_spi)) {
  4008ea:	f643 2399 	movw	r3, #15001	; 0x3a99
	if ((p_spi->SPI_SR & (SPI_SR_RDRF | SPI_SR_TXEMPTY))
  4008ee:	6902      	ldr	r2, [r0, #16]
  4008f0:	ea31 0202 	bics.w	r2, r1, r2
  4008f4:	d004      	beq.n	400900 <spi_read_packet+0x2e>
			if (!timeout--) {
  4008f6:	3b01      	subs	r3, #1
  4008f8:	d1f9      	bne.n	4008ee <spi_read_packet+0x1c>
				return ERR_TIMEOUT;
  4008fa:	f06f 0002 	mvn.w	r0, #2
  4008fe:	e00e      	b.n	40091e <spi_read_packet+0x4c>
	return (p_spi->SPI_RDR & SPI_RDR_RD_Msk);
  400900:	6883      	ldr	r3, [r0, #8]
 * \param data      Data to read.
 *
 */
static inline void spi_read_single(Spi *p_spi, uint8_t *data)
{
	*data = (uint8_t)spi_get(p_spi);
  400902:	f804 3b01 	strb.w	r3, [r4], #1
	while (len) {
  400906:	42a5      	cmp	r5, r4
  400908:	d00b      	beq.n	400922 <spi_read_packet+0x50>
{
  40090a:	f643 2399 	movw	r3, #15001	; 0x3a99
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
  40090e:	6902      	ldr	r2, [r0, #16]
		while (!spi_is_tx_ready(p_spi)) {
  400910:	f012 0f02 	tst.w	r2, #2
  400914:	d1e8      	bne.n	4008e8 <spi_read_packet+0x16>
			if (!timeout--) {
  400916:	3b01      	subs	r3, #1
  400918:	d1f9      	bne.n	40090e <spi_read_packet+0x3c>
				return ERR_TIMEOUT;
  40091a:	f06f 0002 	mvn.w	r0, #2
}
  40091e:	bc70      	pop	{r4, r5, r6}
  400920:	4770      	bx	lr
	return STATUS_OK;
  400922:	2000      	movs	r0, #0
  400924:	e7fb      	b.n	40091e <spi_read_packet+0x4c>
	...

00400928 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  40092c:	b980      	cbnz	r0, 400950 <_read+0x28>
  40092e:	460c      	mov	r4, r1
  400930:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400932:	2a00      	cmp	r2, #0
  400934:	dd0f      	ble.n	400956 <_read+0x2e>
  400936:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400938:	4e08      	ldr	r6, [pc, #32]	; (40095c <_read+0x34>)
  40093a:	4d09      	ldr	r5, [pc, #36]	; (400960 <_read+0x38>)
  40093c:	6830      	ldr	r0, [r6, #0]
  40093e:	4621      	mov	r1, r4
  400940:	682b      	ldr	r3, [r5, #0]
  400942:	4798      	blx	r3
		ptr++;
  400944:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400946:	42bc      	cmp	r4, r7
  400948:	d1f8      	bne.n	40093c <_read+0x14>
		nChars++;
	}
	return nChars;
}
  40094a:	4640      	mov	r0, r8
  40094c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400950:	f04f 38ff 	mov.w	r8, #4294967295
  400954:	e7f9      	b.n	40094a <_read+0x22>
	for (; len > 0; --len) {
  400956:	4680      	mov	r8, r0
  400958:	e7f7      	b.n	40094a <_read+0x22>
  40095a:	bf00      	nop
  40095c:	20400e58 	.word	0x20400e58
  400960:	20400e50 	.word	0x20400e50

00400964 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400964:	3801      	subs	r0, #1
  400966:	2802      	cmp	r0, #2
  400968:	d815      	bhi.n	400996 <_write+0x32>
{
  40096a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40096e:	460e      	mov	r6, r1
  400970:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400972:	b19a      	cbz	r2, 40099c <_write+0x38>
  400974:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400976:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4009b0 <_write+0x4c>
  40097a:	4f0c      	ldr	r7, [pc, #48]	; (4009ac <_write+0x48>)
  40097c:	f8d8 0000 	ldr.w	r0, [r8]
  400980:	f815 1b01 	ldrb.w	r1, [r5], #1
  400984:	683b      	ldr	r3, [r7, #0]
  400986:	4798      	blx	r3
  400988:	2800      	cmp	r0, #0
  40098a:	db0a      	blt.n	4009a2 <_write+0x3e>
  40098c:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  40098e:	3c01      	subs	r4, #1
  400990:	d1f4      	bne.n	40097c <_write+0x18>
  400992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400996:	f04f 30ff 	mov.w	r0, #4294967295
  40099a:	4770      	bx	lr
	for (; len != 0; --len) {
  40099c:	4610      	mov	r0, r2
  40099e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  4009a2:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4009a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4009aa:	bf00      	nop
  4009ac:	20400e54 	.word	0x20400e54
  4009b0:	20400e58 	.word	0x20400e58

004009b4 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  4009b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4009b8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4009bc:	4b9e      	ldr	r3, [pc, #632]	; (400c38 <board_init+0x284>)
  4009be:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4009c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4009c4:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4009c8:	4b9c      	ldr	r3, [pc, #624]	; (400c3c <board_init+0x288>)
  4009ca:	2200      	movs	r2, #0
  4009cc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  4009d0:	695a      	ldr	r2, [r3, #20]
  4009d2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4009d6:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  4009d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4009dc:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  4009e0:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  4009e4:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4009e8:	f007 0007 	and.w	r0, r7, #7
  4009ec:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  4009ee:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4009f2:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  4009f6:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  4009fa:	f3bf 8f4f 	dsb	sy
  4009fe:	f04f 34ff 	mov.w	r4, #4294967295
  400a02:	fa04 fc00 	lsl.w	ip, r4, r0
  400a06:	fa06 f000 	lsl.w	r0, r6, r0
  400a0a:	fa04 f40e 	lsl.w	r4, r4, lr
  400a0e:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400a12:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  400a14:	463a      	mov	r2, r7
  400a16:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400a18:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400a1c:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400a20:	3a01      	subs	r2, #1
  400a22:	4423      	add	r3, r4
  400a24:	f1b2 3fff 	cmp.w	r2, #4294967295
  400a28:	d1f6      	bne.n	400a18 <board_init+0x64>
        } while(sets--);
  400a2a:	3e01      	subs	r6, #1
  400a2c:	4460      	add	r0, ip
  400a2e:	f1b6 3fff 	cmp.w	r6, #4294967295
  400a32:	d1ef      	bne.n	400a14 <board_init+0x60>
  400a34:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400a38:	4b80      	ldr	r3, [pc, #512]	; (400c3c <board_init+0x288>)
  400a3a:	695a      	ldr	r2, [r3, #20]
  400a3c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400a40:	615a      	str	r2, [r3, #20]
  400a42:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400a46:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400a4a:	4a7d      	ldr	r2, [pc, #500]	; (400c40 <board_init+0x28c>)
  400a4c:	497d      	ldr	r1, [pc, #500]	; (400c44 <board_init+0x290>)
  400a4e:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400a50:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400a54:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400a56:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400a5a:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400a5e:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400a62:	f022 0201 	bic.w	r2, r2, #1
  400a66:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400a6a:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400a6e:	f022 0201 	bic.w	r2, r2, #1
  400a72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400a76:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400a7a:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400a7e:	200a      	movs	r0, #10
  400a80:	4c71      	ldr	r4, [pc, #452]	; (400c48 <board_init+0x294>)
  400a82:	47a0      	blx	r4
  400a84:	200b      	movs	r0, #11
  400a86:	47a0      	blx	r4
  400a88:	200c      	movs	r0, #12
  400a8a:	47a0      	blx	r4
  400a8c:	2010      	movs	r0, #16
  400a8e:	47a0      	blx	r4
  400a90:	2011      	movs	r0, #17
  400a92:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400a94:	4e6d      	ldr	r6, [pc, #436]	; (400c4c <board_init+0x298>)
  400a96:	f44f 7880 	mov.w	r8, #256	; 0x100
  400a9a:	f8c6 8010 	str.w	r8, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400a9e:	f8c6 80a0 	str.w	r8, [r6, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400aa2:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400aa6:	4c6a      	ldr	r4, [pc, #424]	; (400c50 <board_init+0x29c>)
  400aa8:	f44f 6500 	mov.w	r5, #2048	; 0x800
  400aac:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400aae:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  400ab2:	6665      	str	r5, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400ab4:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400ab8:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFER = mask;
  400aba:	6225      	str	r5, [r4, #32]
		base->PIO_IFSCER = mask;
  400abc:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400ac0:	6f23      	ldr	r3, [r4, #112]	; 0x70
  400ac2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  400ac6:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400ac8:	6f63      	ldr	r3, [r4, #116]	; 0x74
  400aca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  400ace:	6763      	str	r3, [r4, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400ad0:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400ad4:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400ad8:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
		base->PIO_PUDR = mask;
  400adc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  400ae0:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400ae2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400ae6:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  400ae8:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400aea:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400aee:	6f22      	ldr	r2, [r4, #112]	; 0x70
  400af0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400af4:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400af6:	6f62      	ldr	r2, [r4, #116]	; 0x74
  400af8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400afc:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400afe:	6063      	str	r3, [r4, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400b00:	4a54      	ldr	r2, [pc, #336]	; (400c54 <board_init+0x2a0>)
  400b02:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400b06:	f043 0310 	orr.w	r3, r3, #16
  400b0a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  400b0e:	f502 22b2 	add.w	r2, r2, #364544	; 0x59000
  400b12:	2310      	movs	r3, #16
  400b14:	6613      	str	r3, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400b16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  400b1a:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  400b1c:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400b1e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400b22:	6f11      	ldr	r1, [r2, #112]	; 0x70
  400b24:	4319      	orrs	r1, r3
  400b26:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400b28:	6f51      	ldr	r1, [r2, #116]	; 0x74
  400b2a:	4319      	orrs	r1, r3
  400b2c:	6751      	str	r1, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400b2e:	6053      	str	r3, [r2, #4]
		base->PIO_PUDR = mask;
  400b30:	2208      	movs	r2, #8
  400b32:	6622      	str	r2, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400b34:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400b38:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  400b3a:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400b3c:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400b40:	6f21      	ldr	r1, [r4, #112]	; 0x70
  400b42:	f021 0108 	bic.w	r1, r1, #8
  400b46:	6721      	str	r1, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400b48:	6f61      	ldr	r1, [r4, #116]	; 0x74
  400b4a:	f021 0108 	bic.w	r1, r1, #8
  400b4e:	6761      	str	r1, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400b50:	6062      	str	r2, [r4, #4]
		base->PIO_PUDR = mask;
  400b52:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400b54:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400b58:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  400b5a:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400b5c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400b60:	6f22      	ldr	r2, [r4, #112]	; 0x70
  400b62:	f022 0210 	bic.w	r2, r2, #16
  400b66:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400b68:	6f62      	ldr	r2, [r4, #116]	; 0x74
  400b6a:	f022 0210 	bic.w	r2, r2, #16
  400b6e:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400b70:	6063      	str	r3, [r4, #4]
	ioport_set_pin_mode(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on EBI*/
	pio_configure(PIN_EBI_RESET_PIO, PIN_EBI_RESET_TYPE, PIN_EBI_RESET_MASK, PIN_EBI_RESET_ATTRI);
  400b72:	2300      	movs	r3, #0
  400b74:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400b78:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400b7c:	4630      	mov	r0, r6
  400b7e:	4f36      	ldr	r7, [pc, #216]	; (400c58 <board_init+0x2a4>)
  400b80:	47b8      	blx	r7
	pio_configure(PIN_EBI_CDS_PIO, PIN_EBI_CDS_TYPE, PIN_EBI_CDS_MASK, PIN_EBI_CDS_ATTRI);
  400b82:	2300      	movs	r3, #0
  400b84:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400b88:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400b8c:	4630      	mov	r0, r6
  400b8e:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAL_PIO, PIN_EBI_DATAL_TYPE, PIN_EBI_DATAL_MASK, PIN_EBI_DATAL_ATTRI);
  400b90:	2301      	movs	r3, #1
  400b92:	22ff      	movs	r2, #255	; 0xff
  400b94:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400b98:	4630      	mov	r0, r6
  400b9a:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_0_PIO, PIN_EBI_DATAH_0_TYPE, PIN_EBI_DATAH_0_MASK, PIN_EBI_DATAH_0_ATTRI);
  400b9c:	2301      	movs	r3, #1
  400b9e:	223f      	movs	r2, #63	; 0x3f
  400ba0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400ba4:	482d      	ldr	r0, [pc, #180]	; (400c5c <board_init+0x2a8>)
  400ba6:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_1_PIO, PIN_EBI_DATAH_1_TYPE, PIN_EBI_DATAH_1_MASK, PIN_EBI_DATAH_1_ATTRI);
  400ba8:	2301      	movs	r3, #1
  400baa:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  400bae:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400bb2:	4620      	mov	r0, r4
  400bb4:	47b8      	blx	r7
	pio_configure(PIN_EBI_NWE_PIO, PIN_EBI_NWE_TYPE, PIN_EBI_NWE_MASK, PIN_EBI_NWE_ATTRI);
  400bb6:	2301      	movs	r3, #1
  400bb8:	4642      	mov	r2, r8
  400bba:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400bbe:	4630      	mov	r0, r6
  400bc0:	47b8      	blx	r7
	pio_configure(PIN_EBI_NRD_PIO, PIN_EBI_NRD_TYPE, PIN_EBI_NRD_MASK, PIN_EBI_NRD_ATTRI);
  400bc2:	2301      	movs	r3, #1
  400bc4:	462a      	mov	r2, r5
  400bc6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400bca:	4630      	mov	r0, r6
  400bcc:	47b8      	blx	r7
	pio_configure(PIN_EBI_CS_PIO, PIN_EBI_CS_TYPE, PIN_EBI_CS_MASK, PIN_EBI_CS_ATTRI);
  400bce:	2301      	movs	r3, #1
  400bd0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400bd4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400bd8:	4821      	ldr	r0, [pc, #132]	; (400c60 <board_init+0x2ac>)
  400bda:	47b8      	blx	r7
	pio_configure(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_TYPE, PIN_EBI_BACKLIGHT_MASK, PIN_EBI_BACKLIGHT_ATTRI);
  400bdc:	2300      	movs	r3, #0
  400bde:	f44f 7200 	mov.w	r2, #512	; 0x200
  400be2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400be6:	4630      	mov	r0, r6
  400be8:	47b8      	blx	r7
	pio_set(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_MASK);
  400bea:	f44f 7100 	mov.w	r1, #512	; 0x200
  400bee:	4630      	mov	r0, r6
  400bf0:	4b1c      	ldr	r3, [pc, #112]	; (400c64 <board_init+0x2b0>)
  400bf2:	4798      	blx	r3
	MATRIX->CCFG_SMCNFCS = CCFG_SMCNFCS_SDRAMEN;
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on SPI*/
	pio_configure_pin(LCD_SPI_MISO_PIO, LCD_SPI_MISO_FLAGS);
  400bf4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400bf8:	2074      	movs	r0, #116	; 0x74
  400bfa:	4c1b      	ldr	r4, [pc, #108]	; (400c68 <board_init+0x2b4>)
  400bfc:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_MOSI_PIO, LCD_SPI_MOSI_FLAGS);
  400bfe:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400c02:	2075      	movs	r0, #117	; 0x75
  400c04:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_SPCK_PIO, LCD_SPI_SPCK_FLAGS);
  400c06:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400c0a:	2076      	movs	r0, #118	; 0x76
  400c0c:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_NPCS_PIO, LCD_SPI_NPCS_FLAGS);
  400c0e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400c12:	207b      	movs	r0, #123	; 0x7b
  400c14:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_RESET_PIO, LCD_SPI_RESET_FLAGS);
  400c16:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400c1a:	2018      	movs	r0, #24
  400c1c:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
  400c1e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400c22:	2006      	movs	r0, #6
  400c24:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
  400c26:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400c2a:	2053      	movs	r0, #83	; 0x53
  400c2c:	47a0      	blx	r4
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);
  400c2e:	2053      	movs	r0, #83	; 0x53
  400c30:	4b0e      	ldr	r3, [pc, #56]	; (400c6c <board_init+0x2b8>)
  400c32:	4798      	blx	r3
  400c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400c38:	400e1850 	.word	0x400e1850
  400c3c:	e000ed00 	.word	0xe000ed00
  400c40:	400e0c00 	.word	0x400e0c00
  400c44:	5a00080c 	.word	0x5a00080c
  400c48:	004017f9 	.word	0x004017f9
  400c4c:	400e1200 	.word	0x400e1200
  400c50:	400e0e00 	.word	0x400e0e00
  400c54:	40088000 	.word	0x40088000
  400c58:	00401425 	.word	0x00401425
  400c5c:	400e1600 	.word	0x400e1600
  400c60:	400e1400 	.word	0x400e1400
  400c64:	00401331 	.word	0x00401331
  400c68:	004014f5 	.word	0x004014f5
  400c6c:	004014bd 	.word	0x004014bd

00400c70 <ili9488_check_box_coordinates>:
 * \param p_ul_x2 X coordinate of lower-right corner on LCD.
 * \param p_ul_y2 Y coordinate of lower-right corner on LCD.
 */
static void ili9488_check_box_coordinates(uint32_t *p_ul_x1, uint32_t *p_ul_y1,
		uint32_t *p_ul_x2, uint32_t *p_ul_y2)
{
  400c70:	b430      	push	{r4, r5}
	uint32_t dw;

	if (*p_ul_x1 >= ILI9488_LCD_WIDTH) {
  400c72:	6804      	ldr	r4, [r0, #0]
  400c74:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
  400c78:	d302      	bcc.n	400c80 <ili9488_check_box_coordinates+0x10>
		*p_ul_x1 = ILI9488_LCD_WIDTH - 1;
  400c7a:	f240 143f 	movw	r4, #319	; 0x13f
  400c7e:	6004      	str	r4, [r0, #0]
	}

	if (*p_ul_x2 >= ILI9488_LCD_WIDTH) {
  400c80:	6814      	ldr	r4, [r2, #0]
  400c82:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
  400c86:	d302      	bcc.n	400c8e <ili9488_check_box_coordinates+0x1e>
		*p_ul_x2 = ILI9488_LCD_WIDTH - 1;
  400c88:	f240 143f 	movw	r4, #319	; 0x13f
  400c8c:	6014      	str	r4, [r2, #0]
	}

	if (*p_ul_y1 >= ILI9488_LCD_HEIGHT) {
  400c8e:	680c      	ldr	r4, [r1, #0]
  400c90:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
  400c94:	d302      	bcc.n	400c9c <ili9488_check_box_coordinates+0x2c>
		*p_ul_y1 = ILI9488_LCD_HEIGHT - 1;
  400c96:	f240 14df 	movw	r4, #479	; 0x1df
  400c9a:	600c      	str	r4, [r1, #0]
	}

	if (*p_ul_y2 >= ILI9488_LCD_HEIGHT) {
  400c9c:	681c      	ldr	r4, [r3, #0]
  400c9e:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
  400ca2:	d302      	bcc.n	400caa <ili9488_check_box_coordinates+0x3a>
		*p_ul_y2 = ILI9488_LCD_HEIGHT - 1;
  400ca4:	f240 14df 	movw	r4, #479	; 0x1df
  400ca8:	601c      	str	r4, [r3, #0]
	}

	if (*p_ul_x1 > *p_ul_x2) {
  400caa:	6804      	ldr	r4, [r0, #0]
  400cac:	6815      	ldr	r5, [r2, #0]
  400cae:	42ac      	cmp	r4, r5
  400cb0:	d901      	bls.n	400cb6 <ili9488_check_box_coordinates+0x46>
		dw = *p_ul_x1;
		*p_ul_x1 = *p_ul_x2;
  400cb2:	6005      	str	r5, [r0, #0]
		*p_ul_x2 = dw;
  400cb4:	6014      	str	r4, [r2, #0]
	}

	if (*p_ul_y1 > *p_ul_y2) {
  400cb6:	680a      	ldr	r2, [r1, #0]
  400cb8:	6818      	ldr	r0, [r3, #0]
  400cba:	4282      	cmp	r2, r0
  400cbc:	d901      	bls.n	400cc2 <ili9488_check_box_coordinates+0x52>
		dw = *p_ul_y1;
		*p_ul_y1 = *p_ul_y2;
  400cbe:	6008      	str	r0, [r1, #0]
		*p_ul_y2 = dw;
  400cc0:	601a      	str	r2, [r3, #0]
	}
}
  400cc2:	bc30      	pop	{r4, r5}
  400cc4:	4770      	bx	lr
	...

00400cc8 <ili9488_write_ram_prepare>:
{
  400cc8:	b510      	push	{r4, lr}
  400cca:	b082      	sub	sp, #8
	pio_set_pin_low(LCD_SPI_CDS_PIO);
  400ccc:	2006      	movs	r0, #6
  400cce:	4b0a      	ldr	r3, [pc, #40]	; (400cf8 <ili9488_write_ram_prepare+0x30>)
  400cd0:	4798      	blx	r3
	spi_write(BOARD_ILI9488_SPI, ILI9488_CMD_MEMORY_WRITE, BOARD_ILI9488_SPI_NPCS, 0);
  400cd2:	2300      	movs	r3, #0
  400cd4:	2203      	movs	r2, #3
  400cd6:	212c      	movs	r1, #44	; 0x2c
  400cd8:	4808      	ldr	r0, [pc, #32]	; (400cfc <ili9488_write_ram_prepare+0x34>)
  400cda:	4c09      	ldr	r4, [pc, #36]	; (400d00 <ili9488_write_ram_prepare+0x38>)
  400cdc:	47a0      	blx	r4
	for(i = 0; i < 0xFF; i++);
  400cde:	2300      	movs	r3, #0
  400ce0:	9301      	str	r3, [sp, #4]
  400ce2:	9b01      	ldr	r3, [sp, #4]
  400ce4:	2bfe      	cmp	r3, #254	; 0xfe
  400ce6:	d805      	bhi.n	400cf4 <ili9488_write_ram_prepare+0x2c>
  400ce8:	9b01      	ldr	r3, [sp, #4]
  400cea:	3301      	adds	r3, #1
  400cec:	9301      	str	r3, [sp, #4]
  400cee:	9b01      	ldr	r3, [sp, #4]
  400cf0:	2bfe      	cmp	r3, #254	; 0xfe
  400cf2:	d9f9      	bls.n	400ce8 <ili9488_write_ram_prepare+0x20>
}
  400cf4:	b002      	add	sp, #8
  400cf6:	bd10      	pop	{r4, pc}
  400cf8:	004014d9 	.word	0x004014d9
  400cfc:	40008000 	.word	0x40008000
  400d00:	00401a29 	.word	0x00401a29

00400d04 <ili9488_write_register>:
{
  400d04:	b570      	push	{r4, r5, r6, lr}
  400d06:	b082      	sub	sp, #8
  400d08:	4605      	mov	r5, r0
  400d0a:	460e      	mov	r6, r1
  400d0c:	4614      	mov	r4, r2
	pio_set_pin_low(LCD_SPI_CDS_PIO);
  400d0e:	2006      	movs	r0, #6
  400d10:	4b14      	ldr	r3, [pc, #80]	; (400d64 <ili9488_write_register+0x60>)
  400d12:	4798      	blx	r3
	spi_write(BOARD_ILI9488_SPI, uc_reg, BOARD_ILI9488_SPI_NPCS, 0);
  400d14:	2300      	movs	r3, #0
  400d16:	2203      	movs	r2, #3
  400d18:	4629      	mov	r1, r5
  400d1a:	4813      	ldr	r0, [pc, #76]	; (400d68 <ili9488_write_register+0x64>)
  400d1c:	4d13      	ldr	r5, [pc, #76]	; (400d6c <ili9488_write_register+0x68>)
  400d1e:	47a8      	blx	r5
	for(i = 0; i < 0xFF; i++);
  400d20:	2300      	movs	r3, #0
  400d22:	9301      	str	r3, [sp, #4]
  400d24:	9b01      	ldr	r3, [sp, #4]
  400d26:	2bfe      	cmp	r3, #254	; 0xfe
  400d28:	d805      	bhi.n	400d36 <ili9488_write_register+0x32>
  400d2a:	9b01      	ldr	r3, [sp, #4]
  400d2c:	3301      	adds	r3, #1
  400d2e:	9301      	str	r3, [sp, #4]
  400d30:	9b01      	ldr	r3, [sp, #4]
  400d32:	2bfe      	cmp	r3, #254	; 0xfe
  400d34:	d9f9      	bls.n	400d2a <ili9488_write_register+0x26>
	if(size > 0) {
  400d36:	b90c      	cbnz	r4, 400d3c <ili9488_write_register+0x38>
}
  400d38:	b002      	add	sp, #8
  400d3a:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_pin_high(LCD_SPI_CDS_PIO);
  400d3c:	2006      	movs	r0, #6
  400d3e:	4b0c      	ldr	r3, [pc, #48]	; (400d70 <ili9488_write_register+0x6c>)
  400d40:	4798      	blx	r3
		spi_write_packet(BOARD_ILI9488_SPI, us_data, size);
  400d42:	4622      	mov	r2, r4
  400d44:	4631      	mov	r1, r6
  400d46:	4808      	ldr	r0, [pc, #32]	; (400d68 <ili9488_write_register+0x64>)
  400d48:	4b0a      	ldr	r3, [pc, #40]	; (400d74 <ili9488_write_register+0x70>)
  400d4a:	4798      	blx	r3
		for(i = 0; i < 0x5F; i++);
  400d4c:	2300      	movs	r3, #0
  400d4e:	9301      	str	r3, [sp, #4]
  400d50:	9b01      	ldr	r3, [sp, #4]
  400d52:	2b5e      	cmp	r3, #94	; 0x5e
  400d54:	d8f0      	bhi.n	400d38 <ili9488_write_register+0x34>
  400d56:	9b01      	ldr	r3, [sp, #4]
  400d58:	3301      	adds	r3, #1
  400d5a:	9301      	str	r3, [sp, #4]
  400d5c:	9b01      	ldr	r3, [sp, #4]
  400d5e:	2b5e      	cmp	r3, #94	; 0x5e
  400d60:	d9f9      	bls.n	400d56 <ili9488_write_register+0x52>
  400d62:	e7e9      	b.n	400d38 <ili9488_write_register+0x34>
  400d64:	004014d9 	.word	0x004014d9
  400d68:	40008000 	.word	0x40008000
  400d6c:	00401a29 	.word	0x00401a29
  400d70:	004014bd 	.word	0x004014bd
  400d74:	0040089d 	.word	0x0040089d

00400d78 <ili9488_write_ram_buffer>:
{
  400d78:	b530      	push	{r4, r5, lr}
  400d7a:	b083      	sub	sp, #12
  400d7c:	4604      	mov	r4, r0
  400d7e:	460d      	mov	r5, r1
	pio_set_pin_high(LCD_SPI_CDS_PIO);
  400d80:	2006      	movs	r0, #6
  400d82:	4b0a      	ldr	r3, [pc, #40]	; (400dac <ili9488_write_ram_buffer+0x34>)
  400d84:	4798      	blx	r3
	spi_write_packet(BOARD_ILI9488_SPI, p_ul_buf, ul_size);
  400d86:	462a      	mov	r2, r5
  400d88:	4621      	mov	r1, r4
  400d8a:	4809      	ldr	r0, [pc, #36]	; (400db0 <ili9488_write_ram_buffer+0x38>)
  400d8c:	4b09      	ldr	r3, [pc, #36]	; (400db4 <ili9488_write_ram_buffer+0x3c>)
  400d8e:	4798      	blx	r3
	for(i = 0; i < 0xFF; i++);
  400d90:	2300      	movs	r3, #0
  400d92:	9301      	str	r3, [sp, #4]
  400d94:	9b01      	ldr	r3, [sp, #4]
  400d96:	2bfe      	cmp	r3, #254	; 0xfe
  400d98:	d805      	bhi.n	400da6 <ili9488_write_ram_buffer+0x2e>
  400d9a:	9b01      	ldr	r3, [sp, #4]
  400d9c:	3301      	adds	r3, #1
  400d9e:	9301      	str	r3, [sp, #4]
  400da0:	9b01      	ldr	r3, [sp, #4]
  400da2:	2bfe      	cmp	r3, #254	; 0xfe
  400da4:	d9f9      	bls.n	400d9a <ili9488_write_ram_buffer+0x22>
}
  400da6:	b003      	add	sp, #12
  400da8:	bd30      	pop	{r4, r5, pc}
  400daa:	bf00      	nop
  400dac:	004014bd 	.word	0x004014bd
  400db0:	40008000 	.word	0x40008000
  400db4:	0040089d 	.word	0x0040089d

00400db8 <ili9488_delay>:
	for(i = 0; i < ul_ms; i++) {
  400db8:	4601      	mov	r1, r0
  400dba:	b130      	cbz	r0, 400dca <ili9488_delay+0x12>
  400dbc:	4a03      	ldr	r2, [pc, #12]	; (400dcc <ili9488_delay+0x14>)
{
  400dbe:	4b04      	ldr	r3, [pc, #16]	; (400dd0 <ili9488_delay+0x18>)
		for(i = 0; i < 100000; i++) {
  400dc0:	3b01      	subs	r3, #1
  400dc2:	d1fd      	bne.n	400dc0 <ili9488_delay+0x8>
	for(i = 0; i < ul_ms; i++) {
  400dc4:	4291      	cmp	r1, r2
  400dc6:	d8fa      	bhi.n	400dbe <ili9488_delay+0x6>
  400dc8:	4770      	bx	lr
  400dca:	4770      	bx	lr
  400dcc:	000186a1 	.word	0x000186a1
  400dd0:	000186a0 	.word	0x000186a0

00400dd4 <ili9488_set_display_direction>:
 * \brief ILI9488 configure landscape.
 *
 * \Param LandscaprMode Landscape Mode.
 */
void ili9488_set_display_direction(enum ili9488_display_direction direction )
{
  400dd4:	b500      	push	{lr}
  400dd6:	b083      	sub	sp, #12
	ili9488_color_t value;
	if(direction) {
  400dd8:	b958      	cbnz	r0, 400df2 <ili9488_set_display_direction+0x1e>
		value = 0xE8;
	} else {
		value = 0x48;
  400dda:	2348      	movs	r3, #72	; 0x48
  400ddc:	f88d 3007 	strb.w	r3, [sp, #7]
	}
	ili9488_write_register(ILI9488_CMD_MEMORY_ACCESS_CONTROL, &value, 1);
  400de0:	2201      	movs	r2, #1
  400de2:	f10d 0107 	add.w	r1, sp, #7
  400de6:	2036      	movs	r0, #54	; 0x36
  400de8:	4b04      	ldr	r3, [pc, #16]	; (400dfc <ili9488_set_display_direction+0x28>)
  400dea:	4798      	blx	r3
}
  400dec:	b003      	add	sp, #12
  400dee:	f85d fb04 	ldr.w	pc, [sp], #4
		value = 0xE8;
  400df2:	23e8      	movs	r3, #232	; 0xe8
  400df4:	f88d 3007 	strb.w	r3, [sp, #7]
  400df8:	e7f2      	b.n	400de0 <ili9488_set_display_direction+0xc>
  400dfa:	bf00      	nop
  400dfc:	00400d05 	.word	0x00400d05

00400e00 <ili9488_set_window>:
 * \Param y start position.
 * \Param width  Width of window.
 * \Param height Height of window.
 */
void ili9488_set_window(uint16_t x, uint16_t y, uint16_t width, uint16_t height )
{
  400e00:	b510      	push	{r4, lr}
  400e02:	b084      	sub	sp, #16
	uint32_t cnt = 0;
	ili9488_color_t buf[4];

	cnt = sizeof(buf)/sizeof(ili9488_color_t);

	col_start  =  x ;
  400e04:	f8ad 000e 	strh.w	r0, [sp, #14]
	col_end    =  width + x - 1;
  400e08:	3a01      	subs	r2, #1
  400e0a:	4402      	add	r2, r0
  400e0c:	f8ad 200c 	strh.w	r2, [sp, #12]

	row_start = y ;
  400e10:	f8ad 100a 	strh.w	r1, [sp, #10]
	row_end   = height + y - 1;
  400e14:	3b01      	subs	r3, #1
  400e16:	4419      	add	r1, r3
  400e18:	f8ad 1008 	strh.w	r1, [sp, #8]

	buf[0] = get_8b_to_16b(col_start);
  400e1c:	0a03      	lsrs	r3, r0, #8
  400e1e:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = get_0b_to_8b(col_start);
  400e22:	f88d 0005 	strb.w	r0, [sp, #5]
	buf[2] = get_8b_to_16b(col_end);
  400e26:	f3c2 2307 	ubfx	r3, r2, #8, #8
  400e2a:	f88d 3006 	strb.w	r3, [sp, #6]
	buf[3] = get_0b_to_8b(col_end);
  400e2e:	f88d 2007 	strb.w	r2, [sp, #7]
	ili9488_write_register(ILI9488_CMD_COLUMN_ADDRESS_SET, buf, cnt);
  400e32:	2204      	movs	r2, #4
  400e34:	eb0d 0102 	add.w	r1, sp, r2
  400e38:	202a      	movs	r0, #42	; 0x2a
  400e3a:	4c10      	ldr	r4, [pc, #64]	; (400e7c <ili9488_set_window+0x7c>)
  400e3c:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  400e3e:	2200      	movs	r2, #0
  400e40:	4611      	mov	r1, r2
  400e42:	4610      	mov	r0, r2
  400e44:	47a0      	blx	r4

	/* Set Horizontal Address End Position */
	buf[0] = get_8b_to_16b(row_start);
  400e46:	f89d 300b 	ldrb.w	r3, [sp, #11]
  400e4a:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = get_0b_to_8b(row_start);
  400e4e:	f89d 300a 	ldrb.w	r3, [sp, #10]
  400e52:	f88d 3005 	strb.w	r3, [sp, #5]
	buf[2] = get_8b_to_16b(row_end);
  400e56:	f89d 3009 	ldrb.w	r3, [sp, #9]
  400e5a:	f88d 3006 	strb.w	r3, [sp, #6]
	buf[3] = get_0b_to_8b(row_end);
  400e5e:	f89d 3008 	ldrb.w	r3, [sp, #8]
  400e62:	f88d 3007 	strb.w	r3, [sp, #7]
	ili9488_write_register(ILI9488_CMD_PAGE_ADDRESS_SET, buf, cnt);
  400e66:	2204      	movs	r2, #4
  400e68:	eb0d 0102 	add.w	r1, sp, r2
  400e6c:	202b      	movs	r0, #43	; 0x2b
  400e6e:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  400e70:	2200      	movs	r2, #0
  400e72:	4611      	mov	r1, r2
  400e74:	4610      	mov	r0, r2
  400e76:	47a0      	blx	r4
}
  400e78:	b004      	add	sp, #16
  400e7a:	bd10      	pop	{r4, pc}
  400e7c:	00400d05 	.word	0x00400d05

00400e80 <ili9488_display_on>:

/**
 * \brief Turn on the LCD.
 */
void ili9488_display_on(void)
{
  400e80:	b508      	push	{r3, lr}
	ili9488_write_register(ILI9488_CMD_DISPLAY_ON, 0, 0);
  400e82:	2200      	movs	r2, #0
  400e84:	4611      	mov	r1, r2
  400e86:	2029      	movs	r0, #41	; 0x29
  400e88:	4b01      	ldr	r3, [pc, #4]	; (400e90 <ili9488_display_on+0x10>)
  400e8a:	4798      	blx	r3
  400e8c:	bd08      	pop	{r3, pc}
  400e8e:	bf00      	nop
  400e90:	00400d05 	.word	0x00400d05

00400e94 <ili9488_set_foreground_color>:
 * \brief Set foreground color.
 *
 * \param ul_color foreground color.
 */
void ili9488_set_foreground_color(uint32_t ul_color)
{
  400e94:	b410      	push	{r4}
		g_ul_pixel_cache[i] = ul_color;
	}
#endif
#ifdef ILI9488_SPIMODE
	for (i = 0; i < LCD_DATA_CACHE_SIZE * LCD_DATA_COLOR_UNIT; ) {
		g_ul_pixel_cache[i++] = ul_color>>16;
  400e96:	f3c0 4407 	ubfx	r4, r0, #16, #8
		g_ul_pixel_cache[i++] = ul_color>>8;
  400e9a:	f3c0 2107 	ubfx	r1, r0, #8, #8
  400e9e:	4b06      	ldr	r3, [pc, #24]	; (400eb8 <ili9488_set_foreground_color+0x24>)
  400ea0:	f503 7270 	add.w	r2, r3, #960	; 0x3c0
		g_ul_pixel_cache[i++] = ul_color>>16;
  400ea4:	701c      	strb	r4, [r3, #0]
		g_ul_pixel_cache[i++] = ul_color>>8;
  400ea6:	7059      	strb	r1, [r3, #1]
		g_ul_pixel_cache[i++] = ul_color&0xFF;
  400ea8:	7098      	strb	r0, [r3, #2]
  400eaa:	3303      	adds	r3, #3
	for (i = 0; i < LCD_DATA_CACHE_SIZE * LCD_DATA_COLOR_UNIT; ) {
  400eac:	4293      	cmp	r3, r2
  400eae:	d1f9      	bne.n	400ea4 <ili9488_set_foreground_color+0x10>
	}
#endif
}
  400eb0:	f85d 4b04 	ldr.w	r4, [sp], #4
  400eb4:	4770      	bx	lr
  400eb6:	bf00      	nop
  400eb8:	204009dc 	.word	0x204009dc

00400ebc <ili9488_set_cursor_position>:
 *
 * \param x X coordinate of upper-left corner on LCD.
 * \param y Y coordinate of upper-left corner on LCD.
 */
void ili9488_set_cursor_position(uint16_t x, uint16_t y)
{
  400ebc:	b510      	push	{r4, lr}
  400ebe:	b084      	sub	sp, #16
  400ec0:	f8ad 0006 	strh.w	r0, [sp, #6]
  400ec4:	f8ad 1004 	strh.w	r1, [sp, #4]
	uint32_t cnt = 0;

	ili9488_color_t buf[4];
	cnt = sizeof(buf)/sizeof(ili9488_color_t);

	buf[0] = get_8b_to_16b(x);
  400ec8:	0a03      	lsrs	r3, r0, #8
  400eca:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[1] = get_0b_to_8b(x);
  400ece:	b2c0      	uxtb	r0, r0
  400ed0:	f88d 000d 	strb.w	r0, [sp, #13]
	buf[2] = get_8b_to_16b(x);
  400ed4:	f88d 300e 	strb.w	r3, [sp, #14]
	buf[3] = get_0b_to_8b(x);
  400ed8:	f88d 000f 	strb.w	r0, [sp, #15]
	ili9488_write_register(ILI9488_CMD_COLUMN_ADDRESS_SET, buf, cnt);
  400edc:	2204      	movs	r2, #4
  400ede:	a903      	add	r1, sp, #12
  400ee0:	202a      	movs	r0, #42	; 0x2a
  400ee2:	4c0e      	ldr	r4, [pc, #56]	; (400f1c <ili9488_set_cursor_position+0x60>)
  400ee4:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  400ee6:	2200      	movs	r2, #0
  400ee8:	4611      	mov	r1, r2
  400eea:	4610      	mov	r0, r2
  400eec:	47a0      	blx	r4


	/* Set Horizontal Address End Position */
	buf[0] = get_8b_to_16b(y);
  400eee:	f89d 2005 	ldrb.w	r2, [sp, #5]
  400ef2:	f88d 200c 	strb.w	r2, [sp, #12]
	buf[1] = get_0b_to_8b(y);
  400ef6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  400efa:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[2] = get_8b_to_16b(y);
  400efe:	f88d 200e 	strb.w	r2, [sp, #14]
	buf[3] = get_0b_to_8b(y);
  400f02:	f88d 300f 	strb.w	r3, [sp, #15]
	ili9488_write_register(ILI9488_CMD_PAGE_ADDRESS_SET, buf, cnt);
  400f06:	2204      	movs	r2, #4
  400f08:	a903      	add	r1, sp, #12
  400f0a:	202b      	movs	r0, #43	; 0x2b
  400f0c:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  400f0e:	2200      	movs	r2, #0
  400f10:	4611      	mov	r1, r2
  400f12:	4610      	mov	r0, r2
  400f14:	47a0      	blx	r4
}
  400f16:	b004      	add	sp, #16
  400f18:	bd10      	pop	{r4, pc}
  400f1a:	bf00      	nop
  400f1c:	00400d05 	.word	0x00400d05

00400f20 <ili9488_init>:
{
  400f20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400f24:	b087      	sub	sp, #28
  400f26:	4681      	mov	r9, r0
	struct spi_device ILI9488_SPI_DEVICE = {
  400f28:	2703      	movs	r7, #3
  400f2a:	ae06      	add	r6, sp, #24
  400f2c:	f846 7d08 	str.w	r7, [r6, #-8]!
	spi_master_init(BOARD_ILI9488_SPI);
  400f30:	4d5d      	ldr	r5, [pc, #372]	; (4010a8 <ili9488_init+0x188>)
  400f32:	4628      	mov	r0, r5
  400f34:	4b5d      	ldr	r3, [pc, #372]	; (4010ac <ili9488_init+0x18c>)
  400f36:	4798      	blx	r3
	spi_master_setup_device(BOARD_ILI9488_SPI, &ILI9488_SPI_DEVICE, SPI_MODE_3, ILI9488_SPI_BAUDRATE, 0);
  400f38:	2400      	movs	r4, #0
  400f3a:	9400      	str	r4, [sp, #0]
  400f3c:	4b5c      	ldr	r3, [pc, #368]	; (4010b0 <ili9488_init+0x190>)
  400f3e:	463a      	mov	r2, r7
  400f40:	4631      	mov	r1, r6
  400f42:	4628      	mov	r0, r5
  400f44:	f8df 8198 	ldr.w	r8, [pc, #408]	; 4010e0 <ili9488_init+0x1c0>
  400f48:	47c0      	blx	r8
	spi_configure_cs_behavior(BOARD_ILI9488_SPI, BOARD_ILI9488_SPI_NPCS, SPI_CS_RISE_NO_TX);
  400f4a:	4622      	mov	r2, r4
  400f4c:	4639      	mov	r1, r7
  400f4e:	4628      	mov	r0, r5
  400f50:	4b58      	ldr	r3, [pc, #352]	; (4010b4 <ili9488_init+0x194>)
  400f52:	4798      	blx	r3
	spi_select_device(BOARD_ILI9488_SPI, &ILI9488_SPI_DEVICE);
  400f54:	4631      	mov	r1, r6
  400f56:	4628      	mov	r0, r5
  400f58:	4b57      	ldr	r3, [pc, #348]	; (4010b8 <ili9488_init+0x198>)
  400f5a:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400f5c:	2001      	movs	r0, #1
  400f5e:	6028      	str	r0, [r5, #0]
 * \param p_spi Pointer to an SPI instance.
 * \param ul_sources Interrupts to be enabled.
 */
static inline void spi_enable_interrupt(Spi *p_spi, uint32_t ul_sources)
{
	p_spi->SPI_IER = ul_sources;
  400f60:	6168      	str	r0, [r5, #20]
	ili9488_write_register(ILI9488_CMD_SOFTWARE_RESET, 0x0000, 0);
  400f62:	4622      	mov	r2, r4
  400f64:	4621      	mov	r1, r4
  400f66:	4e55      	ldr	r6, [pc, #340]	; (4010bc <ili9488_init+0x19c>)
  400f68:	47b0      	blx	r6
	ili9488_delay(200);
  400f6a:	20c8      	movs	r0, #200	; 0xc8
  400f6c:	4d54      	ldr	r5, [pc, #336]	; (4010c0 <ili9488_init+0x1a0>)
  400f6e:	47a8      	blx	r5
	ili9488_write_register(ILI9488_CMD_SLEEP_OUT, 0x0000, 0);
  400f70:	4622      	mov	r2, r4
  400f72:	4621      	mov	r1, r4
  400f74:	2011      	movs	r0, #17
  400f76:	47b0      	blx	r6
	ili9488_delay(200);
  400f78:	20c8      	movs	r0, #200	; 0xc8
  400f7a:	47a8      	blx	r5
	reg = 0x81;
  400f7c:	2381      	movs	r3, #129	; 0x81
  400f7e:	f88d 300a 	strb.w	r3, [sp, #10]
	param = 0x0;
  400f82:	f88d 400b 	strb.w	r4, [sp, #11]
  400f86:	2610      	movs	r6, #16
		ili9488_write_register(ILI9488_CMD_SPI_READ_SETTINGS, &reg, 1);
  400f88:	f04f 0801 	mov.w	r8, #1
  400f8c:	4f4b      	ldr	r7, [pc, #300]	; (4010bc <ili9488_init+0x19c>)
		for(j = 0; j < 0xFF; j++);
  400f8e:	4625      	mov	r5, r4
		ili9488_write_register(ILI9488_CMD_SPI_READ_SETTINGS, &reg, 1);
  400f90:	4642      	mov	r2, r8
  400f92:	f10d 010a 	add.w	r1, sp, #10
  400f96:	20fb      	movs	r0, #251	; 0xfb
  400f98:	47b8      	blx	r7
		reg++;
  400f9a:	f89d 300a 	ldrb.w	r3, [sp, #10]
  400f9e:	3301      	adds	r3, #1
  400fa0:	f88d 300a 	strb.w	r3, [sp, #10]
		for(j = 0; j < 0xFF; j++);
  400fa4:	9503      	str	r5, [sp, #12]
  400fa6:	9b03      	ldr	r3, [sp, #12]
  400fa8:	2bfe      	cmp	r3, #254	; 0xfe
  400faa:	d805      	bhi.n	400fb8 <ili9488_init+0x98>
  400fac:	9b03      	ldr	r3, [sp, #12]
  400fae:	3301      	adds	r3, #1
  400fb0:	9303      	str	r3, [sp, #12]
  400fb2:	9b03      	ldr	r3, [sp, #12]
  400fb4:	2bfe      	cmp	r3, #254	; 0xfe
  400fb6:	d9f9      	bls.n	400fac <ili9488_init+0x8c>
		ili9488_write_register(ILI9488_CMD_READ_ID4, 0, 0);
  400fb8:	462a      	mov	r2, r5
  400fba:	4629      	mov	r1, r5
  400fbc:	20d3      	movs	r0, #211	; 0xd3
  400fbe:	47b8      	blx	r7
			pio_set_pin_high(LCD_SPI_CDS_PIO);
  400fc0:	2006      	movs	r0, #6
  400fc2:	4b40      	ldr	r3, [pc, #256]	; (4010c4 <ili9488_init+0x1a4>)
  400fc4:	4798      	blx	r3
			spi_read_packet(BOARD_ILI9488_SPI, &chipidBuf, 1);
  400fc6:	4642      	mov	r2, r8
  400fc8:	f10d 0109 	add.w	r1, sp, #9
  400fcc:	4836      	ldr	r0, [pc, #216]	; (4010a8 <ili9488_init+0x188>)
  400fce:	4b3e      	ldr	r3, [pc, #248]	; (4010c8 <ili9488_init+0x1a8>)
  400fd0:	4798      	blx	r3
			for(j = 0; j < 0xFF; j++);
  400fd2:	9503      	str	r5, [sp, #12]
  400fd4:	9b03      	ldr	r3, [sp, #12]
  400fd6:	2bfe      	cmp	r3, #254	; 0xfe
  400fd8:	d805      	bhi.n	400fe6 <ili9488_init+0xc6>
  400fda:	9b03      	ldr	r3, [sp, #12]
  400fdc:	3301      	adds	r3, #1
  400fde:	9303      	str	r3, [sp, #12]
  400fe0:	9b03      	ldr	r3, [sp, #12]
  400fe2:	2bfe      	cmp	r3, #254	; 0xfe
  400fe4:	d9f9      	bls.n	400fda <ili9488_init+0xba>
		chipid |= (chipidBuf & 0xFF) << ((i - 1) << 3);
  400fe6:	f89d 3009 	ldrb.w	r3, [sp, #9]
  400fea:	40b3      	lsls	r3, r6
  400fec:	431c      	orrs	r4, r3
		ili9488_write_register(ILI9488_CMD_SPI_READ_SETTINGS, &param, 1);
  400fee:	4642      	mov	r2, r8
  400ff0:	f10d 010b 	add.w	r1, sp, #11
  400ff4:	20fb      	movs	r0, #251	; 0xfb
  400ff6:	47b8      	blx	r7
		for(j = 0; j < 0xFFF; j++);
  400ff8:	9503      	str	r5, [sp, #12]
  400ffa:	9a03      	ldr	r2, [sp, #12]
  400ffc:	f640 73fe 	movw	r3, #4094	; 0xffe
  401000:	429a      	cmp	r2, r3
  401002:	d806      	bhi.n	401012 <ili9488_init+0xf2>
  401004:	461a      	mov	r2, r3
  401006:	9b03      	ldr	r3, [sp, #12]
  401008:	3301      	adds	r3, #1
  40100a:	9303      	str	r3, [sp, #12]
  40100c:	9b03      	ldr	r3, [sp, #12]
  40100e:	4293      	cmp	r3, r2
  401010:	d9f9      	bls.n	401006 <ili9488_init+0xe6>
  401012:	3e08      	subs	r6, #8
	for (i = 3; i > 0; i--) {
  401014:	f116 0f08 	cmn.w	r6, #8
  401018:	d1ba      	bne.n	400f90 <ili9488_init+0x70>
	if (chipid != ILI9488_DEVICE_CODE) {
  40101a:	f249 4388 	movw	r3, #38024	; 0x9488
  40101e:	429c      	cmp	r4, r3
  401020:	d003      	beq.n	40102a <ili9488_init+0x10a>
		return 1;
  401022:	2001      	movs	r0, #1
}
  401024:	b007      	add	sp, #28
  401026:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	param = 0x48;
  40102a:	ad06      	add	r5, sp, #24
  40102c:	2348      	movs	r3, #72	; 0x48
  40102e:	f805 3d01 	strb.w	r3, [r5, #-1]!
	ili9488_write_register(ILI9488_CMD_MEMORY_ACCESS_CONTROL, &param, 1);
  401032:	2201      	movs	r2, #1
  401034:	4629      	mov	r1, r5
  401036:	2036      	movs	r0, #54	; 0x36
  401038:	4e20      	ldr	r6, [pc, #128]	; (4010bc <ili9488_init+0x19c>)
  40103a:	47b0      	blx	r6
	ili9488_delay(100);
  40103c:	2064      	movs	r0, #100	; 0x64
  40103e:	4c20      	ldr	r4, [pc, #128]	; (4010c0 <ili9488_init+0x1a0>)
  401040:	47a0      	blx	r4
	param = 0x04;
  401042:	2304      	movs	r3, #4
  401044:	f88d 3017 	strb.w	r3, [sp, #23]
	ili9488_write_register(ILI9488_CMD_CABC_CONTROL_9, &param, 1);
  401048:	2201      	movs	r2, #1
  40104a:	4629      	mov	r1, r5
  40104c:	20cf      	movs	r0, #207	; 0xcf
  40104e:	47b0      	blx	r6
	ili9488_delay(100);
  401050:	2064      	movs	r0, #100	; 0x64
  401052:	47a0      	blx	r4
	param = 0x06;
  401054:	2306      	movs	r3, #6
  401056:	f88d 3017 	strb.w	r3, [sp, #23]
	ili9488_write_register(ILI9488_CMD_COLMOD_PIXEL_FORMAT_SET, &param, 1);
  40105a:	2201      	movs	r2, #1
  40105c:	4629      	mov	r1, r5
  40105e:	203a      	movs	r0, #58	; 0x3a
  401060:	47b0      	blx	r6
	ili9488_delay(100);
  401062:	2064      	movs	r0, #100	; 0x64
  401064:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NORMAL_DISP_MODE_ON, 0, 0);
  401066:	2200      	movs	r2, #0
  401068:	4611      	mov	r1, r2
  40106a:	2013      	movs	r0, #19
  40106c:	47b0      	blx	r6
	ili9488_delay(100);
  40106e:	2064      	movs	r0, #100	; 0x64
  401070:	47a0      	blx	r4
	ili9488_display_on();
  401072:	4b16      	ldr	r3, [pc, #88]	; (4010cc <ili9488_init+0x1ac>)
  401074:	4798      	blx	r3
	ili9488_delay(100);
  401076:	2064      	movs	r0, #100	; 0x64
  401078:	47a0      	blx	r4
	ili9488_set_display_direction(LANDSCAPE);
  40107a:	2000      	movs	r0, #0
  40107c:	4b14      	ldr	r3, [pc, #80]	; (4010d0 <ili9488_init+0x1b0>)
  40107e:	4798      	blx	r3
	ili9488_delay(100);
  401080:	2064      	movs	r0, #100	; 0x64
  401082:	47a0      	blx	r4
	ili9488_set_window(0, 0,p_opt->ul_width,p_opt->ul_height);
  401084:	f8b9 3004 	ldrh.w	r3, [r9, #4]
  401088:	f8b9 2000 	ldrh.w	r2, [r9]
  40108c:	2100      	movs	r1, #0
  40108e:	4608      	mov	r0, r1
  401090:	4c10      	ldr	r4, [pc, #64]	; (4010d4 <ili9488_init+0x1b4>)
  401092:	47a0      	blx	r4
	ili9488_set_foreground_color(p_opt->foreground_color);
  401094:	f8d9 0008 	ldr.w	r0, [r9, #8]
  401098:	4b0f      	ldr	r3, [pc, #60]	; (4010d8 <ili9488_init+0x1b8>)
  40109a:	4798      	blx	r3
	ili9488_set_cursor_position(0, 0);
  40109c:	2100      	movs	r1, #0
  40109e:	4608      	mov	r0, r1
  4010a0:	4b0e      	ldr	r3, [pc, #56]	; (4010dc <ili9488_init+0x1bc>)
  4010a2:	4798      	blx	r3
	return 0;
  4010a4:	2000      	movs	r0, #0
  4010a6:	e7bd      	b.n	401024 <ili9488_init+0x104>
  4010a8:	40008000 	.word	0x40008000
  4010ac:	00400799 	.word	0x00400799
  4010b0:	01312d00 	.word	0x01312d00
  4010b4:	00401a99 	.word	0x00401a99
  4010b8:	0040086d 	.word	0x0040086d
  4010bc:	00400d05 	.word	0x00400d05
  4010c0:	00400db9 	.word	0x00400db9
  4010c4:	004014bd 	.word	0x004014bd
  4010c8:	004008d3 	.word	0x004008d3
  4010cc:	00400e81 	.word	0x00400e81
  4010d0:	00400dd5 	.word	0x00400dd5
  4010d4:	00400e01 	.word	0x00400e01
  4010d8:	00400e95 	.word	0x00400e95
  4010dc:	00400ebd 	.word	0x00400ebd
  4010e0:	004007ed 	.word	0x004007ed

004010e4 <ili9488_draw_pixel>:
 *
 * \return 0 if succeeds, otherwise fails.
 */
uint32_t ili9488_draw_pixel(uint32_t ul_x, uint32_t ul_y)
{
	if ((ul_x >= ILI9488_LCD_WIDTH) || (ul_y >= ILI9488_LCD_HEIGHT)) {
  4010e4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4010e8:	d20f      	bcs.n	40110a <ili9488_draw_pixel+0x26>
  4010ea:	f5b1 7ff0 	cmp.w	r1, #480	; 0x1e0
  4010ee:	d20c      	bcs.n	40110a <ili9488_draw_pixel+0x26>
{
  4010f0:	b508      	push	{r3, lr}
		return 1;
	}

	/* Set cursor */
	ili9488_set_cursor_position(ul_x, ul_y);
  4010f2:	b289      	uxth	r1, r1
  4010f4:	b280      	uxth	r0, r0
  4010f6:	4b06      	ldr	r3, [pc, #24]	; (401110 <ili9488_draw_pixel+0x2c>)
  4010f8:	4798      	blx	r3

	/* Prepare to write in GRAM */
	ili9488_write_ram_prepare();
  4010fa:	4b06      	ldr	r3, [pc, #24]	; (401114 <ili9488_draw_pixel+0x30>)
  4010fc:	4798      	blx	r3
	ili9488_write_ram_buffer(g_ul_pixel_cache, LCD_DATA_COLOR_UNIT);
  4010fe:	2103      	movs	r1, #3
  401100:	4805      	ldr	r0, [pc, #20]	; (401118 <ili9488_draw_pixel+0x34>)
  401102:	4b06      	ldr	r3, [pc, #24]	; (40111c <ili9488_draw_pixel+0x38>)
  401104:	4798      	blx	r3
	return 0;
  401106:	2000      	movs	r0, #0
  401108:	bd08      	pop	{r3, pc}
		return 1;
  40110a:	2001      	movs	r0, #1
  40110c:	4770      	bx	lr
  40110e:	bf00      	nop
  401110:	00400ebd 	.word	0x00400ebd
  401114:	00400cc9 	.word	0x00400cc9
  401118:	204009dc 	.word	0x204009dc
  40111c:	00400d79 	.word	0x00400d79

00401120 <ili9488_draw_filled_rectangle>:
 * \param ul_x2 X coordinate of lower-right corner on LCD.
 * \param ul_y2 Y coordinate of lower-right corner on LCD.
 */
void ili9488_draw_filled_rectangle(uint32_t ul_x1, uint32_t ul_y1,
		uint32_t ul_x2, uint32_t ul_y2)
{
  401120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401124:	b084      	sub	sp, #16
  401126:	9003      	str	r0, [sp, #12]
  401128:	9102      	str	r1, [sp, #8]
  40112a:	9201      	str	r2, [sp, #4]
  40112c:	aa04      	add	r2, sp, #16
  40112e:	f842 3d10 	str.w	r3, [r2, #-16]!
	uint32_t size, blocks;

	/* Swap coordinates if necessary */
	ili9488_check_box_coordinates(&ul_x1, &ul_y1, &ul_x2, &ul_y2);
  401132:	4613      	mov	r3, r2
  401134:	aa01      	add	r2, sp, #4
  401136:	a902      	add	r1, sp, #8
  401138:	a803      	add	r0, sp, #12
  40113a:	4c22      	ldr	r4, [pc, #136]	; (4011c4 <ili9488_draw_filled_rectangle+0xa4>)
  40113c:	47a0      	blx	r4

	/* Determine the refresh window area */
	ili9488_set_window(ul_x1, ul_y1, (ul_x2 - ul_x1) + 1, (ul_y2 - ul_y1) + 1);
  40113e:	f8bd 000c 	ldrh.w	r0, [sp, #12]
  401142:	f8bd 1008 	ldrh.w	r1, [sp, #8]
  401146:	9b00      	ldr	r3, [sp, #0]
  401148:	3301      	adds	r3, #1
  40114a:	1a5b      	subs	r3, r3, r1
  40114c:	9a01      	ldr	r2, [sp, #4]
  40114e:	3201      	adds	r2, #1
  401150:	1a12      	subs	r2, r2, r0
  401152:	b29b      	uxth	r3, r3
  401154:	b292      	uxth	r2, r2
  401156:	4c1c      	ldr	r4, [pc, #112]	; (4011c8 <ili9488_draw_filled_rectangle+0xa8>)
  401158:	47a0      	blx	r4

	/* Prepare to write in GRAM */
	ili9488_write_ram_prepare();
  40115a:	4b1c      	ldr	r3, [pc, #112]	; (4011cc <ili9488_draw_filled_rectangle+0xac>)
  40115c:	4798      	blx	r3

	size = (ul_x2 - ul_x1 + 1) * (ul_y2 - ul_y1 + 1);
  40115e:	9903      	ldr	r1, [sp, #12]
  401160:	9d01      	ldr	r5, [sp, #4]
  401162:	1a69      	subs	r1, r5, r1
  401164:	9d00      	ldr	r5, [sp, #0]
  401166:	3501      	adds	r5, #1
  401168:	9b02      	ldr	r3, [sp, #8]
  40116a:	1aed      	subs	r5, r5, r3
  40116c:	fb01 5505 	mla	r5, r1, r5, r5
	/* Send pixels blocks => one SPI IT / block */
	blocks = size / LCD_DATA_CACHE_SIZE;
  401170:	4b17      	ldr	r3, [pc, #92]	; (4011d0 <ili9488_draw_filled_rectangle+0xb0>)
  401172:	fba3 2305 	umull	r2, r3, r3, r5
  401176:	0a1b      	lsrs	r3, r3, #8
	while (blocks--) {
  401178:	b163      	cbz	r3, 401194 <ili9488_draw_filled_rectangle+0x74>
  40117a:	1e5c      	subs	r4, r3, #1
		ili9488_write_ram_buffer(g_ul_pixel_cache, LCD_DATA_CACHE_SIZE * LCD_DATA_COLOR_UNIT);
  40117c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 4011d8 <ili9488_draw_filled_rectangle+0xb8>
  401180:	f44f 7770 	mov.w	r7, #960	; 0x3c0
  401184:	4e13      	ldr	r6, [pc, #76]	; (4011d4 <ili9488_draw_filled_rectangle+0xb4>)
  401186:	4639      	mov	r1, r7
  401188:	4640      	mov	r0, r8
  40118a:	47b0      	blx	r6
	while (blocks--) {
  40118c:	3c01      	subs	r4, #1
  40118e:	f1b4 3fff 	cmp.w	r4, #4294967295
  401192:	d1f8      	bne.n	401186 <ili9488_draw_filled_rectangle+0x66>
	}

	/* Send remaining pixels */
	ili9488_write_ram_buffer(g_ul_pixel_cache, (size % LCD_DATA_CACHE_SIZE) * LCD_DATA_COLOR_UNIT);
  401194:	490e      	ldr	r1, [pc, #56]	; (4011d0 <ili9488_draw_filled_rectangle+0xb0>)
  401196:	fba1 3105 	umull	r3, r1, r1, r5
  40119a:	0a09      	lsrs	r1, r1, #8
  40119c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  4011a0:	eba5 1181 	sub.w	r1, r5, r1, lsl #6
  4011a4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  4011a8:	480b      	ldr	r0, [pc, #44]	; (4011d8 <ili9488_draw_filled_rectangle+0xb8>)
  4011aa:	4b0a      	ldr	r3, [pc, #40]	; (4011d4 <ili9488_draw_filled_rectangle+0xb4>)
  4011ac:	4798      	blx	r3

	/* Reset the refresh window area */
	ili9488_set_window(0, 0, ILI9488_LCD_WIDTH, ILI9488_LCD_HEIGHT);
  4011ae:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  4011b2:	f44f 72a0 	mov.w	r2, #320	; 0x140
  4011b6:	2100      	movs	r1, #0
  4011b8:	4608      	mov	r0, r1
  4011ba:	4c03      	ldr	r4, [pc, #12]	; (4011c8 <ili9488_draw_filled_rectangle+0xa8>)
  4011bc:	47a0      	blx	r4

}
  4011be:	b004      	add	sp, #16
  4011c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4011c4:	00400c71 	.word	0x00400c71
  4011c8:	00400e01 	.word	0x00400e01
  4011cc:	00400cc9 	.word	0x00400cc9
  4011d0:	cccccccd 	.word	0xcccccccd
  4011d4:	00400d79 	.word	0x00400d79
  4011d8:	204009dc 	.word	0x204009dc

004011dc <ili9488_draw_filled_circle>:
	signed int d;       /* Decision Variable */
	uint32_t dwCurX;    /* Current X Value */
	uint32_t dwCurY;    /* Current Y Value */
	uint32_t dwXmin, dwYmin;

	if (ul_r == 0) {
  4011dc:	2a00      	cmp	r2, #0
  4011de:	d04a      	beq.n	401276 <ili9488_draw_filled_circle+0x9a>
{
  4011e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4011e4:	4607      	mov	r7, r0
  4011e6:	4688      	mov	r8, r1
  4011e8:	4615      	mov	r5, r2
		return 1;
	}

	d = 3 - (ul_r << 1);
  4011ea:	0056      	lsls	r6, r2, #1
  4011ec:	f1c6 0603 	rsb	r6, r6, #3
	dwCurX = 0;
  4011f0:	2400      	movs	r4, #0
	dwCurY = ul_r;

	while (dwCurX <= dwCurY) {
		dwXmin = (dwCurX > ul_x) ? 0 : ul_x - dwCurX;
		dwYmin = (dwCurY > ul_y) ? 0 : ul_y - dwCurY;
		ili9488_draw_filled_rectangle(dwXmin, dwYmin, ul_x + dwCurX, dwYmin);
  4011f2:	f8df a088 	ldr.w	sl, [pc, #136]	; 40127c <ili9488_draw_filled_circle+0xa0>
  4011f6:	e005      	b.n	401204 <ili9488_draw_filled_circle+0x28>
		dwYmin = (dwCurX > ul_y) ? 0 : ul_y - dwCurX;
		ili9488_draw_filled_rectangle(dwXmin, dwYmin, ul_x + dwCurY, dwYmin);
		ili9488_draw_filled_rectangle(dwXmin, ul_y + dwCurX, ul_x + dwCurY, ul_y + dwCurX);

		if (d < 0) {
			d += (dwCurX << 2) + 6;
  4011f8:	3606      	adds	r6, #6
  4011fa:	eb06 0684 	add.w	r6, r6, r4, lsl #2
		} else {
			d += ((dwCurX - dwCurY) << 2) + 10;
			dwCurY--;
		}

		dwCurX++;
  4011fe:	3401      	adds	r4, #1
	while (dwCurX <= dwCurY) {
  401200:	42a5      	cmp	r5, r4
  401202:	d335      	bcc.n	401270 <ili9488_draw_filled_circle+0x94>
		dwXmin = (dwCurX > ul_x) ? 0 : ul_x - dwCurX;
  401204:	42a7      	cmp	r7, r4
  401206:	bf2c      	ite	cs
  401208:	eba7 0b04 	subcs.w	fp, r7, r4
  40120c:	f04f 0b00 	movcc.w	fp, #0
		dwYmin = (dwCurY > ul_y) ? 0 : ul_y - dwCurY;
  401210:	45a8      	cmp	r8, r5
  401212:	bf2c      	ite	cs
  401214:	eba8 0105 	subcs.w	r1, r8, r5
  401218:	2100      	movcc	r1, #0
		ili9488_draw_filled_rectangle(dwXmin, dwYmin, ul_x + dwCurX, dwYmin);
  40121a:	eb07 0904 	add.w	r9, r7, r4
  40121e:	460b      	mov	r3, r1
  401220:	464a      	mov	r2, r9
  401222:	4658      	mov	r0, fp
  401224:	47d0      	blx	sl
		ili9488_draw_filled_rectangle(dwXmin, ul_y + dwCurY, ul_x + dwCurX, ul_y + dwCurY);
  401226:	eb08 0105 	add.w	r1, r8, r5
  40122a:	460b      	mov	r3, r1
  40122c:	464a      	mov	r2, r9
  40122e:	4658      	mov	r0, fp
  401230:	47d0      	blx	sl
		dwXmin = (dwCurY > ul_x) ? 0 : ul_x - dwCurY;
  401232:	42af      	cmp	r7, r5
  401234:	bf2c      	ite	cs
  401236:	eba7 0b05 	subcs.w	fp, r7, r5
  40123a:	f04f 0b00 	movcc.w	fp, #0
		dwYmin = (dwCurX > ul_y) ? 0 : ul_y - dwCurX;
  40123e:	45a0      	cmp	r8, r4
  401240:	bf2c      	ite	cs
  401242:	eba8 0104 	subcs.w	r1, r8, r4
  401246:	2100      	movcc	r1, #0
		ili9488_draw_filled_rectangle(dwXmin, dwYmin, ul_x + dwCurY, dwYmin);
  401248:	eb07 0905 	add.w	r9, r7, r5
  40124c:	460b      	mov	r3, r1
  40124e:	464a      	mov	r2, r9
  401250:	4658      	mov	r0, fp
  401252:	47d0      	blx	sl
		ili9488_draw_filled_rectangle(dwXmin, ul_y + dwCurX, ul_x + dwCurY, ul_y + dwCurX);
  401254:	eb08 0104 	add.w	r1, r8, r4
  401258:	460b      	mov	r3, r1
  40125a:	464a      	mov	r2, r9
  40125c:	4658      	mov	r0, fp
  40125e:	47d0      	blx	sl
		if (d < 0) {
  401260:	2e00      	cmp	r6, #0
  401262:	dbc9      	blt.n	4011f8 <ili9488_draw_filled_circle+0x1c>
			d += ((dwCurX - dwCurY) << 2) + 10;
  401264:	1b63      	subs	r3, r4, r5
  401266:	360a      	adds	r6, #10
  401268:	eb06 0683 	add.w	r6, r6, r3, lsl #2
			dwCurY--;
  40126c:	3d01      	subs	r5, #1
  40126e:	e7c6      	b.n	4011fe <ili9488_draw_filled_circle+0x22>
	}

	return 0;
  401270:	2000      	movs	r0, #0
  401272:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 1;
  401276:	2001      	movs	r0, #1
  401278:	4770      	bx	lr
  40127a:	bf00      	nop
  40127c:	00401121 	.word	0x00401121

00401280 <ili9488_draw_string>:
 * \param ul_x X coordinate of string top-left corner.
 * \param ul_y Y coordinate of string top-left corner.
 * \param p_str String to display.
 */
void ili9488_draw_string(uint32_t ul_x, uint32_t ul_y, const uint8_t *p_str)
{
  401280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401284:	b085      	sub	sp, #20
  401286:	9003      	str	r0, [sp, #12]
  401288:	9202      	str	r2, [sp, #8]
	uint32_t xorg = ul_x;

	while (*p_str != 0) {
  40128a:	7813      	ldrb	r3, [r2, #0]
  40128c:	2b00      	cmp	r3, #0
  40128e:	d048      	beq.n	401322 <ili9488_draw_string+0xa2>
  401290:	468b      	mov	fp, r1
  401292:	9001      	str	r0, [sp, #4]
				ili9488_draw_pixel(ul_x + col, ul_y + row);
  401294:	f8df 8094 	ldr.w	r8, [pc, #148]	; 40132c <ili9488_draw_string+0xac>
  401298:	e033      	b.n	401302 <ili9488_draw_string+0x82>
		/* If newline, jump to the next line (font height + 2) */
		if (*p_str == '\n') {
			ul_y += gfont.height + 2;
  40129a:	f10b 0b10 	add.w	fp, fp, #16
			ul_x = xorg;
  40129e:	9b03      	ldr	r3, [sp, #12]
  4012a0:	9301      	str	r3, [sp, #4]
  4012a2:	e029      	b.n	4012f8 <ili9488_draw_string+0x78>
  4012a4:	3c01      	subs	r4, #1
		for (row = 0; row < 8; row++) {
  4012a6:	f1b4 3fff 	cmp.w	r4, #4294967295
  4012aa:	d009      	beq.n	4012c0 <ili9488_draw_string+0x40>
			if ((p_uc_charset10x14[offset0] >> (7 - row)) & 0x1) {
  4012ac:	782b      	ldrb	r3, [r5, #0]
  4012ae:	4123      	asrs	r3, r4
  4012b0:	f013 0f01 	tst.w	r3, #1
  4012b4:	d0f6      	beq.n	4012a4 <ili9488_draw_string+0x24>
				ili9488_draw_pixel(ul_x + col, ul_y + row);
  4012b6:	ebaa 0104 	sub.w	r1, sl, r4
  4012ba:	4630      	mov	r0, r6
  4012bc:	47c0      	blx	r8
  4012be:	e7f1      	b.n	4012a4 <ili9488_draw_string+0x24>
		for (row = 0; row < 8; row++) {
  4012c0:	2407      	movs	r4, #7
				ili9488_draw_pixel(ul_x + col, ul_y + row + 8);
  4012c2:	f10b 090f 	add.w	r9, fp, #15
  4012c6:	e002      	b.n	4012ce <ili9488_draw_string+0x4e>
  4012c8:	3c01      	subs	r4, #1
		for (row = 0; row < 6; row++) {
  4012ca:	2c01      	cmp	r4, #1
  4012cc:	d009      	beq.n	4012e2 <ili9488_draw_string+0x62>
			if ((p_uc_charset10x14[offset1] >> (7 - row)) & 0x1) {
  4012ce:	787b      	ldrb	r3, [r7, #1]
  4012d0:	4123      	asrs	r3, r4
  4012d2:	f013 0f01 	tst.w	r3, #1
  4012d6:	d0f7      	beq.n	4012c8 <ili9488_draw_string+0x48>
				ili9488_draw_pixel(ul_x + col, ul_y + row + 8);
  4012d8:	eba9 0104 	sub.w	r1, r9, r4
  4012dc:	4630      	mov	r0, r6
  4012de:	47c0      	blx	r8
  4012e0:	e7f2      	b.n	4012c8 <ili9488_draw_string+0x48>
  4012e2:	3502      	adds	r5, #2
  4012e4:	3601      	adds	r6, #1
	for (col = 0; col < 10; col++) {
  4012e6:	9b00      	ldr	r3, [sp, #0]
  4012e8:	42b3      	cmp	r3, r6
  4012ea:	d002      	beq.n	4012f2 <ili9488_draw_string+0x72>
	offset = ((uint32_t)uc_c - 0x20) * 20;
  4012ec:	2407      	movs	r4, #7
  4012ee:	462f      	mov	r7, r5
  4012f0:	e7dc      	b.n	4012ac <ili9488_draw_string+0x2c>
		} else {
			/* Draw the character and place cursor right after (font width + 2) */
			ili9488_draw_char(ul_x, ul_y, *p_str);
			ul_x += gfont.width + 2;
  4012f2:	9b01      	ldr	r3, [sp, #4]
  4012f4:	330c      	adds	r3, #12
  4012f6:	9301      	str	r3, [sp, #4]
	while (*p_str != 0) {
  4012f8:	9a02      	ldr	r2, [sp, #8]
  4012fa:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  4012fe:	9202      	str	r2, [sp, #8]
  401300:	b17b      	cbz	r3, 401322 <ili9488_draw_string+0xa2>
		if (*p_str == '\n') {
  401302:	2b0a      	cmp	r3, #10
  401304:	d0c9      	beq.n	40129a <ili9488_draw_string+0x1a>
	offset = ((uint32_t)uc_c - 0x20) * 20;
  401306:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40130a:	4d07      	ldr	r5, [pc, #28]	; (401328 <ili9488_draw_string+0xa8>)
  40130c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  401310:	f5a3 7520 	sub.w	r5, r3, #640	; 0x280
  401314:	9e01      	ldr	r6, [sp, #4]
  401316:	4633      	mov	r3, r6
  401318:	330a      	adds	r3, #10
  40131a:	9300      	str	r3, [sp, #0]
				ili9488_draw_pixel(ul_x + col, ul_y + row);
  40131c:	f10b 0a07 	add.w	sl, fp, #7
  401320:	e7e4      	b.n	4012ec <ili9488_draw_string+0x6c>
		}
		p_str++;
	}
}
  401322:	b005      	add	sp, #20
  401324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401328:	00408efc 	.word	0x00408efc
  40132c:	004010e5 	.word	0x004010e5

00401330 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  401330:	6301      	str	r1, [r0, #48]	; 0x30
  401332:	4770      	bx	lr

00401334 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401334:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401336:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40133a:	d03a      	beq.n	4013b2 <pio_set_peripheral+0x7e>
  40133c:	d813      	bhi.n	401366 <pio_set_peripheral+0x32>
  40133e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401342:	d025      	beq.n	401390 <pio_set_peripheral+0x5c>
  401344:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401348:	d10a      	bne.n	401360 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40134a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40134c:	4313      	orrs	r3, r2
  40134e:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401350:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401352:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401354:	400b      	ands	r3, r1
  401356:	ea23 0302 	bic.w	r3, r3, r2
  40135a:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40135c:	6042      	str	r2, [r0, #4]
  40135e:	4770      	bx	lr
	switch (ul_type) {
  401360:	2900      	cmp	r1, #0
  401362:	d1fb      	bne.n	40135c <pio_set_peripheral+0x28>
  401364:	4770      	bx	lr
  401366:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40136a:	d021      	beq.n	4013b0 <pio_set_peripheral+0x7c>
  40136c:	d809      	bhi.n	401382 <pio_set_peripheral+0x4e>
  40136e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401372:	d1f3      	bne.n	40135c <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  401374:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401376:	4313      	orrs	r3, r2
  401378:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40137a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40137c:	4313      	orrs	r3, r2
  40137e:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401380:	e7ec      	b.n	40135c <pio_set_peripheral+0x28>
	switch (ul_type) {
  401382:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401386:	d013      	beq.n	4013b0 <pio_set_peripheral+0x7c>
  401388:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  40138c:	d010      	beq.n	4013b0 <pio_set_peripheral+0x7c>
  40138e:	e7e5      	b.n	40135c <pio_set_peripheral+0x28>
{
  401390:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  401392:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401394:	6f04      	ldr	r4, [r0, #112]	; 0x70
  401396:	43d3      	mvns	r3, r2
  401398:	4021      	ands	r1, r4
  40139a:	461c      	mov	r4, r3
  40139c:	4019      	ands	r1, r3
  40139e:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4013a0:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4013a2:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4013a4:	400b      	ands	r3, r1
  4013a6:	4023      	ands	r3, r4
  4013a8:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4013aa:	6042      	str	r2, [r0, #4]
}
  4013ac:	f85d 4b04 	ldr.w	r4, [sp], #4
  4013b0:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4013b2:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4013b4:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4013b6:	400b      	ands	r3, r1
  4013b8:	ea23 0302 	bic.w	r3, r3, r2
  4013bc:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4013be:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4013c0:	4313      	orrs	r3, r2
  4013c2:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4013c4:	e7ca      	b.n	40135c <pio_set_peripheral+0x28>

004013c6 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4013c6:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4013c8:	f012 0f01 	tst.w	r2, #1
  4013cc:	d10d      	bne.n	4013ea <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  4013ce:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4013d0:	f012 0f0a 	tst.w	r2, #10
  4013d4:	d00b      	beq.n	4013ee <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  4013d6:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  4013d8:	f012 0f02 	tst.w	r2, #2
  4013dc:	d109      	bne.n	4013f2 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  4013de:	f012 0f08 	tst.w	r2, #8
  4013e2:	d008      	beq.n	4013f6 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  4013e4:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  4013e8:	e005      	b.n	4013f6 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  4013ea:	6641      	str	r1, [r0, #100]	; 0x64
  4013ec:	e7f0      	b.n	4013d0 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  4013ee:	6241      	str	r1, [r0, #36]	; 0x24
  4013f0:	e7f2      	b.n	4013d8 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  4013f2:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  4013f6:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4013f8:	6001      	str	r1, [r0, #0]
  4013fa:	4770      	bx	lr

004013fc <pio_set_output>:
{
  4013fc:	b410      	push	{r4}
  4013fe:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  401400:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  401402:	b94c      	cbnz	r4, 401418 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  401404:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  401406:	b14b      	cbz	r3, 40141c <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  401408:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  40140a:	b94a      	cbnz	r2, 401420 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  40140c:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  40140e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  401410:	6001      	str	r1, [r0, #0]
}
  401412:	f85d 4b04 	ldr.w	r4, [sp], #4
  401416:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  401418:	6641      	str	r1, [r0, #100]	; 0x64
  40141a:	e7f4      	b.n	401406 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  40141c:	6541      	str	r1, [r0, #84]	; 0x54
  40141e:	e7f4      	b.n	40140a <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  401420:	6301      	str	r1, [r0, #48]	; 0x30
  401422:	e7f4      	b.n	40140e <pio_set_output+0x12>

00401424 <pio_configure>:
{
  401424:	b570      	push	{r4, r5, r6, lr}
  401426:	b082      	sub	sp, #8
  401428:	4605      	mov	r5, r0
  40142a:	4616      	mov	r6, r2
  40142c:	461c      	mov	r4, r3
	switch (ul_type) {
  40142e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401432:	d014      	beq.n	40145e <pio_configure+0x3a>
  401434:	d90a      	bls.n	40144c <pio_configure+0x28>
  401436:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40143a:	d024      	beq.n	401486 <pio_configure+0x62>
  40143c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401440:	d021      	beq.n	401486 <pio_configure+0x62>
  401442:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401446:	d017      	beq.n	401478 <pio_configure+0x54>
		return 0;
  401448:	2000      	movs	r0, #0
  40144a:	e01a      	b.n	401482 <pio_configure+0x5e>
	switch (ul_type) {
  40144c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401450:	d005      	beq.n	40145e <pio_configure+0x3a>
  401452:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401456:	d002      	beq.n	40145e <pio_configure+0x3a>
  401458:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40145c:	d1f4      	bne.n	401448 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  40145e:	4632      	mov	r2, r6
  401460:	4628      	mov	r0, r5
  401462:	4b11      	ldr	r3, [pc, #68]	; (4014a8 <pio_configure+0x84>)
  401464:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401466:	f014 0f01 	tst.w	r4, #1
  40146a:	d102      	bne.n	401472 <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  40146c:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  40146e:	2001      	movs	r0, #1
  401470:	e007      	b.n	401482 <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  401472:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  401474:	2001      	movs	r0, #1
  401476:	e004      	b.n	401482 <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  401478:	461a      	mov	r2, r3
  40147a:	4631      	mov	r1, r6
  40147c:	4b0b      	ldr	r3, [pc, #44]	; (4014ac <pio_configure+0x88>)
  40147e:	4798      	blx	r3
	return 1;
  401480:	2001      	movs	r0, #1
}
  401482:	b002      	add	sp, #8
  401484:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  401486:	f004 0301 	and.w	r3, r4, #1
  40148a:	9300      	str	r3, [sp, #0]
  40148c:	f3c4 0380 	ubfx	r3, r4, #2, #1
  401490:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401494:	bf14      	ite	ne
  401496:	2200      	movne	r2, #0
  401498:	2201      	moveq	r2, #1
  40149a:	4631      	mov	r1, r6
  40149c:	4628      	mov	r0, r5
  40149e:	4c04      	ldr	r4, [pc, #16]	; (4014b0 <pio_configure+0x8c>)
  4014a0:	47a0      	blx	r4
	return 1;
  4014a2:	2001      	movs	r0, #1
		break;
  4014a4:	e7ed      	b.n	401482 <pio_configure+0x5e>
  4014a6:	bf00      	nop
  4014a8:	00401335 	.word	0x00401335
  4014ac:	004013c7 	.word	0x004013c7
  4014b0:	004013fd 	.word	0x004013fd

004014b4 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4014b4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4014b6:	4770      	bx	lr

004014b8 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4014b8:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4014ba:	4770      	bx	lr

004014bc <pio_set_pin_high>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4014bc:	4b05      	ldr	r3, [pc, #20]	; (4014d4 <pio_set_pin_high+0x18>)
  4014be:	eb03 1350 	add.w	r3, r3, r0, lsr #5
  4014c2:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  4014c4:	f000 001f 	and.w	r0, r0, #31
  4014c8:	2201      	movs	r2, #1
  4014ca:	fa02 f000 	lsl.w	r0, r2, r0
  4014ce:	6318      	str	r0, [r3, #48]	; 0x30
  4014d0:	4770      	bx	lr
  4014d2:	bf00      	nop
  4014d4:	00200707 	.word	0x00200707

004014d8 <pio_set_pin_low>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4014d8:	4b05      	ldr	r3, [pc, #20]	; (4014f0 <pio_set_pin_low+0x18>)
  4014da:	eb03 1350 	add.w	r3, r3, r0, lsr #5
  4014de:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  4014e0:	f000 001f 	and.w	r0, r0, #31
  4014e4:	2201      	movs	r2, #1
  4014e6:	fa02 f000 	lsl.w	r0, r2, r0
  4014ea:	6358      	str	r0, [r3, #52]	; 0x34
  4014ec:	4770      	bx	lr
  4014ee:	bf00      	nop
  4014f0:	00200707 	.word	0x00200707

004014f4 <pio_configure_pin>:
{
  4014f4:	b570      	push	{r4, r5, r6, lr}
  4014f6:	b082      	sub	sp, #8
  4014f8:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4014fa:	4c46      	ldr	r4, [pc, #280]	; (401614 <pio_configure_pin+0x120>)
  4014fc:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  401500:	0264      	lsls	r4, r4, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  401502:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  401506:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40150a:	d059      	beq.n	4015c0 <pio_configure_pin+0xcc>
  40150c:	d80a      	bhi.n	401524 <pio_configure_pin+0x30>
  40150e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401512:	d02f      	beq.n	401574 <pio_configure_pin+0x80>
  401514:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401518:	d03f      	beq.n	40159a <pio_configure_pin+0xa6>
  40151a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40151e:	d016      	beq.n	40154e <pio_configure_pin+0x5a>
		return 0;
  401520:	2000      	movs	r0, #0
  401522:	e012      	b.n	40154a <pio_configure_pin+0x56>
	switch (ul_flags & PIO_TYPE_Msk) {
  401524:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401528:	d05d      	beq.n	4015e6 <pio_configure_pin+0xf2>
  40152a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40152e:	d05a      	beq.n	4015e6 <pio_configure_pin+0xf2>
  401530:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401534:	d1f4      	bne.n	401520 <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  401536:	f000 011f 	and.w	r1, r0, #31
  40153a:	2601      	movs	r6, #1
  40153c:	462a      	mov	r2, r5
  40153e:	fa06 f101 	lsl.w	r1, r6, r1
  401542:	4620      	mov	r0, r4
  401544:	4b34      	ldr	r3, [pc, #208]	; (401618 <pio_configure_pin+0x124>)
  401546:	4798      	blx	r3
	return 1;
  401548:	4630      	mov	r0, r6
}
  40154a:	b002      	add	sp, #8
  40154c:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  40154e:	f000 001f 	and.w	r0, r0, #31
  401552:	2601      	movs	r6, #1
  401554:	4086      	lsls	r6, r0
  401556:	4632      	mov	r2, r6
  401558:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40155c:	4620      	mov	r0, r4
  40155e:	4b2f      	ldr	r3, [pc, #188]	; (40161c <pio_configure_pin+0x128>)
  401560:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401562:	f015 0f01 	tst.w	r5, #1
  401566:	d102      	bne.n	40156e <pio_configure_pin+0x7a>
		p_pio->PIO_PUDR = ul_mask;
  401568:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  40156a:	2001      	movs	r0, #1
  40156c:	e7ed      	b.n	40154a <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  40156e:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  401570:	2001      	movs	r0, #1
  401572:	e7ea      	b.n	40154a <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  401574:	f000 001f 	and.w	r0, r0, #31
  401578:	2601      	movs	r6, #1
  40157a:	4086      	lsls	r6, r0
  40157c:	4632      	mov	r2, r6
  40157e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401582:	4620      	mov	r0, r4
  401584:	4b25      	ldr	r3, [pc, #148]	; (40161c <pio_configure_pin+0x128>)
  401586:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401588:	f015 0f01 	tst.w	r5, #1
  40158c:	d102      	bne.n	401594 <pio_configure_pin+0xa0>
		p_pio->PIO_PUDR = ul_mask;
  40158e:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  401590:	2001      	movs	r0, #1
  401592:	e7da      	b.n	40154a <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  401594:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  401596:	2001      	movs	r0, #1
  401598:	e7d7      	b.n	40154a <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  40159a:	f000 001f 	and.w	r0, r0, #31
  40159e:	2601      	movs	r6, #1
  4015a0:	4086      	lsls	r6, r0
  4015a2:	4632      	mov	r2, r6
  4015a4:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4015a8:	4620      	mov	r0, r4
  4015aa:	4b1c      	ldr	r3, [pc, #112]	; (40161c <pio_configure_pin+0x128>)
  4015ac:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4015ae:	f015 0f01 	tst.w	r5, #1
  4015b2:	d102      	bne.n	4015ba <pio_configure_pin+0xc6>
		p_pio->PIO_PUDR = ul_mask;
  4015b4:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4015b6:	2001      	movs	r0, #1
  4015b8:	e7c7      	b.n	40154a <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4015ba:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4015bc:	2001      	movs	r0, #1
  4015be:	e7c4      	b.n	40154a <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4015c0:	f000 001f 	and.w	r0, r0, #31
  4015c4:	2601      	movs	r6, #1
  4015c6:	4086      	lsls	r6, r0
  4015c8:	4632      	mov	r2, r6
  4015ca:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4015ce:	4620      	mov	r0, r4
  4015d0:	4b12      	ldr	r3, [pc, #72]	; (40161c <pio_configure_pin+0x128>)
  4015d2:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4015d4:	f015 0f01 	tst.w	r5, #1
  4015d8:	d102      	bne.n	4015e0 <pio_configure_pin+0xec>
		p_pio->PIO_PUDR = ul_mask;
  4015da:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4015dc:	2001      	movs	r0, #1
  4015de:	e7b4      	b.n	40154a <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4015e0:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4015e2:	2001      	movs	r0, #1
  4015e4:	e7b1      	b.n	40154a <pio_configure_pin+0x56>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4015e6:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4015ea:	f000 011f 	and.w	r1, r0, #31
  4015ee:	2601      	movs	r6, #1
  4015f0:	ea05 0306 	and.w	r3, r5, r6
  4015f4:	9300      	str	r3, [sp, #0]
  4015f6:	f3c5 0380 	ubfx	r3, r5, #2, #1
  4015fa:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4015fe:	bf14      	ite	ne
  401600:	2200      	movne	r2, #0
  401602:	2201      	moveq	r2, #1
  401604:	fa06 f101 	lsl.w	r1, r6, r1
  401608:	4620      	mov	r0, r4
  40160a:	4c05      	ldr	r4, [pc, #20]	; (401620 <pio_configure_pin+0x12c>)
  40160c:	47a0      	blx	r4
	return 1;
  40160e:	4630      	mov	r0, r6
		break;
  401610:	e79b      	b.n	40154a <pio_configure_pin+0x56>
  401612:	bf00      	nop
  401614:	00200707 	.word	0x00200707
  401618:	004013c7 	.word	0x004013c7
  40161c:	00401335 	.word	0x00401335
  401620:	004013fd 	.word	0x004013fd

00401624 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401628:	4604      	mov	r4, r0
  40162a:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40162c:	4b0e      	ldr	r3, [pc, #56]	; (401668 <pio_handler_process+0x44>)
  40162e:	4798      	blx	r3
  401630:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401632:	4620      	mov	r0, r4
  401634:	4b0d      	ldr	r3, [pc, #52]	; (40166c <pio_handler_process+0x48>)
  401636:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  401638:	4005      	ands	r5, r0
  40163a:	d013      	beq.n	401664 <pio_handler_process+0x40>
  40163c:	4c0c      	ldr	r4, [pc, #48]	; (401670 <pio_handler_process+0x4c>)
  40163e:	f104 0660 	add.w	r6, r4, #96	; 0x60
  401642:	e003      	b.n	40164c <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  401644:	42b4      	cmp	r4, r6
  401646:	d00d      	beq.n	401664 <pio_handler_process+0x40>
  401648:	3410      	adds	r4, #16
		while (status != 0) {
  40164a:	b15d      	cbz	r5, 401664 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  40164c:	6820      	ldr	r0, [r4, #0]
  40164e:	4540      	cmp	r0, r8
  401650:	d1f8      	bne.n	401644 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401652:	6861      	ldr	r1, [r4, #4]
  401654:	4229      	tst	r1, r5
  401656:	d0f5      	beq.n	401644 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401658:	68e3      	ldr	r3, [r4, #12]
  40165a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  40165c:	6863      	ldr	r3, [r4, #4]
  40165e:	ea25 0503 	bic.w	r5, r5, r3
  401662:	e7ef      	b.n	401644 <pio_handler_process+0x20>
  401664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401668:	004014b5 	.word	0x004014b5
  40166c:	004014b9 	.word	0x004014b9
  401670:	20400d9c 	.word	0x20400d9c

00401674 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401674:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  401676:	210a      	movs	r1, #10
  401678:	4801      	ldr	r0, [pc, #4]	; (401680 <PIOA_Handler+0xc>)
  40167a:	4b02      	ldr	r3, [pc, #8]	; (401684 <PIOA_Handler+0x10>)
  40167c:	4798      	blx	r3
  40167e:	bd08      	pop	{r3, pc}
  401680:	400e0e00 	.word	0x400e0e00
  401684:	00401625 	.word	0x00401625

00401688 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401688:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40168a:	210b      	movs	r1, #11
  40168c:	4801      	ldr	r0, [pc, #4]	; (401694 <PIOB_Handler+0xc>)
  40168e:	4b02      	ldr	r3, [pc, #8]	; (401698 <PIOB_Handler+0x10>)
  401690:	4798      	blx	r3
  401692:	bd08      	pop	{r3, pc}
  401694:	400e1000 	.word	0x400e1000
  401698:	00401625 	.word	0x00401625

0040169c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  40169c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40169e:	210c      	movs	r1, #12
  4016a0:	4801      	ldr	r0, [pc, #4]	; (4016a8 <PIOC_Handler+0xc>)
  4016a2:	4b02      	ldr	r3, [pc, #8]	; (4016ac <PIOC_Handler+0x10>)
  4016a4:	4798      	blx	r3
  4016a6:	bd08      	pop	{r3, pc}
  4016a8:	400e1200 	.word	0x400e1200
  4016ac:	00401625 	.word	0x00401625

004016b0 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4016b0:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4016b2:	2110      	movs	r1, #16
  4016b4:	4801      	ldr	r0, [pc, #4]	; (4016bc <PIOD_Handler+0xc>)
  4016b6:	4b02      	ldr	r3, [pc, #8]	; (4016c0 <PIOD_Handler+0x10>)
  4016b8:	4798      	blx	r3
  4016ba:	bd08      	pop	{r3, pc}
  4016bc:	400e1400 	.word	0x400e1400
  4016c0:	00401625 	.word	0x00401625

004016c4 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4016c4:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  4016c6:	2111      	movs	r1, #17
  4016c8:	4801      	ldr	r0, [pc, #4]	; (4016d0 <PIOE_Handler+0xc>)
  4016ca:	4b02      	ldr	r3, [pc, #8]	; (4016d4 <PIOE_Handler+0x10>)
  4016cc:	4798      	blx	r3
  4016ce:	bd08      	pop	{r3, pc}
  4016d0:	400e1600 	.word	0x400e1600
  4016d4:	00401625 	.word	0x00401625

004016d8 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  4016d8:	2803      	cmp	r0, #3
  4016da:	d011      	beq.n	401700 <pmc_mck_set_division+0x28>
  4016dc:	2804      	cmp	r0, #4
  4016de:	d012      	beq.n	401706 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4016e0:	2802      	cmp	r0, #2
  4016e2:	bf0c      	ite	eq
  4016e4:	f44f 7180 	moveq.w	r1, #256	; 0x100
  4016e8:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4016ea:	4a08      	ldr	r2, [pc, #32]	; (40170c <pmc_mck_set_division+0x34>)
  4016ec:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4016ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  4016f2:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  4016f4:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4016f6:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4016f8:	f013 0f08 	tst.w	r3, #8
  4016fc:	d0fb      	beq.n	4016f6 <pmc_mck_set_division+0x1e>
}
  4016fe:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  401700:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  401704:	e7f1      	b.n	4016ea <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  401706:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  40170a:	e7ee      	b.n	4016ea <pmc_mck_set_division+0x12>
  40170c:	400e0600 	.word	0x400e0600

00401710 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401710:	4a17      	ldr	r2, [pc, #92]	; (401770 <pmc_switch_mck_to_pllack+0x60>)
  401712:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401718:	4318      	orrs	r0, r3
  40171a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40171c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40171e:	f013 0f08 	tst.w	r3, #8
  401722:	d10a      	bne.n	40173a <pmc_switch_mck_to_pllack+0x2a>
  401724:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401728:	4911      	ldr	r1, [pc, #68]	; (401770 <pmc_switch_mck_to_pllack+0x60>)
  40172a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40172c:	f012 0f08 	tst.w	r2, #8
  401730:	d103      	bne.n	40173a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401732:	3b01      	subs	r3, #1
  401734:	d1f9      	bne.n	40172a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  401736:	2001      	movs	r0, #1
  401738:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40173a:	4a0d      	ldr	r2, [pc, #52]	; (401770 <pmc_switch_mck_to_pllack+0x60>)
  40173c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40173e:	f023 0303 	bic.w	r3, r3, #3
  401742:	f043 0302 	orr.w	r3, r3, #2
  401746:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401748:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40174a:	f013 0f08 	tst.w	r3, #8
  40174e:	d10a      	bne.n	401766 <pmc_switch_mck_to_pllack+0x56>
  401750:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401754:	4906      	ldr	r1, [pc, #24]	; (401770 <pmc_switch_mck_to_pllack+0x60>)
  401756:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401758:	f012 0f08 	tst.w	r2, #8
  40175c:	d105      	bne.n	40176a <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40175e:	3b01      	subs	r3, #1
  401760:	d1f9      	bne.n	401756 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  401762:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401764:	4770      	bx	lr
	return 0;
  401766:	2000      	movs	r0, #0
  401768:	4770      	bx	lr
  40176a:	2000      	movs	r0, #0
  40176c:	4770      	bx	lr
  40176e:	bf00      	nop
  401770:	400e0600 	.word	0x400e0600

00401774 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401774:	b9a0      	cbnz	r0, 4017a0 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401776:	480e      	ldr	r0, [pc, #56]	; (4017b0 <pmc_switch_mainck_to_xtal+0x3c>)
  401778:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40177a:	0209      	lsls	r1, r1, #8
  40177c:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40177e:	4a0d      	ldr	r2, [pc, #52]	; (4017b4 <pmc_switch_mainck_to_xtal+0x40>)
  401780:	401a      	ands	r2, r3
  401782:	4b0d      	ldr	r3, [pc, #52]	; (4017b8 <pmc_switch_mainck_to_xtal+0x44>)
  401784:	4313      	orrs	r3, r2
  401786:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401788:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40178a:	4602      	mov	r2, r0
  40178c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40178e:	f013 0f01 	tst.w	r3, #1
  401792:	d0fb      	beq.n	40178c <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401794:	4a06      	ldr	r2, [pc, #24]	; (4017b0 <pmc_switch_mainck_to_xtal+0x3c>)
  401796:	6a11      	ldr	r1, [r2, #32]
  401798:	4b08      	ldr	r3, [pc, #32]	; (4017bc <pmc_switch_mainck_to_xtal+0x48>)
  40179a:	430b      	orrs	r3, r1
  40179c:	6213      	str	r3, [r2, #32]
  40179e:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4017a0:	4903      	ldr	r1, [pc, #12]	; (4017b0 <pmc_switch_mainck_to_xtal+0x3c>)
  4017a2:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4017a4:	4a06      	ldr	r2, [pc, #24]	; (4017c0 <pmc_switch_mainck_to_xtal+0x4c>)
  4017a6:	401a      	ands	r2, r3
  4017a8:	4b06      	ldr	r3, [pc, #24]	; (4017c4 <pmc_switch_mainck_to_xtal+0x50>)
  4017aa:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4017ac:	620b      	str	r3, [r1, #32]
  4017ae:	4770      	bx	lr
  4017b0:	400e0600 	.word	0x400e0600
  4017b4:	ffc8fffc 	.word	0xffc8fffc
  4017b8:	00370001 	.word	0x00370001
  4017bc:	01370000 	.word	0x01370000
  4017c0:	fec8fffc 	.word	0xfec8fffc
  4017c4:	01370002 	.word	0x01370002

004017c8 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4017c8:	4b02      	ldr	r3, [pc, #8]	; (4017d4 <pmc_osc_is_ready_mainck+0xc>)
  4017ca:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4017cc:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4017d0:	4770      	bx	lr
  4017d2:	bf00      	nop
  4017d4:	400e0600 	.word	0x400e0600

004017d8 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4017d8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4017dc:	4b01      	ldr	r3, [pc, #4]	; (4017e4 <pmc_disable_pllack+0xc>)
  4017de:	629a      	str	r2, [r3, #40]	; 0x28
  4017e0:	4770      	bx	lr
  4017e2:	bf00      	nop
  4017e4:	400e0600 	.word	0x400e0600

004017e8 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4017e8:	4b02      	ldr	r3, [pc, #8]	; (4017f4 <pmc_is_locked_pllack+0xc>)
  4017ea:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4017ec:	f000 0002 	and.w	r0, r0, #2
  4017f0:	4770      	bx	lr
  4017f2:	bf00      	nop
  4017f4:	400e0600 	.word	0x400e0600

004017f8 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  4017f8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  4017fc:	4b05      	ldr	r3, [pc, #20]	; (401814 <pmc_enable_periph_clk+0x1c>)
  4017fe:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  401802:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  401806:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  40180a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  40180e:	2000      	movs	r0, #0
  401810:	4770      	bx	lr
  401812:	bf00      	nop
  401814:	400e0600 	.word	0x400e0600

00401818 <rtc_set_hour_mode>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
  401818:	b921      	cbnz	r1, 401824 <rtc_set_hour_mode+0xc>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  40181a:	6843      	ldr	r3, [r0, #4]
  40181c:	f023 0301 	bic.w	r3, r3, #1
  401820:	6043      	str	r3, [r0, #4]
  401822:	4770      	bx	lr
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  401824:	6843      	ldr	r3, [r0, #4]
  401826:	f043 0301 	orr.w	r3, r3, #1
  40182a:	6043      	str	r3, [r0, #4]
  40182c:	4770      	bx	lr

0040182e <rtc_enable_interrupt>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
	p_rtc->RTC_IER = ul_sources;
  40182e:	6201      	str	r1, [r0, #32]
  401830:	4770      	bx	lr

00401832 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  401832:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  401834:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  401836:	6884      	ldr	r4, [r0, #8]
  401838:	42a5      	cmp	r5, r4
  40183a:	d003      	beq.n	401844 <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
  40183c:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  40183e:	6884      	ldr	r4, [r0, #8]
  401840:	42ac      	cmp	r4, r5
  401842:	d1fb      	bne.n	40183c <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
  401844:	b161      	cbz	r1, 401860 <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  401846:	f3c4 5001 	ubfx	r0, r4, #20, #2
  40184a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  40184e:	f3c4 4003 	ubfx	r0, r4, #16, #4
  401852:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  401856:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
  40185a:	bf18      	it	ne
  40185c:	300c      	addne	r0, #12
  40185e:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  401860:	b142      	cbz	r2, 401874 <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  401862:	f3c4 3102 	ubfx	r1, r4, #12, #3
  401866:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  40186a:	f3c4 2003 	ubfx	r0, r4, #8, #4
  40186e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  401872:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  401874:	b143      	cbz	r3, 401888 <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  401876:	f3c4 1202 	ubfx	r2, r4, #4, #3
  40187a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40187e:	f004 040f 	and.w	r4, r4, #15
  401882:	eb04 0442 	add.w	r4, r4, r2, lsl #1
  401886:	601c      	str	r4, [r3, #0]
	}
}
  401888:	bc30      	pop	{r4, r5}
  40188a:	4770      	bx	lr

0040188c <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  40188c:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ul_time = 0;

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  40188e:	6844      	ldr	r4, [r0, #4]
		if (ul_hour > 12) {
  401890:	f014 0f01 	tst.w	r4, #1
  401894:	d005      	beq.n	4018a2 <rtc_set_time+0x16>
  401896:	290c      	cmp	r1, #12
  401898:	d903      	bls.n	4018a2 <rtc_set_time+0x16>
			ul_hour -= 12;
  40189a:	390c      	subs	r1, #12
			ul_time |= RTC_TIMR_AMPM;
  40189c:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  4018a0:	e000      	b.n	4018a4 <rtc_set_time+0x18>
	uint32_t ul_time = 0;
  4018a2:	2700      	movs	r7, #0
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  4018a4:	4c1c      	ldr	r4, [pc, #112]	; (401918 <rtc_set_time+0x8c>)
  4018a6:	fba4 5603 	umull	r5, r6, r4, r3
  4018aa:	08f6      	lsrs	r6, r6, #3
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  4018ac:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  4018b0:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
  4018b4:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  4018b8:	fba4 6502 	umull	r6, r5, r4, r2
  4018bc:	08ed      	lsrs	r5, r5, #3
  4018be:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  4018c2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  4018c6:	eba2 0545 	sub.w	r5, r2, r5, lsl #1
  4018ca:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  4018ce:	433b      	orrs	r3, r7
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  4018d0:	fba4 4201 	umull	r4, r2, r4, r1
  4018d4:	08d2      	lsrs	r2, r2, #3
  4018d6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  4018da:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4018de:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  4018e2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

	/* Update time register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  4018e6:	6983      	ldr	r3, [r0, #24]
  4018e8:	f013 0f04 	tst.w	r3, #4
  4018ec:	d0fb      	beq.n	4018e6 <rtc_set_time+0x5a>
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  4018ee:	6803      	ldr	r3, [r0, #0]
  4018f0:	f043 0301 	orr.w	r3, r3, #1
  4018f4:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  4018f6:	6983      	ldr	r3, [r0, #24]
  4018f8:	f013 0f01 	tst.w	r3, #1
  4018fc:	d0fb      	beq.n	4018f6 <rtc_set_time+0x6a>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  4018fe:	2301      	movs	r3, #1
  401900:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_TIMR = ul_time;
  401902:	6081      	str	r1, [r0, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  401904:	6803      	ldr	r3, [r0, #0]
  401906:	f023 0301 	bic.w	r3, r3, #1
  40190a:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  40190c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  40190e:	f000 0001 	and.w	r0, r0, #1
  401912:	bcf0      	pop	{r4, r5, r6, r7}
  401914:	4770      	bx	lr
  401916:	bf00      	nop
  401918:	cccccccd 	.word	0xcccccccd

0040191c <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  40191c:	b470      	push	{r4, r5, r6}

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40191e:	4d2a      	ldr	r5, [pc, #168]	; (4019c8 <rtc_set_date+0xac>)
  401920:	fba5 4603 	umull	r4, r6, r5, r3
  401924:	08f6      	lsrs	r6, r6, #3
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  401926:	9c03      	ldr	r4, [sp, #12]
  401928:	0564      	lsls	r4, r4, #21
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40192a:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  40192e:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  401932:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  401936:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  40193a:	fba5 6402 	umull	r6, r4, r5, r2
  40193e:	08e4      	lsrs	r4, r4, #3
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  401940:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  401944:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  401948:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40194c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  401950:	4b1e      	ldr	r3, [pc, #120]	; (4019cc <rtc_set_date+0xb0>)
  401952:	fba3 4301 	umull	r4, r3, r3, r1
  401956:	099b      	lsrs	r3, r3, #6
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  401958:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  40195c:	4b1c      	ldr	r3, [pc, #112]	; (4019d0 <rtc_set_date+0xb4>)
  40195e:	fba3 4301 	umull	r4, r3, r3, r1
  401962:	095b      	lsrs	r3, r3, #5
  401964:	fba5 6403 	umull	r6, r4, r5, r3
  401968:	08e4      	lsrs	r4, r4, #3
  40196a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40196e:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  401972:	431a      	orrs	r2, r3
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  401974:	fba5 4301 	umull	r4, r3, r5, r1
  401978:	08db      	lsrs	r3, r3, #3
  40197a:	eb03 0483 	add.w	r4, r3, r3, lsl #2
  40197e:	eba1 0144 	sub.w	r1, r1, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  401982:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  401986:	fba5 1503 	umull	r1, r5, r5, r3
  40198a:	08ed      	lsrs	r5, r5, #3
  40198c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  401990:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  401994:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

	/* Update calendar register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  401998:	6983      	ldr	r3, [r0, #24]
  40199a:	f013 0f04 	tst.w	r3, #4
  40199e:	d0fb      	beq.n	401998 <rtc_set_date+0x7c>
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  4019a0:	6803      	ldr	r3, [r0, #0]
  4019a2:	f043 0302 	orr.w	r3, r3, #2
  4019a6:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  4019a8:	6983      	ldr	r3, [r0, #24]
  4019aa:	f013 0f01 	tst.w	r3, #1
  4019ae:	d0fb      	beq.n	4019a8 <rtc_set_date+0x8c>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  4019b0:	2301      	movs	r3, #1
  4019b2:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_CALR = ul_date;
  4019b4:	60c2      	str	r2, [r0, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  4019b6:	6803      	ldr	r3, [r0, #0]
  4019b8:	f023 0302 	bic.w	r3, r3, #2
  4019bc:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  4019be:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4019c0:	f000 0002 	and.w	r0, r0, #2
  4019c4:	bc70      	pop	{r4, r5, r6}
  4019c6:	4770      	bx	lr
  4019c8:	cccccccd 	.word	0xcccccccd
  4019cc:	10624dd3 	.word	0x10624dd3
  4019d0:	51eb851f 	.word	0x51eb851f

004019d4 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  4019d4:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  4019d6:	4b07      	ldr	r3, [pc, #28]	; (4019f4 <spi_enable_clock+0x20>)
  4019d8:	4298      	cmp	r0, r3
  4019da:	d003      	beq.n	4019e4 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  4019dc:	4b06      	ldr	r3, [pc, #24]	; (4019f8 <spi_enable_clock+0x24>)
  4019de:	4298      	cmp	r0, r3
  4019e0:	d004      	beq.n	4019ec <spi_enable_clock+0x18>
  4019e2:	bd08      	pop	{r3, pc}
  4019e4:	2015      	movs	r0, #21
  4019e6:	4b05      	ldr	r3, [pc, #20]	; (4019fc <spi_enable_clock+0x28>)
  4019e8:	4798      	blx	r3
  4019ea:	bd08      	pop	{r3, pc}
  4019ec:	202a      	movs	r0, #42	; 0x2a
  4019ee:	4b03      	ldr	r3, [pc, #12]	; (4019fc <spi_enable_clock+0x28>)
  4019f0:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  4019f2:	e7f6      	b.n	4019e2 <spi_enable_clock+0xe>
  4019f4:	40008000 	.word	0x40008000
  4019f8:	40058000 	.word	0x40058000
  4019fc:	004017f9 	.word	0x004017f9

00401a00 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  401a00:	6843      	ldr	r3, [r0, #4]
  401a02:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  401a06:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  401a08:	6843      	ldr	r3, [r0, #4]
  401a0a:	0409      	lsls	r1, r1, #16
  401a0c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  401a10:	4319      	orrs	r1, r3
  401a12:	6041      	str	r1, [r0, #4]
  401a14:	4770      	bx	lr

00401a16 <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
  401a16:	6843      	ldr	r3, [r0, #4]
  401a18:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401a1c:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
  401a1e:	6843      	ldr	r3, [r0, #4]
  401a20:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
  401a24:	6041      	str	r1, [r0, #4]
  401a26:	4770      	bx	lr

00401a28 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  401a28:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  401a2a:	f643 2499 	movw	r4, #15001	; 0x3a99
  401a2e:	6905      	ldr	r5, [r0, #16]
  401a30:	f015 0f02 	tst.w	r5, #2
  401a34:	d103      	bne.n	401a3e <spi_write+0x16>
		if (!timeout--) {
  401a36:	3c01      	subs	r4, #1
  401a38:	d1f9      	bne.n	401a2e <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  401a3a:	2001      	movs	r0, #1
  401a3c:	e00c      	b.n	401a58 <spi_write+0x30>
	if (p_spi->SPI_MR & SPI_MR_PS) {
  401a3e:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  401a40:	f014 0f02 	tst.w	r4, #2
  401a44:	d006      	beq.n	401a54 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  401a46:	0412      	lsls	r2, r2, #16
  401a48:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  401a4c:	4311      	orrs	r1, r2
		if (uc_last) {
  401a4e:	b10b      	cbz	r3, 401a54 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  401a50:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  401a54:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  401a56:	2000      	movs	r0, #0
}
  401a58:	bc30      	pop	{r4, r5}
  401a5a:	4770      	bx	lr

00401a5c <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  401a5c:	b932      	cbnz	r2, 401a6c <spi_set_clock_polarity+0x10>
  401a5e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  401a62:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401a64:	f023 0301 	bic.w	r3, r3, #1
  401a68:	6303      	str	r3, [r0, #48]	; 0x30
  401a6a:	4770      	bx	lr
  401a6c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  401a70:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401a72:	f043 0301 	orr.w	r3, r3, #1
  401a76:	6303      	str	r3, [r0, #48]	; 0x30
  401a78:	4770      	bx	lr

00401a7a <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  401a7a:	b932      	cbnz	r2, 401a8a <spi_set_clock_phase+0x10>
  401a7c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  401a80:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401a82:	f023 0302 	bic.w	r3, r3, #2
  401a86:	6303      	str	r3, [r0, #48]	; 0x30
  401a88:	4770      	bx	lr
  401a8a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  401a8e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401a90:	f043 0302 	orr.w	r3, r3, #2
  401a94:	6303      	str	r3, [r0, #48]	; 0x30
  401a96:	4770      	bx	lr

00401a98 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  401a98:	2a04      	cmp	r2, #4
  401a9a:	d003      	beq.n	401aa4 <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  401a9c:	b16a      	cbz	r2, 401aba <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  401a9e:	2a08      	cmp	r2, #8
  401aa0:	d016      	beq.n	401ad0 <spi_configure_cs_behavior+0x38>
  401aa2:	4770      	bx	lr
  401aa4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  401aa8:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401aaa:	f023 0308 	bic.w	r3, r3, #8
  401aae:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  401ab0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401ab2:	f043 0304 	orr.w	r3, r3, #4
  401ab6:	6303      	str	r3, [r0, #48]	; 0x30
  401ab8:	4770      	bx	lr
  401aba:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  401abe:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401ac0:	f023 0308 	bic.w	r3, r3, #8
  401ac4:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  401ac6:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401ac8:	f023 0304 	bic.w	r3, r3, #4
  401acc:	6303      	str	r3, [r0, #48]	; 0x30
  401ace:	4770      	bx	lr
  401ad0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  401ad4:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401ad6:	f043 0308 	orr.w	r3, r3, #8
  401ada:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  401adc:	e7e1      	b.n	401aa2 <spi_configure_cs_behavior+0xa>

00401ade <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  401ade:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  401ae2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401ae4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  401ae8:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  401aea:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401aec:	431a      	orrs	r2, r3
  401aee:	630a      	str	r2, [r1, #48]	; 0x30
  401af0:	4770      	bx	lr

00401af2 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  401af2:	1e43      	subs	r3, r0, #1
  401af4:	4419      	add	r1, r3
  401af6:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  401afa:	1e43      	subs	r3, r0, #1
  401afc:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  401afe:	bf94      	ite	ls
  401b00:	b200      	sxthls	r0, r0
		return -1;
  401b02:	f04f 30ff 	movhi.w	r0, #4294967295
}
  401b06:	4770      	bx	lr

00401b08 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
  401b08:	b17a      	cbz	r2, 401b2a <spi_set_baudrate_div+0x22>
{
  401b0a:	b410      	push	{r4}
  401b0c:	4614      	mov	r4, r2
  401b0e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  401b12:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401b14:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  401b18:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  401b1a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  401b1c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  401b20:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  401b22:	2000      	movs	r0, #0
}
  401b24:	f85d 4b04 	ldr.w	r4, [sp], #4
  401b28:	4770      	bx	lr
        return -1;
  401b2a:	f04f 30ff 	mov.w	r0, #4294967295
  401b2e:	4770      	bx	lr

00401b30 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  401b30:	b410      	push	{r4}
  401b32:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  401b36:	6b08      	ldr	r0, [r1, #48]	; 0x30
  401b38:	b280      	uxth	r0, r0
  401b3a:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  401b3c:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  401b3e:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  401b42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  401b46:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  401b48:	f85d 4b04 	ldr.w	r4, [sp], #4
  401b4c:	4770      	bx	lr
	...

00401b50 <twihs_set_speed>:
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  401b50:	4b28      	ldr	r3, [pc, #160]	; (401bf4 <twihs_set_speed+0xa4>)
  401b52:	4299      	cmp	r1, r3
  401b54:	d84b      	bhi.n	401bee <twihs_set_speed+0x9e>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  401b56:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  401b5a:	4299      	cmp	r1, r3
  401b5c:	d92d      	bls.n	401bba <twihs_set_speed+0x6a>
{
  401b5e:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401b60:	4c25      	ldr	r4, [pc, #148]	; (401bf8 <twihs_set_speed+0xa8>)
  401b62:	fba4 3402 	umull	r3, r4, r4, r2
  401b66:	0ba4      	lsrs	r4, r4, #14
  401b68:	3c03      	subs	r4, #3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401b6a:	4b24      	ldr	r3, [pc, #144]	; (401bfc <twihs_set_speed+0xac>)
  401b6c:	440b      	add	r3, r1
  401b6e:	009b      	lsls	r3, r3, #2
  401b70:	fbb2 f2f3 	udiv	r2, r2, r3
  401b74:	3a03      	subs	r2, #3
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401b76:	2cff      	cmp	r4, #255	; 0xff
  401b78:	d91d      	bls.n	401bb6 <twihs_set_speed+0x66>
  401b7a:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
  401b7c:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWIHS_CLK_DIVIDER;
  401b7e:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401b80:	2cff      	cmp	r4, #255	; 0xff
  401b82:	d901      	bls.n	401b88 <twihs_set_speed+0x38>
  401b84:	2906      	cmp	r1, #6
  401b86:	d9f9      	bls.n	401b7c <twihs_set_speed+0x2c>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401b88:	2aff      	cmp	r2, #255	; 0xff
  401b8a:	d907      	bls.n	401b9c <twihs_set_speed+0x4c>
  401b8c:	2906      	cmp	r1, #6
  401b8e:	d805      	bhi.n	401b9c <twihs_set_speed+0x4c>
			/* Increase clock divider */
			ckdiv++;
  401b90:	3101      	adds	r1, #1
			/* Divide cldiv value */
			chdiv /= TWIHS_CLK_DIVIDER;
  401b92:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401b94:	2aff      	cmp	r2, #255	; 0xff
  401b96:	d901      	bls.n	401b9c <twihs_set_speed+0x4c>
  401b98:	2906      	cmp	r1, #6
  401b9a:	d9f9      	bls.n	401b90 <twihs_set_speed+0x40>
		}

		/* set clock waveform generator register */
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  401b9c:	0213      	lsls	r3, r2, #8
  401b9e:	b29b      	uxth	r3, r3
				TWIHS_CWGR_CKDIV(ckdiv);
  401ba0:	0409      	lsls	r1, r1, #16
  401ba2:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  401ba6:	430b      	orrs	r3, r1
  401ba8:	b2e4      	uxtb	r4, r4
  401baa:	4323      	orrs	r3, r4
		p_twihs->TWIHS_CWGR =
  401bac:	6103      	str	r3, [r0, #16]
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
				TWIHS_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  401bae:	2000      	movs	r0, #0
}
  401bb0:	f85d 4b04 	ldr.w	r4, [sp], #4
  401bb4:	4770      	bx	lr
	uint32_t ckdiv = 0;
  401bb6:	2100      	movs	r1, #0
  401bb8:	e7e6      	b.n	401b88 <twihs_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401bba:	0049      	lsls	r1, r1, #1
  401bbc:	fbb2 f2f1 	udiv	r2, r2, r1
  401bc0:	3a03      	subs	r2, #3
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401bc2:	2aff      	cmp	r2, #255	; 0xff
  401bc4:	d911      	bls.n	401bea <twihs_set_speed+0x9a>
  401bc6:	2300      	movs	r3, #0
			ckdiv++;
  401bc8:	3301      	adds	r3, #1
			c_lh_div /= TWIHS_CLK_DIVIDER;
  401bca:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401bcc:	2aff      	cmp	r2, #255	; 0xff
  401bce:	d901      	bls.n	401bd4 <twihs_set_speed+0x84>
  401bd0:	2b06      	cmp	r3, #6
  401bd2:	d9f9      	bls.n	401bc8 <twihs_set_speed+0x78>
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401bd4:	0211      	lsls	r1, r2, #8
  401bd6:	b289      	uxth	r1, r1
				TWIHS_CWGR_CKDIV(ckdiv);
  401bd8:	041b      	lsls	r3, r3, #16
  401bda:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401bde:	430b      	orrs	r3, r1
  401be0:	b2d2      	uxtb	r2, r2
  401be2:	431a      	orrs	r2, r3
		p_twihs->TWIHS_CWGR =
  401be4:	6102      	str	r2, [r0, #16]
	return PASS;
  401be6:	2000      	movs	r0, #0
  401be8:	4770      	bx	lr
	uint32_t ckdiv = 0;
  401bea:	2300      	movs	r3, #0
  401bec:	e7f2      	b.n	401bd4 <twihs_set_speed+0x84>
		return FAIL;
  401bee:	2001      	movs	r0, #1
  401bf0:	4770      	bx	lr
  401bf2:	bf00      	nop
  401bf4:	00061a80 	.word	0x00061a80
  401bf8:	057619f1 	.word	0x057619f1
  401bfc:	3ffd1200 	.word	0x3ffd1200

00401c00 <twihs_master_init>:
{
  401c00:	b508      	push	{r3, lr}
	p_twihs->TWIHS_IDR = ~0UL;
  401c02:	f04f 32ff 	mov.w	r2, #4294967295
  401c06:	6282      	str	r2, [r0, #40]	; 0x28
	p_twihs->TWIHS_SR;
  401c08:	6a02      	ldr	r2, [r0, #32]
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  401c0a:	2280      	movs	r2, #128	; 0x80
  401c0c:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_RHR;
  401c0e:	6b02      	ldr	r2, [r0, #48]	; 0x30
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  401c10:	2208      	movs	r2, #8
  401c12:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  401c14:	2220      	movs	r2, #32
  401c16:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  401c18:	2204      	movs	r2, #4
  401c1a:	6002      	str	r2, [r0, #0]
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  401c1c:	680a      	ldr	r2, [r1, #0]
  401c1e:	6849      	ldr	r1, [r1, #4]
  401c20:	4b03      	ldr	r3, [pc, #12]	; (401c30 <twihs_master_init+0x30>)
  401c22:	4798      	blx	r3
}
  401c24:	2801      	cmp	r0, #1
  401c26:	bf14      	ite	ne
  401c28:	2000      	movne	r0, #0
  401c2a:	2001      	moveq	r0, #1
  401c2c:	bd08      	pop	{r3, pc}
  401c2e:	bf00      	nop
  401c30:	00401b51 	.word	0x00401b51

00401c34 <twihs_master_read>:
	uint32_t status, cnt = p_packet->length;
  401c34:	68ca      	ldr	r2, [r1, #12]
	if (cnt == 0) {
  401c36:	2a00      	cmp	r2, #0
  401c38:	d04c      	beq.n	401cd4 <twihs_master_read+0xa0>
{
  401c3a:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  401c3c:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  401c3e:	2600      	movs	r6, #0
  401c40:	6046      	str	r6, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  401c42:	684b      	ldr	r3, [r1, #4]
  401c44:	021b      	lsls	r3, r3, #8
  401c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  401c4a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  401c4e:	7c0d      	ldrb	r5, [r1, #16]
  401c50:	042d      	lsls	r5, r5, #16
  401c52:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
  401c56:	432b      	orrs	r3, r5
  401c58:	6043      	str	r3, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  401c5a:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401c5c:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  401c5e:	b15d      	cbz	r5, 401c78 <twihs_master_read+0x44>
	val = addr[0];
  401c60:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
  401c62:	2d01      	cmp	r5, #1
  401c64:	dd02      	ble.n	401c6c <twihs_master_read+0x38>
		val |= addr[1];
  401c66:	784e      	ldrb	r6, [r1, #1]
  401c68:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
	if (len > 2) {
  401c6c:	2d02      	cmp	r5, #2
  401c6e:	dd04      	ble.n	401c7a <twihs_master_read+0x46>
		val |= addr[2];
  401c70:	7889      	ldrb	r1, [r1, #2]
  401c72:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  401c76:	e000      	b.n	401c7a <twihs_master_read+0x46>
		return 0;
  401c78:	2300      	movs	r3, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401c7a:	60c3      	str	r3, [r0, #12]
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  401c7c:	2301      	movs	r3, #1
  401c7e:	6003      	str	r3, [r0, #0]
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401c80:	2502      	movs	r5, #2
  401c82:	e012      	b.n	401caa <twihs_master_read+0x76>
  401c84:	6005      	str	r5, [r0, #0]
		if (!(status & TWIHS_SR_RXRDY)) {
  401c86:	f013 0f02 	tst.w	r3, #2
  401c8a:	d01b      	beq.n	401cc4 <twihs_master_read+0x90>
		*buffer++ = p_twihs->TWIHS_RHR;
  401c8c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401c8e:	7023      	strb	r3, [r4, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401c90:	6a03      	ldr	r3, [r0, #32]
  401c92:	f013 0f01 	tst.w	r3, #1
  401c96:	d0fb      	beq.n	401c90 <twihs_master_read+0x5c>
	p_twihs->TWIHS_SR;
  401c98:	6a03      	ldr	r3, [r0, #32]
	return TWIHS_SUCCESS;
  401c9a:	2000      	movs	r0, #0
}
  401c9c:	bc70      	pop	{r4, r5, r6}
  401c9e:	4770      	bx	lr
		*buffer++ = p_twihs->TWIHS_RHR;
  401ca0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401ca2:	f804 3b01 	strb.w	r3, [r4], #1
	while (cnt > 0) {
  401ca6:	3a01      	subs	r2, #1
  401ca8:	d0f2      	beq.n	401c90 <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  401caa:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401cac:	f413 7f80 	tst.w	r3, #256	; 0x100
  401cb0:	d114      	bne.n	401cdc <twihs_master_read+0xa8>
  401cb2:	f247 5130 	movw	r1, #30000	; 0x7530
		if (cnt == 1) {
  401cb6:	2a01      	cmp	r2, #1
  401cb8:	d0e4      	beq.n	401c84 <twihs_master_read+0x50>
		if (!(status & TWIHS_SR_RXRDY)) {
  401cba:	f013 0f02 	tst.w	r3, #2
  401cbe:	d1ef      	bne.n	401ca0 <twihs_master_read+0x6c>
	while (cnt > 0) {
  401cc0:	2a00      	cmp	r2, #0
  401cc2:	d0e5      	beq.n	401c90 <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  401cc4:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401cc6:	f413 7f80 	tst.w	r3, #256	; 0x100
  401cca:	d105      	bne.n	401cd8 <twihs_master_read+0xa4>
		if (!timeout--) {
  401ccc:	3901      	subs	r1, #1
  401cce:	d1f2      	bne.n	401cb6 <twihs_master_read+0x82>
			return TWIHS_ERROR_TIMEOUT;
  401cd0:	2009      	movs	r0, #9
  401cd2:	e7e3      	b.n	401c9c <twihs_master_read+0x68>
		return TWIHS_INVALID_ARGUMENT;
  401cd4:	2001      	movs	r0, #1
  401cd6:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401cd8:	2005      	movs	r0, #5
  401cda:	e7df      	b.n	401c9c <twihs_master_read+0x68>
  401cdc:	2005      	movs	r0, #5
  401cde:	e7dd      	b.n	401c9c <twihs_master_read+0x68>

00401ce0 <twihs_master_write>:
	uint32_t status, cnt = p_packet->length;
  401ce0:	68cb      	ldr	r3, [r1, #12]
	if (cnt == 0) {
  401ce2:	2b00      	cmp	r3, #0
  401ce4:	d043      	beq.n	401d6e <twihs_master_write+0x8e>
{
  401ce6:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  401ce8:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  401cea:	2600      	movs	r6, #0
  401cec:	6046      	str	r6, [r0, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401cee:	7c0a      	ldrb	r2, [r1, #16]
  401cf0:	0412      	lsls	r2, r2, #16
  401cf2:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  401cf6:	684d      	ldr	r5, [r1, #4]
  401cf8:	022d      	lsls	r5, r5, #8
  401cfa:	f405 7540 	and.w	r5, r5, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401cfe:	432a      	orrs	r2, r5
  401d00:	6042      	str	r2, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  401d02:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401d04:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  401d06:	b15d      	cbz	r5, 401d20 <twihs_master_write+0x40>
	val = addr[0];
  401d08:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  401d0a:	2d01      	cmp	r5, #1
  401d0c:	dd02      	ble.n	401d14 <twihs_master_write+0x34>
		val |= addr[1];
  401d0e:	784e      	ldrb	r6, [r1, #1]
  401d10:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
	if (len > 2) {
  401d14:	2d02      	cmp	r5, #2
  401d16:	dd04      	ble.n	401d22 <twihs_master_write+0x42>
		val |= addr[2];
  401d18:	7889      	ldrb	r1, [r1, #2]
  401d1a:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  401d1e:	e000      	b.n	401d22 <twihs_master_write+0x42>
		return 0;
  401d20:	2200      	movs	r2, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401d22:	60c2      	str	r2, [r0, #12]
  401d24:	e004      	b.n	401d30 <twihs_master_write+0x50>
		p_twihs->TWIHS_THR = *buffer++;
  401d26:	f814 2b01 	ldrb.w	r2, [r4], #1
  401d2a:	6342      	str	r2, [r0, #52]	; 0x34
	while (cnt > 0) {
  401d2c:	3b01      	subs	r3, #1
  401d2e:	d00f      	beq.n	401d50 <twihs_master_write+0x70>
		status = p_twihs->TWIHS_SR;
  401d30:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401d32:	f412 7f80 	tst.w	r2, #256	; 0x100
  401d36:	d11e      	bne.n	401d76 <twihs_master_write+0x96>
		if (!(status & TWIHS_SR_TXRDY)) {
  401d38:	f012 0f04 	tst.w	r2, #4
  401d3c:	d1f3      	bne.n	401d26 <twihs_master_write+0x46>
		status = p_twihs->TWIHS_SR;
  401d3e:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401d40:	f412 7f80 	tst.w	r2, #256	; 0x100
  401d44:	d115      	bne.n	401d72 <twihs_master_write+0x92>
		if (!(status & TWIHS_SR_TXRDY)) {
  401d46:	f012 0f04 	tst.w	r2, #4
  401d4a:	d1ec      	bne.n	401d26 <twihs_master_write+0x46>
	while (cnt > 0) {
  401d4c:	2b00      	cmp	r3, #0
  401d4e:	d1f6      	bne.n	401d3e <twihs_master_write+0x5e>
		status = p_twihs->TWIHS_SR;
  401d50:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401d52:	f413 7f80 	tst.w	r3, #256	; 0x100
  401d56:	d111      	bne.n	401d7c <twihs_master_write+0x9c>
		if (status & TWIHS_SR_TXRDY) {
  401d58:	f013 0f04 	tst.w	r3, #4
  401d5c:	d0f8      	beq.n	401d50 <twihs_master_write+0x70>
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401d5e:	2302      	movs	r3, #2
  401d60:	6003      	str	r3, [r0, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401d62:	6a03      	ldr	r3, [r0, #32]
  401d64:	f013 0f01 	tst.w	r3, #1
  401d68:	d0fb      	beq.n	401d62 <twihs_master_write+0x82>
	return TWIHS_SUCCESS;
  401d6a:	2000      	movs	r0, #0
  401d6c:	e004      	b.n	401d78 <twihs_master_write+0x98>
		return TWIHS_INVALID_ARGUMENT;
  401d6e:	2001      	movs	r0, #1
  401d70:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401d72:	2005      	movs	r0, #5
  401d74:	e000      	b.n	401d78 <twihs_master_write+0x98>
  401d76:	2005      	movs	r0, #5
}
  401d78:	bc70      	pop	{r4, r5, r6}
  401d7a:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401d7c:	2005      	movs	r0, #5
  401d7e:	e7fb      	b.n	401d78 <twihs_master_write+0x98>

00401d80 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401d80:	6943      	ldr	r3, [r0, #20]
  401d82:	f013 0f02 	tst.w	r3, #2
  401d86:	d002      	beq.n	401d8e <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  401d88:	61c1      	str	r1, [r0, #28]
	return 0;
  401d8a:	2000      	movs	r0, #0
  401d8c:	4770      	bx	lr
		return 1;
  401d8e:	2001      	movs	r0, #1
}
  401d90:	4770      	bx	lr

00401d92 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401d92:	6943      	ldr	r3, [r0, #20]
  401d94:	f013 0f01 	tst.w	r3, #1
  401d98:	d003      	beq.n	401da2 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401d9a:	6983      	ldr	r3, [r0, #24]
  401d9c:	700b      	strb	r3, [r1, #0]
	return 0;
  401d9e:	2000      	movs	r0, #0
  401da0:	4770      	bx	lr
		return 1;
  401da2:	2001      	movs	r0, #1
}
  401da4:	4770      	bx	lr

00401da6 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  401da6:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  401da8:	010b      	lsls	r3, r1, #4
  401daa:	4293      	cmp	r3, r2
  401dac:	d914      	bls.n	401dd8 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401dae:	00c9      	lsls	r1, r1, #3
  401db0:	084b      	lsrs	r3, r1, #1
  401db2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  401db6:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  401dba:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401dbc:	1e5c      	subs	r4, r3, #1
  401dbe:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  401dc2:	428c      	cmp	r4, r1
  401dc4:	d901      	bls.n	401dca <usart_set_async_baudrate+0x24>
		return 1;
  401dc6:	2001      	movs	r0, #1
  401dc8:	e017      	b.n	401dfa <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  401dca:	6841      	ldr	r1, [r0, #4]
  401dcc:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  401dd0:	6041      	str	r1, [r0, #4]
  401dd2:	e00c      	b.n	401dee <usart_set_async_baudrate+0x48>
		return 1;
  401dd4:	2001      	movs	r0, #1
  401dd6:	e010      	b.n	401dfa <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401dd8:	0859      	lsrs	r1, r3, #1
  401dda:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  401dde:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  401de2:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401de4:	1e5c      	subs	r4, r3, #1
  401de6:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  401dea:	428c      	cmp	r4, r1
  401dec:	d8f2      	bhi.n	401dd4 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  401dee:	0412      	lsls	r2, r2, #16
  401df0:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  401df4:	431a      	orrs	r2, r3
  401df6:	6202      	str	r2, [r0, #32]

	return 0;
  401df8:	2000      	movs	r0, #0
}
  401dfa:	f85d 4b04 	ldr.w	r4, [sp], #4
  401dfe:	4770      	bx	lr

00401e00 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  401e00:	4b08      	ldr	r3, [pc, #32]	; (401e24 <usart_reset+0x24>)
  401e02:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  401e06:	2300      	movs	r3, #0
  401e08:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  401e0a:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  401e0c:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  401e0e:	2388      	movs	r3, #136	; 0x88
  401e10:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  401e12:	2324      	movs	r3, #36	; 0x24
  401e14:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  401e16:	f44f 7380 	mov.w	r3, #256	; 0x100
  401e1a:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  401e1c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  401e20:	6003      	str	r3, [r0, #0]
  401e22:	4770      	bx	lr
  401e24:	55534100 	.word	0x55534100

00401e28 <usart_init_rs232>:
{
  401e28:	b570      	push	{r4, r5, r6, lr}
  401e2a:	4605      	mov	r5, r0
  401e2c:	460c      	mov	r4, r1
  401e2e:	4616      	mov	r6, r2
	usart_reset(p_usart);
  401e30:	4b0f      	ldr	r3, [pc, #60]	; (401e70 <usart_init_rs232+0x48>)
  401e32:	4798      	blx	r3
	ul_reg_val = 0;
  401e34:	2200      	movs	r2, #0
  401e36:	4b0f      	ldr	r3, [pc, #60]	; (401e74 <usart_init_rs232+0x4c>)
  401e38:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401e3a:	b1a4      	cbz	r4, 401e66 <usart_init_rs232+0x3e>
  401e3c:	4632      	mov	r2, r6
  401e3e:	6821      	ldr	r1, [r4, #0]
  401e40:	4628      	mov	r0, r5
  401e42:	4b0d      	ldr	r3, [pc, #52]	; (401e78 <usart_init_rs232+0x50>)
  401e44:	4798      	blx	r3
  401e46:	4602      	mov	r2, r0
  401e48:	b978      	cbnz	r0, 401e6a <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401e4a:	6863      	ldr	r3, [r4, #4]
  401e4c:	68a1      	ldr	r1, [r4, #8]
  401e4e:	430b      	orrs	r3, r1
  401e50:	6921      	ldr	r1, [r4, #16]
  401e52:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401e54:	68e1      	ldr	r1, [r4, #12]
  401e56:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401e58:	4906      	ldr	r1, [pc, #24]	; (401e74 <usart_init_rs232+0x4c>)
  401e5a:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  401e5c:	6869      	ldr	r1, [r5, #4]
  401e5e:	430b      	orrs	r3, r1
  401e60:	606b      	str	r3, [r5, #4]
}
  401e62:	4610      	mov	r0, r2
  401e64:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  401e66:	2201      	movs	r2, #1
  401e68:	e7fb      	b.n	401e62 <usart_init_rs232+0x3a>
  401e6a:	2201      	movs	r2, #1
  401e6c:	e7f9      	b.n	401e62 <usart_init_rs232+0x3a>
  401e6e:	bf00      	nop
  401e70:	00401e01 	.word	0x00401e01
  401e74:	20400e0c 	.word	0x20400e0c
  401e78:	00401da7 	.word	0x00401da7

00401e7c <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  401e7c:	2340      	movs	r3, #64	; 0x40
  401e7e:	6003      	str	r3, [r0, #0]
  401e80:	4770      	bx	lr

00401e82 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  401e82:	2310      	movs	r3, #16
  401e84:	6003      	str	r3, [r0, #0]
  401e86:	4770      	bx	lr

00401e88 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401e88:	6943      	ldr	r3, [r0, #20]
  401e8a:	f013 0f02 	tst.w	r3, #2
  401e8e:	d004      	beq.n	401e9a <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  401e90:	f3c1 0108 	ubfx	r1, r1, #0, #9
  401e94:	61c1      	str	r1, [r0, #28]
	return 0;
  401e96:	2000      	movs	r0, #0
  401e98:	4770      	bx	lr
		return 1;
  401e9a:	2001      	movs	r0, #1
}
  401e9c:	4770      	bx	lr

00401e9e <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401e9e:	6943      	ldr	r3, [r0, #20]
  401ea0:	f013 0f01 	tst.w	r3, #1
  401ea4:	d005      	beq.n	401eb2 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401ea6:	6983      	ldr	r3, [r0, #24]
  401ea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
  401eac:	600b      	str	r3, [r1, #0]
	return 0;
  401eae:	2000      	movs	r0, #0
  401eb0:	4770      	bx	lr
		return 1;
  401eb2:	2001      	movs	r0, #1
}
  401eb4:	4770      	bx	lr

00401eb6 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401eb6:	e7fe      	b.n	401eb6 <Dummy_Handler>

00401eb8 <Reset_Handler>:
{
  401eb8:	b500      	push	{lr}
  401eba:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  401ebc:	4b25      	ldr	r3, [pc, #148]	; (401f54 <Reset_Handler+0x9c>)
  401ebe:	4a26      	ldr	r2, [pc, #152]	; (401f58 <Reset_Handler+0xa0>)
  401ec0:	429a      	cmp	r2, r3
  401ec2:	d010      	beq.n	401ee6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  401ec4:	4b25      	ldr	r3, [pc, #148]	; (401f5c <Reset_Handler+0xa4>)
  401ec6:	4a23      	ldr	r2, [pc, #140]	; (401f54 <Reset_Handler+0x9c>)
  401ec8:	429a      	cmp	r2, r3
  401eca:	d20c      	bcs.n	401ee6 <Reset_Handler+0x2e>
  401ecc:	3b01      	subs	r3, #1
  401ece:	1a9b      	subs	r3, r3, r2
  401ed0:	f023 0303 	bic.w	r3, r3, #3
  401ed4:	3304      	adds	r3, #4
  401ed6:	4413      	add	r3, r2
  401ed8:	491f      	ldr	r1, [pc, #124]	; (401f58 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  401eda:	f851 0b04 	ldr.w	r0, [r1], #4
  401ede:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  401ee2:	429a      	cmp	r2, r3
  401ee4:	d1f9      	bne.n	401eda <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  401ee6:	4b1e      	ldr	r3, [pc, #120]	; (401f60 <Reset_Handler+0xa8>)
  401ee8:	4a1e      	ldr	r2, [pc, #120]	; (401f64 <Reset_Handler+0xac>)
  401eea:	429a      	cmp	r2, r3
  401eec:	d20a      	bcs.n	401f04 <Reset_Handler+0x4c>
  401eee:	3b01      	subs	r3, #1
  401ef0:	1a9b      	subs	r3, r3, r2
  401ef2:	f023 0303 	bic.w	r3, r3, #3
  401ef6:	3304      	adds	r3, #4
  401ef8:	4413      	add	r3, r2
                *pDest++ = 0;
  401efa:	2100      	movs	r1, #0
  401efc:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  401f00:	4293      	cmp	r3, r2
  401f02:	d1fb      	bne.n	401efc <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401f04:	4a18      	ldr	r2, [pc, #96]	; (401f68 <Reset_Handler+0xb0>)
  401f06:	4b19      	ldr	r3, [pc, #100]	; (401f6c <Reset_Handler+0xb4>)
  401f08:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401f0c:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401f0e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401f12:	fab3 f383 	clz	r3, r3
  401f16:	095b      	lsrs	r3, r3, #5
  401f18:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401f1a:	b672      	cpsid	i
  __ASM volatile ("dmb");
  401f1c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401f20:	2200      	movs	r2, #0
  401f22:	4b13      	ldr	r3, [pc, #76]	; (401f70 <Reset_Handler+0xb8>)
  401f24:	701a      	strb	r2, [r3, #0]
	return flags;
  401f26:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401f28:	4a12      	ldr	r2, [pc, #72]	; (401f74 <Reset_Handler+0xbc>)
  401f2a:	6813      	ldr	r3, [r2, #0]
  401f2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401f30:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  401f32:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401f36:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401f3a:	b129      	cbz	r1, 401f48 <Reset_Handler+0x90>
		cpu_irq_enable();
  401f3c:	2201      	movs	r2, #1
  401f3e:	4b0c      	ldr	r3, [pc, #48]	; (401f70 <Reset_Handler+0xb8>)
  401f40:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  401f42:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401f46:	b662      	cpsie	i
        __libc_init_array();
  401f48:	4b0b      	ldr	r3, [pc, #44]	; (401f78 <Reset_Handler+0xc0>)
  401f4a:	4798      	blx	r3
        main();
  401f4c:	4b0b      	ldr	r3, [pc, #44]	; (401f7c <Reset_Handler+0xc4>)
  401f4e:	4798      	blx	r3
  401f50:	e7fe      	b.n	401f50 <Reset_Handler+0x98>
  401f52:	bf00      	nop
  401f54:	20400000 	.word	0x20400000
  401f58:	00409a3c 	.word	0x00409a3c
  401f5c:	204009c0 	.word	0x204009c0
  401f60:	20400ea4 	.word	0x20400ea4
  401f64:	204009c0 	.word	0x204009c0
  401f68:	e000ed00 	.word	0xe000ed00
  401f6c:	00400000 	.word	0x00400000
  401f70:	2040000a 	.word	0x2040000a
  401f74:	e000ed88 	.word	0xe000ed88
  401f78:	004029b5 	.word	0x004029b5
  401f7c:	00402759 	.word	0x00402759

00401f80 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401f80:	4b3b      	ldr	r3, [pc, #236]	; (402070 <SystemCoreClockUpdate+0xf0>)
  401f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401f84:	f003 0303 	and.w	r3, r3, #3
  401f88:	2b01      	cmp	r3, #1
  401f8a:	d01d      	beq.n	401fc8 <SystemCoreClockUpdate+0x48>
  401f8c:	b183      	cbz	r3, 401fb0 <SystemCoreClockUpdate+0x30>
  401f8e:	2b02      	cmp	r3, #2
  401f90:	d036      	beq.n	402000 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401f92:	4b37      	ldr	r3, [pc, #220]	; (402070 <SystemCoreClockUpdate+0xf0>)
  401f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401f96:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401f9a:	2b70      	cmp	r3, #112	; 0x70
  401f9c:	d05f      	beq.n	40205e <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401f9e:	4b34      	ldr	r3, [pc, #208]	; (402070 <SystemCoreClockUpdate+0xf0>)
  401fa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401fa2:	4934      	ldr	r1, [pc, #208]	; (402074 <SystemCoreClockUpdate+0xf4>)
  401fa4:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401fa8:	680b      	ldr	r3, [r1, #0]
  401faa:	40d3      	lsrs	r3, r2
  401fac:	600b      	str	r3, [r1, #0]
  401fae:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401fb0:	4b31      	ldr	r3, [pc, #196]	; (402078 <SystemCoreClockUpdate+0xf8>)
  401fb2:	695b      	ldr	r3, [r3, #20]
  401fb4:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401fb8:	bf14      	ite	ne
  401fba:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401fbe:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401fc2:	4b2c      	ldr	r3, [pc, #176]	; (402074 <SystemCoreClockUpdate+0xf4>)
  401fc4:	601a      	str	r2, [r3, #0]
  401fc6:	e7e4      	b.n	401f92 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401fc8:	4b29      	ldr	r3, [pc, #164]	; (402070 <SystemCoreClockUpdate+0xf0>)
  401fca:	6a1b      	ldr	r3, [r3, #32]
  401fcc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401fd0:	d003      	beq.n	401fda <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401fd2:	4a2a      	ldr	r2, [pc, #168]	; (40207c <SystemCoreClockUpdate+0xfc>)
  401fd4:	4b27      	ldr	r3, [pc, #156]	; (402074 <SystemCoreClockUpdate+0xf4>)
  401fd6:	601a      	str	r2, [r3, #0]
  401fd8:	e7db      	b.n	401f92 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401fda:	4a29      	ldr	r2, [pc, #164]	; (402080 <SystemCoreClockUpdate+0x100>)
  401fdc:	4b25      	ldr	r3, [pc, #148]	; (402074 <SystemCoreClockUpdate+0xf4>)
  401fde:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401fe0:	4b23      	ldr	r3, [pc, #140]	; (402070 <SystemCoreClockUpdate+0xf0>)
  401fe2:	6a1b      	ldr	r3, [r3, #32]
  401fe4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401fe8:	2b10      	cmp	r3, #16
  401fea:	d005      	beq.n	401ff8 <SystemCoreClockUpdate+0x78>
  401fec:	2b20      	cmp	r3, #32
  401fee:	d1d0      	bne.n	401f92 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  401ff0:	4a22      	ldr	r2, [pc, #136]	; (40207c <SystemCoreClockUpdate+0xfc>)
  401ff2:	4b20      	ldr	r3, [pc, #128]	; (402074 <SystemCoreClockUpdate+0xf4>)
  401ff4:	601a      	str	r2, [r3, #0]
          break;
  401ff6:	e7cc      	b.n	401f92 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  401ff8:	4a22      	ldr	r2, [pc, #136]	; (402084 <SystemCoreClockUpdate+0x104>)
  401ffa:	4b1e      	ldr	r3, [pc, #120]	; (402074 <SystemCoreClockUpdate+0xf4>)
  401ffc:	601a      	str	r2, [r3, #0]
          break;
  401ffe:	e7c8      	b.n	401f92 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  402000:	4b1b      	ldr	r3, [pc, #108]	; (402070 <SystemCoreClockUpdate+0xf0>)
  402002:	6a1b      	ldr	r3, [r3, #32]
  402004:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402008:	d016      	beq.n	402038 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40200a:	4a1c      	ldr	r2, [pc, #112]	; (40207c <SystemCoreClockUpdate+0xfc>)
  40200c:	4b19      	ldr	r3, [pc, #100]	; (402074 <SystemCoreClockUpdate+0xf4>)
  40200e:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  402010:	4b17      	ldr	r3, [pc, #92]	; (402070 <SystemCoreClockUpdate+0xf0>)
  402012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402014:	f003 0303 	and.w	r3, r3, #3
  402018:	2b02      	cmp	r3, #2
  40201a:	d1ba      	bne.n	401f92 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40201c:	4a14      	ldr	r2, [pc, #80]	; (402070 <SystemCoreClockUpdate+0xf0>)
  40201e:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  402020:	6a92      	ldr	r2, [r2, #40]	; 0x28
  402022:	4814      	ldr	r0, [pc, #80]	; (402074 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  402024:	f3c1 410a 	ubfx	r1, r1, #16, #11
  402028:	6803      	ldr	r3, [r0, #0]
  40202a:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40202e:	b2d2      	uxtb	r2, r2
  402030:	fbb3 f3f2 	udiv	r3, r3, r2
  402034:	6003      	str	r3, [r0, #0]
  402036:	e7ac      	b.n	401f92 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402038:	4a11      	ldr	r2, [pc, #68]	; (402080 <SystemCoreClockUpdate+0x100>)
  40203a:	4b0e      	ldr	r3, [pc, #56]	; (402074 <SystemCoreClockUpdate+0xf4>)
  40203c:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40203e:	4b0c      	ldr	r3, [pc, #48]	; (402070 <SystemCoreClockUpdate+0xf0>)
  402040:	6a1b      	ldr	r3, [r3, #32]
  402042:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402046:	2b10      	cmp	r3, #16
  402048:	d005      	beq.n	402056 <SystemCoreClockUpdate+0xd6>
  40204a:	2b20      	cmp	r3, #32
  40204c:	d1e0      	bne.n	402010 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  40204e:	4a0b      	ldr	r2, [pc, #44]	; (40207c <SystemCoreClockUpdate+0xfc>)
  402050:	4b08      	ldr	r3, [pc, #32]	; (402074 <SystemCoreClockUpdate+0xf4>)
  402052:	601a      	str	r2, [r3, #0]
          break;
  402054:	e7dc      	b.n	402010 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  402056:	4a0b      	ldr	r2, [pc, #44]	; (402084 <SystemCoreClockUpdate+0x104>)
  402058:	4b06      	ldr	r3, [pc, #24]	; (402074 <SystemCoreClockUpdate+0xf4>)
  40205a:	601a      	str	r2, [r3, #0]
          break;
  40205c:	e7d8      	b.n	402010 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  40205e:	4a05      	ldr	r2, [pc, #20]	; (402074 <SystemCoreClockUpdate+0xf4>)
  402060:	6813      	ldr	r3, [r2, #0]
  402062:	4909      	ldr	r1, [pc, #36]	; (402088 <SystemCoreClockUpdate+0x108>)
  402064:	fba1 1303 	umull	r1, r3, r1, r3
  402068:	085b      	lsrs	r3, r3, #1
  40206a:	6013      	str	r3, [r2, #0]
  40206c:	4770      	bx	lr
  40206e:	bf00      	nop
  402070:	400e0600 	.word	0x400e0600
  402074:	2040000c 	.word	0x2040000c
  402078:	400e1810 	.word	0x400e1810
  40207c:	00b71b00 	.word	0x00b71b00
  402080:	003d0900 	.word	0x003d0900
  402084:	007a1200 	.word	0x007a1200
  402088:	aaaaaaab 	.word	0xaaaaaaab

0040208c <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  40208c:	4b16      	ldr	r3, [pc, #88]	; (4020e8 <system_init_flash+0x5c>)
  40208e:	4298      	cmp	r0, r3
  402090:	d913      	bls.n	4020ba <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  402092:	4b16      	ldr	r3, [pc, #88]	; (4020ec <system_init_flash+0x60>)
  402094:	4298      	cmp	r0, r3
  402096:	d915      	bls.n	4020c4 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  402098:	4b15      	ldr	r3, [pc, #84]	; (4020f0 <system_init_flash+0x64>)
  40209a:	4298      	cmp	r0, r3
  40209c:	d916      	bls.n	4020cc <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  40209e:	4b15      	ldr	r3, [pc, #84]	; (4020f4 <system_init_flash+0x68>)
  4020a0:	4298      	cmp	r0, r3
  4020a2:	d917      	bls.n	4020d4 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4020a4:	4b14      	ldr	r3, [pc, #80]	; (4020f8 <system_init_flash+0x6c>)
  4020a6:	4298      	cmp	r0, r3
  4020a8:	d918      	bls.n	4020dc <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  4020aa:	4b14      	ldr	r3, [pc, #80]	; (4020fc <system_init_flash+0x70>)
  4020ac:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4020ae:	bf94      	ite	ls
  4020b0:	4a13      	ldrls	r2, [pc, #76]	; (402100 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  4020b2:	4a14      	ldrhi	r2, [pc, #80]	; (402104 <system_init_flash+0x78>)
  4020b4:	4b14      	ldr	r3, [pc, #80]	; (402108 <system_init_flash+0x7c>)
  4020b6:	601a      	str	r2, [r3, #0]
  4020b8:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4020ba:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4020be:	4b12      	ldr	r3, [pc, #72]	; (402108 <system_init_flash+0x7c>)
  4020c0:	601a      	str	r2, [r3, #0]
  4020c2:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4020c4:	4a11      	ldr	r2, [pc, #68]	; (40210c <system_init_flash+0x80>)
  4020c6:	4b10      	ldr	r3, [pc, #64]	; (402108 <system_init_flash+0x7c>)
  4020c8:	601a      	str	r2, [r3, #0]
  4020ca:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4020cc:	4a10      	ldr	r2, [pc, #64]	; (402110 <system_init_flash+0x84>)
  4020ce:	4b0e      	ldr	r3, [pc, #56]	; (402108 <system_init_flash+0x7c>)
  4020d0:	601a      	str	r2, [r3, #0]
  4020d2:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4020d4:	4a0f      	ldr	r2, [pc, #60]	; (402114 <system_init_flash+0x88>)
  4020d6:	4b0c      	ldr	r3, [pc, #48]	; (402108 <system_init_flash+0x7c>)
  4020d8:	601a      	str	r2, [r3, #0]
  4020da:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4020dc:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4020e0:	4b09      	ldr	r3, [pc, #36]	; (402108 <system_init_flash+0x7c>)
  4020e2:	601a      	str	r2, [r3, #0]
  4020e4:	4770      	bx	lr
  4020e6:	bf00      	nop
  4020e8:	015ef3bf 	.word	0x015ef3bf
  4020ec:	02bde77f 	.word	0x02bde77f
  4020f0:	041cdb3f 	.word	0x041cdb3f
  4020f4:	057bceff 	.word	0x057bceff
  4020f8:	06dac2bf 	.word	0x06dac2bf
  4020fc:	0839b67f 	.word	0x0839b67f
  402100:	04000500 	.word	0x04000500
  402104:	04000600 	.word	0x04000600
  402108:	400e0c00 	.word	0x400e0c00
  40210c:	04000100 	.word	0x04000100
  402110:	04000200 	.word	0x04000200
  402114:	04000300 	.word	0x04000300

00402118 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  402118:	4b0a      	ldr	r3, [pc, #40]	; (402144 <_sbrk+0x2c>)
  40211a:	681b      	ldr	r3, [r3, #0]
  40211c:	b153      	cbz	r3, 402134 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  40211e:	4b09      	ldr	r3, [pc, #36]	; (402144 <_sbrk+0x2c>)
  402120:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  402122:	181a      	adds	r2, r3, r0
  402124:	4908      	ldr	r1, [pc, #32]	; (402148 <_sbrk+0x30>)
  402126:	4291      	cmp	r1, r2
  402128:	db08      	blt.n	40213c <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  40212a:	4610      	mov	r0, r2
  40212c:	4a05      	ldr	r2, [pc, #20]	; (402144 <_sbrk+0x2c>)
  40212e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  402130:	4618      	mov	r0, r3
  402132:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  402134:	4a05      	ldr	r2, [pc, #20]	; (40214c <_sbrk+0x34>)
  402136:	4b03      	ldr	r3, [pc, #12]	; (402144 <_sbrk+0x2c>)
  402138:	601a      	str	r2, [r3, #0]
  40213a:	e7f0      	b.n	40211e <_sbrk+0x6>
		return (caddr_t) -1;	
  40213c:	f04f 30ff 	mov.w	r0, #4294967295
}
  402140:	4770      	bx	lr
  402142:	bf00      	nop
  402144:	20400e10 	.word	0x20400e10
  402148:	2045fffc 	.word	0x2045fffc
  40214c:	204030a8 	.word	0x204030a8

00402150 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  402150:	f04f 30ff 	mov.w	r0, #4294967295
  402154:	4770      	bx	lr

00402156 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  402156:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40215a:	604b      	str	r3, [r1, #4]

	return 0;
}
  40215c:	2000      	movs	r0, #0
  40215e:	4770      	bx	lr

00402160 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  402160:	2001      	movs	r0, #1
  402162:	4770      	bx	lr

00402164 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  402164:	2000      	movs	r0, #0
  402166:	4770      	bx	lr

00402168 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  402168:	b5f0      	push	{r4, r5, r6, r7, lr}
  40216a:	b083      	sub	sp, #12
  40216c:	4605      	mov	r5, r0
  40216e:	460c      	mov	r4, r1
	uint32_t val = 0;
  402170:	2300      	movs	r3, #0
  402172:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  402174:	4b2a      	ldr	r3, [pc, #168]	; (402220 <usart_serial_getchar+0xb8>)
  402176:	4298      	cmp	r0, r3
  402178:	d013      	beq.n	4021a2 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40217a:	4b2a      	ldr	r3, [pc, #168]	; (402224 <usart_serial_getchar+0xbc>)
  40217c:	4298      	cmp	r0, r3
  40217e:	d018      	beq.n	4021b2 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  402180:	4b29      	ldr	r3, [pc, #164]	; (402228 <usart_serial_getchar+0xc0>)
  402182:	4298      	cmp	r0, r3
  402184:	d01d      	beq.n	4021c2 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  402186:	4b29      	ldr	r3, [pc, #164]	; (40222c <usart_serial_getchar+0xc4>)
  402188:	429d      	cmp	r5, r3
  40218a:	d022      	beq.n	4021d2 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40218c:	4b28      	ldr	r3, [pc, #160]	; (402230 <usart_serial_getchar+0xc8>)
  40218e:	429d      	cmp	r5, r3
  402190:	d027      	beq.n	4021e2 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  402192:	4b28      	ldr	r3, [pc, #160]	; (402234 <usart_serial_getchar+0xcc>)
  402194:	429d      	cmp	r5, r3
  402196:	d02e      	beq.n	4021f6 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  402198:	4b27      	ldr	r3, [pc, #156]	; (402238 <usart_serial_getchar+0xd0>)
  40219a:	429d      	cmp	r5, r3
  40219c:	d035      	beq.n	40220a <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  40219e:	b003      	add	sp, #12
  4021a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  4021a2:	461f      	mov	r7, r3
  4021a4:	4e25      	ldr	r6, [pc, #148]	; (40223c <usart_serial_getchar+0xd4>)
  4021a6:	4621      	mov	r1, r4
  4021a8:	4638      	mov	r0, r7
  4021aa:	47b0      	blx	r6
  4021ac:	2800      	cmp	r0, #0
  4021ae:	d1fa      	bne.n	4021a6 <usart_serial_getchar+0x3e>
  4021b0:	e7e9      	b.n	402186 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  4021b2:	461f      	mov	r7, r3
  4021b4:	4e21      	ldr	r6, [pc, #132]	; (40223c <usart_serial_getchar+0xd4>)
  4021b6:	4621      	mov	r1, r4
  4021b8:	4638      	mov	r0, r7
  4021ba:	47b0      	blx	r6
  4021bc:	2800      	cmp	r0, #0
  4021be:	d1fa      	bne.n	4021b6 <usart_serial_getchar+0x4e>
  4021c0:	e7e4      	b.n	40218c <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  4021c2:	461f      	mov	r7, r3
  4021c4:	4e1d      	ldr	r6, [pc, #116]	; (40223c <usart_serial_getchar+0xd4>)
  4021c6:	4621      	mov	r1, r4
  4021c8:	4638      	mov	r0, r7
  4021ca:	47b0      	blx	r6
  4021cc:	2800      	cmp	r0, #0
  4021ce:	d1fa      	bne.n	4021c6 <usart_serial_getchar+0x5e>
  4021d0:	e7df      	b.n	402192 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  4021d2:	461f      	mov	r7, r3
  4021d4:	4e19      	ldr	r6, [pc, #100]	; (40223c <usart_serial_getchar+0xd4>)
  4021d6:	4621      	mov	r1, r4
  4021d8:	4638      	mov	r0, r7
  4021da:	47b0      	blx	r6
  4021dc:	2800      	cmp	r0, #0
  4021de:	d1fa      	bne.n	4021d6 <usart_serial_getchar+0x6e>
  4021e0:	e7da      	b.n	402198 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  4021e2:	461e      	mov	r6, r3
  4021e4:	4d16      	ldr	r5, [pc, #88]	; (402240 <usart_serial_getchar+0xd8>)
  4021e6:	a901      	add	r1, sp, #4
  4021e8:	4630      	mov	r0, r6
  4021ea:	47a8      	blx	r5
  4021ec:	2800      	cmp	r0, #0
  4021ee:	d1fa      	bne.n	4021e6 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  4021f0:	9b01      	ldr	r3, [sp, #4]
  4021f2:	7023      	strb	r3, [r4, #0]
  4021f4:	e7d3      	b.n	40219e <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4021f6:	461e      	mov	r6, r3
  4021f8:	4d11      	ldr	r5, [pc, #68]	; (402240 <usart_serial_getchar+0xd8>)
  4021fa:	a901      	add	r1, sp, #4
  4021fc:	4630      	mov	r0, r6
  4021fe:	47a8      	blx	r5
  402200:	2800      	cmp	r0, #0
  402202:	d1fa      	bne.n	4021fa <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  402204:	9b01      	ldr	r3, [sp, #4]
  402206:	7023      	strb	r3, [r4, #0]
  402208:	e7c9      	b.n	40219e <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  40220a:	461e      	mov	r6, r3
  40220c:	4d0c      	ldr	r5, [pc, #48]	; (402240 <usart_serial_getchar+0xd8>)
  40220e:	a901      	add	r1, sp, #4
  402210:	4630      	mov	r0, r6
  402212:	47a8      	blx	r5
  402214:	2800      	cmp	r0, #0
  402216:	d1fa      	bne.n	40220e <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  402218:	9b01      	ldr	r3, [sp, #4]
  40221a:	7023      	strb	r3, [r4, #0]
}
  40221c:	e7bf      	b.n	40219e <usart_serial_getchar+0x36>
  40221e:	bf00      	nop
  402220:	400e0800 	.word	0x400e0800
  402224:	400e0a00 	.word	0x400e0a00
  402228:	400e1a00 	.word	0x400e1a00
  40222c:	400e1c00 	.word	0x400e1c00
  402230:	40024000 	.word	0x40024000
  402234:	40028000 	.word	0x40028000
  402238:	4002c000 	.word	0x4002c000
  40223c:	00401d93 	.word	0x00401d93
  402240:	00401e9f 	.word	0x00401e9f

00402244 <usart_serial_putchar>:
{
  402244:	b570      	push	{r4, r5, r6, lr}
  402246:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  402248:	4b2a      	ldr	r3, [pc, #168]	; (4022f4 <usart_serial_putchar+0xb0>)
  40224a:	4298      	cmp	r0, r3
  40224c:	d013      	beq.n	402276 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  40224e:	4b2a      	ldr	r3, [pc, #168]	; (4022f8 <usart_serial_putchar+0xb4>)
  402250:	4298      	cmp	r0, r3
  402252:	d019      	beq.n	402288 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  402254:	4b29      	ldr	r3, [pc, #164]	; (4022fc <usart_serial_putchar+0xb8>)
  402256:	4298      	cmp	r0, r3
  402258:	d01f      	beq.n	40229a <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  40225a:	4b29      	ldr	r3, [pc, #164]	; (402300 <usart_serial_putchar+0xbc>)
  40225c:	4298      	cmp	r0, r3
  40225e:	d025      	beq.n	4022ac <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  402260:	4b28      	ldr	r3, [pc, #160]	; (402304 <usart_serial_putchar+0xc0>)
  402262:	4298      	cmp	r0, r3
  402264:	d02b      	beq.n	4022be <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  402266:	4b28      	ldr	r3, [pc, #160]	; (402308 <usart_serial_putchar+0xc4>)
  402268:	4298      	cmp	r0, r3
  40226a:	d031      	beq.n	4022d0 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  40226c:	4b27      	ldr	r3, [pc, #156]	; (40230c <usart_serial_putchar+0xc8>)
  40226e:	4298      	cmp	r0, r3
  402270:	d037      	beq.n	4022e2 <usart_serial_putchar+0x9e>
	return 0;
  402272:	2000      	movs	r0, #0
}
  402274:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402276:	461e      	mov	r6, r3
  402278:	4d25      	ldr	r5, [pc, #148]	; (402310 <usart_serial_putchar+0xcc>)
  40227a:	4621      	mov	r1, r4
  40227c:	4630      	mov	r0, r6
  40227e:	47a8      	blx	r5
  402280:	2800      	cmp	r0, #0
  402282:	d1fa      	bne.n	40227a <usart_serial_putchar+0x36>
		return 1;
  402284:	2001      	movs	r0, #1
  402286:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402288:	461e      	mov	r6, r3
  40228a:	4d21      	ldr	r5, [pc, #132]	; (402310 <usart_serial_putchar+0xcc>)
  40228c:	4621      	mov	r1, r4
  40228e:	4630      	mov	r0, r6
  402290:	47a8      	blx	r5
  402292:	2800      	cmp	r0, #0
  402294:	d1fa      	bne.n	40228c <usart_serial_putchar+0x48>
		return 1;
  402296:	2001      	movs	r0, #1
  402298:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40229a:	461e      	mov	r6, r3
  40229c:	4d1c      	ldr	r5, [pc, #112]	; (402310 <usart_serial_putchar+0xcc>)
  40229e:	4621      	mov	r1, r4
  4022a0:	4630      	mov	r0, r6
  4022a2:	47a8      	blx	r5
  4022a4:	2800      	cmp	r0, #0
  4022a6:	d1fa      	bne.n	40229e <usart_serial_putchar+0x5a>
		return 1;
  4022a8:	2001      	movs	r0, #1
  4022aa:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4022ac:	461e      	mov	r6, r3
  4022ae:	4d18      	ldr	r5, [pc, #96]	; (402310 <usart_serial_putchar+0xcc>)
  4022b0:	4621      	mov	r1, r4
  4022b2:	4630      	mov	r0, r6
  4022b4:	47a8      	blx	r5
  4022b6:	2800      	cmp	r0, #0
  4022b8:	d1fa      	bne.n	4022b0 <usart_serial_putchar+0x6c>
		return 1;
  4022ba:	2001      	movs	r0, #1
  4022bc:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4022be:	461e      	mov	r6, r3
  4022c0:	4d14      	ldr	r5, [pc, #80]	; (402314 <usart_serial_putchar+0xd0>)
  4022c2:	4621      	mov	r1, r4
  4022c4:	4630      	mov	r0, r6
  4022c6:	47a8      	blx	r5
  4022c8:	2800      	cmp	r0, #0
  4022ca:	d1fa      	bne.n	4022c2 <usart_serial_putchar+0x7e>
		return 1;
  4022cc:	2001      	movs	r0, #1
  4022ce:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4022d0:	461e      	mov	r6, r3
  4022d2:	4d10      	ldr	r5, [pc, #64]	; (402314 <usart_serial_putchar+0xd0>)
  4022d4:	4621      	mov	r1, r4
  4022d6:	4630      	mov	r0, r6
  4022d8:	47a8      	blx	r5
  4022da:	2800      	cmp	r0, #0
  4022dc:	d1fa      	bne.n	4022d4 <usart_serial_putchar+0x90>
		return 1;
  4022de:	2001      	movs	r0, #1
  4022e0:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4022e2:	461e      	mov	r6, r3
  4022e4:	4d0b      	ldr	r5, [pc, #44]	; (402314 <usart_serial_putchar+0xd0>)
  4022e6:	4621      	mov	r1, r4
  4022e8:	4630      	mov	r0, r6
  4022ea:	47a8      	blx	r5
  4022ec:	2800      	cmp	r0, #0
  4022ee:	d1fa      	bne.n	4022e6 <usart_serial_putchar+0xa2>
		return 1;
  4022f0:	2001      	movs	r0, #1
  4022f2:	bd70      	pop	{r4, r5, r6, pc}
  4022f4:	400e0800 	.word	0x400e0800
  4022f8:	400e0a00 	.word	0x400e0a00
  4022fc:	400e1a00 	.word	0x400e1a00
  402300:	400e1c00 	.word	0x400e1c00
  402304:	40024000 	.word	0x40024000
  402308:	40028000 	.word	0x40028000
  40230c:	4002c000 	.word	0x4002c000
  402310:	00401d81 	.word	0x00401d81
  402314:	00401e89 	.word	0x00401e89

00402318 <RTC_init>:
	mxt_write_config_reg(device, mxt_get_object_address(device,
			MXT_GEN_COMMANDPROCESSOR_T6, 0)
			+ MXT_GEN_COMMANDPROCESSOR_CALIBRATE, 0x01);
}

void RTC_init(){
  402318:	b530      	push	{r4, r5, lr}
  40231a:	b083      	sub	sp, #12
	/* Configura o PMC */
	pmc_enable_periph_clk(ID_RTC);
  40231c:	2002      	movs	r0, #2
  40231e:	4b13      	ldr	r3, [pc, #76]	; (40236c <RTC_init+0x54>)
  402320:	4798      	blx	r3

	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
  402322:	4c13      	ldr	r4, [pc, #76]	; (402370 <RTC_init+0x58>)
  402324:	2100      	movs	r1, #0
  402326:	4620      	mov	r0, r4
  402328:	4b12      	ldr	r3, [pc, #72]	; (402374 <RTC_init+0x5c>)
  40232a:	4798      	blx	r3

	/* Configura data e hora manualmente */
	rtc_set_date(RTC, YEAR, MONTH, DAY, WEEK);
  40232c:	230c      	movs	r3, #12
  40232e:	9300      	str	r3, [sp, #0]
  402330:	2313      	movs	r3, #19
  402332:	2203      	movs	r2, #3
  402334:	f240 71e3 	movw	r1, #2019	; 0x7e3
  402338:	4620      	mov	r0, r4
  40233a:	4d0f      	ldr	r5, [pc, #60]	; (402378 <RTC_init+0x60>)
  40233c:	47a8      	blx	r5
	rtc_set_time(RTC, HOUR, MINUTE, SECOND);
  40233e:	2300      	movs	r3, #0
  402340:	461a      	mov	r2, r3
  402342:	4619      	mov	r1, r3
  402344:	4620      	mov	r0, r4
  402346:	4d0d      	ldr	r5, [pc, #52]	; (40237c <RTC_init+0x64>)
  402348:	47a8      	blx	r5

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40234a:	4b0d      	ldr	r3, [pc, #52]	; (402380 <RTC_init+0x68>)
  40234c:	2204      	movs	r2, #4
  40234e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  402352:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402356:	2100      	movs	r1, #0
  402358:	f883 1302 	strb.w	r1, [r3, #770]	; 0x302
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40235c:	601a      	str	r2, [r3, #0]
	NVIC_ClearPendingIRQ(RTC_IRQn);
	NVIC_SetPriority(RTC_IRQn, 0);
	NVIC_EnableIRQ(RTC_IRQn);

	/* Ativa interrupcao via alarme */
	rtc_enable_interrupt(RTC,  RTC_IER_ALREN);
  40235e:	2102      	movs	r1, #2
  402360:	4620      	mov	r0, r4
  402362:	4b08      	ldr	r3, [pc, #32]	; (402384 <RTC_init+0x6c>)
  402364:	4798      	blx	r3

}
  402366:	b003      	add	sp, #12
  402368:	bd30      	pop	{r4, r5, pc}
  40236a:	bf00      	nop
  40236c:	004017f9 	.word	0x004017f9
  402370:	400e1860 	.word	0x400e1860
  402374:	00401819 	.word	0x00401819
  402378:	0040191d 	.word	0x0040191d
  40237c:	0040188d 	.word	0x0040188d
  402380:	e000e100 	.word	0xe000e100
  402384:	0040182f 	.word	0x0040182f

00402388 <draw_screen>:

void draw_screen(void) {
  402388:	b510      	push	{r4, lr}
	ili9488_set_foreground_color(COLOR_CONVERT(COLOR_WHITE));
  40238a:	4806      	ldr	r0, [pc, #24]	; (4023a4 <draw_screen+0x1c>)
  40238c:	4b06      	ldr	r3, [pc, #24]	; (4023a8 <draw_screen+0x20>)
  40238e:	4798      	blx	r3
	ili9488_draw_filled_rectangle(0, 0, ILI9488_LCD_WIDTH-1, ILI9488_LCD_HEIGHT-1);
  402390:	f240 13df 	movw	r3, #479	; 0x1df
  402394:	f240 123f 	movw	r2, #319	; 0x13f
  402398:	2100      	movs	r1, #0
  40239a:	4608      	mov	r0, r1
  40239c:	4c03      	ldr	r4, [pc, #12]	; (4023ac <draw_screen+0x24>)
  40239e:	47a0      	blx	r4
  4023a0:	bd10      	pop	{r4, pc}
  4023a2:	bf00      	nop
  4023a4:	00fcfcfc 	.word	0x00fcfcfc
  4023a8:	00400e95 	.word	0x00400e95
  4023ac:	00401121 	.word	0x00401121

004023b0 <draw_button>:

void draw_button(uint32_t clicked) {
	static uint32_t last_state = 255; // undefined
	uint8_t stingLCD[256];

	if(clicked == last_state) return;
  4023b0:	4b47      	ldr	r3, [pc, #284]	; (4024d0 <draw_button+0x120>)
  4023b2:	681b      	ldr	r3, [r3, #0]
  4023b4:	4283      	cmp	r3, r0
  4023b6:	f000 8089 	beq.w	4024cc <draw_button+0x11c>
void draw_button(uint32_t clicked) {
  4023ba:	b570      	push	{r4, r5, r6, lr}
  4023bc:	4604      	mov	r4, r0
	
	ili9488_set_foreground_color(COLOR_CONVERT(COLOR_BLACK));
  4023be:	2000      	movs	r0, #0
  4023c0:	4d44      	ldr	r5, [pc, #272]	; (4024d4 <draw_button+0x124>)
  4023c2:	47a8      	blx	r5
	ili9488_draw_filled_rectangle(BUTTON_X-BUTTON_W/2, BUTTON_Y-BUTTON_H/2, BUTTON_X+BUTTON_W/2, BUTTON_Y+BUTTON_H/2);
  4023c4:	f240 133b 	movw	r3, #315	; 0x13b
  4023c8:	22dc      	movs	r2, #220	; 0xdc
  4023ca:	21a5      	movs	r1, #165	; 0xa5
  4023cc:	2064      	movs	r0, #100	; 0x64
  4023ce:	4e42      	ldr	r6, [pc, #264]	; (4024d8 <draw_button+0x128>)
  4023d0:	47b0      	blx	r6
	ili9488_set_foreground_color(COLOR_CONVERT(COLOR_TOMATO));
  4023d2:	4842      	ldr	r0, [pc, #264]	; (4024dc <draw_button+0x12c>)
  4023d4:	47a8      	blx	r5
	ili9488_draw_filled_circle(275, 50,25);
  4023d6:	2219      	movs	r2, #25
  4023d8:	2132      	movs	r1, #50	; 0x32
  4023da:	f240 1013 	movw	r0, #275	; 0x113
  4023de:	4b40      	ldr	r3, [pc, #256]	; (4024e0 <draw_button+0x130>)
  4023e0:	4798      	blx	r3
	if (locked){
  4023e2:	4b40      	ldr	r3, [pc, #256]	; (4024e4 <draw_button+0x134>)
  4023e4:	781b      	ldrb	r3, [r3, #0]
  4023e6:	b943      	cbnz	r3, 4023fa <draw_button+0x4a>
		ili9488_set_foreground_color(COLOR_CONVERT(COLOR_GREEN));
		ili9488_draw_filled_circle(275, 50,25);
		ili9488_set_foreground_color(COLOR_CONVERT(COLOR_WHITE));
	}
	else {
		if (clicked==3){
  4023e8:	2c03      	cmp	r4, #3
  4023ea:	d01c      	beq.n	402426 <draw_button+0x76>
				ili9488_set_foreground_color(COLOR_CONVERT(COLOR_GREEN));
				ili9488_draw_filled_rectangle(BUTTON_X-BUTTON_W/2+BUTTON_BORDER, BUTTON_Y-BUTTON_H/2+BUTTON_BORDER, BUTTON_X+BUTTON_W/2-BUTTON_BORDER, BUTTON_Y-BUTTON_BORDER);
				
			}
		}
		else if(clicked==1) {
  4023ec:	2c01      	cmp	r4, #1
  4023ee:	d04f      	beq.n	402490 <draw_button+0xe0>
		
			RTC_init();
			start = true;
		
			} 
		else if(clicked == 0) {
  4023f0:	2c00      	cmp	r4, #0
  4023f2:	d05d      	beq.n	4024b0 <draw_button+0x100>
			ili9488_set_foreground_color(COLOR_CONVERT(COLOR_GREEN));
			ili9488_draw_filled_rectangle(BUTTON_X-BUTTON_W/2+BUTTON_BORDER, BUTTON_Y-BUTTON_H/2+BUTTON_BORDER, BUTTON_X+BUTTON_W/2-BUTTON_BORDER, BUTTON_Y-BUTTON_BORDER);
			start = false;
			
		}
		last_state = clicked;
  4023f4:	4b36      	ldr	r3, [pc, #216]	; (4024d0 <draw_button+0x120>)
  4023f6:	601c      	str	r4, [r3, #0]
  4023f8:	bd70      	pop	{r4, r5, r6, pc}
		ili9488_set_foreground_color(COLOR_CONVERT(COLOR_BLACK));
  4023fa:	2000      	movs	r0, #0
  4023fc:	462c      	mov	r4, r5
  4023fe:	47a8      	blx	r5
		ili9488_draw_filled_rectangle(0, 0, ILI9488_LCD_WIDTH, ILI9488_LCD_HEIGHT);
  402400:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  402404:	f44f 72a0 	mov.w	r2, #320	; 0x140
  402408:	2100      	movs	r1, #0
  40240a:	4608      	mov	r0, r1
  40240c:	47b0      	blx	r6
		ili9488_set_foreground_color(COLOR_CONVERT(COLOR_GREEN));
  40240e:	f44f 407c 	mov.w	r0, #64512	; 0xfc00
  402412:	47a0      	blx	r4
		ili9488_draw_filled_circle(275, 50,25);
  402414:	2219      	movs	r2, #25
  402416:	2132      	movs	r1, #50	; 0x32
  402418:	f240 1013 	movw	r0, #275	; 0x113
  40241c:	4b30      	ldr	r3, [pc, #192]	; (4024e0 <draw_button+0x130>)
  40241e:	4798      	blx	r3
		ili9488_set_foreground_color(COLOR_CONVERT(COLOR_WHITE));
  402420:	4831      	ldr	r0, [pc, #196]	; (4024e8 <draw_button+0x138>)
  402422:	47a0      	blx	r4
  402424:	bd70      	pop	{r4, r5, r6, pc}
			ili9488_set_foreground_color(COLOR_CONVERT(COLOR_WHITE));
  402426:	4830      	ldr	r0, [pc, #192]	; (4024e8 <draw_button+0x138>)
  402428:	4d2a      	ldr	r5, [pc, #168]	; (4024d4 <draw_button+0x124>)
  40242a:	47a8      	blx	r5
			ili9488_draw_filled_rectangle(0, 0, ILI9488_LCD_WIDTH, ILI9488_LCD_HEIGHT);
  40242c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  402430:	f44f 72a0 	mov.w	r2, #320	; 0x140
  402434:	2100      	movs	r1, #0
  402436:	4608      	mov	r0, r1
  402438:	4e27      	ldr	r6, [pc, #156]	; (4024d8 <draw_button+0x128>)
  40243a:	47b0      	blx	r6
			ili9488_set_foreground_color(COLOR_CONVERT(COLOR_TOMATO));
  40243c:	4827      	ldr	r0, [pc, #156]	; (4024dc <draw_button+0x12c>)
  40243e:	47a8      	blx	r5
			ili9488_draw_filled_circle(275, 50,25);
  402440:	2219      	movs	r2, #25
  402442:	2132      	movs	r1, #50	; 0x32
  402444:	f240 1013 	movw	r0, #275	; 0x113
  402448:	4b25      	ldr	r3, [pc, #148]	; (4024e0 <draw_button+0x130>)
  40244a:	4798      	blx	r3
			ili9488_set_foreground_color(COLOR_CONVERT(COLOR_BLACK));
  40244c:	2000      	movs	r0, #0
  40244e:	47a8      	blx	r5
			ili9488_draw_filled_rectangle(BUTTON_X-BUTTON_W/2, BUTTON_Y-BUTTON_H/2, BUTTON_X+BUTTON_W/2, BUTTON_Y+BUTTON_H/2);
  402450:	f240 133b 	movw	r3, #315	; 0x13b
  402454:	22dc      	movs	r2, #220	; 0xdc
  402456:	21a5      	movs	r1, #165	; 0xa5
  402458:	2064      	movs	r0, #100	; 0x64
  40245a:	47b0      	blx	r6
			if(last_state==1) {
  40245c:	4b1c      	ldr	r3, [pc, #112]	; (4024d0 <draw_button+0x120>)
  40245e:	681b      	ldr	r3, [r3, #0]
  402460:	2b01      	cmp	r3, #1
  402462:	d00c      	beq.n	40247e <draw_button+0xce>
			else if (last_state==0){
  402464:	2b00      	cmp	r3, #0
  402466:	d1c5      	bne.n	4023f4 <draw_button+0x44>
				ili9488_set_foreground_color(COLOR_CONVERT(COLOR_GREEN));
  402468:	f44f 407c 	mov.w	r0, #64512	; 0xfc00
  40246c:	4b19      	ldr	r3, [pc, #100]	; (4024d4 <draw_button+0x124>)
  40246e:	4798      	blx	r3
				ili9488_draw_filled_rectangle(BUTTON_X-BUTTON_W/2+BUTTON_BORDER, BUTTON_Y-BUTTON_H/2+BUTTON_BORDER, BUTTON_X+BUTTON_W/2-BUTTON_BORDER, BUTTON_Y-BUTTON_BORDER);
  402470:	23ee      	movs	r3, #238	; 0xee
  402472:	22da      	movs	r2, #218	; 0xda
  402474:	21a7      	movs	r1, #167	; 0xa7
  402476:	2066      	movs	r0, #102	; 0x66
  402478:	4d17      	ldr	r5, [pc, #92]	; (4024d8 <draw_button+0x128>)
  40247a:	47a8      	blx	r5
  40247c:	e7ba      	b.n	4023f4 <draw_button+0x44>
				ili9488_set_foreground_color(COLOR_CONVERT(COLOR_TOMATO));
  40247e:	4817      	ldr	r0, [pc, #92]	; (4024dc <draw_button+0x12c>)
  402480:	47a8      	blx	r5
				ili9488_draw_filled_rectangle(BUTTON_X-BUTTON_W/2+BUTTON_BORDER, BUTTON_Y+BUTTON_BORDER, BUTTON_X+BUTTON_W/2-BUTTON_BORDER, BUTTON_Y+BUTTON_H/2-BUTTON_BORDER);
  402482:	f240 1339 	movw	r3, #313	; 0x139
  402486:	22da      	movs	r2, #218	; 0xda
  402488:	21f2      	movs	r1, #242	; 0xf2
  40248a:	2066      	movs	r0, #102	; 0x66
  40248c:	47b0      	blx	r6
  40248e:	e7b1      	b.n	4023f4 <draw_button+0x44>
			ili9488_set_foreground_color(COLOR_CONVERT(COLOR_TOMATO));
  402490:	4812      	ldr	r0, [pc, #72]	; (4024dc <draw_button+0x12c>)
  402492:	4b10      	ldr	r3, [pc, #64]	; (4024d4 <draw_button+0x124>)
  402494:	4798      	blx	r3
			ili9488_draw_filled_rectangle(BUTTON_X-BUTTON_W/2+BUTTON_BORDER, BUTTON_Y+BUTTON_BORDER, BUTTON_X+BUTTON_W/2-BUTTON_BORDER, BUTTON_Y+BUTTON_H/2-BUTTON_BORDER);
  402496:	f240 1339 	movw	r3, #313	; 0x139
  40249a:	22da      	movs	r2, #218	; 0xda
  40249c:	21f2      	movs	r1, #242	; 0xf2
  40249e:	2066      	movs	r0, #102	; 0x66
  4024a0:	4d0d      	ldr	r5, [pc, #52]	; (4024d8 <draw_button+0x128>)
  4024a2:	47a8      	blx	r5
			RTC_init();
  4024a4:	4b11      	ldr	r3, [pc, #68]	; (4024ec <draw_button+0x13c>)
  4024a6:	4798      	blx	r3
			start = true;
  4024a8:	2201      	movs	r2, #1
  4024aa:	4b11      	ldr	r3, [pc, #68]	; (4024f0 <draw_button+0x140>)
  4024ac:	701a      	strb	r2, [r3, #0]
  4024ae:	e7a1      	b.n	4023f4 <draw_button+0x44>
			ili9488_set_foreground_color(COLOR_CONVERT(COLOR_GREEN));
  4024b0:	f44f 407c 	mov.w	r0, #64512	; 0xfc00
  4024b4:	4b07      	ldr	r3, [pc, #28]	; (4024d4 <draw_button+0x124>)
  4024b6:	4798      	blx	r3
			ili9488_draw_filled_rectangle(BUTTON_X-BUTTON_W/2+BUTTON_BORDER, BUTTON_Y-BUTTON_H/2+BUTTON_BORDER, BUTTON_X+BUTTON_W/2-BUTTON_BORDER, BUTTON_Y-BUTTON_BORDER);
  4024b8:	23ee      	movs	r3, #238	; 0xee
  4024ba:	22da      	movs	r2, #218	; 0xda
  4024bc:	21a7      	movs	r1, #167	; 0xa7
  4024be:	2066      	movs	r0, #102	; 0x66
  4024c0:	4d05      	ldr	r5, [pc, #20]	; (4024d8 <draw_button+0x128>)
  4024c2:	47a8      	blx	r5
			start = false;
  4024c4:	2200      	movs	r2, #0
  4024c6:	4b0a      	ldr	r3, [pc, #40]	; (4024f0 <draw_button+0x140>)
  4024c8:	701a      	strb	r2, [r3, #0]
  4024ca:	e793      	b.n	4023f4 <draw_button+0x44>
  4024cc:	4770      	bx	lr
  4024ce:	bf00      	nop
  4024d0:	20400010 	.word	0x20400010
  4024d4:	00400e95 	.word	0x00400e95
  4024d8:	00401121 	.word	0x00401121
  4024dc:	00fc6044 	.word	0x00fc6044
  4024e0:	004011dd 	.word	0x004011dd
  4024e4:	20400e18 	.word	0x20400e18
  4024e8:	00fcfcfc 	.word	0x00fcfcfc
  4024ec:	00402319 	.word	0x00402319
  4024f0:	20400e19 	.word	0x20400e19

004024f4 <update_screen>:
	// saida: 0 - 320
	return ILI9488_LCD_HEIGHT*touch_x/4096;
}
volatile int c =0;
volatile int clkd;
void update_screen(uint32_t tx, uint32_t ty) {
  4024f4:	b530      	push	{r4, r5, lr}
  4024f6:	b0c1      	sub	sp, #260	; 0x104
  4024f8:	4604      	mov	r4, r0
  4024fa:	460d      	mov	r5, r1
	if(locked==false){
  4024fc:	4b21      	ldr	r3, [pc, #132]	; (402584 <update_screen+0x90>)
  4024fe:	781b      	ldrb	r3, [r3, #0]
  402500:	b973      	cbnz	r3, 402520 <update_screen+0x2c>
		if(tx >= BUTTON_X-BUTTON_W/2 && tx <= BUTTON_X + BUTTON_W/2) {
  402502:	f1a0 0364 	sub.w	r3, r0, #100	; 0x64
  402506:	2b78      	cmp	r3, #120	; 0x78
  402508:	d80a      	bhi.n	402520 <update_screen+0x2c>
			if(ty >= BUTTON_Y-BUTTON_H/2 && ty <= BUTTON_Y) {
  40250a:	f1a1 03a5 	sub.w	r3, r1, #165	; 0xa5
  40250e:	2b4b      	cmp	r3, #75	; 0x4b
  402510:	d820      	bhi.n	402554 <update_screen+0x60>
				//draw_button(1);
				clkd =1;
  402512:	2201      	movs	r2, #1
  402514:	4b1c      	ldr	r3, [pc, #112]	; (402588 <update_screen+0x94>)
  402516:	601a      	str	r2, [r3, #0]
			} 
			else if(ty > BUTTON_Y && ty < BUTTON_Y + BUTTON_H/2) {
				//draw_button(0);
				clkd =0;
			}
			draw_button(clkd);
  402518:	4b1b      	ldr	r3, [pc, #108]	; (402588 <update_screen+0x94>)
  40251a:	6818      	ldr	r0, [r3, #0]
  40251c:	4b1b      	ldr	r3, [pc, #108]	; (40258c <update_screen+0x98>)
  40251e:	4798      	blx	r3
		}
	}
	
	if(tx >=275 && tx <= 315 && ty >= 25 && ty <= 50) {
  402520:	f2a4 1413 	subw	r4, r4, #275	; 0x113
  402524:	2c28      	cmp	r4, #40	; 0x28
  402526:	d813      	bhi.n	402550 <update_screen+0x5c>
  402528:	3d19      	subs	r5, #25
  40252a:	2d19      	cmp	r5, #25
  40252c:	d810      	bhi.n	402550 <update_screen+0x5c>
		c++;
  40252e:	4b18      	ldr	r3, [pc, #96]	; (402590 <update_screen+0x9c>)
  402530:	681a      	ldr	r2, [r3, #0]
  402532:	3201      	adds	r2, #1
  402534:	601a      	str	r2, [r3, #0]
		if(c%2!=0){
  402536:	681b      	ldr	r3, [r3, #0]
  402538:	f013 0f01 	tst.w	r3, #1
  40253c:	d008      	beq.n	402550 <update_screen+0x5c>
			if (locked){
  40253e:	4b11      	ldr	r3, [pc, #68]	; (402584 <update_screen+0x90>)
  402540:	781b      	ldrb	r3, [r3, #0]
  402542:	b97b      	cbnz	r3, 402564 <update_screen+0x70>
				uint8_t stingLCD[256];
				sprintf(stingLCD, "%d ",clkd);
				ili9488_draw_string(40, 400, stingLCD);
			}
			else{
				locked=true;
  402544:	2201      	movs	r2, #1
  402546:	4b0f      	ldr	r3, [pc, #60]	; (402584 <update_screen+0x90>)
  402548:	701a      	strb	r2, [r3, #0]
			}
			draw_button(3);
  40254a:	2003      	movs	r0, #3
  40254c:	4b0f      	ldr	r3, [pc, #60]	; (40258c <update_screen+0x98>)
  40254e:	4798      	blx	r3

		}
	}
	
}
  402550:	b041      	add	sp, #260	; 0x104
  402552:	bd30      	pop	{r4, r5, pc}
			else if(ty > BUTTON_Y && ty < BUTTON_Y + BUTTON_H/2) {
  402554:	f1a1 03f1 	sub.w	r3, r1, #241	; 0xf1
  402558:	2b49      	cmp	r3, #73	; 0x49
  40255a:	d8dd      	bhi.n	402518 <update_screen+0x24>
				clkd =0;
  40255c:	2200      	movs	r2, #0
  40255e:	4b0a      	ldr	r3, [pc, #40]	; (402588 <update_screen+0x94>)
  402560:	601a      	str	r2, [r3, #0]
  402562:	e7d9      	b.n	402518 <update_screen+0x24>
				locked=false;
  402564:	2200      	movs	r2, #0
  402566:	4b07      	ldr	r3, [pc, #28]	; (402584 <update_screen+0x90>)
  402568:	701a      	strb	r2, [r3, #0]
				sprintf(stingLCD, "%d ",clkd);
  40256a:	4b07      	ldr	r3, [pc, #28]	; (402588 <update_screen+0x94>)
  40256c:	681a      	ldr	r2, [r3, #0]
  40256e:	4909      	ldr	r1, [pc, #36]	; (402594 <update_screen+0xa0>)
  402570:	4668      	mov	r0, sp
  402572:	4b09      	ldr	r3, [pc, #36]	; (402598 <update_screen+0xa4>)
  402574:	4798      	blx	r3
				ili9488_draw_string(40, 400, stingLCD);
  402576:	466a      	mov	r2, sp
  402578:	f44f 71c8 	mov.w	r1, #400	; 0x190
  40257c:	2028      	movs	r0, #40	; 0x28
  40257e:	4b07      	ldr	r3, [pc, #28]	; (40259c <update_screen+0xa8>)
  402580:	4798      	blx	r3
  402582:	e7e2      	b.n	40254a <update_screen+0x56>
  402584:	20400e18 	.word	0x20400e18
  402588:	20400e64 	.word	0x20400e64
  40258c:	004023b1 	.word	0x004023b1
  402590:	20400e14 	.word	0x20400e14
  402594:	00409768 	.word	0x00409768
  402598:	00403215 	.word	0x00403215
  40259c:	00401281 	.word	0x00401281

004025a0 <mxt_handler>:

void mxt_handler(struct mxt_device *device)
{
  4025a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4025a4:	b0ce      	sub	sp, #312	; 0x138
  4025a6:	4605      	mov	r5, r0
	/* USART tx buffer initialized to 0 */
	char tx_buf[STRING_LENGTH * MAX_ENTRIES] = {0};
  4025a8:	22d2      	movs	r2, #210	; 0xd2
  4025aa:	2100      	movs	r1, #0
  4025ac:	a819      	add	r0, sp, #100	; 0x64
  4025ae:	4b23      	ldr	r3, [pc, #140]	; (40263c <mxt_handler+0x9c>)
  4025b0:	4798      	blx	r3
	uint8_t i = 0; /* Iterator */
  4025b2:	2400      	movs	r4, #0
	do {
		/* Temporary buffer for each new touch event line */
		char buf[STRING_LENGTH];
	
		/* Read next next touch event in the queue, discard if read fails */
		if (mxt_read_touch_event(device, &touch_event) != STATUS_OK) {
  4025b4:	4f22      	ldr	r7, [pc, #136]	; (402640 <mxt_handler+0xa0>)
		 // eixos trocados (quando na vertical LCD)
		uint32_t conv_x = convert_axis_system_x(touch_event.y);
		uint32_t conv_y = convert_axis_system_y(touch_event.x);
		
		/* Format a new entry in the data string that will be sent over USART */
		sprintf(buf, "Nr: %1d, X:%4d, Y:%4d, Status:0x%2x conv X:%3d Y:%3d\n\r",
  4025b6:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 40265c <mxt_handler+0xbc>
  4025ba:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 402660 <mxt_handler+0xc0>
  4025be:	e005      	b.n	4025cc <mxt_handler+0x2c>
		strcat(tx_buf, buf);
		i++;

		/* Check if there is still messages in the queue and
		 * if we have reached the maximum numbers of events */
	} while ((mxt_is_message_pending(device)) & (i < MAX_ENTRIES));
  4025c0:	4628      	mov	r0, r5
  4025c2:	4b20      	ldr	r3, [pc, #128]	; (402644 <mxt_handler+0xa4>)
  4025c4:	4798      	blx	r3
  4025c6:	2c02      	cmp	r4, #2
  4025c8:	d82a      	bhi.n	402620 <mxt_handler+0x80>
  4025ca:	b348      	cbz	r0, 402620 <mxt_handler+0x80>
		if (mxt_read_touch_event(device, &touch_event) != STATUS_OK) {
  4025cc:	a916      	add	r1, sp, #88	; 0x58
  4025ce:	4628      	mov	r0, r5
  4025d0:	47b8      	blx	r7
  4025d2:	2800      	cmp	r0, #0
  4025d4:	d1f4      	bne.n	4025c0 <mxt_handler+0x20>
		uint32_t conv_x = convert_axis_system_x(touch_event.y);
  4025d6:	f8bd 105c 	ldrh.w	r1, [sp, #92]	; 0x5c
	return ILI9488_LCD_WIDTH - ILI9488_LCD_WIDTH*touch_y/4096;
  4025da:	eb01 0681 	add.w	r6, r1, r1, lsl #2
  4025de:	f3c6 1693 	ubfx	r6, r6, #6, #20
  4025e2:	f5c6 76a0 	rsb	r6, r6, #320	; 0x140
		uint32_t conv_y = convert_axis_system_y(touch_event.x);
  4025e6:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
	return ILI9488_LCD_HEIGHT*touch_x/4096;
  4025ea:	ebc3 1a03 	rsb	sl, r3, r3, lsl #4
  4025ee:	f3ca 1ad3 	ubfx	sl, sl, #7, #20
		sprintf(buf, "Nr: %1d, X:%4d, Y:%4d, Status:0x%2x conv X:%3d Y:%3d\n\r",
  4025f2:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
  4025f6:	f8cd a00c 	str.w	sl, [sp, #12]
  4025fa:	9602      	str	r6, [sp, #8]
  4025fc:	f89d 0059 	ldrb.w	r0, [sp, #89]	; 0x59
  402600:	9001      	str	r0, [sp, #4]
  402602:	9100      	str	r1, [sp, #0]
  402604:	4649      	mov	r1, r9
  402606:	a804      	add	r0, sp, #16
  402608:	47c0      	blx	r8
		update_screen(conv_x, conv_y);
  40260a:	4651      	mov	r1, sl
  40260c:	4630      	mov	r0, r6
  40260e:	4b0e      	ldr	r3, [pc, #56]	; (402648 <mxt_handler+0xa8>)
  402610:	4798      	blx	r3
		strcat(tx_buf, buf);
  402612:	a904      	add	r1, sp, #16
  402614:	a819      	add	r0, sp, #100	; 0x64
  402616:	4b0d      	ldr	r3, [pc, #52]	; (40264c <mxt_handler+0xac>)
  402618:	4798      	blx	r3
		i++;
  40261a:	3401      	adds	r4, #1
  40261c:	b2e4      	uxtb	r4, r4
  40261e:	e7cf      	b.n	4025c0 <mxt_handler+0x20>

	/* If there is any entries in the buffer, send them over USART */
	if (i > 0) {
  402620:	b914      	cbnz	r4, 402628 <mxt_handler+0x88>
		usart_serial_write_packet(USART_SERIAL_EXAMPLE, (uint8_t *)tx_buf, strlen(tx_buf));
	}
}
  402622:	b04e      	add	sp, #312	; 0x138
  402624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		usart_serial_write_packet(USART_SERIAL_EXAMPLE, (uint8_t *)tx_buf, strlen(tx_buf));
  402628:	a819      	add	r0, sp, #100	; 0x64
  40262a:	4b09      	ldr	r3, [pc, #36]	; (402650 <mxt_handler+0xb0>)
  40262c:	4798      	blx	r3
  40262e:	4602      	mov	r2, r0
  402630:	a919      	add	r1, sp, #100	; 0x64
  402632:	4808      	ldr	r0, [pc, #32]	; (402654 <mxt_handler+0xb4>)
  402634:	4b08      	ldr	r3, [pc, #32]	; (402658 <mxt_handler+0xb8>)
  402636:	4798      	blx	r3
}
  402638:	e7f3      	b.n	402622 <mxt_handler+0x82>
  40263a:	bf00      	nop
  40263c:	00402f9d 	.word	0x00402f9d
  402640:	004005dd 	.word	0x004005dd
  402644:	0040056d 	.word	0x0040056d
  402648:	004024f5 	.word	0x004024f5
  40264c:	00403261 	.word	0x00403261
  402650:	00403381 	.word	0x00403381
  402654:	40028000 	.word	0x40028000
  402658:	004006c1 	.word	0x004006c1
  40265c:	00409730 	.word	0x00409730
  402660:	00403215 	.word	0x00403215

00402664 <clear_LCD>:
void clear_LCD(int a, int b){
  402664:	b570      	push	{r4, r5, r6, lr}
  402666:	4604      	mov	r4, r0
  402668:	460d      	mov	r5, r1
	if (locked){
  40266a:	4b0e      	ldr	r3, [pc, #56]	; (4026a4 <clear_LCD+0x40>)
  40266c:	781b      	ldrb	r3, [r3, #0]
  40266e:	b963      	cbnz	r3, 40268a <clear_LCD+0x26>
		ili9488_set_foreground_color(COLOR_CONVERT(COLOR_BLACK));
		ili9488_draw_filled_rectangle(0, a, ILI9488_LCD_WIDTH-1, b);
		ili9488_set_foreground_color(COLOR_CONVERT(COLOR_WHITE));
	}
	else{
		ili9488_set_foreground_color(COLOR_CONVERT(COLOR_WHITE));
  402670:	480d      	ldr	r0, [pc, #52]	; (4026a8 <clear_LCD+0x44>)
  402672:	4e0e      	ldr	r6, [pc, #56]	; (4026ac <clear_LCD+0x48>)
  402674:	47b0      	blx	r6
		ili9488_draw_filled_rectangle(0, a, ILI9488_LCD_WIDTH-1, b);
  402676:	462b      	mov	r3, r5
  402678:	f240 123f 	movw	r2, #319	; 0x13f
  40267c:	4621      	mov	r1, r4
  40267e:	2000      	movs	r0, #0
  402680:	4c0b      	ldr	r4, [pc, #44]	; (4026b0 <clear_LCD+0x4c>)
  402682:	47a0      	blx	r4
		ili9488_set_foreground_color(COLOR_CONVERT(COLOR_BLACK));
  402684:	2000      	movs	r0, #0
  402686:	47b0      	blx	r6
  402688:	bd70      	pop	{r4, r5, r6, pc}
		ili9488_set_foreground_color(COLOR_CONVERT(COLOR_BLACK));
  40268a:	2000      	movs	r0, #0
  40268c:	4e07      	ldr	r6, [pc, #28]	; (4026ac <clear_LCD+0x48>)
  40268e:	47b0      	blx	r6
		ili9488_draw_filled_rectangle(0, a, ILI9488_LCD_WIDTH-1, b);
  402690:	462b      	mov	r3, r5
  402692:	f240 123f 	movw	r2, #319	; 0x13f
  402696:	4621      	mov	r1, r4
  402698:	2000      	movs	r0, #0
  40269a:	4c05      	ldr	r4, [pc, #20]	; (4026b0 <clear_LCD+0x4c>)
  40269c:	47a0      	blx	r4
		ili9488_set_foreground_color(COLOR_CONVERT(COLOR_WHITE));
  40269e:	4802      	ldr	r0, [pc, #8]	; (4026a8 <clear_LCD+0x44>)
  4026a0:	47b0      	blx	r6
  4026a2:	bd70      	pop	{r4, r5, r6, pc}
  4026a4:	20400e18 	.word	0x20400e18
  4026a8:	00fcfcfc 	.word	0x00fcfcfc
  4026ac:	00400e95 	.word	0x00400e95
  4026b0:	00401121 	.word	0x00401121

004026b4 <crono>:
	}
}

void crono(int tempo){
  4026b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4026b6:	b0c3      	sub	sp, #268	; 0x10c
  4026b8:	4604      	mov	r4, r0
	clear_LCD(390,415);
  4026ba:	f240 119f 	movw	r1, #415	; 0x19f
  4026be:	f44f 70c3 	mov.w	r0, #390	; 0x186
  4026c2:	4b1a      	ldr	r3, [pc, #104]	; (40272c <crono+0x78>)
  4026c4:	4798      	blx	r3
	if (start==true){
  4026c6:	4b1a      	ldr	r3, [pc, #104]	; (402730 <crono+0x7c>)
  4026c8:	781b      	ldrb	r3, [r3, #0]
  4026ca:	b90b      	cbnz	r3, 4026d0 <crono+0x1c>
			ili9488_draw_string(5, 350, stingLCD);
			start=false;
		}
	}
	else{return;}
}
  4026cc:	b043      	add	sp, #268	; 0x10c
  4026ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rtc_get_time(RTC, &hour, &minu, &seg);
  4026d0:	4e18      	ldr	r6, [pc, #96]	; (402734 <crono+0x80>)
  4026d2:	4d19      	ldr	r5, [pc, #100]	; (402738 <crono+0x84>)
  4026d4:	4633      	mov	r3, r6
  4026d6:	462a      	mov	r2, r5
  4026d8:	4918      	ldr	r1, [pc, #96]	; (40273c <crono+0x88>)
  4026da:	4819      	ldr	r0, [pc, #100]	; (402740 <crono+0x8c>)
  4026dc:	4f19      	ldr	r7, [pc, #100]	; (402744 <crono+0x90>)
  4026de:	47b8      	blx	r7
		sprintf(stingLCD, "%d :%d de %d min.",minu,seg,tempo);
  4026e0:	6833      	ldr	r3, [r6, #0]
  4026e2:	9400      	str	r4, [sp, #0]
  4026e4:	682a      	ldr	r2, [r5, #0]
  4026e6:	4918      	ldr	r1, [pc, #96]	; (402748 <crono+0x94>)
  4026e8:	a802      	add	r0, sp, #8
  4026ea:	4e18      	ldr	r6, [pc, #96]	; (40274c <crono+0x98>)
  4026ec:	47b0      	blx	r6
		ili9488_draw_string(40, 400, stingLCD);
  4026ee:	aa02      	add	r2, sp, #8
  4026f0:	f44f 71c8 	mov.w	r1, #400	; 0x190
  4026f4:	2028      	movs	r0, #40	; 0x28
  4026f6:	4b16      	ldr	r3, [pc, #88]	; (402750 <crono+0x9c>)
  4026f8:	4798      	blx	r3
		if(minu == tempo){
  4026fa:	682b      	ldr	r3, [r5, #0]
  4026fc:	42a3      	cmp	r3, r4
  4026fe:	d1e5      	bne.n	4026cc <crono+0x18>
			sprintf(stingLCD, "ACABOU A LAVAGEM SEU CORNO");
  402700:	ac02      	add	r4, sp, #8
  402702:	4d14      	ldr	r5, [pc, #80]	; (402754 <crono+0xa0>)
  402704:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  402706:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  402708:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  40270c:	c403      	stmia	r4!, {r0, r1}
  40270e:	f824 2b02 	strh.w	r2, [r4], #2
  402712:	0c12      	lsrs	r2, r2, #16
  402714:	7022      	strb	r2, [r4, #0]
			ili9488_draw_string(5, 350, stingLCD);
  402716:	aa02      	add	r2, sp, #8
  402718:	f44f 71af 	mov.w	r1, #350	; 0x15e
  40271c:	2005      	movs	r0, #5
  40271e:	4b0c      	ldr	r3, [pc, #48]	; (402750 <crono+0x9c>)
  402720:	4798      	blx	r3
			start=false;
  402722:	2200      	movs	r2, #0
  402724:	4b02      	ldr	r3, [pc, #8]	; (402730 <crono+0x7c>)
  402726:	701a      	strb	r2, [r3, #0]
  402728:	e7d0      	b.n	4026cc <crono+0x18>
  40272a:	bf00      	nop
  40272c:	00402665 	.word	0x00402665
  402730:	20400e19 	.word	0x20400e19
  402734:	20400e5c 	.word	0x20400e5c
  402738:	20400e60 	.word	0x20400e60
  40273c:	20400e68 	.word	0x20400e68
  402740:	400e1860 	.word	0x400e1860
  402744:	00401833 	.word	0x00401833
  402748:	004096dc 	.word	0x004096dc
  40274c:	00403215 	.word	0x00403215
  402750:	00401281 	.word	0x00401281
  402754:	004096f0 	.word	0x004096f0

00402758 <main>:


int main(void)
{
  402758:	b580      	push	{r7, lr}
  40275a:	b0a4      	sub	sp, #144	; 0x90
		.charlength   = USART_SERIAL_CHAR_LENGTH,
		.paritytype   = USART_SERIAL_PARITY,
		.stopbits     = USART_SERIAL_STOP_BIT
	};

	sysclk_init(); /* Initialize system clocks */
  40275c:	4b71      	ldr	r3, [pc, #452]	; (402924 <main+0x1cc>)
  40275e:	4798      	blx	r3
	board_init();  /* Initialize board */
  402760:	4b71      	ldr	r3, [pc, #452]	; (402928 <main+0x1d0>)
  402762:	4798      	blx	r3
	g_ili9488_display_opt.ul_width = ILI9488_LCD_WIDTH;
  402764:	4871      	ldr	r0, [pc, #452]	; (40292c <main+0x1d4>)
  402766:	f44f 73a0 	mov.w	r3, #320	; 0x140
  40276a:	6003      	str	r3, [r0, #0]
	g_ili9488_display_opt.ul_height = ILI9488_LCD_HEIGHT;
  40276c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  402770:	6043      	str	r3, [r0, #4]
	g_ili9488_display_opt.foreground_color = COLOR_CONVERT(COLOR_WHITE);
  402772:	4b6f      	ldr	r3, [pc, #444]	; (402930 <main+0x1d8>)
  402774:	6083      	str	r3, [r0, #8]
	g_ili9488_display_opt.background_color = COLOR_CONVERT(COLOR_WHITE);
  402776:	60c3      	str	r3, [r0, #12]
	ili9488_init(&g_ili9488_display_opt);
  402778:	4b6e      	ldr	r3, [pc, #440]	; (402934 <main+0x1dc>)
  40277a:	4798      	blx	r3
	configure_lcd();
	draw_screen();
  40277c:	4b6e      	ldr	r3, [pc, #440]	; (402938 <main+0x1e0>)
  40277e:	4798      	blx	r3
	draw_button(0);
  402780:	2000      	movs	r0, #0
  402782:	4b6e      	ldr	r3, [pc, #440]	; (40293c <main+0x1e4>)
  402784:	4798      	blx	r3
	uint8_t t8_object[] = {
  402786:	4c6e      	ldr	r4, [pc, #440]	; (402940 <main+0x1e8>)
  402788:	ab04      	add	r3, sp, #16
  40278a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
  40278e:	c303      	stmia	r3!, {r0, r1}
  402790:	801a      	strh	r2, [r3, #0]
	uint8_t t9_object[] = {
  402792:	ad13      	add	r5, sp, #76	; 0x4c
  402794:	f104 060c 	add.w	r6, r4, #12
  402798:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  40279a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  40279c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  40279e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  4027a0:	6833      	ldr	r3, [r6, #0]
  4027a2:	602b      	str	r3, [r5, #0]
	uint8_t t46_object[] = {
  4027a4:	ab01      	add	r3, sp, #4
  4027a6:	f104 0230 	add.w	r2, r4, #48	; 0x30
  4027aa:	ca07      	ldmia	r2, {r0, r1, r2}
  4027ac:	c303      	stmia	r3!, {r0, r1}
  4027ae:	701a      	strb	r2, [r3, #0]
	uint8_t t56_object[] = {
  4027b0:	ad0a      	add	r5, sp, #40	; 0x28
  4027b2:	343c      	adds	r4, #60	; 0x3c
  4027b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  4027b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  4027b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  4027ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  4027bc:	6823      	ldr	r3, [r4, #0]
  4027be:	702b      	strb	r3, [r5, #0]
	twihs_master_options_t twi_opt = {
  4027c0:	2400      	movs	r4, #0
  4027c2:	9409      	str	r4, [sp, #36]	; 0x24
  4027c4:	4b5f      	ldr	r3, [pc, #380]	; (402944 <main+0x1ec>)
  4027c6:	9308      	str	r3, [sp, #32]
  4027c8:	264a      	movs	r6, #74	; 0x4a
  4027ca:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
typedef twihs_packet_t twihs_package_t;

static inline uint32_t twihs_master_setup(twihs_master_t p_twihs,
		twihs_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_peripheral_hz();
  4027ce:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 4029ac <main+0x254>
  4027d2:	f8cd 801c 	str.w	r8, [sp, #28]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4027d6:	2013      	movs	r0, #19
  4027d8:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 4029b0 <main+0x258>
  4027dc:	47c8      	blx	r9
#endif		
	} else {
		// Do Nothing
	}
#endif
	return (twihs_master_init(p_twihs, p_opt));
  4027de:	4d5a      	ldr	r5, [pc, #360]	; (402948 <main+0x1f0>)
  4027e0:	a907      	add	r1, sp, #28
  4027e2:	4628      	mov	r0, r5
  4027e4:	4b59      	ldr	r3, [pc, #356]	; (40294c <main+0x1f4>)
  4027e6:	4798      	blx	r3
	status = mxt_init_device(device, MAXTOUCH_TWI_INTERFACE,
  4027e8:	2302      	movs	r3, #2
  4027ea:	4632      	mov	r2, r6
  4027ec:	4629      	mov	r1, r5
  4027ee:	a81c      	add	r0, sp, #112	; 0x70
  4027f0:	4d57      	ldr	r5, [pc, #348]	; (402950 <main+0x1f8>)
  4027f2:	47a8      	blx	r5
	mxt_write_config_reg(device, mxt_get_object_address(device,
  4027f4:	4622      	mov	r2, r4
  4027f6:	2106      	movs	r1, #6
  4027f8:	a81c      	add	r0, sp, #112	; 0x70
  4027fa:	4d56      	ldr	r5, [pc, #344]	; (402954 <main+0x1fc>)
  4027fc:	47a8      	blx	r5
  4027fe:	2201      	movs	r2, #1
  402800:	4601      	mov	r1, r0
  402802:	a81c      	add	r0, sp, #112	; 0x70
  402804:	4e54      	ldr	r6, [pc, #336]	; (402958 <main+0x200>)
  402806:	47b0      	blx	r6
	delay_ms(MXT_RESET_TIME);
  402808:	4854      	ldr	r0, [pc, #336]	; (40295c <main+0x204>)
  40280a:	4b55      	ldr	r3, [pc, #340]	; (402960 <main+0x208>)
  40280c:	4798      	blx	r3
	mxt_write_config_reg(device, mxt_get_object_address(device,
  40280e:	4622      	mov	r2, r4
  402810:	2107      	movs	r1, #7
  402812:	a81c      	add	r0, sp, #112	; 0x70
  402814:	47a8      	blx	r5
  402816:	2220      	movs	r2, #32
  402818:	4601      	mov	r1, r0
  40281a:	a81c      	add	r0, sp, #112	; 0x70
  40281c:	47b0      	blx	r6
	mxt_write_config_reg(device, mxt_get_object_address(device,
  40281e:	4622      	mov	r2, r4
  402820:	2107      	movs	r1, #7
  402822:	a81c      	add	r0, sp, #112	; 0x70
  402824:	47a8      	blx	r5
  402826:	1c41      	adds	r1, r0, #1
  402828:	2210      	movs	r2, #16
  40282a:	b289      	uxth	r1, r1
  40282c:	a81c      	add	r0, sp, #112	; 0x70
  40282e:	47b0      	blx	r6
	mxt_write_config_reg(device, mxt_get_object_address(device,
  402830:	4622      	mov	r2, r4
  402832:	2107      	movs	r1, #7
  402834:	a81c      	add	r0, sp, #112	; 0x70
  402836:	47a8      	blx	r5
  402838:	1c81      	adds	r1, r0, #2
  40283a:	224b      	movs	r2, #75	; 0x4b
  40283c:	b289      	uxth	r1, r1
  40283e:	a81c      	add	r0, sp, #112	; 0x70
  402840:	47b0      	blx	r6
	mxt_write_config_reg(device, mxt_get_object_address(device,
  402842:	4622      	mov	r2, r4
  402844:	2107      	movs	r1, #7
  402846:	a81c      	add	r0, sp, #112	; 0x70
  402848:	47a8      	blx	r5
  40284a:	1cc1      	adds	r1, r0, #3
  40284c:	2284      	movs	r2, #132	; 0x84
  40284e:	b289      	uxth	r1, r1
  402850:	a81c      	add	r0, sp, #112	; 0x70
  402852:	47b0      	blx	r6
	mxt_write_config_object(device, mxt_get_object_address(device,
  402854:	4622      	mov	r2, r4
  402856:	2108      	movs	r1, #8
  402858:	a81c      	add	r0, sp, #112	; 0x70
  40285a:	47a8      	blx	r5
  40285c:	aa04      	add	r2, sp, #16
  40285e:	4601      	mov	r1, r0
  402860:	a81c      	add	r0, sp, #112	; 0x70
  402862:	4f40      	ldr	r7, [pc, #256]	; (402964 <main+0x20c>)
  402864:	47b8      	blx	r7
	mxt_write_config_object(device, mxt_get_object_address(device,
  402866:	4622      	mov	r2, r4
  402868:	2109      	movs	r1, #9
  40286a:	a81c      	add	r0, sp, #112	; 0x70
  40286c:	47a8      	blx	r5
  40286e:	aa13      	add	r2, sp, #76	; 0x4c
  402870:	4601      	mov	r1, r0
  402872:	a81c      	add	r0, sp, #112	; 0x70
  402874:	47b8      	blx	r7
	mxt_write_config_object(device, mxt_get_object_address(device,
  402876:	4622      	mov	r2, r4
  402878:	212e      	movs	r1, #46	; 0x2e
  40287a:	a81c      	add	r0, sp, #112	; 0x70
  40287c:	47a8      	blx	r5
  40287e:	aa01      	add	r2, sp, #4
  402880:	4601      	mov	r1, r0
  402882:	a81c      	add	r0, sp, #112	; 0x70
  402884:	47b8      	blx	r7
	mxt_write_config_object(device, mxt_get_object_address(device,
  402886:	4622      	mov	r2, r4
  402888:	2138      	movs	r1, #56	; 0x38
  40288a:	a81c      	add	r0, sp, #112	; 0x70
  40288c:	47a8      	blx	r5
  40288e:	aa0a      	add	r2, sp, #40	; 0x28
  402890:	4601      	mov	r1, r0
  402892:	a81c      	add	r0, sp, #112	; 0x70
  402894:	47b8      	blx	r7
	mxt_write_config_reg(device, mxt_get_object_address(device,
  402896:	4622      	mov	r2, r4
  402898:	2106      	movs	r1, #6
  40289a:	a81c      	add	r0, sp, #112	; 0x70
  40289c:	47a8      	blx	r5
  40289e:	1c81      	adds	r1, r0, #2
  4028a0:	2201      	movs	r2, #1
  4028a2:	b289      	uxth	r1, r1
  4028a4:	a81c      	add	r0, sp, #112	; 0x70
  4028a6:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  4028a8:	4d2f      	ldr	r5, [pc, #188]	; (402968 <main+0x210>)
  4028aa:	4b30      	ldr	r3, [pc, #192]	; (40296c <main+0x214>)
  4028ac:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  4028ae:	4a30      	ldr	r2, [pc, #192]	; (402970 <main+0x218>)
  4028b0:	4b30      	ldr	r3, [pc, #192]	; (402974 <main+0x21c>)
  4028b2:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4028b4:	4a30      	ldr	r2, [pc, #192]	; (402978 <main+0x220>)
  4028b6:	4b31      	ldr	r3, [pc, #196]	; (40297c <main+0x224>)
  4028b8:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  4028ba:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  4028be:	9313      	str	r3, [sp, #76]	; 0x4c
	usart_settings.char_length = opt->charlength;
  4028c0:	23c0      	movs	r3, #192	; 0xc0
  4028c2:	9314      	str	r3, [sp, #80]	; 0x50
	usart_settings.parity_type = opt->paritytype;
  4028c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4028c8:	9315      	str	r3, [sp, #84]	; 0x54
	usart_settings.stop_bits= opt->stopbits;
  4028ca:	9416      	str	r4, [sp, #88]	; 0x58
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4028cc:	9417      	str	r4, [sp, #92]	; 0x5c
  4028ce:	200e      	movs	r0, #14
  4028d0:	47c8      	blx	r9
		usart_init_rs232(p_usart, &usart_settings,
  4028d2:	4642      	mov	r2, r8
  4028d4:	a913      	add	r1, sp, #76	; 0x4c
  4028d6:	4628      	mov	r0, r5
  4028d8:	4b29      	ldr	r3, [pc, #164]	; (402980 <main+0x228>)
  4028da:	4798      	blx	r3
		usart_enable_tx(p_usart);
  4028dc:	4628      	mov	r0, r5
  4028de:	4b29      	ldr	r3, [pc, #164]	; (402984 <main+0x22c>)
  4028e0:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4028e2:	4628      	mov	r0, r5
  4028e4:	4b28      	ldr	r3, [pc, #160]	; (402988 <main+0x230>)
  4028e6:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4028e8:	4e28      	ldr	r6, [pc, #160]	; (40298c <main+0x234>)
  4028ea:	6833      	ldr	r3, [r6, #0]
  4028ec:	4621      	mov	r1, r4
  4028ee:	6898      	ldr	r0, [r3, #8]
  4028f0:	4d27      	ldr	r5, [pc, #156]	; (402990 <main+0x238>)
  4028f2:	47a8      	blx	r5
	setbuf(stdin, NULL);
  4028f4:	6833      	ldr	r3, [r6, #0]
  4028f6:	4621      	mov	r1, r4
  4028f8:	6858      	ldr	r0, [r3, #4]
  4028fa:	47a8      	blx	r5
	mxt_init(&device);
	
	/* Initialize stdio on USART */
	stdio_serial_init(USART_SERIAL_EXAMPLE, &usart_serial_options);

	printf("\n\rmaXTouch data USART transmitter\n\r");
  4028fc:	4825      	ldr	r0, [pc, #148]	; (402994 <main+0x23c>)
  4028fe:	4b26      	ldr	r3, [pc, #152]	; (402998 <main+0x240>)
  402900:	4798      	blx	r3
		

	while (true) {
		delay_s(1);
  402902:	4e26      	ldr	r6, [pc, #152]	; (40299c <main+0x244>)
  402904:	4d16      	ldr	r5, [pc, #88]	; (402960 <main+0x208>)
		/* Check for any pending messages and run message handler if any
		 * message is found in the queue */
		if (mxt_is_message_pending(&device)) {
  402906:	4c26      	ldr	r4, [pc, #152]	; (4029a0 <main+0x248>)
  402908:	e002      	b.n	402910 <main+0x1b8>
			mxt_handler(&device);
		}
		crono(1);
  40290a:	2001      	movs	r0, #1
  40290c:	4b25      	ldr	r3, [pc, #148]	; (4029a4 <main+0x24c>)
  40290e:	4798      	blx	r3
		delay_s(1);
  402910:	4630      	mov	r0, r6
  402912:	47a8      	blx	r5
		if (mxt_is_message_pending(&device)) {
  402914:	a81c      	add	r0, sp, #112	; 0x70
  402916:	47a0      	blx	r4
  402918:	2800      	cmp	r0, #0
  40291a:	d0f6      	beq.n	40290a <main+0x1b2>
			mxt_handler(&device);
  40291c:	a81c      	add	r0, sp, #112	; 0x70
  40291e:	4b22      	ldr	r3, [pc, #136]	; (4029a8 <main+0x250>)
  402920:	4798      	blx	r3
  402922:	e7f2      	b.n	40290a <main+0x1b2>
  402924:	0040064d 	.word	0x0040064d
  402928:	004009b5 	.word	0x004009b5
  40292c:	20400e6c 	.word	0x20400e6c
  402930:	00fcfcfc 	.word	0x00fcfcfc
  402934:	00400f21 	.word	0x00400f21
  402938:	00402389 	.word	0x00402389
  40293c:	004023b1 	.word	0x004023b1
  402940:	0040967c 	.word	0x0040967c
  402944:	00061a80 	.word	0x00061a80
  402948:	40018000 	.word	0x40018000
  40294c:	00401c01 	.word	0x00401c01
  402950:	004001d5 	.word	0x004001d5
  402954:	0040046d 	.word	0x0040046d
  402958:	00400525 	.word	0x00400525
  40295c:	003228d8 	.word	0x003228d8
  402960:	20400001 	.word	0x20400001
  402964:	004004ad 	.word	0x004004ad
  402968:	40028000 	.word	0x40028000
  40296c:	20400e58 	.word	0x20400e58
  402970:	00402245 	.word	0x00402245
  402974:	20400e54 	.word	0x20400e54
  402978:	00402169 	.word	0x00402169
  40297c:	20400e50 	.word	0x20400e50
  402980:	00401e29 	.word	0x00401e29
  402984:	00401e7d 	.word	0x00401e7d
  402988:	00401e83 	.word	0x00401e83
  40298c:	20400014 	.word	0x20400014
  402990:	00403075 	.word	0x00403075
  402994:	0040970c 	.word	0x0040970c
  402998:	00402a05 	.word	0x00402a05
  40299c:	0303af6b 	.word	0x0303af6b
  4029a0:	0040056d 	.word	0x0040056d
  4029a4:	004026b5 	.word	0x004026b5
  4029a8:	004025a1 	.word	0x004025a1
  4029ac:	08f0d180 	.word	0x08f0d180
  4029b0:	004017f9 	.word	0x004017f9

004029b4 <__libc_init_array>:
  4029b4:	b570      	push	{r4, r5, r6, lr}
  4029b6:	4e0f      	ldr	r6, [pc, #60]	; (4029f4 <__libc_init_array+0x40>)
  4029b8:	4d0f      	ldr	r5, [pc, #60]	; (4029f8 <__libc_init_array+0x44>)
  4029ba:	1b76      	subs	r6, r6, r5
  4029bc:	10b6      	asrs	r6, r6, #2
  4029be:	bf18      	it	ne
  4029c0:	2400      	movne	r4, #0
  4029c2:	d005      	beq.n	4029d0 <__libc_init_array+0x1c>
  4029c4:	3401      	adds	r4, #1
  4029c6:	f855 3b04 	ldr.w	r3, [r5], #4
  4029ca:	4798      	blx	r3
  4029cc:	42a6      	cmp	r6, r4
  4029ce:	d1f9      	bne.n	4029c4 <__libc_init_array+0x10>
  4029d0:	4e0a      	ldr	r6, [pc, #40]	; (4029fc <__libc_init_array+0x48>)
  4029d2:	4d0b      	ldr	r5, [pc, #44]	; (402a00 <__libc_init_array+0x4c>)
  4029d4:	1b76      	subs	r6, r6, r5
  4029d6:	f007 f81b 	bl	409a10 <_init>
  4029da:	10b6      	asrs	r6, r6, #2
  4029dc:	bf18      	it	ne
  4029de:	2400      	movne	r4, #0
  4029e0:	d006      	beq.n	4029f0 <__libc_init_array+0x3c>
  4029e2:	3401      	adds	r4, #1
  4029e4:	f855 3b04 	ldr.w	r3, [r5], #4
  4029e8:	4798      	blx	r3
  4029ea:	42a6      	cmp	r6, r4
  4029ec:	d1f9      	bne.n	4029e2 <__libc_init_array+0x2e>
  4029ee:	bd70      	pop	{r4, r5, r6, pc}
  4029f0:	bd70      	pop	{r4, r5, r6, pc}
  4029f2:	bf00      	nop
  4029f4:	00409a1c 	.word	0x00409a1c
  4029f8:	00409a1c 	.word	0x00409a1c
  4029fc:	00409a24 	.word	0x00409a24
  402a00:	00409a1c 	.word	0x00409a1c

00402a04 <iprintf>:
  402a04:	b40f      	push	{r0, r1, r2, r3}
  402a06:	b500      	push	{lr}
  402a08:	4907      	ldr	r1, [pc, #28]	; (402a28 <iprintf+0x24>)
  402a0a:	b083      	sub	sp, #12
  402a0c:	ab04      	add	r3, sp, #16
  402a0e:	6808      	ldr	r0, [r1, #0]
  402a10:	f853 2b04 	ldr.w	r2, [r3], #4
  402a14:	6881      	ldr	r1, [r0, #8]
  402a16:	9301      	str	r3, [sp, #4]
  402a18:	f001 ff8e 	bl	404938 <_vfiprintf_r>
  402a1c:	b003      	add	sp, #12
  402a1e:	f85d eb04 	ldr.w	lr, [sp], #4
  402a22:	b004      	add	sp, #16
  402a24:	4770      	bx	lr
  402a26:	bf00      	nop
  402a28:	20400014 	.word	0x20400014

00402a2c <malloc>:
  402a2c:	4b02      	ldr	r3, [pc, #8]	; (402a38 <malloc+0xc>)
  402a2e:	4601      	mov	r1, r0
  402a30:	6818      	ldr	r0, [r3, #0]
  402a32:	f000 b803 	b.w	402a3c <_malloc_r>
  402a36:	bf00      	nop
  402a38:	20400014 	.word	0x20400014

00402a3c <_malloc_r>:
  402a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402a40:	f101 060b 	add.w	r6, r1, #11
  402a44:	2e16      	cmp	r6, #22
  402a46:	b083      	sub	sp, #12
  402a48:	4605      	mov	r5, r0
  402a4a:	f240 809e 	bls.w	402b8a <_malloc_r+0x14e>
  402a4e:	f036 0607 	bics.w	r6, r6, #7
  402a52:	f100 80bd 	bmi.w	402bd0 <_malloc_r+0x194>
  402a56:	42b1      	cmp	r1, r6
  402a58:	f200 80ba 	bhi.w	402bd0 <_malloc_r+0x194>
  402a5c:	f000 faec 	bl	403038 <__malloc_lock>
  402a60:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  402a64:	f0c0 8293 	bcc.w	402f8e <_malloc_r+0x552>
  402a68:	0a73      	lsrs	r3, r6, #9
  402a6a:	f000 80b8 	beq.w	402bde <_malloc_r+0x1a2>
  402a6e:	2b04      	cmp	r3, #4
  402a70:	f200 8179 	bhi.w	402d66 <_malloc_r+0x32a>
  402a74:	09b3      	lsrs	r3, r6, #6
  402a76:	f103 0039 	add.w	r0, r3, #57	; 0x39
  402a7a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  402a7e:	00c3      	lsls	r3, r0, #3
  402a80:	4fbf      	ldr	r7, [pc, #764]	; (402d80 <_malloc_r+0x344>)
  402a82:	443b      	add	r3, r7
  402a84:	f1a3 0108 	sub.w	r1, r3, #8
  402a88:	685c      	ldr	r4, [r3, #4]
  402a8a:	42a1      	cmp	r1, r4
  402a8c:	d106      	bne.n	402a9c <_malloc_r+0x60>
  402a8e:	e00c      	b.n	402aaa <_malloc_r+0x6e>
  402a90:	2a00      	cmp	r2, #0
  402a92:	f280 80aa 	bge.w	402bea <_malloc_r+0x1ae>
  402a96:	68e4      	ldr	r4, [r4, #12]
  402a98:	42a1      	cmp	r1, r4
  402a9a:	d006      	beq.n	402aaa <_malloc_r+0x6e>
  402a9c:	6863      	ldr	r3, [r4, #4]
  402a9e:	f023 0303 	bic.w	r3, r3, #3
  402aa2:	1b9a      	subs	r2, r3, r6
  402aa4:	2a0f      	cmp	r2, #15
  402aa6:	ddf3      	ble.n	402a90 <_malloc_r+0x54>
  402aa8:	4670      	mov	r0, lr
  402aaa:	693c      	ldr	r4, [r7, #16]
  402aac:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 402d94 <_malloc_r+0x358>
  402ab0:	4574      	cmp	r4, lr
  402ab2:	f000 81ab 	beq.w	402e0c <_malloc_r+0x3d0>
  402ab6:	6863      	ldr	r3, [r4, #4]
  402ab8:	f023 0303 	bic.w	r3, r3, #3
  402abc:	1b9a      	subs	r2, r3, r6
  402abe:	2a0f      	cmp	r2, #15
  402ac0:	f300 8190 	bgt.w	402de4 <_malloc_r+0x3a8>
  402ac4:	2a00      	cmp	r2, #0
  402ac6:	f8c7 e014 	str.w	lr, [r7, #20]
  402aca:	f8c7 e010 	str.w	lr, [r7, #16]
  402ace:	f280 809d 	bge.w	402c0c <_malloc_r+0x1d0>
  402ad2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402ad6:	f080 8161 	bcs.w	402d9c <_malloc_r+0x360>
  402ada:	08db      	lsrs	r3, r3, #3
  402adc:	f103 0c01 	add.w	ip, r3, #1
  402ae0:	1099      	asrs	r1, r3, #2
  402ae2:	687a      	ldr	r2, [r7, #4]
  402ae4:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  402ae8:	f8c4 8008 	str.w	r8, [r4, #8]
  402aec:	2301      	movs	r3, #1
  402aee:	408b      	lsls	r3, r1
  402af0:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  402af4:	4313      	orrs	r3, r2
  402af6:	3908      	subs	r1, #8
  402af8:	60e1      	str	r1, [r4, #12]
  402afa:	607b      	str	r3, [r7, #4]
  402afc:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  402b00:	f8c8 400c 	str.w	r4, [r8, #12]
  402b04:	1082      	asrs	r2, r0, #2
  402b06:	2401      	movs	r4, #1
  402b08:	4094      	lsls	r4, r2
  402b0a:	429c      	cmp	r4, r3
  402b0c:	f200 808b 	bhi.w	402c26 <_malloc_r+0x1ea>
  402b10:	421c      	tst	r4, r3
  402b12:	d106      	bne.n	402b22 <_malloc_r+0xe6>
  402b14:	f020 0003 	bic.w	r0, r0, #3
  402b18:	0064      	lsls	r4, r4, #1
  402b1a:	421c      	tst	r4, r3
  402b1c:	f100 0004 	add.w	r0, r0, #4
  402b20:	d0fa      	beq.n	402b18 <_malloc_r+0xdc>
  402b22:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  402b26:	46cc      	mov	ip, r9
  402b28:	4680      	mov	r8, r0
  402b2a:	f8dc 300c 	ldr.w	r3, [ip, #12]
  402b2e:	459c      	cmp	ip, r3
  402b30:	d107      	bne.n	402b42 <_malloc_r+0x106>
  402b32:	e16d      	b.n	402e10 <_malloc_r+0x3d4>
  402b34:	2a00      	cmp	r2, #0
  402b36:	f280 817b 	bge.w	402e30 <_malloc_r+0x3f4>
  402b3a:	68db      	ldr	r3, [r3, #12]
  402b3c:	459c      	cmp	ip, r3
  402b3e:	f000 8167 	beq.w	402e10 <_malloc_r+0x3d4>
  402b42:	6859      	ldr	r1, [r3, #4]
  402b44:	f021 0103 	bic.w	r1, r1, #3
  402b48:	1b8a      	subs	r2, r1, r6
  402b4a:	2a0f      	cmp	r2, #15
  402b4c:	ddf2      	ble.n	402b34 <_malloc_r+0xf8>
  402b4e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  402b52:	f8d3 8008 	ldr.w	r8, [r3, #8]
  402b56:	9300      	str	r3, [sp, #0]
  402b58:	199c      	adds	r4, r3, r6
  402b5a:	4628      	mov	r0, r5
  402b5c:	f046 0601 	orr.w	r6, r6, #1
  402b60:	f042 0501 	orr.w	r5, r2, #1
  402b64:	605e      	str	r6, [r3, #4]
  402b66:	f8c8 c00c 	str.w	ip, [r8, #12]
  402b6a:	f8cc 8008 	str.w	r8, [ip, #8]
  402b6e:	617c      	str	r4, [r7, #20]
  402b70:	613c      	str	r4, [r7, #16]
  402b72:	f8c4 e00c 	str.w	lr, [r4, #12]
  402b76:	f8c4 e008 	str.w	lr, [r4, #8]
  402b7a:	6065      	str	r5, [r4, #4]
  402b7c:	505a      	str	r2, [r3, r1]
  402b7e:	f000 fa61 	bl	403044 <__malloc_unlock>
  402b82:	9b00      	ldr	r3, [sp, #0]
  402b84:	f103 0408 	add.w	r4, r3, #8
  402b88:	e01e      	b.n	402bc8 <_malloc_r+0x18c>
  402b8a:	2910      	cmp	r1, #16
  402b8c:	d820      	bhi.n	402bd0 <_malloc_r+0x194>
  402b8e:	f000 fa53 	bl	403038 <__malloc_lock>
  402b92:	2610      	movs	r6, #16
  402b94:	2318      	movs	r3, #24
  402b96:	2002      	movs	r0, #2
  402b98:	4f79      	ldr	r7, [pc, #484]	; (402d80 <_malloc_r+0x344>)
  402b9a:	443b      	add	r3, r7
  402b9c:	f1a3 0208 	sub.w	r2, r3, #8
  402ba0:	685c      	ldr	r4, [r3, #4]
  402ba2:	4294      	cmp	r4, r2
  402ba4:	f000 813d 	beq.w	402e22 <_malloc_r+0x3e6>
  402ba8:	6863      	ldr	r3, [r4, #4]
  402baa:	68e1      	ldr	r1, [r4, #12]
  402bac:	68a6      	ldr	r6, [r4, #8]
  402bae:	f023 0303 	bic.w	r3, r3, #3
  402bb2:	4423      	add	r3, r4
  402bb4:	4628      	mov	r0, r5
  402bb6:	685a      	ldr	r2, [r3, #4]
  402bb8:	60f1      	str	r1, [r6, #12]
  402bba:	f042 0201 	orr.w	r2, r2, #1
  402bbe:	608e      	str	r6, [r1, #8]
  402bc0:	605a      	str	r2, [r3, #4]
  402bc2:	f000 fa3f 	bl	403044 <__malloc_unlock>
  402bc6:	3408      	adds	r4, #8
  402bc8:	4620      	mov	r0, r4
  402bca:	b003      	add	sp, #12
  402bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402bd0:	2400      	movs	r4, #0
  402bd2:	230c      	movs	r3, #12
  402bd4:	4620      	mov	r0, r4
  402bd6:	602b      	str	r3, [r5, #0]
  402bd8:	b003      	add	sp, #12
  402bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402bde:	2040      	movs	r0, #64	; 0x40
  402be0:	f44f 7300 	mov.w	r3, #512	; 0x200
  402be4:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  402be8:	e74a      	b.n	402a80 <_malloc_r+0x44>
  402bea:	4423      	add	r3, r4
  402bec:	68e1      	ldr	r1, [r4, #12]
  402bee:	685a      	ldr	r2, [r3, #4]
  402bf0:	68a6      	ldr	r6, [r4, #8]
  402bf2:	f042 0201 	orr.w	r2, r2, #1
  402bf6:	60f1      	str	r1, [r6, #12]
  402bf8:	4628      	mov	r0, r5
  402bfa:	608e      	str	r6, [r1, #8]
  402bfc:	605a      	str	r2, [r3, #4]
  402bfe:	f000 fa21 	bl	403044 <__malloc_unlock>
  402c02:	3408      	adds	r4, #8
  402c04:	4620      	mov	r0, r4
  402c06:	b003      	add	sp, #12
  402c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402c0c:	4423      	add	r3, r4
  402c0e:	4628      	mov	r0, r5
  402c10:	685a      	ldr	r2, [r3, #4]
  402c12:	f042 0201 	orr.w	r2, r2, #1
  402c16:	605a      	str	r2, [r3, #4]
  402c18:	f000 fa14 	bl	403044 <__malloc_unlock>
  402c1c:	3408      	adds	r4, #8
  402c1e:	4620      	mov	r0, r4
  402c20:	b003      	add	sp, #12
  402c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402c26:	68bc      	ldr	r4, [r7, #8]
  402c28:	6863      	ldr	r3, [r4, #4]
  402c2a:	f023 0803 	bic.w	r8, r3, #3
  402c2e:	45b0      	cmp	r8, r6
  402c30:	d304      	bcc.n	402c3c <_malloc_r+0x200>
  402c32:	eba8 0306 	sub.w	r3, r8, r6
  402c36:	2b0f      	cmp	r3, #15
  402c38:	f300 8085 	bgt.w	402d46 <_malloc_r+0x30a>
  402c3c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 402d98 <_malloc_r+0x35c>
  402c40:	4b50      	ldr	r3, [pc, #320]	; (402d84 <_malloc_r+0x348>)
  402c42:	f8d9 2000 	ldr.w	r2, [r9]
  402c46:	681b      	ldr	r3, [r3, #0]
  402c48:	3201      	adds	r2, #1
  402c4a:	4433      	add	r3, r6
  402c4c:	eb04 0a08 	add.w	sl, r4, r8
  402c50:	f000 8155 	beq.w	402efe <_malloc_r+0x4c2>
  402c54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  402c58:	330f      	adds	r3, #15
  402c5a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  402c5e:	f02b 0b0f 	bic.w	fp, fp, #15
  402c62:	4659      	mov	r1, fp
  402c64:	4628      	mov	r0, r5
  402c66:	f000 f9f3 	bl	403050 <_sbrk_r>
  402c6a:	1c41      	adds	r1, r0, #1
  402c6c:	4602      	mov	r2, r0
  402c6e:	f000 80fc 	beq.w	402e6a <_malloc_r+0x42e>
  402c72:	4582      	cmp	sl, r0
  402c74:	f200 80f7 	bhi.w	402e66 <_malloc_r+0x42a>
  402c78:	4b43      	ldr	r3, [pc, #268]	; (402d88 <_malloc_r+0x34c>)
  402c7a:	6819      	ldr	r1, [r3, #0]
  402c7c:	4459      	add	r1, fp
  402c7e:	6019      	str	r1, [r3, #0]
  402c80:	f000 814d 	beq.w	402f1e <_malloc_r+0x4e2>
  402c84:	f8d9 0000 	ldr.w	r0, [r9]
  402c88:	3001      	adds	r0, #1
  402c8a:	bf1b      	ittet	ne
  402c8c:	eba2 0a0a 	subne.w	sl, r2, sl
  402c90:	4451      	addne	r1, sl
  402c92:	f8c9 2000 	streq.w	r2, [r9]
  402c96:	6019      	strne	r1, [r3, #0]
  402c98:	f012 0107 	ands.w	r1, r2, #7
  402c9c:	f000 8115 	beq.w	402eca <_malloc_r+0x48e>
  402ca0:	f1c1 0008 	rsb	r0, r1, #8
  402ca4:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  402ca8:	4402      	add	r2, r0
  402caa:	3108      	adds	r1, #8
  402cac:	eb02 090b 	add.w	r9, r2, fp
  402cb0:	f3c9 090b 	ubfx	r9, r9, #0, #12
  402cb4:	eba1 0909 	sub.w	r9, r1, r9
  402cb8:	4649      	mov	r1, r9
  402cba:	4628      	mov	r0, r5
  402cbc:	9301      	str	r3, [sp, #4]
  402cbe:	9200      	str	r2, [sp, #0]
  402cc0:	f000 f9c6 	bl	403050 <_sbrk_r>
  402cc4:	1c43      	adds	r3, r0, #1
  402cc6:	e89d 000c 	ldmia.w	sp, {r2, r3}
  402cca:	f000 8143 	beq.w	402f54 <_malloc_r+0x518>
  402cce:	1a80      	subs	r0, r0, r2
  402cd0:	4448      	add	r0, r9
  402cd2:	f040 0001 	orr.w	r0, r0, #1
  402cd6:	6819      	ldr	r1, [r3, #0]
  402cd8:	60ba      	str	r2, [r7, #8]
  402cda:	4449      	add	r1, r9
  402cdc:	42bc      	cmp	r4, r7
  402cde:	6050      	str	r0, [r2, #4]
  402ce0:	6019      	str	r1, [r3, #0]
  402ce2:	d017      	beq.n	402d14 <_malloc_r+0x2d8>
  402ce4:	f1b8 0f0f 	cmp.w	r8, #15
  402ce8:	f240 80fb 	bls.w	402ee2 <_malloc_r+0x4a6>
  402cec:	6860      	ldr	r0, [r4, #4]
  402cee:	f1a8 020c 	sub.w	r2, r8, #12
  402cf2:	f022 0207 	bic.w	r2, r2, #7
  402cf6:	eb04 0e02 	add.w	lr, r4, r2
  402cfa:	f000 0001 	and.w	r0, r0, #1
  402cfe:	f04f 0c05 	mov.w	ip, #5
  402d02:	4310      	orrs	r0, r2
  402d04:	2a0f      	cmp	r2, #15
  402d06:	6060      	str	r0, [r4, #4]
  402d08:	f8ce c004 	str.w	ip, [lr, #4]
  402d0c:	f8ce c008 	str.w	ip, [lr, #8]
  402d10:	f200 8117 	bhi.w	402f42 <_malloc_r+0x506>
  402d14:	4b1d      	ldr	r3, [pc, #116]	; (402d8c <_malloc_r+0x350>)
  402d16:	68bc      	ldr	r4, [r7, #8]
  402d18:	681a      	ldr	r2, [r3, #0]
  402d1a:	4291      	cmp	r1, r2
  402d1c:	bf88      	it	hi
  402d1e:	6019      	strhi	r1, [r3, #0]
  402d20:	4b1b      	ldr	r3, [pc, #108]	; (402d90 <_malloc_r+0x354>)
  402d22:	681a      	ldr	r2, [r3, #0]
  402d24:	4291      	cmp	r1, r2
  402d26:	6862      	ldr	r2, [r4, #4]
  402d28:	bf88      	it	hi
  402d2a:	6019      	strhi	r1, [r3, #0]
  402d2c:	f022 0203 	bic.w	r2, r2, #3
  402d30:	4296      	cmp	r6, r2
  402d32:	eba2 0306 	sub.w	r3, r2, r6
  402d36:	d801      	bhi.n	402d3c <_malloc_r+0x300>
  402d38:	2b0f      	cmp	r3, #15
  402d3a:	dc04      	bgt.n	402d46 <_malloc_r+0x30a>
  402d3c:	4628      	mov	r0, r5
  402d3e:	f000 f981 	bl	403044 <__malloc_unlock>
  402d42:	2400      	movs	r4, #0
  402d44:	e740      	b.n	402bc8 <_malloc_r+0x18c>
  402d46:	19a2      	adds	r2, r4, r6
  402d48:	f043 0301 	orr.w	r3, r3, #1
  402d4c:	f046 0601 	orr.w	r6, r6, #1
  402d50:	6066      	str	r6, [r4, #4]
  402d52:	4628      	mov	r0, r5
  402d54:	60ba      	str	r2, [r7, #8]
  402d56:	6053      	str	r3, [r2, #4]
  402d58:	f000 f974 	bl	403044 <__malloc_unlock>
  402d5c:	3408      	adds	r4, #8
  402d5e:	4620      	mov	r0, r4
  402d60:	b003      	add	sp, #12
  402d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402d66:	2b14      	cmp	r3, #20
  402d68:	d971      	bls.n	402e4e <_malloc_r+0x412>
  402d6a:	2b54      	cmp	r3, #84	; 0x54
  402d6c:	f200 80a3 	bhi.w	402eb6 <_malloc_r+0x47a>
  402d70:	0b33      	lsrs	r3, r6, #12
  402d72:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  402d76:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  402d7a:	00c3      	lsls	r3, r0, #3
  402d7c:	e680      	b.n	402a80 <_malloc_r+0x44>
  402d7e:	bf00      	nop
  402d80:	20400440 	.word	0x20400440
  402d84:	20400e4c 	.word	0x20400e4c
  402d88:	20400e1c 	.word	0x20400e1c
  402d8c:	20400e44 	.word	0x20400e44
  402d90:	20400e48 	.word	0x20400e48
  402d94:	20400448 	.word	0x20400448
  402d98:	20400848 	.word	0x20400848
  402d9c:	0a5a      	lsrs	r2, r3, #9
  402d9e:	2a04      	cmp	r2, #4
  402da0:	d95b      	bls.n	402e5a <_malloc_r+0x41e>
  402da2:	2a14      	cmp	r2, #20
  402da4:	f200 80ae 	bhi.w	402f04 <_malloc_r+0x4c8>
  402da8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  402dac:	00c9      	lsls	r1, r1, #3
  402dae:	325b      	adds	r2, #91	; 0x5b
  402db0:	eb07 0c01 	add.w	ip, r7, r1
  402db4:	5879      	ldr	r1, [r7, r1]
  402db6:	f1ac 0c08 	sub.w	ip, ip, #8
  402dba:	458c      	cmp	ip, r1
  402dbc:	f000 8088 	beq.w	402ed0 <_malloc_r+0x494>
  402dc0:	684a      	ldr	r2, [r1, #4]
  402dc2:	f022 0203 	bic.w	r2, r2, #3
  402dc6:	4293      	cmp	r3, r2
  402dc8:	d273      	bcs.n	402eb2 <_malloc_r+0x476>
  402dca:	6889      	ldr	r1, [r1, #8]
  402dcc:	458c      	cmp	ip, r1
  402dce:	d1f7      	bne.n	402dc0 <_malloc_r+0x384>
  402dd0:	f8dc 200c 	ldr.w	r2, [ip, #12]
  402dd4:	687b      	ldr	r3, [r7, #4]
  402dd6:	60e2      	str	r2, [r4, #12]
  402dd8:	f8c4 c008 	str.w	ip, [r4, #8]
  402ddc:	6094      	str	r4, [r2, #8]
  402dde:	f8cc 400c 	str.w	r4, [ip, #12]
  402de2:	e68f      	b.n	402b04 <_malloc_r+0xc8>
  402de4:	19a1      	adds	r1, r4, r6
  402de6:	f046 0c01 	orr.w	ip, r6, #1
  402dea:	f042 0601 	orr.w	r6, r2, #1
  402dee:	f8c4 c004 	str.w	ip, [r4, #4]
  402df2:	4628      	mov	r0, r5
  402df4:	6179      	str	r1, [r7, #20]
  402df6:	6139      	str	r1, [r7, #16]
  402df8:	f8c1 e00c 	str.w	lr, [r1, #12]
  402dfc:	f8c1 e008 	str.w	lr, [r1, #8]
  402e00:	604e      	str	r6, [r1, #4]
  402e02:	50e2      	str	r2, [r4, r3]
  402e04:	f000 f91e 	bl	403044 <__malloc_unlock>
  402e08:	3408      	adds	r4, #8
  402e0a:	e6dd      	b.n	402bc8 <_malloc_r+0x18c>
  402e0c:	687b      	ldr	r3, [r7, #4]
  402e0e:	e679      	b.n	402b04 <_malloc_r+0xc8>
  402e10:	f108 0801 	add.w	r8, r8, #1
  402e14:	f018 0f03 	tst.w	r8, #3
  402e18:	f10c 0c08 	add.w	ip, ip, #8
  402e1c:	f47f ae85 	bne.w	402b2a <_malloc_r+0xee>
  402e20:	e02d      	b.n	402e7e <_malloc_r+0x442>
  402e22:	68dc      	ldr	r4, [r3, #12]
  402e24:	42a3      	cmp	r3, r4
  402e26:	bf08      	it	eq
  402e28:	3002      	addeq	r0, #2
  402e2a:	f43f ae3e 	beq.w	402aaa <_malloc_r+0x6e>
  402e2e:	e6bb      	b.n	402ba8 <_malloc_r+0x16c>
  402e30:	4419      	add	r1, r3
  402e32:	461c      	mov	r4, r3
  402e34:	684a      	ldr	r2, [r1, #4]
  402e36:	68db      	ldr	r3, [r3, #12]
  402e38:	f854 6f08 	ldr.w	r6, [r4, #8]!
  402e3c:	f042 0201 	orr.w	r2, r2, #1
  402e40:	604a      	str	r2, [r1, #4]
  402e42:	4628      	mov	r0, r5
  402e44:	60f3      	str	r3, [r6, #12]
  402e46:	609e      	str	r6, [r3, #8]
  402e48:	f000 f8fc 	bl	403044 <__malloc_unlock>
  402e4c:	e6bc      	b.n	402bc8 <_malloc_r+0x18c>
  402e4e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  402e52:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  402e56:	00c3      	lsls	r3, r0, #3
  402e58:	e612      	b.n	402a80 <_malloc_r+0x44>
  402e5a:	099a      	lsrs	r2, r3, #6
  402e5c:	f102 0139 	add.w	r1, r2, #57	; 0x39
  402e60:	00c9      	lsls	r1, r1, #3
  402e62:	3238      	adds	r2, #56	; 0x38
  402e64:	e7a4      	b.n	402db0 <_malloc_r+0x374>
  402e66:	42bc      	cmp	r4, r7
  402e68:	d054      	beq.n	402f14 <_malloc_r+0x4d8>
  402e6a:	68bc      	ldr	r4, [r7, #8]
  402e6c:	6862      	ldr	r2, [r4, #4]
  402e6e:	f022 0203 	bic.w	r2, r2, #3
  402e72:	e75d      	b.n	402d30 <_malloc_r+0x2f4>
  402e74:	f859 3908 	ldr.w	r3, [r9], #-8
  402e78:	4599      	cmp	r9, r3
  402e7a:	f040 8086 	bne.w	402f8a <_malloc_r+0x54e>
  402e7e:	f010 0f03 	tst.w	r0, #3
  402e82:	f100 30ff 	add.w	r0, r0, #4294967295
  402e86:	d1f5      	bne.n	402e74 <_malloc_r+0x438>
  402e88:	687b      	ldr	r3, [r7, #4]
  402e8a:	ea23 0304 	bic.w	r3, r3, r4
  402e8e:	607b      	str	r3, [r7, #4]
  402e90:	0064      	lsls	r4, r4, #1
  402e92:	429c      	cmp	r4, r3
  402e94:	f63f aec7 	bhi.w	402c26 <_malloc_r+0x1ea>
  402e98:	2c00      	cmp	r4, #0
  402e9a:	f43f aec4 	beq.w	402c26 <_malloc_r+0x1ea>
  402e9e:	421c      	tst	r4, r3
  402ea0:	4640      	mov	r0, r8
  402ea2:	f47f ae3e 	bne.w	402b22 <_malloc_r+0xe6>
  402ea6:	0064      	lsls	r4, r4, #1
  402ea8:	421c      	tst	r4, r3
  402eaa:	f100 0004 	add.w	r0, r0, #4
  402eae:	d0fa      	beq.n	402ea6 <_malloc_r+0x46a>
  402eb0:	e637      	b.n	402b22 <_malloc_r+0xe6>
  402eb2:	468c      	mov	ip, r1
  402eb4:	e78c      	b.n	402dd0 <_malloc_r+0x394>
  402eb6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  402eba:	d815      	bhi.n	402ee8 <_malloc_r+0x4ac>
  402ebc:	0bf3      	lsrs	r3, r6, #15
  402ebe:	f103 0078 	add.w	r0, r3, #120	; 0x78
  402ec2:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  402ec6:	00c3      	lsls	r3, r0, #3
  402ec8:	e5da      	b.n	402a80 <_malloc_r+0x44>
  402eca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  402ece:	e6ed      	b.n	402cac <_malloc_r+0x270>
  402ed0:	687b      	ldr	r3, [r7, #4]
  402ed2:	1092      	asrs	r2, r2, #2
  402ed4:	2101      	movs	r1, #1
  402ed6:	fa01 f202 	lsl.w	r2, r1, r2
  402eda:	4313      	orrs	r3, r2
  402edc:	607b      	str	r3, [r7, #4]
  402ede:	4662      	mov	r2, ip
  402ee0:	e779      	b.n	402dd6 <_malloc_r+0x39a>
  402ee2:	2301      	movs	r3, #1
  402ee4:	6053      	str	r3, [r2, #4]
  402ee6:	e729      	b.n	402d3c <_malloc_r+0x300>
  402ee8:	f240 5254 	movw	r2, #1364	; 0x554
  402eec:	4293      	cmp	r3, r2
  402eee:	d822      	bhi.n	402f36 <_malloc_r+0x4fa>
  402ef0:	0cb3      	lsrs	r3, r6, #18
  402ef2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  402ef6:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  402efa:	00c3      	lsls	r3, r0, #3
  402efc:	e5c0      	b.n	402a80 <_malloc_r+0x44>
  402efe:	f103 0b10 	add.w	fp, r3, #16
  402f02:	e6ae      	b.n	402c62 <_malloc_r+0x226>
  402f04:	2a54      	cmp	r2, #84	; 0x54
  402f06:	d829      	bhi.n	402f5c <_malloc_r+0x520>
  402f08:	0b1a      	lsrs	r2, r3, #12
  402f0a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  402f0e:	00c9      	lsls	r1, r1, #3
  402f10:	326e      	adds	r2, #110	; 0x6e
  402f12:	e74d      	b.n	402db0 <_malloc_r+0x374>
  402f14:	4b20      	ldr	r3, [pc, #128]	; (402f98 <_malloc_r+0x55c>)
  402f16:	6819      	ldr	r1, [r3, #0]
  402f18:	4459      	add	r1, fp
  402f1a:	6019      	str	r1, [r3, #0]
  402f1c:	e6b2      	b.n	402c84 <_malloc_r+0x248>
  402f1e:	f3ca 000b 	ubfx	r0, sl, #0, #12
  402f22:	2800      	cmp	r0, #0
  402f24:	f47f aeae 	bne.w	402c84 <_malloc_r+0x248>
  402f28:	eb08 030b 	add.w	r3, r8, fp
  402f2c:	68ba      	ldr	r2, [r7, #8]
  402f2e:	f043 0301 	orr.w	r3, r3, #1
  402f32:	6053      	str	r3, [r2, #4]
  402f34:	e6ee      	b.n	402d14 <_malloc_r+0x2d8>
  402f36:	207f      	movs	r0, #127	; 0x7f
  402f38:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  402f3c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  402f40:	e59e      	b.n	402a80 <_malloc_r+0x44>
  402f42:	f104 0108 	add.w	r1, r4, #8
  402f46:	4628      	mov	r0, r5
  402f48:	9300      	str	r3, [sp, #0]
  402f4a:	f003 fdd1 	bl	406af0 <_free_r>
  402f4e:	9b00      	ldr	r3, [sp, #0]
  402f50:	6819      	ldr	r1, [r3, #0]
  402f52:	e6df      	b.n	402d14 <_malloc_r+0x2d8>
  402f54:	2001      	movs	r0, #1
  402f56:	f04f 0900 	mov.w	r9, #0
  402f5a:	e6bc      	b.n	402cd6 <_malloc_r+0x29a>
  402f5c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  402f60:	d805      	bhi.n	402f6e <_malloc_r+0x532>
  402f62:	0bda      	lsrs	r2, r3, #15
  402f64:	f102 0178 	add.w	r1, r2, #120	; 0x78
  402f68:	00c9      	lsls	r1, r1, #3
  402f6a:	3277      	adds	r2, #119	; 0x77
  402f6c:	e720      	b.n	402db0 <_malloc_r+0x374>
  402f6e:	f240 5154 	movw	r1, #1364	; 0x554
  402f72:	428a      	cmp	r2, r1
  402f74:	d805      	bhi.n	402f82 <_malloc_r+0x546>
  402f76:	0c9a      	lsrs	r2, r3, #18
  402f78:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  402f7c:	00c9      	lsls	r1, r1, #3
  402f7e:	327c      	adds	r2, #124	; 0x7c
  402f80:	e716      	b.n	402db0 <_malloc_r+0x374>
  402f82:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  402f86:	227e      	movs	r2, #126	; 0x7e
  402f88:	e712      	b.n	402db0 <_malloc_r+0x374>
  402f8a:	687b      	ldr	r3, [r7, #4]
  402f8c:	e780      	b.n	402e90 <_malloc_r+0x454>
  402f8e:	08f0      	lsrs	r0, r6, #3
  402f90:	f106 0308 	add.w	r3, r6, #8
  402f94:	e600      	b.n	402b98 <_malloc_r+0x15c>
  402f96:	bf00      	nop
  402f98:	20400e1c 	.word	0x20400e1c

00402f9c <memset>:
  402f9c:	b470      	push	{r4, r5, r6}
  402f9e:	0786      	lsls	r6, r0, #30
  402fa0:	d046      	beq.n	403030 <memset+0x94>
  402fa2:	1e54      	subs	r4, r2, #1
  402fa4:	2a00      	cmp	r2, #0
  402fa6:	d041      	beq.n	40302c <memset+0x90>
  402fa8:	b2ca      	uxtb	r2, r1
  402faa:	4603      	mov	r3, r0
  402fac:	e002      	b.n	402fb4 <memset+0x18>
  402fae:	f114 34ff 	adds.w	r4, r4, #4294967295
  402fb2:	d33b      	bcc.n	40302c <memset+0x90>
  402fb4:	f803 2b01 	strb.w	r2, [r3], #1
  402fb8:	079d      	lsls	r5, r3, #30
  402fba:	d1f8      	bne.n	402fae <memset+0x12>
  402fbc:	2c03      	cmp	r4, #3
  402fbe:	d92e      	bls.n	40301e <memset+0x82>
  402fc0:	b2cd      	uxtb	r5, r1
  402fc2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  402fc6:	2c0f      	cmp	r4, #15
  402fc8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  402fcc:	d919      	bls.n	403002 <memset+0x66>
  402fce:	f103 0210 	add.w	r2, r3, #16
  402fd2:	4626      	mov	r6, r4
  402fd4:	3e10      	subs	r6, #16
  402fd6:	2e0f      	cmp	r6, #15
  402fd8:	f842 5c10 	str.w	r5, [r2, #-16]
  402fdc:	f842 5c0c 	str.w	r5, [r2, #-12]
  402fe0:	f842 5c08 	str.w	r5, [r2, #-8]
  402fe4:	f842 5c04 	str.w	r5, [r2, #-4]
  402fe8:	f102 0210 	add.w	r2, r2, #16
  402fec:	d8f2      	bhi.n	402fd4 <memset+0x38>
  402fee:	f1a4 0210 	sub.w	r2, r4, #16
  402ff2:	f022 020f 	bic.w	r2, r2, #15
  402ff6:	f004 040f 	and.w	r4, r4, #15
  402ffa:	3210      	adds	r2, #16
  402ffc:	2c03      	cmp	r4, #3
  402ffe:	4413      	add	r3, r2
  403000:	d90d      	bls.n	40301e <memset+0x82>
  403002:	461e      	mov	r6, r3
  403004:	4622      	mov	r2, r4
  403006:	3a04      	subs	r2, #4
  403008:	2a03      	cmp	r2, #3
  40300a:	f846 5b04 	str.w	r5, [r6], #4
  40300e:	d8fa      	bhi.n	403006 <memset+0x6a>
  403010:	1f22      	subs	r2, r4, #4
  403012:	f022 0203 	bic.w	r2, r2, #3
  403016:	3204      	adds	r2, #4
  403018:	4413      	add	r3, r2
  40301a:	f004 0403 	and.w	r4, r4, #3
  40301e:	b12c      	cbz	r4, 40302c <memset+0x90>
  403020:	b2c9      	uxtb	r1, r1
  403022:	441c      	add	r4, r3
  403024:	f803 1b01 	strb.w	r1, [r3], #1
  403028:	429c      	cmp	r4, r3
  40302a:	d1fb      	bne.n	403024 <memset+0x88>
  40302c:	bc70      	pop	{r4, r5, r6}
  40302e:	4770      	bx	lr
  403030:	4614      	mov	r4, r2
  403032:	4603      	mov	r3, r0
  403034:	e7c2      	b.n	402fbc <memset+0x20>
  403036:	bf00      	nop

00403038 <__malloc_lock>:
  403038:	4801      	ldr	r0, [pc, #4]	; (403040 <__malloc_lock+0x8>)
  40303a:	f004 b801 	b.w	407040 <__retarget_lock_acquire_recursive>
  40303e:	bf00      	nop
  403040:	20400e8c 	.word	0x20400e8c

00403044 <__malloc_unlock>:
  403044:	4801      	ldr	r0, [pc, #4]	; (40304c <__malloc_unlock+0x8>)
  403046:	f003 bffd 	b.w	407044 <__retarget_lock_release_recursive>
  40304a:	bf00      	nop
  40304c:	20400e8c 	.word	0x20400e8c

00403050 <_sbrk_r>:
  403050:	b538      	push	{r3, r4, r5, lr}
  403052:	4c07      	ldr	r4, [pc, #28]	; (403070 <_sbrk_r+0x20>)
  403054:	2300      	movs	r3, #0
  403056:	4605      	mov	r5, r0
  403058:	4608      	mov	r0, r1
  40305a:	6023      	str	r3, [r4, #0]
  40305c:	f7ff f85c 	bl	402118 <_sbrk>
  403060:	1c43      	adds	r3, r0, #1
  403062:	d000      	beq.n	403066 <_sbrk_r+0x16>
  403064:	bd38      	pop	{r3, r4, r5, pc}
  403066:	6823      	ldr	r3, [r4, #0]
  403068:	2b00      	cmp	r3, #0
  40306a:	d0fb      	beq.n	403064 <_sbrk_r+0x14>
  40306c:	602b      	str	r3, [r5, #0]
  40306e:	bd38      	pop	{r3, r4, r5, pc}
  403070:	20400ea0 	.word	0x20400ea0

00403074 <setbuf>:
  403074:	2900      	cmp	r1, #0
  403076:	bf0c      	ite	eq
  403078:	2202      	moveq	r2, #2
  40307a:	2200      	movne	r2, #0
  40307c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403080:	f000 b800 	b.w	403084 <setvbuf>

00403084 <setvbuf>:
  403084:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403088:	4c61      	ldr	r4, [pc, #388]	; (403210 <setvbuf+0x18c>)
  40308a:	6825      	ldr	r5, [r4, #0]
  40308c:	b083      	sub	sp, #12
  40308e:	4604      	mov	r4, r0
  403090:	460f      	mov	r7, r1
  403092:	4690      	mov	r8, r2
  403094:	461e      	mov	r6, r3
  403096:	b115      	cbz	r5, 40309e <setvbuf+0x1a>
  403098:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40309a:	2b00      	cmp	r3, #0
  40309c:	d064      	beq.n	403168 <setvbuf+0xe4>
  40309e:	f1b8 0f02 	cmp.w	r8, #2
  4030a2:	d006      	beq.n	4030b2 <setvbuf+0x2e>
  4030a4:	f1b8 0f01 	cmp.w	r8, #1
  4030a8:	f200 809f 	bhi.w	4031ea <setvbuf+0x166>
  4030ac:	2e00      	cmp	r6, #0
  4030ae:	f2c0 809c 	blt.w	4031ea <setvbuf+0x166>
  4030b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4030b4:	07d8      	lsls	r0, r3, #31
  4030b6:	d534      	bpl.n	403122 <setvbuf+0x9e>
  4030b8:	4621      	mov	r1, r4
  4030ba:	4628      	mov	r0, r5
  4030bc:	f003 fb9a 	bl	4067f4 <_fflush_r>
  4030c0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4030c2:	b141      	cbz	r1, 4030d6 <setvbuf+0x52>
  4030c4:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4030c8:	4299      	cmp	r1, r3
  4030ca:	d002      	beq.n	4030d2 <setvbuf+0x4e>
  4030cc:	4628      	mov	r0, r5
  4030ce:	f003 fd0f 	bl	406af0 <_free_r>
  4030d2:	2300      	movs	r3, #0
  4030d4:	6323      	str	r3, [r4, #48]	; 0x30
  4030d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4030da:	2200      	movs	r2, #0
  4030dc:	61a2      	str	r2, [r4, #24]
  4030de:	6062      	str	r2, [r4, #4]
  4030e0:	061a      	lsls	r2, r3, #24
  4030e2:	d43a      	bmi.n	40315a <setvbuf+0xd6>
  4030e4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4030e8:	f023 0303 	bic.w	r3, r3, #3
  4030ec:	f1b8 0f02 	cmp.w	r8, #2
  4030f0:	81a3      	strh	r3, [r4, #12]
  4030f2:	d01d      	beq.n	403130 <setvbuf+0xac>
  4030f4:	ab01      	add	r3, sp, #4
  4030f6:	466a      	mov	r2, sp
  4030f8:	4621      	mov	r1, r4
  4030fa:	4628      	mov	r0, r5
  4030fc:	f003 ffa4 	bl	407048 <__swhatbuf_r>
  403100:	89a3      	ldrh	r3, [r4, #12]
  403102:	4318      	orrs	r0, r3
  403104:	81a0      	strh	r0, [r4, #12]
  403106:	2e00      	cmp	r6, #0
  403108:	d132      	bne.n	403170 <setvbuf+0xec>
  40310a:	9e00      	ldr	r6, [sp, #0]
  40310c:	4630      	mov	r0, r6
  40310e:	f7ff fc8d 	bl	402a2c <malloc>
  403112:	4607      	mov	r7, r0
  403114:	2800      	cmp	r0, #0
  403116:	d06b      	beq.n	4031f0 <setvbuf+0x16c>
  403118:	89a3      	ldrh	r3, [r4, #12]
  40311a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40311e:	81a3      	strh	r3, [r4, #12]
  403120:	e028      	b.n	403174 <setvbuf+0xf0>
  403122:	89a3      	ldrh	r3, [r4, #12]
  403124:	0599      	lsls	r1, r3, #22
  403126:	d4c7      	bmi.n	4030b8 <setvbuf+0x34>
  403128:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40312a:	f003 ff89 	bl	407040 <__retarget_lock_acquire_recursive>
  40312e:	e7c3      	b.n	4030b8 <setvbuf+0x34>
  403130:	2500      	movs	r5, #0
  403132:	6e61      	ldr	r1, [r4, #100]	; 0x64
  403134:	2600      	movs	r6, #0
  403136:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40313a:	f043 0302 	orr.w	r3, r3, #2
  40313e:	2001      	movs	r0, #1
  403140:	60a6      	str	r6, [r4, #8]
  403142:	07ce      	lsls	r6, r1, #31
  403144:	81a3      	strh	r3, [r4, #12]
  403146:	6022      	str	r2, [r4, #0]
  403148:	6122      	str	r2, [r4, #16]
  40314a:	6160      	str	r0, [r4, #20]
  40314c:	d401      	bmi.n	403152 <setvbuf+0xce>
  40314e:	0598      	lsls	r0, r3, #22
  403150:	d53e      	bpl.n	4031d0 <setvbuf+0x14c>
  403152:	4628      	mov	r0, r5
  403154:	b003      	add	sp, #12
  403156:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40315a:	6921      	ldr	r1, [r4, #16]
  40315c:	4628      	mov	r0, r5
  40315e:	f003 fcc7 	bl	406af0 <_free_r>
  403162:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403166:	e7bd      	b.n	4030e4 <setvbuf+0x60>
  403168:	4628      	mov	r0, r5
  40316a:	f003 fb9b 	bl	4068a4 <__sinit>
  40316e:	e796      	b.n	40309e <setvbuf+0x1a>
  403170:	2f00      	cmp	r7, #0
  403172:	d0cb      	beq.n	40310c <setvbuf+0x88>
  403174:	6bab      	ldr	r3, [r5, #56]	; 0x38
  403176:	2b00      	cmp	r3, #0
  403178:	d033      	beq.n	4031e2 <setvbuf+0x15e>
  40317a:	9b00      	ldr	r3, [sp, #0]
  40317c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403180:	6027      	str	r7, [r4, #0]
  403182:	429e      	cmp	r6, r3
  403184:	bf1c      	itt	ne
  403186:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  40318a:	81a2      	strhne	r2, [r4, #12]
  40318c:	f1b8 0f01 	cmp.w	r8, #1
  403190:	bf04      	itt	eq
  403192:	f042 0201 	orreq.w	r2, r2, #1
  403196:	81a2      	strheq	r2, [r4, #12]
  403198:	b292      	uxth	r2, r2
  40319a:	f012 0308 	ands.w	r3, r2, #8
  40319e:	6127      	str	r7, [r4, #16]
  4031a0:	6166      	str	r6, [r4, #20]
  4031a2:	d00e      	beq.n	4031c2 <setvbuf+0x13e>
  4031a4:	07d1      	lsls	r1, r2, #31
  4031a6:	d51a      	bpl.n	4031de <setvbuf+0x15a>
  4031a8:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4031aa:	4276      	negs	r6, r6
  4031ac:	2300      	movs	r3, #0
  4031ae:	f015 0501 	ands.w	r5, r5, #1
  4031b2:	61a6      	str	r6, [r4, #24]
  4031b4:	60a3      	str	r3, [r4, #8]
  4031b6:	d009      	beq.n	4031cc <setvbuf+0x148>
  4031b8:	2500      	movs	r5, #0
  4031ba:	4628      	mov	r0, r5
  4031bc:	b003      	add	sp, #12
  4031be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4031c2:	60a3      	str	r3, [r4, #8]
  4031c4:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4031c6:	f015 0501 	ands.w	r5, r5, #1
  4031ca:	d1f5      	bne.n	4031b8 <setvbuf+0x134>
  4031cc:	0593      	lsls	r3, r2, #22
  4031ce:	d4c0      	bmi.n	403152 <setvbuf+0xce>
  4031d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4031d2:	f003 ff37 	bl	407044 <__retarget_lock_release_recursive>
  4031d6:	4628      	mov	r0, r5
  4031d8:	b003      	add	sp, #12
  4031da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4031de:	60a6      	str	r6, [r4, #8]
  4031e0:	e7f0      	b.n	4031c4 <setvbuf+0x140>
  4031e2:	4628      	mov	r0, r5
  4031e4:	f003 fb5e 	bl	4068a4 <__sinit>
  4031e8:	e7c7      	b.n	40317a <setvbuf+0xf6>
  4031ea:	f04f 35ff 	mov.w	r5, #4294967295
  4031ee:	e7b0      	b.n	403152 <setvbuf+0xce>
  4031f0:	f8dd 9000 	ldr.w	r9, [sp]
  4031f4:	45b1      	cmp	r9, r6
  4031f6:	d004      	beq.n	403202 <setvbuf+0x17e>
  4031f8:	4648      	mov	r0, r9
  4031fa:	f7ff fc17 	bl	402a2c <malloc>
  4031fe:	4607      	mov	r7, r0
  403200:	b920      	cbnz	r0, 40320c <setvbuf+0x188>
  403202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403206:	f04f 35ff 	mov.w	r5, #4294967295
  40320a:	e792      	b.n	403132 <setvbuf+0xae>
  40320c:	464e      	mov	r6, r9
  40320e:	e783      	b.n	403118 <setvbuf+0x94>
  403210:	20400014 	.word	0x20400014

00403214 <sprintf>:
  403214:	b40e      	push	{r1, r2, r3}
  403216:	b5f0      	push	{r4, r5, r6, r7, lr}
  403218:	b09c      	sub	sp, #112	; 0x70
  40321a:	ab21      	add	r3, sp, #132	; 0x84
  40321c:	490f      	ldr	r1, [pc, #60]	; (40325c <sprintf+0x48>)
  40321e:	f853 2b04 	ldr.w	r2, [r3], #4
  403222:	9301      	str	r3, [sp, #4]
  403224:	4605      	mov	r5, r0
  403226:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  40322a:	6808      	ldr	r0, [r1, #0]
  40322c:	9502      	str	r5, [sp, #8]
  40322e:	f44f 7702 	mov.w	r7, #520	; 0x208
  403232:	f64f 76ff 	movw	r6, #65535	; 0xffff
  403236:	a902      	add	r1, sp, #8
  403238:	9506      	str	r5, [sp, #24]
  40323a:	f8ad 7014 	strh.w	r7, [sp, #20]
  40323e:	9404      	str	r4, [sp, #16]
  403240:	9407      	str	r4, [sp, #28]
  403242:	f8ad 6016 	strh.w	r6, [sp, #22]
  403246:	f000 f909 	bl	40345c <_svfprintf_r>
  40324a:	9b02      	ldr	r3, [sp, #8]
  40324c:	2200      	movs	r2, #0
  40324e:	701a      	strb	r2, [r3, #0]
  403250:	b01c      	add	sp, #112	; 0x70
  403252:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  403256:	b003      	add	sp, #12
  403258:	4770      	bx	lr
  40325a:	bf00      	nop
  40325c:	20400014 	.word	0x20400014

00403260 <strcat>:
  403260:	0783      	lsls	r3, r0, #30
  403262:	b510      	push	{r4, lr}
  403264:	4604      	mov	r4, r0
  403266:	d110      	bne.n	40328a <strcat+0x2a>
  403268:	6802      	ldr	r2, [r0, #0]
  40326a:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
  40326e:	ea23 0302 	bic.w	r3, r3, r2
  403272:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  403276:	d108      	bne.n	40328a <strcat+0x2a>
  403278:	f850 2f04 	ldr.w	r2, [r0, #4]!
  40327c:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
  403280:	ea23 0302 	bic.w	r3, r3, r2
  403284:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  403288:	d0f6      	beq.n	403278 <strcat+0x18>
  40328a:	7803      	ldrb	r3, [r0, #0]
  40328c:	b11b      	cbz	r3, 403296 <strcat+0x36>
  40328e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  403292:	2b00      	cmp	r3, #0
  403294:	d1fb      	bne.n	40328e <strcat+0x2e>
  403296:	f000 f803 	bl	4032a0 <strcpy>
  40329a:	4620      	mov	r0, r4
  40329c:	bd10      	pop	{r4, pc}
  40329e:	bf00      	nop

004032a0 <strcpy>:
  4032a0:	ea80 0201 	eor.w	r2, r0, r1
  4032a4:	4684      	mov	ip, r0
  4032a6:	f012 0f03 	tst.w	r2, #3
  4032aa:	d14f      	bne.n	40334c <strcpy+0xac>
  4032ac:	f011 0f03 	tst.w	r1, #3
  4032b0:	d132      	bne.n	403318 <strcpy+0x78>
  4032b2:	f84d 4d04 	str.w	r4, [sp, #-4]!
  4032b6:	f011 0f04 	tst.w	r1, #4
  4032ba:	f851 3b04 	ldr.w	r3, [r1], #4
  4032be:	d00b      	beq.n	4032d8 <strcpy+0x38>
  4032c0:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  4032c4:	439a      	bics	r2, r3
  4032c6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4032ca:	bf04      	itt	eq
  4032cc:	f84c 3b04 	streq.w	r3, [ip], #4
  4032d0:	f851 3b04 	ldreq.w	r3, [r1], #4
  4032d4:	d116      	bne.n	403304 <strcpy+0x64>
  4032d6:	bf00      	nop
  4032d8:	f851 4b04 	ldr.w	r4, [r1], #4
  4032dc:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  4032e0:	439a      	bics	r2, r3
  4032e2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4032e6:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  4032ea:	d10b      	bne.n	403304 <strcpy+0x64>
  4032ec:	f84c 3b04 	str.w	r3, [ip], #4
  4032f0:	43a2      	bics	r2, r4
  4032f2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4032f6:	bf04      	itt	eq
  4032f8:	f851 3b04 	ldreq.w	r3, [r1], #4
  4032fc:	f84c 4b04 	streq.w	r4, [ip], #4
  403300:	d0ea      	beq.n	4032d8 <strcpy+0x38>
  403302:	4623      	mov	r3, r4
  403304:	f80c 3b01 	strb.w	r3, [ip], #1
  403308:	f013 0fff 	tst.w	r3, #255	; 0xff
  40330c:	ea4f 2333 	mov.w	r3, r3, ror #8
  403310:	d1f8      	bne.n	403304 <strcpy+0x64>
  403312:	f85d 4b04 	ldr.w	r4, [sp], #4
  403316:	4770      	bx	lr
  403318:	f011 0f01 	tst.w	r1, #1
  40331c:	d006      	beq.n	40332c <strcpy+0x8c>
  40331e:	f811 2b01 	ldrb.w	r2, [r1], #1
  403322:	f80c 2b01 	strb.w	r2, [ip], #1
  403326:	2a00      	cmp	r2, #0
  403328:	bf08      	it	eq
  40332a:	4770      	bxeq	lr
  40332c:	f011 0f02 	tst.w	r1, #2
  403330:	d0bf      	beq.n	4032b2 <strcpy+0x12>
  403332:	f831 2b02 	ldrh.w	r2, [r1], #2
  403336:	f012 0fff 	tst.w	r2, #255	; 0xff
  40333a:	bf16      	itet	ne
  40333c:	f82c 2b02 	strhne.w	r2, [ip], #2
  403340:	f88c 2000 	strbeq.w	r2, [ip]
  403344:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  403348:	d1b3      	bne.n	4032b2 <strcpy+0x12>
  40334a:	4770      	bx	lr
  40334c:	f811 2b01 	ldrb.w	r2, [r1], #1
  403350:	f80c 2b01 	strb.w	r2, [ip], #1
  403354:	2a00      	cmp	r2, #0
  403356:	d1f9      	bne.n	40334c <strcpy+0xac>
  403358:	4770      	bx	lr
  40335a:	bf00      	nop
	...

00403380 <strlen>:
  403380:	f890 f000 	pld	[r0]
  403384:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  403388:	f020 0107 	bic.w	r1, r0, #7
  40338c:	f06f 0c00 	mvn.w	ip, #0
  403390:	f010 0407 	ands.w	r4, r0, #7
  403394:	f891 f020 	pld	[r1, #32]
  403398:	f040 8049 	bne.w	40342e <strlen+0xae>
  40339c:	f04f 0400 	mov.w	r4, #0
  4033a0:	f06f 0007 	mvn.w	r0, #7
  4033a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4033a8:	f891 f040 	pld	[r1, #64]	; 0x40
  4033ac:	f100 0008 	add.w	r0, r0, #8
  4033b0:	fa82 f24c 	uadd8	r2, r2, ip
  4033b4:	faa4 f28c 	sel	r2, r4, ip
  4033b8:	fa83 f34c 	uadd8	r3, r3, ip
  4033bc:	faa2 f38c 	sel	r3, r2, ip
  4033c0:	bb4b      	cbnz	r3, 403416 <strlen+0x96>
  4033c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4033c6:	fa82 f24c 	uadd8	r2, r2, ip
  4033ca:	f100 0008 	add.w	r0, r0, #8
  4033ce:	faa4 f28c 	sel	r2, r4, ip
  4033d2:	fa83 f34c 	uadd8	r3, r3, ip
  4033d6:	faa2 f38c 	sel	r3, r2, ip
  4033da:	b9e3      	cbnz	r3, 403416 <strlen+0x96>
  4033dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4033e0:	fa82 f24c 	uadd8	r2, r2, ip
  4033e4:	f100 0008 	add.w	r0, r0, #8
  4033e8:	faa4 f28c 	sel	r2, r4, ip
  4033ec:	fa83 f34c 	uadd8	r3, r3, ip
  4033f0:	faa2 f38c 	sel	r3, r2, ip
  4033f4:	b97b      	cbnz	r3, 403416 <strlen+0x96>
  4033f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4033fa:	f101 0120 	add.w	r1, r1, #32
  4033fe:	fa82 f24c 	uadd8	r2, r2, ip
  403402:	f100 0008 	add.w	r0, r0, #8
  403406:	faa4 f28c 	sel	r2, r4, ip
  40340a:	fa83 f34c 	uadd8	r3, r3, ip
  40340e:	faa2 f38c 	sel	r3, r2, ip
  403412:	2b00      	cmp	r3, #0
  403414:	d0c6      	beq.n	4033a4 <strlen+0x24>
  403416:	2a00      	cmp	r2, #0
  403418:	bf04      	itt	eq
  40341a:	3004      	addeq	r0, #4
  40341c:	461a      	moveq	r2, r3
  40341e:	ba12      	rev	r2, r2
  403420:	fab2 f282 	clz	r2, r2
  403424:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  403428:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40342c:	4770      	bx	lr
  40342e:	e9d1 2300 	ldrd	r2, r3, [r1]
  403432:	f004 0503 	and.w	r5, r4, #3
  403436:	f1c4 0000 	rsb	r0, r4, #0
  40343a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40343e:	f014 0f04 	tst.w	r4, #4
  403442:	f891 f040 	pld	[r1, #64]	; 0x40
  403446:	fa0c f505 	lsl.w	r5, ip, r5
  40344a:	ea62 0205 	orn	r2, r2, r5
  40344e:	bf1c      	itt	ne
  403450:	ea63 0305 	ornne	r3, r3, r5
  403454:	4662      	movne	r2, ip
  403456:	f04f 0400 	mov.w	r4, #0
  40345a:	e7a9      	b.n	4033b0 <strlen+0x30>

0040345c <_svfprintf_r>:
  40345c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403460:	b0c3      	sub	sp, #268	; 0x10c
  403462:	460c      	mov	r4, r1
  403464:	910b      	str	r1, [sp, #44]	; 0x2c
  403466:	4692      	mov	sl, r2
  403468:	930f      	str	r3, [sp, #60]	; 0x3c
  40346a:	900c      	str	r0, [sp, #48]	; 0x30
  40346c:	f003 fdd6 	bl	40701c <_localeconv_r>
  403470:	6803      	ldr	r3, [r0, #0]
  403472:	931a      	str	r3, [sp, #104]	; 0x68
  403474:	4618      	mov	r0, r3
  403476:	f7ff ff83 	bl	403380 <strlen>
  40347a:	89a3      	ldrh	r3, [r4, #12]
  40347c:	9019      	str	r0, [sp, #100]	; 0x64
  40347e:	0619      	lsls	r1, r3, #24
  403480:	d503      	bpl.n	40348a <_svfprintf_r+0x2e>
  403482:	6923      	ldr	r3, [r4, #16]
  403484:	2b00      	cmp	r3, #0
  403486:	f001 8003 	beq.w	404490 <_svfprintf_r+0x1034>
  40348a:	2300      	movs	r3, #0
  40348c:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  403490:	9313      	str	r3, [sp, #76]	; 0x4c
  403492:	9315      	str	r3, [sp, #84]	; 0x54
  403494:	9314      	str	r3, [sp, #80]	; 0x50
  403496:	9327      	str	r3, [sp, #156]	; 0x9c
  403498:	9326      	str	r3, [sp, #152]	; 0x98
  40349a:	9318      	str	r3, [sp, #96]	; 0x60
  40349c:	931b      	str	r3, [sp, #108]	; 0x6c
  40349e:	9309      	str	r3, [sp, #36]	; 0x24
  4034a0:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  4034a4:	46c8      	mov	r8, r9
  4034a6:	9316      	str	r3, [sp, #88]	; 0x58
  4034a8:	9317      	str	r3, [sp, #92]	; 0x5c
  4034aa:	f89a 3000 	ldrb.w	r3, [sl]
  4034ae:	4654      	mov	r4, sl
  4034b0:	b1e3      	cbz	r3, 4034ec <_svfprintf_r+0x90>
  4034b2:	2b25      	cmp	r3, #37	; 0x25
  4034b4:	d102      	bne.n	4034bc <_svfprintf_r+0x60>
  4034b6:	e019      	b.n	4034ec <_svfprintf_r+0x90>
  4034b8:	2b25      	cmp	r3, #37	; 0x25
  4034ba:	d003      	beq.n	4034c4 <_svfprintf_r+0x68>
  4034bc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4034c0:	2b00      	cmp	r3, #0
  4034c2:	d1f9      	bne.n	4034b8 <_svfprintf_r+0x5c>
  4034c4:	eba4 050a 	sub.w	r5, r4, sl
  4034c8:	b185      	cbz	r5, 4034ec <_svfprintf_r+0x90>
  4034ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4034cc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4034ce:	f8c8 a000 	str.w	sl, [r8]
  4034d2:	3301      	adds	r3, #1
  4034d4:	442a      	add	r2, r5
  4034d6:	2b07      	cmp	r3, #7
  4034d8:	f8c8 5004 	str.w	r5, [r8, #4]
  4034dc:	9227      	str	r2, [sp, #156]	; 0x9c
  4034de:	9326      	str	r3, [sp, #152]	; 0x98
  4034e0:	dc7f      	bgt.n	4035e2 <_svfprintf_r+0x186>
  4034e2:	f108 0808 	add.w	r8, r8, #8
  4034e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4034e8:	442b      	add	r3, r5
  4034ea:	9309      	str	r3, [sp, #36]	; 0x24
  4034ec:	7823      	ldrb	r3, [r4, #0]
  4034ee:	2b00      	cmp	r3, #0
  4034f0:	d07f      	beq.n	4035f2 <_svfprintf_r+0x196>
  4034f2:	2300      	movs	r3, #0
  4034f4:	461a      	mov	r2, r3
  4034f6:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4034fa:	4619      	mov	r1, r3
  4034fc:	930d      	str	r3, [sp, #52]	; 0x34
  4034fe:	469b      	mov	fp, r3
  403500:	f04f 30ff 	mov.w	r0, #4294967295
  403504:	7863      	ldrb	r3, [r4, #1]
  403506:	900a      	str	r0, [sp, #40]	; 0x28
  403508:	f104 0a01 	add.w	sl, r4, #1
  40350c:	f10a 0a01 	add.w	sl, sl, #1
  403510:	f1a3 0020 	sub.w	r0, r3, #32
  403514:	2858      	cmp	r0, #88	; 0x58
  403516:	f200 83c1 	bhi.w	403c9c <_svfprintf_r+0x840>
  40351a:	e8df f010 	tbh	[pc, r0, lsl #1]
  40351e:	0238      	.short	0x0238
  403520:	03bf03bf 	.word	0x03bf03bf
  403524:	03bf0240 	.word	0x03bf0240
  403528:	03bf03bf 	.word	0x03bf03bf
  40352c:	03bf03bf 	.word	0x03bf03bf
  403530:	024503bf 	.word	0x024503bf
  403534:	03bf0203 	.word	0x03bf0203
  403538:	026b005d 	.word	0x026b005d
  40353c:	028603bf 	.word	0x028603bf
  403540:	039d039d 	.word	0x039d039d
  403544:	039d039d 	.word	0x039d039d
  403548:	039d039d 	.word	0x039d039d
  40354c:	039d039d 	.word	0x039d039d
  403550:	03bf039d 	.word	0x03bf039d
  403554:	03bf03bf 	.word	0x03bf03bf
  403558:	03bf03bf 	.word	0x03bf03bf
  40355c:	03bf03bf 	.word	0x03bf03bf
  403560:	03bf03bf 	.word	0x03bf03bf
  403564:	033703bf 	.word	0x033703bf
  403568:	03bf0357 	.word	0x03bf0357
  40356c:	03bf0357 	.word	0x03bf0357
  403570:	03bf03bf 	.word	0x03bf03bf
  403574:	039803bf 	.word	0x039803bf
  403578:	03bf03bf 	.word	0x03bf03bf
  40357c:	03bf03ad 	.word	0x03bf03ad
  403580:	03bf03bf 	.word	0x03bf03bf
  403584:	03bf03bf 	.word	0x03bf03bf
  403588:	03bf0259 	.word	0x03bf0259
  40358c:	031e03bf 	.word	0x031e03bf
  403590:	03bf03bf 	.word	0x03bf03bf
  403594:	03bf03bf 	.word	0x03bf03bf
  403598:	03bf03bf 	.word	0x03bf03bf
  40359c:	03bf03bf 	.word	0x03bf03bf
  4035a0:	03bf03bf 	.word	0x03bf03bf
  4035a4:	02db02c6 	.word	0x02db02c6
  4035a8:	03570357 	.word	0x03570357
  4035ac:	028b0357 	.word	0x028b0357
  4035b0:	03bf02db 	.word	0x03bf02db
  4035b4:	029003bf 	.word	0x029003bf
  4035b8:	029d03bf 	.word	0x029d03bf
  4035bc:	02b401cc 	.word	0x02b401cc
  4035c0:	03bf0208 	.word	0x03bf0208
  4035c4:	03bf01e1 	.word	0x03bf01e1
  4035c8:	03bf007e 	.word	0x03bf007e
  4035cc:	020d03bf 	.word	0x020d03bf
  4035d0:	980d      	ldr	r0, [sp, #52]	; 0x34
  4035d2:	930f      	str	r3, [sp, #60]	; 0x3c
  4035d4:	4240      	negs	r0, r0
  4035d6:	900d      	str	r0, [sp, #52]	; 0x34
  4035d8:	f04b 0b04 	orr.w	fp, fp, #4
  4035dc:	f89a 3000 	ldrb.w	r3, [sl]
  4035e0:	e794      	b.n	40350c <_svfprintf_r+0xb0>
  4035e2:	aa25      	add	r2, sp, #148	; 0x94
  4035e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4035e6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4035e8:	f004 fbf4 	bl	407dd4 <__ssprint_r>
  4035ec:	b940      	cbnz	r0, 403600 <_svfprintf_r+0x1a4>
  4035ee:	46c8      	mov	r8, r9
  4035f0:	e779      	b.n	4034e6 <_svfprintf_r+0x8a>
  4035f2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4035f4:	b123      	cbz	r3, 403600 <_svfprintf_r+0x1a4>
  4035f6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4035f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4035fa:	aa25      	add	r2, sp, #148	; 0x94
  4035fc:	f004 fbea 	bl	407dd4 <__ssprint_r>
  403600:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403602:	899b      	ldrh	r3, [r3, #12]
  403604:	f013 0f40 	tst.w	r3, #64	; 0x40
  403608:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40360a:	bf18      	it	ne
  40360c:	f04f 33ff 	movne.w	r3, #4294967295
  403610:	9309      	str	r3, [sp, #36]	; 0x24
  403612:	9809      	ldr	r0, [sp, #36]	; 0x24
  403614:	b043      	add	sp, #268	; 0x10c
  403616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40361a:	f01b 0f20 	tst.w	fp, #32
  40361e:	9311      	str	r3, [sp, #68]	; 0x44
  403620:	f040 81dd 	bne.w	4039de <_svfprintf_r+0x582>
  403624:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403626:	f01b 0f10 	tst.w	fp, #16
  40362a:	4613      	mov	r3, r2
  40362c:	f040 856e 	bne.w	40410c <_svfprintf_r+0xcb0>
  403630:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403634:	f000 856a 	beq.w	40410c <_svfprintf_r+0xcb0>
  403638:	8814      	ldrh	r4, [r2, #0]
  40363a:	3204      	adds	r2, #4
  40363c:	2500      	movs	r5, #0
  40363e:	2301      	movs	r3, #1
  403640:	920f      	str	r2, [sp, #60]	; 0x3c
  403642:	2700      	movs	r7, #0
  403644:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  403648:	990a      	ldr	r1, [sp, #40]	; 0x28
  40364a:	1c4a      	adds	r2, r1, #1
  40364c:	f000 8265 	beq.w	403b1a <_svfprintf_r+0x6be>
  403650:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  403654:	9207      	str	r2, [sp, #28]
  403656:	ea54 0205 	orrs.w	r2, r4, r5
  40365a:	f040 8264 	bne.w	403b26 <_svfprintf_r+0x6ca>
  40365e:	2900      	cmp	r1, #0
  403660:	f040 843c 	bne.w	403edc <_svfprintf_r+0xa80>
  403664:	2b00      	cmp	r3, #0
  403666:	f040 84d7 	bne.w	404018 <_svfprintf_r+0xbbc>
  40366a:	f01b 0301 	ands.w	r3, fp, #1
  40366e:	930e      	str	r3, [sp, #56]	; 0x38
  403670:	f000 8604 	beq.w	40427c <_svfprintf_r+0xe20>
  403674:	ae42      	add	r6, sp, #264	; 0x108
  403676:	2330      	movs	r3, #48	; 0x30
  403678:	f806 3d41 	strb.w	r3, [r6, #-65]!
  40367c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40367e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403680:	4293      	cmp	r3, r2
  403682:	bfb8      	it	lt
  403684:	4613      	movlt	r3, r2
  403686:	9308      	str	r3, [sp, #32]
  403688:	2300      	movs	r3, #0
  40368a:	9312      	str	r3, [sp, #72]	; 0x48
  40368c:	b117      	cbz	r7, 403694 <_svfprintf_r+0x238>
  40368e:	9b08      	ldr	r3, [sp, #32]
  403690:	3301      	adds	r3, #1
  403692:	9308      	str	r3, [sp, #32]
  403694:	9b07      	ldr	r3, [sp, #28]
  403696:	f013 0302 	ands.w	r3, r3, #2
  40369a:	9310      	str	r3, [sp, #64]	; 0x40
  40369c:	d002      	beq.n	4036a4 <_svfprintf_r+0x248>
  40369e:	9b08      	ldr	r3, [sp, #32]
  4036a0:	3302      	adds	r3, #2
  4036a2:	9308      	str	r3, [sp, #32]
  4036a4:	9b07      	ldr	r3, [sp, #28]
  4036a6:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  4036aa:	f040 830e 	bne.w	403cca <_svfprintf_r+0x86e>
  4036ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4036b0:	9a08      	ldr	r2, [sp, #32]
  4036b2:	eba3 0b02 	sub.w	fp, r3, r2
  4036b6:	f1bb 0f00 	cmp.w	fp, #0
  4036ba:	f340 8306 	ble.w	403cca <_svfprintf_r+0x86e>
  4036be:	f1bb 0f10 	cmp.w	fp, #16
  4036c2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4036c4:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4036c6:	dd29      	ble.n	40371c <_svfprintf_r+0x2c0>
  4036c8:	4643      	mov	r3, r8
  4036ca:	4621      	mov	r1, r4
  4036cc:	46a8      	mov	r8, r5
  4036ce:	2710      	movs	r7, #16
  4036d0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4036d2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4036d4:	e006      	b.n	4036e4 <_svfprintf_r+0x288>
  4036d6:	f1ab 0b10 	sub.w	fp, fp, #16
  4036da:	f1bb 0f10 	cmp.w	fp, #16
  4036de:	f103 0308 	add.w	r3, r3, #8
  4036e2:	dd18      	ble.n	403716 <_svfprintf_r+0x2ba>
  4036e4:	3201      	adds	r2, #1
  4036e6:	48b7      	ldr	r0, [pc, #732]	; (4039c4 <_svfprintf_r+0x568>)
  4036e8:	9226      	str	r2, [sp, #152]	; 0x98
  4036ea:	3110      	adds	r1, #16
  4036ec:	2a07      	cmp	r2, #7
  4036ee:	9127      	str	r1, [sp, #156]	; 0x9c
  4036f0:	e883 0081 	stmia.w	r3, {r0, r7}
  4036f4:	ddef      	ble.n	4036d6 <_svfprintf_r+0x27a>
  4036f6:	aa25      	add	r2, sp, #148	; 0x94
  4036f8:	4629      	mov	r1, r5
  4036fa:	4620      	mov	r0, r4
  4036fc:	f004 fb6a 	bl	407dd4 <__ssprint_r>
  403700:	2800      	cmp	r0, #0
  403702:	f47f af7d 	bne.w	403600 <_svfprintf_r+0x1a4>
  403706:	f1ab 0b10 	sub.w	fp, fp, #16
  40370a:	f1bb 0f10 	cmp.w	fp, #16
  40370e:	9927      	ldr	r1, [sp, #156]	; 0x9c
  403710:	9a26      	ldr	r2, [sp, #152]	; 0x98
  403712:	464b      	mov	r3, r9
  403714:	dce6      	bgt.n	4036e4 <_svfprintf_r+0x288>
  403716:	4645      	mov	r5, r8
  403718:	460c      	mov	r4, r1
  40371a:	4698      	mov	r8, r3
  40371c:	3201      	adds	r2, #1
  40371e:	4ba9      	ldr	r3, [pc, #676]	; (4039c4 <_svfprintf_r+0x568>)
  403720:	9226      	str	r2, [sp, #152]	; 0x98
  403722:	445c      	add	r4, fp
  403724:	2a07      	cmp	r2, #7
  403726:	9427      	str	r4, [sp, #156]	; 0x9c
  403728:	e888 0808 	stmia.w	r8, {r3, fp}
  40372c:	f300 8498 	bgt.w	404060 <_svfprintf_r+0xc04>
  403730:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403734:	f108 0808 	add.w	r8, r8, #8
  403738:	b177      	cbz	r7, 403758 <_svfprintf_r+0x2fc>
  40373a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40373c:	3301      	adds	r3, #1
  40373e:	3401      	adds	r4, #1
  403740:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  403744:	2201      	movs	r2, #1
  403746:	2b07      	cmp	r3, #7
  403748:	9427      	str	r4, [sp, #156]	; 0x9c
  40374a:	9326      	str	r3, [sp, #152]	; 0x98
  40374c:	e888 0006 	stmia.w	r8, {r1, r2}
  403750:	f300 83db 	bgt.w	403f0a <_svfprintf_r+0xaae>
  403754:	f108 0808 	add.w	r8, r8, #8
  403758:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40375a:	b16b      	cbz	r3, 403778 <_svfprintf_r+0x31c>
  40375c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40375e:	3301      	adds	r3, #1
  403760:	3402      	adds	r4, #2
  403762:	a91e      	add	r1, sp, #120	; 0x78
  403764:	2202      	movs	r2, #2
  403766:	2b07      	cmp	r3, #7
  403768:	9427      	str	r4, [sp, #156]	; 0x9c
  40376a:	9326      	str	r3, [sp, #152]	; 0x98
  40376c:	e888 0006 	stmia.w	r8, {r1, r2}
  403770:	f300 83d6 	bgt.w	403f20 <_svfprintf_r+0xac4>
  403774:	f108 0808 	add.w	r8, r8, #8
  403778:	2d80      	cmp	r5, #128	; 0x80
  40377a:	f000 8315 	beq.w	403da8 <_svfprintf_r+0x94c>
  40377e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403780:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403782:	1a9f      	subs	r7, r3, r2
  403784:	2f00      	cmp	r7, #0
  403786:	dd36      	ble.n	4037f6 <_svfprintf_r+0x39a>
  403788:	2f10      	cmp	r7, #16
  40378a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40378c:	4d8e      	ldr	r5, [pc, #568]	; (4039c8 <_svfprintf_r+0x56c>)
  40378e:	dd27      	ble.n	4037e0 <_svfprintf_r+0x384>
  403790:	4642      	mov	r2, r8
  403792:	4621      	mov	r1, r4
  403794:	46b0      	mov	r8, r6
  403796:	f04f 0b10 	mov.w	fp, #16
  40379a:	462e      	mov	r6, r5
  40379c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40379e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4037a0:	e004      	b.n	4037ac <_svfprintf_r+0x350>
  4037a2:	3f10      	subs	r7, #16
  4037a4:	2f10      	cmp	r7, #16
  4037a6:	f102 0208 	add.w	r2, r2, #8
  4037aa:	dd15      	ble.n	4037d8 <_svfprintf_r+0x37c>
  4037ac:	3301      	adds	r3, #1
  4037ae:	3110      	adds	r1, #16
  4037b0:	2b07      	cmp	r3, #7
  4037b2:	9127      	str	r1, [sp, #156]	; 0x9c
  4037b4:	9326      	str	r3, [sp, #152]	; 0x98
  4037b6:	e882 0840 	stmia.w	r2, {r6, fp}
  4037ba:	ddf2      	ble.n	4037a2 <_svfprintf_r+0x346>
  4037bc:	aa25      	add	r2, sp, #148	; 0x94
  4037be:	4629      	mov	r1, r5
  4037c0:	4620      	mov	r0, r4
  4037c2:	f004 fb07 	bl	407dd4 <__ssprint_r>
  4037c6:	2800      	cmp	r0, #0
  4037c8:	f47f af1a 	bne.w	403600 <_svfprintf_r+0x1a4>
  4037cc:	3f10      	subs	r7, #16
  4037ce:	2f10      	cmp	r7, #16
  4037d0:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4037d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4037d4:	464a      	mov	r2, r9
  4037d6:	dce9      	bgt.n	4037ac <_svfprintf_r+0x350>
  4037d8:	4635      	mov	r5, r6
  4037da:	460c      	mov	r4, r1
  4037dc:	4646      	mov	r6, r8
  4037de:	4690      	mov	r8, r2
  4037e0:	3301      	adds	r3, #1
  4037e2:	443c      	add	r4, r7
  4037e4:	2b07      	cmp	r3, #7
  4037e6:	9427      	str	r4, [sp, #156]	; 0x9c
  4037e8:	9326      	str	r3, [sp, #152]	; 0x98
  4037ea:	e888 00a0 	stmia.w	r8, {r5, r7}
  4037ee:	f300 8381 	bgt.w	403ef4 <_svfprintf_r+0xa98>
  4037f2:	f108 0808 	add.w	r8, r8, #8
  4037f6:	9b07      	ldr	r3, [sp, #28]
  4037f8:	05df      	lsls	r7, r3, #23
  4037fa:	f100 8268 	bmi.w	403cce <_svfprintf_r+0x872>
  4037fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403800:	990e      	ldr	r1, [sp, #56]	; 0x38
  403802:	f8c8 6000 	str.w	r6, [r8]
  403806:	3301      	adds	r3, #1
  403808:	440c      	add	r4, r1
  40380a:	2b07      	cmp	r3, #7
  40380c:	9427      	str	r4, [sp, #156]	; 0x9c
  40380e:	f8c8 1004 	str.w	r1, [r8, #4]
  403812:	9326      	str	r3, [sp, #152]	; 0x98
  403814:	f300 834d 	bgt.w	403eb2 <_svfprintf_r+0xa56>
  403818:	f108 0808 	add.w	r8, r8, #8
  40381c:	9b07      	ldr	r3, [sp, #28]
  40381e:	075b      	lsls	r3, r3, #29
  403820:	d53a      	bpl.n	403898 <_svfprintf_r+0x43c>
  403822:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403824:	9a08      	ldr	r2, [sp, #32]
  403826:	1a9d      	subs	r5, r3, r2
  403828:	2d00      	cmp	r5, #0
  40382a:	dd35      	ble.n	403898 <_svfprintf_r+0x43c>
  40382c:	2d10      	cmp	r5, #16
  40382e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403830:	dd20      	ble.n	403874 <_svfprintf_r+0x418>
  403832:	2610      	movs	r6, #16
  403834:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  403836:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  40383a:	e004      	b.n	403846 <_svfprintf_r+0x3ea>
  40383c:	3d10      	subs	r5, #16
  40383e:	2d10      	cmp	r5, #16
  403840:	f108 0808 	add.w	r8, r8, #8
  403844:	dd16      	ble.n	403874 <_svfprintf_r+0x418>
  403846:	3301      	adds	r3, #1
  403848:	4a5e      	ldr	r2, [pc, #376]	; (4039c4 <_svfprintf_r+0x568>)
  40384a:	9326      	str	r3, [sp, #152]	; 0x98
  40384c:	3410      	adds	r4, #16
  40384e:	2b07      	cmp	r3, #7
  403850:	9427      	str	r4, [sp, #156]	; 0x9c
  403852:	e888 0044 	stmia.w	r8, {r2, r6}
  403856:	ddf1      	ble.n	40383c <_svfprintf_r+0x3e0>
  403858:	aa25      	add	r2, sp, #148	; 0x94
  40385a:	4659      	mov	r1, fp
  40385c:	4638      	mov	r0, r7
  40385e:	f004 fab9 	bl	407dd4 <__ssprint_r>
  403862:	2800      	cmp	r0, #0
  403864:	f47f aecc 	bne.w	403600 <_svfprintf_r+0x1a4>
  403868:	3d10      	subs	r5, #16
  40386a:	2d10      	cmp	r5, #16
  40386c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40386e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403870:	46c8      	mov	r8, r9
  403872:	dce8      	bgt.n	403846 <_svfprintf_r+0x3ea>
  403874:	3301      	adds	r3, #1
  403876:	4a53      	ldr	r2, [pc, #332]	; (4039c4 <_svfprintf_r+0x568>)
  403878:	9326      	str	r3, [sp, #152]	; 0x98
  40387a:	442c      	add	r4, r5
  40387c:	2b07      	cmp	r3, #7
  40387e:	9427      	str	r4, [sp, #156]	; 0x9c
  403880:	e888 0024 	stmia.w	r8, {r2, r5}
  403884:	dd08      	ble.n	403898 <_svfprintf_r+0x43c>
  403886:	aa25      	add	r2, sp, #148	; 0x94
  403888:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40388a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40388c:	f004 faa2 	bl	407dd4 <__ssprint_r>
  403890:	2800      	cmp	r0, #0
  403892:	f47f aeb5 	bne.w	403600 <_svfprintf_r+0x1a4>
  403896:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403898:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40389a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40389c:	9908      	ldr	r1, [sp, #32]
  40389e:	428a      	cmp	r2, r1
  4038a0:	bfac      	ite	ge
  4038a2:	189b      	addge	r3, r3, r2
  4038a4:	185b      	addlt	r3, r3, r1
  4038a6:	9309      	str	r3, [sp, #36]	; 0x24
  4038a8:	2c00      	cmp	r4, #0
  4038aa:	f040 830d 	bne.w	403ec8 <_svfprintf_r+0xa6c>
  4038ae:	2300      	movs	r3, #0
  4038b0:	9326      	str	r3, [sp, #152]	; 0x98
  4038b2:	46c8      	mov	r8, r9
  4038b4:	e5f9      	b.n	4034aa <_svfprintf_r+0x4e>
  4038b6:	9311      	str	r3, [sp, #68]	; 0x44
  4038b8:	f01b 0320 	ands.w	r3, fp, #32
  4038bc:	f040 81e3 	bne.w	403c86 <_svfprintf_r+0x82a>
  4038c0:	f01b 0210 	ands.w	r2, fp, #16
  4038c4:	f040 842e 	bne.w	404124 <_svfprintf_r+0xcc8>
  4038c8:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  4038cc:	f000 842a 	beq.w	404124 <_svfprintf_r+0xcc8>
  4038d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4038d2:	4613      	mov	r3, r2
  4038d4:	460a      	mov	r2, r1
  4038d6:	3204      	adds	r2, #4
  4038d8:	880c      	ldrh	r4, [r1, #0]
  4038da:	920f      	str	r2, [sp, #60]	; 0x3c
  4038dc:	2500      	movs	r5, #0
  4038de:	e6b0      	b.n	403642 <_svfprintf_r+0x1e6>
  4038e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4038e2:	9311      	str	r3, [sp, #68]	; 0x44
  4038e4:	6816      	ldr	r6, [r2, #0]
  4038e6:	2400      	movs	r4, #0
  4038e8:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  4038ec:	1d15      	adds	r5, r2, #4
  4038ee:	2e00      	cmp	r6, #0
  4038f0:	f000 86a7 	beq.w	404642 <_svfprintf_r+0x11e6>
  4038f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4038f6:	1c53      	adds	r3, r2, #1
  4038f8:	f000 8609 	beq.w	40450e <_svfprintf_r+0x10b2>
  4038fc:	4621      	mov	r1, r4
  4038fe:	4630      	mov	r0, r6
  403900:	f003 fc36 	bl	407170 <memchr>
  403904:	2800      	cmp	r0, #0
  403906:	f000 86e1 	beq.w	4046cc <_svfprintf_r+0x1270>
  40390a:	1b83      	subs	r3, r0, r6
  40390c:	930e      	str	r3, [sp, #56]	; 0x38
  40390e:	940a      	str	r4, [sp, #40]	; 0x28
  403910:	950f      	str	r5, [sp, #60]	; 0x3c
  403912:	f8cd b01c 	str.w	fp, [sp, #28]
  403916:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40391a:	9308      	str	r3, [sp, #32]
  40391c:	9412      	str	r4, [sp, #72]	; 0x48
  40391e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403922:	e6b3      	b.n	40368c <_svfprintf_r+0x230>
  403924:	f89a 3000 	ldrb.w	r3, [sl]
  403928:	2201      	movs	r2, #1
  40392a:	212b      	movs	r1, #43	; 0x2b
  40392c:	e5ee      	b.n	40350c <_svfprintf_r+0xb0>
  40392e:	f04b 0b20 	orr.w	fp, fp, #32
  403932:	f89a 3000 	ldrb.w	r3, [sl]
  403936:	e5e9      	b.n	40350c <_svfprintf_r+0xb0>
  403938:	9311      	str	r3, [sp, #68]	; 0x44
  40393a:	2a00      	cmp	r2, #0
  40393c:	f040 8795 	bne.w	40486a <_svfprintf_r+0x140e>
  403940:	4b22      	ldr	r3, [pc, #136]	; (4039cc <_svfprintf_r+0x570>)
  403942:	9318      	str	r3, [sp, #96]	; 0x60
  403944:	f01b 0f20 	tst.w	fp, #32
  403948:	f040 8111 	bne.w	403b6e <_svfprintf_r+0x712>
  40394c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40394e:	f01b 0f10 	tst.w	fp, #16
  403952:	4613      	mov	r3, r2
  403954:	f040 83e1 	bne.w	40411a <_svfprintf_r+0xcbe>
  403958:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40395c:	f000 83dd 	beq.w	40411a <_svfprintf_r+0xcbe>
  403960:	3304      	adds	r3, #4
  403962:	8814      	ldrh	r4, [r2, #0]
  403964:	930f      	str	r3, [sp, #60]	; 0x3c
  403966:	2500      	movs	r5, #0
  403968:	f01b 0f01 	tst.w	fp, #1
  40396c:	f000 810c 	beq.w	403b88 <_svfprintf_r+0x72c>
  403970:	ea54 0305 	orrs.w	r3, r4, r5
  403974:	f000 8108 	beq.w	403b88 <_svfprintf_r+0x72c>
  403978:	2330      	movs	r3, #48	; 0x30
  40397a:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  40397e:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  403982:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  403986:	f04b 0b02 	orr.w	fp, fp, #2
  40398a:	2302      	movs	r3, #2
  40398c:	e659      	b.n	403642 <_svfprintf_r+0x1e6>
  40398e:	f89a 3000 	ldrb.w	r3, [sl]
  403992:	2900      	cmp	r1, #0
  403994:	f47f adba 	bne.w	40350c <_svfprintf_r+0xb0>
  403998:	2201      	movs	r2, #1
  40399a:	2120      	movs	r1, #32
  40399c:	e5b6      	b.n	40350c <_svfprintf_r+0xb0>
  40399e:	f04b 0b01 	orr.w	fp, fp, #1
  4039a2:	f89a 3000 	ldrb.w	r3, [sl]
  4039a6:	e5b1      	b.n	40350c <_svfprintf_r+0xb0>
  4039a8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  4039aa:	6823      	ldr	r3, [r4, #0]
  4039ac:	930d      	str	r3, [sp, #52]	; 0x34
  4039ae:	4618      	mov	r0, r3
  4039b0:	2800      	cmp	r0, #0
  4039b2:	4623      	mov	r3, r4
  4039b4:	f103 0304 	add.w	r3, r3, #4
  4039b8:	f6ff ae0a 	blt.w	4035d0 <_svfprintf_r+0x174>
  4039bc:	930f      	str	r3, [sp, #60]	; 0x3c
  4039be:	f89a 3000 	ldrb.w	r3, [sl]
  4039c2:	e5a3      	b.n	40350c <_svfprintf_r+0xb0>
  4039c4:	004097b4 	.word	0x004097b4
  4039c8:	004097c4 	.word	0x004097c4
  4039cc:	00409794 	.word	0x00409794
  4039d0:	f04b 0b10 	orr.w	fp, fp, #16
  4039d4:	f01b 0f20 	tst.w	fp, #32
  4039d8:	9311      	str	r3, [sp, #68]	; 0x44
  4039da:	f43f ae23 	beq.w	403624 <_svfprintf_r+0x1c8>
  4039de:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4039e0:	3507      	adds	r5, #7
  4039e2:	f025 0307 	bic.w	r3, r5, #7
  4039e6:	f103 0208 	add.w	r2, r3, #8
  4039ea:	e9d3 4500 	ldrd	r4, r5, [r3]
  4039ee:	920f      	str	r2, [sp, #60]	; 0x3c
  4039f0:	2301      	movs	r3, #1
  4039f2:	e626      	b.n	403642 <_svfprintf_r+0x1e6>
  4039f4:	f89a 3000 	ldrb.w	r3, [sl]
  4039f8:	2b2a      	cmp	r3, #42	; 0x2a
  4039fa:	f10a 0401 	add.w	r4, sl, #1
  4039fe:	f000 8727 	beq.w	404850 <_svfprintf_r+0x13f4>
  403a02:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403a06:	2809      	cmp	r0, #9
  403a08:	46a2      	mov	sl, r4
  403a0a:	f200 86ad 	bhi.w	404768 <_svfprintf_r+0x130c>
  403a0e:	2300      	movs	r3, #0
  403a10:	461c      	mov	r4, r3
  403a12:	f81a 3b01 	ldrb.w	r3, [sl], #1
  403a16:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  403a1a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  403a1e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403a22:	2809      	cmp	r0, #9
  403a24:	d9f5      	bls.n	403a12 <_svfprintf_r+0x5b6>
  403a26:	940a      	str	r4, [sp, #40]	; 0x28
  403a28:	e572      	b.n	403510 <_svfprintf_r+0xb4>
  403a2a:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  403a2e:	f89a 3000 	ldrb.w	r3, [sl]
  403a32:	e56b      	b.n	40350c <_svfprintf_r+0xb0>
  403a34:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  403a38:	f89a 3000 	ldrb.w	r3, [sl]
  403a3c:	e566      	b.n	40350c <_svfprintf_r+0xb0>
  403a3e:	f89a 3000 	ldrb.w	r3, [sl]
  403a42:	2b6c      	cmp	r3, #108	; 0x6c
  403a44:	bf03      	ittte	eq
  403a46:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  403a4a:	f04b 0b20 	orreq.w	fp, fp, #32
  403a4e:	f10a 0a01 	addeq.w	sl, sl, #1
  403a52:	f04b 0b10 	orrne.w	fp, fp, #16
  403a56:	e559      	b.n	40350c <_svfprintf_r+0xb0>
  403a58:	2a00      	cmp	r2, #0
  403a5a:	f040 8711 	bne.w	404880 <_svfprintf_r+0x1424>
  403a5e:	f01b 0f20 	tst.w	fp, #32
  403a62:	f040 84f9 	bne.w	404458 <_svfprintf_r+0xffc>
  403a66:	f01b 0f10 	tst.w	fp, #16
  403a6a:	f040 84ac 	bne.w	4043c6 <_svfprintf_r+0xf6a>
  403a6e:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403a72:	f000 84a8 	beq.w	4043c6 <_svfprintf_r+0xf6a>
  403a76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403a78:	6813      	ldr	r3, [r2, #0]
  403a7a:	3204      	adds	r2, #4
  403a7c:	920f      	str	r2, [sp, #60]	; 0x3c
  403a7e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  403a82:	801a      	strh	r2, [r3, #0]
  403a84:	e511      	b.n	4034aa <_svfprintf_r+0x4e>
  403a86:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403a88:	4bb3      	ldr	r3, [pc, #716]	; (403d58 <_svfprintf_r+0x8fc>)
  403a8a:	680c      	ldr	r4, [r1, #0]
  403a8c:	9318      	str	r3, [sp, #96]	; 0x60
  403a8e:	2230      	movs	r2, #48	; 0x30
  403a90:	2378      	movs	r3, #120	; 0x78
  403a92:	3104      	adds	r1, #4
  403a94:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  403a98:	9311      	str	r3, [sp, #68]	; 0x44
  403a9a:	f04b 0b02 	orr.w	fp, fp, #2
  403a9e:	910f      	str	r1, [sp, #60]	; 0x3c
  403aa0:	2500      	movs	r5, #0
  403aa2:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  403aa6:	2302      	movs	r3, #2
  403aa8:	e5cb      	b.n	403642 <_svfprintf_r+0x1e6>
  403aaa:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403aac:	9311      	str	r3, [sp, #68]	; 0x44
  403aae:	680a      	ldr	r2, [r1, #0]
  403ab0:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  403ab4:	2300      	movs	r3, #0
  403ab6:	460a      	mov	r2, r1
  403ab8:	461f      	mov	r7, r3
  403aba:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403abe:	3204      	adds	r2, #4
  403ac0:	2301      	movs	r3, #1
  403ac2:	9308      	str	r3, [sp, #32]
  403ac4:	f8cd b01c 	str.w	fp, [sp, #28]
  403ac8:	970a      	str	r7, [sp, #40]	; 0x28
  403aca:	9712      	str	r7, [sp, #72]	; 0x48
  403acc:	920f      	str	r2, [sp, #60]	; 0x3c
  403ace:	930e      	str	r3, [sp, #56]	; 0x38
  403ad0:	ae28      	add	r6, sp, #160	; 0xa0
  403ad2:	e5df      	b.n	403694 <_svfprintf_r+0x238>
  403ad4:	9311      	str	r3, [sp, #68]	; 0x44
  403ad6:	2a00      	cmp	r2, #0
  403ad8:	f040 86ea 	bne.w	4048b0 <_svfprintf_r+0x1454>
  403adc:	f01b 0f20 	tst.w	fp, #32
  403ae0:	d15d      	bne.n	403b9e <_svfprintf_r+0x742>
  403ae2:	f01b 0f10 	tst.w	fp, #16
  403ae6:	f040 8308 	bne.w	4040fa <_svfprintf_r+0xc9e>
  403aea:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403aee:	f000 8304 	beq.w	4040fa <_svfprintf_r+0xc9e>
  403af2:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403af4:	f9b1 4000 	ldrsh.w	r4, [r1]
  403af8:	3104      	adds	r1, #4
  403afa:	17e5      	asrs	r5, r4, #31
  403afc:	4622      	mov	r2, r4
  403afe:	462b      	mov	r3, r5
  403b00:	910f      	str	r1, [sp, #60]	; 0x3c
  403b02:	2a00      	cmp	r2, #0
  403b04:	f173 0300 	sbcs.w	r3, r3, #0
  403b08:	db58      	blt.n	403bbc <_svfprintf_r+0x760>
  403b0a:	990a      	ldr	r1, [sp, #40]	; 0x28
  403b0c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403b10:	1c4a      	adds	r2, r1, #1
  403b12:	f04f 0301 	mov.w	r3, #1
  403b16:	f47f ad9b 	bne.w	403650 <_svfprintf_r+0x1f4>
  403b1a:	ea54 0205 	orrs.w	r2, r4, r5
  403b1e:	f000 81df 	beq.w	403ee0 <_svfprintf_r+0xa84>
  403b22:	f8cd b01c 	str.w	fp, [sp, #28]
  403b26:	2b01      	cmp	r3, #1
  403b28:	f000 827b 	beq.w	404022 <_svfprintf_r+0xbc6>
  403b2c:	2b02      	cmp	r3, #2
  403b2e:	f040 8206 	bne.w	403f3e <_svfprintf_r+0xae2>
  403b32:	9818      	ldr	r0, [sp, #96]	; 0x60
  403b34:	464e      	mov	r6, r9
  403b36:	0923      	lsrs	r3, r4, #4
  403b38:	f004 010f 	and.w	r1, r4, #15
  403b3c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  403b40:	092a      	lsrs	r2, r5, #4
  403b42:	461c      	mov	r4, r3
  403b44:	4615      	mov	r5, r2
  403b46:	5c43      	ldrb	r3, [r0, r1]
  403b48:	f806 3d01 	strb.w	r3, [r6, #-1]!
  403b4c:	ea54 0305 	orrs.w	r3, r4, r5
  403b50:	d1f1      	bne.n	403b36 <_svfprintf_r+0x6da>
  403b52:	eba9 0306 	sub.w	r3, r9, r6
  403b56:	930e      	str	r3, [sp, #56]	; 0x38
  403b58:	e590      	b.n	40367c <_svfprintf_r+0x220>
  403b5a:	9311      	str	r3, [sp, #68]	; 0x44
  403b5c:	2a00      	cmp	r2, #0
  403b5e:	f040 86a3 	bne.w	4048a8 <_svfprintf_r+0x144c>
  403b62:	4b7e      	ldr	r3, [pc, #504]	; (403d5c <_svfprintf_r+0x900>)
  403b64:	9318      	str	r3, [sp, #96]	; 0x60
  403b66:	f01b 0f20 	tst.w	fp, #32
  403b6a:	f43f aeef 	beq.w	40394c <_svfprintf_r+0x4f0>
  403b6e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403b70:	3507      	adds	r5, #7
  403b72:	f025 0307 	bic.w	r3, r5, #7
  403b76:	f103 0208 	add.w	r2, r3, #8
  403b7a:	f01b 0f01 	tst.w	fp, #1
  403b7e:	920f      	str	r2, [sp, #60]	; 0x3c
  403b80:	e9d3 4500 	ldrd	r4, r5, [r3]
  403b84:	f47f aef4 	bne.w	403970 <_svfprintf_r+0x514>
  403b88:	2302      	movs	r3, #2
  403b8a:	e55a      	b.n	403642 <_svfprintf_r+0x1e6>
  403b8c:	9311      	str	r3, [sp, #68]	; 0x44
  403b8e:	2a00      	cmp	r2, #0
  403b90:	f040 8686 	bne.w	4048a0 <_svfprintf_r+0x1444>
  403b94:	f04b 0b10 	orr.w	fp, fp, #16
  403b98:	f01b 0f20 	tst.w	fp, #32
  403b9c:	d0a1      	beq.n	403ae2 <_svfprintf_r+0x686>
  403b9e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403ba0:	3507      	adds	r5, #7
  403ba2:	f025 0507 	bic.w	r5, r5, #7
  403ba6:	e9d5 2300 	ldrd	r2, r3, [r5]
  403baa:	2a00      	cmp	r2, #0
  403bac:	f105 0108 	add.w	r1, r5, #8
  403bb0:	461d      	mov	r5, r3
  403bb2:	f173 0300 	sbcs.w	r3, r3, #0
  403bb6:	910f      	str	r1, [sp, #60]	; 0x3c
  403bb8:	4614      	mov	r4, r2
  403bba:	daa6      	bge.n	403b0a <_svfprintf_r+0x6ae>
  403bbc:	272d      	movs	r7, #45	; 0x2d
  403bbe:	4264      	negs	r4, r4
  403bc0:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  403bc4:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  403bc8:	2301      	movs	r3, #1
  403bca:	e53d      	b.n	403648 <_svfprintf_r+0x1ec>
  403bcc:	9311      	str	r3, [sp, #68]	; 0x44
  403bce:	2a00      	cmp	r2, #0
  403bd0:	f040 8662 	bne.w	404898 <_svfprintf_r+0x143c>
  403bd4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403bd6:	3507      	adds	r5, #7
  403bd8:	f025 0307 	bic.w	r3, r5, #7
  403bdc:	f103 0208 	add.w	r2, r3, #8
  403be0:	920f      	str	r2, [sp, #60]	; 0x3c
  403be2:	681a      	ldr	r2, [r3, #0]
  403be4:	9215      	str	r2, [sp, #84]	; 0x54
  403be6:	685b      	ldr	r3, [r3, #4]
  403be8:	9314      	str	r3, [sp, #80]	; 0x50
  403bea:	9b14      	ldr	r3, [sp, #80]	; 0x50
  403bec:	9d15      	ldr	r5, [sp, #84]	; 0x54
  403bee:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  403bf2:	4628      	mov	r0, r5
  403bf4:	4621      	mov	r1, r4
  403bf6:	f04f 32ff 	mov.w	r2, #4294967295
  403bfa:	4b59      	ldr	r3, [pc, #356]	; (403d60 <_svfprintf_r+0x904>)
  403bfc:	f004 ffb8 	bl	408b70 <__aeabi_dcmpun>
  403c00:	2800      	cmp	r0, #0
  403c02:	f040 834a 	bne.w	40429a <_svfprintf_r+0xe3e>
  403c06:	4628      	mov	r0, r5
  403c08:	4621      	mov	r1, r4
  403c0a:	f04f 32ff 	mov.w	r2, #4294967295
  403c0e:	4b54      	ldr	r3, [pc, #336]	; (403d60 <_svfprintf_r+0x904>)
  403c10:	f004 ff90 	bl	408b34 <__aeabi_dcmple>
  403c14:	2800      	cmp	r0, #0
  403c16:	f040 8340 	bne.w	40429a <_svfprintf_r+0xe3e>
  403c1a:	a815      	add	r0, sp, #84	; 0x54
  403c1c:	c80d      	ldmia	r0, {r0, r2, r3}
  403c1e:	9914      	ldr	r1, [sp, #80]	; 0x50
  403c20:	f004 ff7e 	bl	408b20 <__aeabi_dcmplt>
  403c24:	2800      	cmp	r0, #0
  403c26:	f040 8530 	bne.w	40468a <_svfprintf_r+0x122e>
  403c2a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403c2e:	4e4d      	ldr	r6, [pc, #308]	; (403d64 <_svfprintf_r+0x908>)
  403c30:	4b4d      	ldr	r3, [pc, #308]	; (403d68 <_svfprintf_r+0x90c>)
  403c32:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  403c36:	9007      	str	r0, [sp, #28]
  403c38:	9811      	ldr	r0, [sp, #68]	; 0x44
  403c3a:	2203      	movs	r2, #3
  403c3c:	2100      	movs	r1, #0
  403c3e:	9208      	str	r2, [sp, #32]
  403c40:	910a      	str	r1, [sp, #40]	; 0x28
  403c42:	2847      	cmp	r0, #71	; 0x47
  403c44:	bfd8      	it	le
  403c46:	461e      	movle	r6, r3
  403c48:	920e      	str	r2, [sp, #56]	; 0x38
  403c4a:	9112      	str	r1, [sp, #72]	; 0x48
  403c4c:	e51e      	b.n	40368c <_svfprintf_r+0x230>
  403c4e:	f04b 0b08 	orr.w	fp, fp, #8
  403c52:	f89a 3000 	ldrb.w	r3, [sl]
  403c56:	e459      	b.n	40350c <_svfprintf_r+0xb0>
  403c58:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403c5c:	2300      	movs	r3, #0
  403c5e:	461c      	mov	r4, r3
  403c60:	f81a 3b01 	ldrb.w	r3, [sl], #1
  403c64:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  403c68:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  403c6c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403c70:	2809      	cmp	r0, #9
  403c72:	d9f5      	bls.n	403c60 <_svfprintf_r+0x804>
  403c74:	940d      	str	r4, [sp, #52]	; 0x34
  403c76:	e44b      	b.n	403510 <_svfprintf_r+0xb4>
  403c78:	f04b 0b10 	orr.w	fp, fp, #16
  403c7c:	9311      	str	r3, [sp, #68]	; 0x44
  403c7e:	f01b 0320 	ands.w	r3, fp, #32
  403c82:	f43f ae1d 	beq.w	4038c0 <_svfprintf_r+0x464>
  403c86:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403c88:	3507      	adds	r5, #7
  403c8a:	f025 0307 	bic.w	r3, r5, #7
  403c8e:	f103 0208 	add.w	r2, r3, #8
  403c92:	e9d3 4500 	ldrd	r4, r5, [r3]
  403c96:	920f      	str	r2, [sp, #60]	; 0x3c
  403c98:	2300      	movs	r3, #0
  403c9a:	e4d2      	b.n	403642 <_svfprintf_r+0x1e6>
  403c9c:	9311      	str	r3, [sp, #68]	; 0x44
  403c9e:	2a00      	cmp	r2, #0
  403ca0:	f040 85e7 	bne.w	404872 <_svfprintf_r+0x1416>
  403ca4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403ca6:	2a00      	cmp	r2, #0
  403ca8:	f43f aca3 	beq.w	4035f2 <_svfprintf_r+0x196>
  403cac:	2300      	movs	r3, #0
  403cae:	2101      	movs	r1, #1
  403cb0:	461f      	mov	r7, r3
  403cb2:	9108      	str	r1, [sp, #32]
  403cb4:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  403cb8:	f8cd b01c 	str.w	fp, [sp, #28]
  403cbc:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403cc0:	930a      	str	r3, [sp, #40]	; 0x28
  403cc2:	9312      	str	r3, [sp, #72]	; 0x48
  403cc4:	910e      	str	r1, [sp, #56]	; 0x38
  403cc6:	ae28      	add	r6, sp, #160	; 0xa0
  403cc8:	e4e4      	b.n	403694 <_svfprintf_r+0x238>
  403cca:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403ccc:	e534      	b.n	403738 <_svfprintf_r+0x2dc>
  403cce:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403cd0:	2b65      	cmp	r3, #101	; 0x65
  403cd2:	f340 80a7 	ble.w	403e24 <_svfprintf_r+0x9c8>
  403cd6:	a815      	add	r0, sp, #84	; 0x54
  403cd8:	c80d      	ldmia	r0, {r0, r2, r3}
  403cda:	9914      	ldr	r1, [sp, #80]	; 0x50
  403cdc:	f004 ff16 	bl	408b0c <__aeabi_dcmpeq>
  403ce0:	2800      	cmp	r0, #0
  403ce2:	f000 8150 	beq.w	403f86 <_svfprintf_r+0xb2a>
  403ce6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403ce8:	4a20      	ldr	r2, [pc, #128]	; (403d6c <_svfprintf_r+0x910>)
  403cea:	f8c8 2000 	str.w	r2, [r8]
  403cee:	3301      	adds	r3, #1
  403cf0:	3401      	adds	r4, #1
  403cf2:	2201      	movs	r2, #1
  403cf4:	2b07      	cmp	r3, #7
  403cf6:	9427      	str	r4, [sp, #156]	; 0x9c
  403cf8:	9326      	str	r3, [sp, #152]	; 0x98
  403cfa:	f8c8 2004 	str.w	r2, [r8, #4]
  403cfe:	f300 836a 	bgt.w	4043d6 <_svfprintf_r+0xf7a>
  403d02:	f108 0808 	add.w	r8, r8, #8
  403d06:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403d08:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  403d0a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403d0c:	4293      	cmp	r3, r2
  403d0e:	db03      	blt.n	403d18 <_svfprintf_r+0x8bc>
  403d10:	9b07      	ldr	r3, [sp, #28]
  403d12:	07dd      	lsls	r5, r3, #31
  403d14:	f57f ad82 	bpl.w	40381c <_svfprintf_r+0x3c0>
  403d18:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403d1a:	9919      	ldr	r1, [sp, #100]	; 0x64
  403d1c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  403d1e:	f8c8 2000 	str.w	r2, [r8]
  403d22:	3301      	adds	r3, #1
  403d24:	440c      	add	r4, r1
  403d26:	2b07      	cmp	r3, #7
  403d28:	f8c8 1004 	str.w	r1, [r8, #4]
  403d2c:	9427      	str	r4, [sp, #156]	; 0x9c
  403d2e:	9326      	str	r3, [sp, #152]	; 0x98
  403d30:	f300 839e 	bgt.w	404470 <_svfprintf_r+0x1014>
  403d34:	f108 0808 	add.w	r8, r8, #8
  403d38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403d3a:	1e5e      	subs	r6, r3, #1
  403d3c:	2e00      	cmp	r6, #0
  403d3e:	f77f ad6d 	ble.w	40381c <_svfprintf_r+0x3c0>
  403d42:	2e10      	cmp	r6, #16
  403d44:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403d46:	4d0a      	ldr	r5, [pc, #40]	; (403d70 <_svfprintf_r+0x914>)
  403d48:	f340 81f5 	ble.w	404136 <_svfprintf_r+0xcda>
  403d4c:	4622      	mov	r2, r4
  403d4e:	2710      	movs	r7, #16
  403d50:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  403d54:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  403d56:	e013      	b.n	403d80 <_svfprintf_r+0x924>
  403d58:	00409794 	.word	0x00409794
  403d5c:	00409780 	.word	0x00409780
  403d60:	7fefffff 	.word	0x7fefffff
  403d64:	00409774 	.word	0x00409774
  403d68:	00409770 	.word	0x00409770
  403d6c:	004097b0 	.word	0x004097b0
  403d70:	004097c4 	.word	0x004097c4
  403d74:	f108 0808 	add.w	r8, r8, #8
  403d78:	3e10      	subs	r6, #16
  403d7a:	2e10      	cmp	r6, #16
  403d7c:	f340 81da 	ble.w	404134 <_svfprintf_r+0xcd8>
  403d80:	3301      	adds	r3, #1
  403d82:	3210      	adds	r2, #16
  403d84:	2b07      	cmp	r3, #7
  403d86:	9227      	str	r2, [sp, #156]	; 0x9c
  403d88:	9326      	str	r3, [sp, #152]	; 0x98
  403d8a:	e888 00a0 	stmia.w	r8, {r5, r7}
  403d8e:	ddf1      	ble.n	403d74 <_svfprintf_r+0x918>
  403d90:	aa25      	add	r2, sp, #148	; 0x94
  403d92:	4621      	mov	r1, r4
  403d94:	4658      	mov	r0, fp
  403d96:	f004 f81d 	bl	407dd4 <__ssprint_r>
  403d9a:	2800      	cmp	r0, #0
  403d9c:	f47f ac30 	bne.w	403600 <_svfprintf_r+0x1a4>
  403da0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403da2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403da4:	46c8      	mov	r8, r9
  403da6:	e7e7      	b.n	403d78 <_svfprintf_r+0x91c>
  403da8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403daa:	9a08      	ldr	r2, [sp, #32]
  403dac:	1a9f      	subs	r7, r3, r2
  403dae:	2f00      	cmp	r7, #0
  403db0:	f77f ace5 	ble.w	40377e <_svfprintf_r+0x322>
  403db4:	2f10      	cmp	r7, #16
  403db6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403db8:	4db6      	ldr	r5, [pc, #728]	; (404094 <_svfprintf_r+0xc38>)
  403dba:	dd27      	ble.n	403e0c <_svfprintf_r+0x9b0>
  403dbc:	4642      	mov	r2, r8
  403dbe:	4621      	mov	r1, r4
  403dc0:	46b0      	mov	r8, r6
  403dc2:	f04f 0b10 	mov.w	fp, #16
  403dc6:	462e      	mov	r6, r5
  403dc8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403dca:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  403dcc:	e004      	b.n	403dd8 <_svfprintf_r+0x97c>
  403dce:	3f10      	subs	r7, #16
  403dd0:	2f10      	cmp	r7, #16
  403dd2:	f102 0208 	add.w	r2, r2, #8
  403dd6:	dd15      	ble.n	403e04 <_svfprintf_r+0x9a8>
  403dd8:	3301      	adds	r3, #1
  403dda:	3110      	adds	r1, #16
  403ddc:	2b07      	cmp	r3, #7
  403dde:	9127      	str	r1, [sp, #156]	; 0x9c
  403de0:	9326      	str	r3, [sp, #152]	; 0x98
  403de2:	e882 0840 	stmia.w	r2, {r6, fp}
  403de6:	ddf2      	ble.n	403dce <_svfprintf_r+0x972>
  403de8:	aa25      	add	r2, sp, #148	; 0x94
  403dea:	4629      	mov	r1, r5
  403dec:	4620      	mov	r0, r4
  403dee:	f003 fff1 	bl	407dd4 <__ssprint_r>
  403df2:	2800      	cmp	r0, #0
  403df4:	f47f ac04 	bne.w	403600 <_svfprintf_r+0x1a4>
  403df8:	3f10      	subs	r7, #16
  403dfa:	2f10      	cmp	r7, #16
  403dfc:	9927      	ldr	r1, [sp, #156]	; 0x9c
  403dfe:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403e00:	464a      	mov	r2, r9
  403e02:	dce9      	bgt.n	403dd8 <_svfprintf_r+0x97c>
  403e04:	4635      	mov	r5, r6
  403e06:	460c      	mov	r4, r1
  403e08:	4646      	mov	r6, r8
  403e0a:	4690      	mov	r8, r2
  403e0c:	3301      	adds	r3, #1
  403e0e:	443c      	add	r4, r7
  403e10:	2b07      	cmp	r3, #7
  403e12:	9427      	str	r4, [sp, #156]	; 0x9c
  403e14:	9326      	str	r3, [sp, #152]	; 0x98
  403e16:	e888 00a0 	stmia.w	r8, {r5, r7}
  403e1a:	f300 8232 	bgt.w	404282 <_svfprintf_r+0xe26>
  403e1e:	f108 0808 	add.w	r8, r8, #8
  403e22:	e4ac      	b.n	40377e <_svfprintf_r+0x322>
  403e24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403e26:	9f26      	ldr	r7, [sp, #152]	; 0x98
  403e28:	2b01      	cmp	r3, #1
  403e2a:	f340 81fe 	ble.w	40422a <_svfprintf_r+0xdce>
  403e2e:	3701      	adds	r7, #1
  403e30:	3401      	adds	r4, #1
  403e32:	2301      	movs	r3, #1
  403e34:	2f07      	cmp	r7, #7
  403e36:	9427      	str	r4, [sp, #156]	; 0x9c
  403e38:	9726      	str	r7, [sp, #152]	; 0x98
  403e3a:	f8c8 6000 	str.w	r6, [r8]
  403e3e:	f8c8 3004 	str.w	r3, [r8, #4]
  403e42:	f300 8203 	bgt.w	40424c <_svfprintf_r+0xdf0>
  403e46:	f108 0808 	add.w	r8, r8, #8
  403e4a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  403e4c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  403e4e:	f8c8 3000 	str.w	r3, [r8]
  403e52:	3701      	adds	r7, #1
  403e54:	4414      	add	r4, r2
  403e56:	2f07      	cmp	r7, #7
  403e58:	9427      	str	r4, [sp, #156]	; 0x9c
  403e5a:	9726      	str	r7, [sp, #152]	; 0x98
  403e5c:	f8c8 2004 	str.w	r2, [r8, #4]
  403e60:	f300 8200 	bgt.w	404264 <_svfprintf_r+0xe08>
  403e64:	f108 0808 	add.w	r8, r8, #8
  403e68:	a815      	add	r0, sp, #84	; 0x54
  403e6a:	c80d      	ldmia	r0, {r0, r2, r3}
  403e6c:	9914      	ldr	r1, [sp, #80]	; 0x50
  403e6e:	f004 fe4d 	bl	408b0c <__aeabi_dcmpeq>
  403e72:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403e74:	2800      	cmp	r0, #0
  403e76:	f040 8101 	bne.w	40407c <_svfprintf_r+0xc20>
  403e7a:	3b01      	subs	r3, #1
  403e7c:	3701      	adds	r7, #1
  403e7e:	3601      	adds	r6, #1
  403e80:	441c      	add	r4, r3
  403e82:	2f07      	cmp	r7, #7
  403e84:	9726      	str	r7, [sp, #152]	; 0x98
  403e86:	9427      	str	r4, [sp, #156]	; 0x9c
  403e88:	f8c8 6000 	str.w	r6, [r8]
  403e8c:	f8c8 3004 	str.w	r3, [r8, #4]
  403e90:	f300 8127 	bgt.w	4040e2 <_svfprintf_r+0xc86>
  403e94:	f108 0808 	add.w	r8, r8, #8
  403e98:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  403e9a:	f8c8 2004 	str.w	r2, [r8, #4]
  403e9e:	3701      	adds	r7, #1
  403ea0:	4414      	add	r4, r2
  403ea2:	ab21      	add	r3, sp, #132	; 0x84
  403ea4:	2f07      	cmp	r7, #7
  403ea6:	9427      	str	r4, [sp, #156]	; 0x9c
  403ea8:	9726      	str	r7, [sp, #152]	; 0x98
  403eaa:	f8c8 3000 	str.w	r3, [r8]
  403eae:	f77f acb3 	ble.w	403818 <_svfprintf_r+0x3bc>
  403eb2:	aa25      	add	r2, sp, #148	; 0x94
  403eb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403eb6:	980c      	ldr	r0, [sp, #48]	; 0x30
  403eb8:	f003 ff8c 	bl	407dd4 <__ssprint_r>
  403ebc:	2800      	cmp	r0, #0
  403ebe:	f47f ab9f 	bne.w	403600 <_svfprintf_r+0x1a4>
  403ec2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403ec4:	46c8      	mov	r8, r9
  403ec6:	e4a9      	b.n	40381c <_svfprintf_r+0x3c0>
  403ec8:	aa25      	add	r2, sp, #148	; 0x94
  403eca:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403ecc:	980c      	ldr	r0, [sp, #48]	; 0x30
  403ece:	f003 ff81 	bl	407dd4 <__ssprint_r>
  403ed2:	2800      	cmp	r0, #0
  403ed4:	f43f aceb 	beq.w	4038ae <_svfprintf_r+0x452>
  403ed8:	f7ff bb92 	b.w	403600 <_svfprintf_r+0x1a4>
  403edc:	f8dd b01c 	ldr.w	fp, [sp, #28]
  403ee0:	2b01      	cmp	r3, #1
  403ee2:	f000 8134 	beq.w	40414e <_svfprintf_r+0xcf2>
  403ee6:	2b02      	cmp	r3, #2
  403ee8:	d125      	bne.n	403f36 <_svfprintf_r+0xada>
  403eea:	f8cd b01c 	str.w	fp, [sp, #28]
  403eee:	2400      	movs	r4, #0
  403ef0:	2500      	movs	r5, #0
  403ef2:	e61e      	b.n	403b32 <_svfprintf_r+0x6d6>
  403ef4:	aa25      	add	r2, sp, #148	; 0x94
  403ef6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403ef8:	980c      	ldr	r0, [sp, #48]	; 0x30
  403efa:	f003 ff6b 	bl	407dd4 <__ssprint_r>
  403efe:	2800      	cmp	r0, #0
  403f00:	f47f ab7e 	bne.w	403600 <_svfprintf_r+0x1a4>
  403f04:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403f06:	46c8      	mov	r8, r9
  403f08:	e475      	b.n	4037f6 <_svfprintf_r+0x39a>
  403f0a:	aa25      	add	r2, sp, #148	; 0x94
  403f0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403f0e:	980c      	ldr	r0, [sp, #48]	; 0x30
  403f10:	f003 ff60 	bl	407dd4 <__ssprint_r>
  403f14:	2800      	cmp	r0, #0
  403f16:	f47f ab73 	bne.w	403600 <_svfprintf_r+0x1a4>
  403f1a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403f1c:	46c8      	mov	r8, r9
  403f1e:	e41b      	b.n	403758 <_svfprintf_r+0x2fc>
  403f20:	aa25      	add	r2, sp, #148	; 0x94
  403f22:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403f24:	980c      	ldr	r0, [sp, #48]	; 0x30
  403f26:	f003 ff55 	bl	407dd4 <__ssprint_r>
  403f2a:	2800      	cmp	r0, #0
  403f2c:	f47f ab68 	bne.w	403600 <_svfprintf_r+0x1a4>
  403f30:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403f32:	46c8      	mov	r8, r9
  403f34:	e420      	b.n	403778 <_svfprintf_r+0x31c>
  403f36:	f8cd b01c 	str.w	fp, [sp, #28]
  403f3a:	2400      	movs	r4, #0
  403f3c:	2500      	movs	r5, #0
  403f3e:	4649      	mov	r1, r9
  403f40:	e000      	b.n	403f44 <_svfprintf_r+0xae8>
  403f42:	4631      	mov	r1, r6
  403f44:	08e2      	lsrs	r2, r4, #3
  403f46:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  403f4a:	08e8      	lsrs	r0, r5, #3
  403f4c:	f004 0307 	and.w	r3, r4, #7
  403f50:	4605      	mov	r5, r0
  403f52:	4614      	mov	r4, r2
  403f54:	3330      	adds	r3, #48	; 0x30
  403f56:	ea54 0205 	orrs.w	r2, r4, r5
  403f5a:	f801 3c01 	strb.w	r3, [r1, #-1]
  403f5e:	f101 36ff 	add.w	r6, r1, #4294967295
  403f62:	d1ee      	bne.n	403f42 <_svfprintf_r+0xae6>
  403f64:	9a07      	ldr	r2, [sp, #28]
  403f66:	07d2      	lsls	r2, r2, #31
  403f68:	f57f adf3 	bpl.w	403b52 <_svfprintf_r+0x6f6>
  403f6c:	2b30      	cmp	r3, #48	; 0x30
  403f6e:	f43f adf0 	beq.w	403b52 <_svfprintf_r+0x6f6>
  403f72:	3902      	subs	r1, #2
  403f74:	2330      	movs	r3, #48	; 0x30
  403f76:	f806 3c01 	strb.w	r3, [r6, #-1]
  403f7a:	eba9 0301 	sub.w	r3, r9, r1
  403f7e:	930e      	str	r3, [sp, #56]	; 0x38
  403f80:	460e      	mov	r6, r1
  403f82:	f7ff bb7b 	b.w	40367c <_svfprintf_r+0x220>
  403f86:	991f      	ldr	r1, [sp, #124]	; 0x7c
  403f88:	2900      	cmp	r1, #0
  403f8a:	f340 822e 	ble.w	4043ea <_svfprintf_r+0xf8e>
  403f8e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403f90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  403f92:	4293      	cmp	r3, r2
  403f94:	bfa8      	it	ge
  403f96:	4613      	movge	r3, r2
  403f98:	2b00      	cmp	r3, #0
  403f9a:	461f      	mov	r7, r3
  403f9c:	dd0d      	ble.n	403fba <_svfprintf_r+0xb5e>
  403f9e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403fa0:	f8c8 6000 	str.w	r6, [r8]
  403fa4:	3301      	adds	r3, #1
  403fa6:	443c      	add	r4, r7
  403fa8:	2b07      	cmp	r3, #7
  403faa:	9427      	str	r4, [sp, #156]	; 0x9c
  403fac:	f8c8 7004 	str.w	r7, [r8, #4]
  403fb0:	9326      	str	r3, [sp, #152]	; 0x98
  403fb2:	f300 831f 	bgt.w	4045f4 <_svfprintf_r+0x1198>
  403fb6:	f108 0808 	add.w	r8, r8, #8
  403fba:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403fbc:	2f00      	cmp	r7, #0
  403fbe:	bfa8      	it	ge
  403fc0:	1bdb      	subge	r3, r3, r7
  403fc2:	2b00      	cmp	r3, #0
  403fc4:	461f      	mov	r7, r3
  403fc6:	f340 80d6 	ble.w	404176 <_svfprintf_r+0xd1a>
  403fca:	2f10      	cmp	r7, #16
  403fcc:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403fce:	4d31      	ldr	r5, [pc, #196]	; (404094 <_svfprintf_r+0xc38>)
  403fd0:	f340 81ed 	ble.w	4043ae <_svfprintf_r+0xf52>
  403fd4:	4642      	mov	r2, r8
  403fd6:	4621      	mov	r1, r4
  403fd8:	46b0      	mov	r8, r6
  403fda:	f04f 0b10 	mov.w	fp, #16
  403fde:	462e      	mov	r6, r5
  403fe0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403fe2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  403fe4:	e004      	b.n	403ff0 <_svfprintf_r+0xb94>
  403fe6:	3208      	adds	r2, #8
  403fe8:	3f10      	subs	r7, #16
  403fea:	2f10      	cmp	r7, #16
  403fec:	f340 81db 	ble.w	4043a6 <_svfprintf_r+0xf4a>
  403ff0:	3301      	adds	r3, #1
  403ff2:	3110      	adds	r1, #16
  403ff4:	2b07      	cmp	r3, #7
  403ff6:	9127      	str	r1, [sp, #156]	; 0x9c
  403ff8:	9326      	str	r3, [sp, #152]	; 0x98
  403ffa:	e882 0840 	stmia.w	r2, {r6, fp}
  403ffe:	ddf2      	ble.n	403fe6 <_svfprintf_r+0xb8a>
  404000:	aa25      	add	r2, sp, #148	; 0x94
  404002:	4629      	mov	r1, r5
  404004:	4620      	mov	r0, r4
  404006:	f003 fee5 	bl	407dd4 <__ssprint_r>
  40400a:	2800      	cmp	r0, #0
  40400c:	f47f aaf8 	bne.w	403600 <_svfprintf_r+0x1a4>
  404010:	9927      	ldr	r1, [sp, #156]	; 0x9c
  404012:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404014:	464a      	mov	r2, r9
  404016:	e7e7      	b.n	403fe8 <_svfprintf_r+0xb8c>
  404018:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40401a:	930e      	str	r3, [sp, #56]	; 0x38
  40401c:	464e      	mov	r6, r9
  40401e:	f7ff bb2d 	b.w	40367c <_svfprintf_r+0x220>
  404022:	2d00      	cmp	r5, #0
  404024:	bf08      	it	eq
  404026:	2c0a      	cmpeq	r4, #10
  404028:	f0c0 808f 	bcc.w	40414a <_svfprintf_r+0xcee>
  40402c:	464e      	mov	r6, r9
  40402e:	4620      	mov	r0, r4
  404030:	4629      	mov	r1, r5
  404032:	220a      	movs	r2, #10
  404034:	2300      	movs	r3, #0
  404036:	f004 fdd9 	bl	408bec <__aeabi_uldivmod>
  40403a:	3230      	adds	r2, #48	; 0x30
  40403c:	f806 2d01 	strb.w	r2, [r6, #-1]!
  404040:	4620      	mov	r0, r4
  404042:	4629      	mov	r1, r5
  404044:	2300      	movs	r3, #0
  404046:	220a      	movs	r2, #10
  404048:	f004 fdd0 	bl	408bec <__aeabi_uldivmod>
  40404c:	4604      	mov	r4, r0
  40404e:	460d      	mov	r5, r1
  404050:	ea54 0305 	orrs.w	r3, r4, r5
  404054:	d1eb      	bne.n	40402e <_svfprintf_r+0xbd2>
  404056:	eba9 0306 	sub.w	r3, r9, r6
  40405a:	930e      	str	r3, [sp, #56]	; 0x38
  40405c:	f7ff bb0e 	b.w	40367c <_svfprintf_r+0x220>
  404060:	aa25      	add	r2, sp, #148	; 0x94
  404062:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404064:	980c      	ldr	r0, [sp, #48]	; 0x30
  404066:	f003 feb5 	bl	407dd4 <__ssprint_r>
  40406a:	2800      	cmp	r0, #0
  40406c:	f47f aac8 	bne.w	403600 <_svfprintf_r+0x1a4>
  404070:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404074:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404076:	46c8      	mov	r8, r9
  404078:	f7ff bb5e 	b.w	403738 <_svfprintf_r+0x2dc>
  40407c:	1e5e      	subs	r6, r3, #1
  40407e:	2e00      	cmp	r6, #0
  404080:	f77f af0a 	ble.w	403e98 <_svfprintf_r+0xa3c>
  404084:	2e10      	cmp	r6, #16
  404086:	4d03      	ldr	r5, [pc, #12]	; (404094 <_svfprintf_r+0xc38>)
  404088:	dd22      	ble.n	4040d0 <_svfprintf_r+0xc74>
  40408a:	4622      	mov	r2, r4
  40408c:	f04f 0b10 	mov.w	fp, #16
  404090:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404092:	e006      	b.n	4040a2 <_svfprintf_r+0xc46>
  404094:	004097c4 	.word	0x004097c4
  404098:	3e10      	subs	r6, #16
  40409a:	2e10      	cmp	r6, #16
  40409c:	f108 0808 	add.w	r8, r8, #8
  4040a0:	dd15      	ble.n	4040ce <_svfprintf_r+0xc72>
  4040a2:	3701      	adds	r7, #1
  4040a4:	3210      	adds	r2, #16
  4040a6:	2f07      	cmp	r7, #7
  4040a8:	9227      	str	r2, [sp, #156]	; 0x9c
  4040aa:	9726      	str	r7, [sp, #152]	; 0x98
  4040ac:	e888 0820 	stmia.w	r8, {r5, fp}
  4040b0:	ddf2      	ble.n	404098 <_svfprintf_r+0xc3c>
  4040b2:	aa25      	add	r2, sp, #148	; 0x94
  4040b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4040b6:	4620      	mov	r0, r4
  4040b8:	f003 fe8c 	bl	407dd4 <__ssprint_r>
  4040bc:	2800      	cmp	r0, #0
  4040be:	f47f aa9f 	bne.w	403600 <_svfprintf_r+0x1a4>
  4040c2:	3e10      	subs	r6, #16
  4040c4:	2e10      	cmp	r6, #16
  4040c6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4040c8:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4040ca:	46c8      	mov	r8, r9
  4040cc:	dce9      	bgt.n	4040a2 <_svfprintf_r+0xc46>
  4040ce:	4614      	mov	r4, r2
  4040d0:	3701      	adds	r7, #1
  4040d2:	4434      	add	r4, r6
  4040d4:	2f07      	cmp	r7, #7
  4040d6:	9427      	str	r4, [sp, #156]	; 0x9c
  4040d8:	9726      	str	r7, [sp, #152]	; 0x98
  4040da:	e888 0060 	stmia.w	r8, {r5, r6}
  4040de:	f77f aed9 	ble.w	403e94 <_svfprintf_r+0xa38>
  4040e2:	aa25      	add	r2, sp, #148	; 0x94
  4040e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4040e6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4040e8:	f003 fe74 	bl	407dd4 <__ssprint_r>
  4040ec:	2800      	cmp	r0, #0
  4040ee:	f47f aa87 	bne.w	403600 <_svfprintf_r+0x1a4>
  4040f2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4040f4:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4040f6:	46c8      	mov	r8, r9
  4040f8:	e6ce      	b.n	403e98 <_svfprintf_r+0xa3c>
  4040fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4040fc:	6814      	ldr	r4, [r2, #0]
  4040fe:	4613      	mov	r3, r2
  404100:	3304      	adds	r3, #4
  404102:	17e5      	asrs	r5, r4, #31
  404104:	930f      	str	r3, [sp, #60]	; 0x3c
  404106:	4622      	mov	r2, r4
  404108:	462b      	mov	r3, r5
  40410a:	e4fa      	b.n	403b02 <_svfprintf_r+0x6a6>
  40410c:	3204      	adds	r2, #4
  40410e:	681c      	ldr	r4, [r3, #0]
  404110:	920f      	str	r2, [sp, #60]	; 0x3c
  404112:	2301      	movs	r3, #1
  404114:	2500      	movs	r5, #0
  404116:	f7ff ba94 	b.w	403642 <_svfprintf_r+0x1e6>
  40411a:	681c      	ldr	r4, [r3, #0]
  40411c:	3304      	adds	r3, #4
  40411e:	930f      	str	r3, [sp, #60]	; 0x3c
  404120:	2500      	movs	r5, #0
  404122:	e421      	b.n	403968 <_svfprintf_r+0x50c>
  404124:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404126:	460a      	mov	r2, r1
  404128:	3204      	adds	r2, #4
  40412a:	680c      	ldr	r4, [r1, #0]
  40412c:	920f      	str	r2, [sp, #60]	; 0x3c
  40412e:	2500      	movs	r5, #0
  404130:	f7ff ba87 	b.w	403642 <_svfprintf_r+0x1e6>
  404134:	4614      	mov	r4, r2
  404136:	3301      	adds	r3, #1
  404138:	4434      	add	r4, r6
  40413a:	2b07      	cmp	r3, #7
  40413c:	9427      	str	r4, [sp, #156]	; 0x9c
  40413e:	9326      	str	r3, [sp, #152]	; 0x98
  404140:	e888 0060 	stmia.w	r8, {r5, r6}
  404144:	f77f ab68 	ble.w	403818 <_svfprintf_r+0x3bc>
  404148:	e6b3      	b.n	403eb2 <_svfprintf_r+0xa56>
  40414a:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40414e:	f8cd b01c 	str.w	fp, [sp, #28]
  404152:	ae42      	add	r6, sp, #264	; 0x108
  404154:	3430      	adds	r4, #48	; 0x30
  404156:	2301      	movs	r3, #1
  404158:	f806 4d41 	strb.w	r4, [r6, #-65]!
  40415c:	930e      	str	r3, [sp, #56]	; 0x38
  40415e:	f7ff ba8d 	b.w	40367c <_svfprintf_r+0x220>
  404162:	aa25      	add	r2, sp, #148	; 0x94
  404164:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404166:	980c      	ldr	r0, [sp, #48]	; 0x30
  404168:	f003 fe34 	bl	407dd4 <__ssprint_r>
  40416c:	2800      	cmp	r0, #0
  40416e:	f47f aa47 	bne.w	403600 <_svfprintf_r+0x1a4>
  404172:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404174:	46c8      	mov	r8, r9
  404176:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  404178:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40417a:	429a      	cmp	r2, r3
  40417c:	db44      	blt.n	404208 <_svfprintf_r+0xdac>
  40417e:	9b07      	ldr	r3, [sp, #28]
  404180:	07d9      	lsls	r1, r3, #31
  404182:	d441      	bmi.n	404208 <_svfprintf_r+0xdac>
  404184:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404186:	9812      	ldr	r0, [sp, #72]	; 0x48
  404188:	1a9a      	subs	r2, r3, r2
  40418a:	1a1d      	subs	r5, r3, r0
  40418c:	4295      	cmp	r5, r2
  40418e:	bfa8      	it	ge
  404190:	4615      	movge	r5, r2
  404192:	2d00      	cmp	r5, #0
  404194:	dd0e      	ble.n	4041b4 <_svfprintf_r+0xd58>
  404196:	9926      	ldr	r1, [sp, #152]	; 0x98
  404198:	f8c8 5004 	str.w	r5, [r8, #4]
  40419c:	3101      	adds	r1, #1
  40419e:	4406      	add	r6, r0
  4041a0:	442c      	add	r4, r5
  4041a2:	2907      	cmp	r1, #7
  4041a4:	f8c8 6000 	str.w	r6, [r8]
  4041a8:	9427      	str	r4, [sp, #156]	; 0x9c
  4041aa:	9126      	str	r1, [sp, #152]	; 0x98
  4041ac:	f300 823b 	bgt.w	404626 <_svfprintf_r+0x11ca>
  4041b0:	f108 0808 	add.w	r8, r8, #8
  4041b4:	2d00      	cmp	r5, #0
  4041b6:	bfac      	ite	ge
  4041b8:	1b56      	subge	r6, r2, r5
  4041ba:	4616      	movlt	r6, r2
  4041bc:	2e00      	cmp	r6, #0
  4041be:	f77f ab2d 	ble.w	40381c <_svfprintf_r+0x3c0>
  4041c2:	2e10      	cmp	r6, #16
  4041c4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4041c6:	4db0      	ldr	r5, [pc, #704]	; (404488 <_svfprintf_r+0x102c>)
  4041c8:	ddb5      	ble.n	404136 <_svfprintf_r+0xcda>
  4041ca:	4622      	mov	r2, r4
  4041cc:	2710      	movs	r7, #16
  4041ce:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  4041d2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  4041d4:	e004      	b.n	4041e0 <_svfprintf_r+0xd84>
  4041d6:	f108 0808 	add.w	r8, r8, #8
  4041da:	3e10      	subs	r6, #16
  4041dc:	2e10      	cmp	r6, #16
  4041de:	dda9      	ble.n	404134 <_svfprintf_r+0xcd8>
  4041e0:	3301      	adds	r3, #1
  4041e2:	3210      	adds	r2, #16
  4041e4:	2b07      	cmp	r3, #7
  4041e6:	9227      	str	r2, [sp, #156]	; 0x9c
  4041e8:	9326      	str	r3, [sp, #152]	; 0x98
  4041ea:	e888 00a0 	stmia.w	r8, {r5, r7}
  4041ee:	ddf2      	ble.n	4041d6 <_svfprintf_r+0xd7a>
  4041f0:	aa25      	add	r2, sp, #148	; 0x94
  4041f2:	4621      	mov	r1, r4
  4041f4:	4658      	mov	r0, fp
  4041f6:	f003 fded 	bl	407dd4 <__ssprint_r>
  4041fa:	2800      	cmp	r0, #0
  4041fc:	f47f aa00 	bne.w	403600 <_svfprintf_r+0x1a4>
  404200:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404202:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404204:	46c8      	mov	r8, r9
  404206:	e7e8      	b.n	4041da <_svfprintf_r+0xd7e>
  404208:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40420a:	9819      	ldr	r0, [sp, #100]	; 0x64
  40420c:	991a      	ldr	r1, [sp, #104]	; 0x68
  40420e:	f8c8 1000 	str.w	r1, [r8]
  404212:	3301      	adds	r3, #1
  404214:	4404      	add	r4, r0
  404216:	2b07      	cmp	r3, #7
  404218:	9427      	str	r4, [sp, #156]	; 0x9c
  40421a:	f8c8 0004 	str.w	r0, [r8, #4]
  40421e:	9326      	str	r3, [sp, #152]	; 0x98
  404220:	f300 81f5 	bgt.w	40460e <_svfprintf_r+0x11b2>
  404224:	f108 0808 	add.w	r8, r8, #8
  404228:	e7ac      	b.n	404184 <_svfprintf_r+0xd28>
  40422a:	9b07      	ldr	r3, [sp, #28]
  40422c:	07da      	lsls	r2, r3, #31
  40422e:	f53f adfe 	bmi.w	403e2e <_svfprintf_r+0x9d2>
  404232:	3701      	adds	r7, #1
  404234:	3401      	adds	r4, #1
  404236:	2301      	movs	r3, #1
  404238:	2f07      	cmp	r7, #7
  40423a:	9427      	str	r4, [sp, #156]	; 0x9c
  40423c:	9726      	str	r7, [sp, #152]	; 0x98
  40423e:	f8c8 6000 	str.w	r6, [r8]
  404242:	f8c8 3004 	str.w	r3, [r8, #4]
  404246:	f77f ae25 	ble.w	403e94 <_svfprintf_r+0xa38>
  40424a:	e74a      	b.n	4040e2 <_svfprintf_r+0xc86>
  40424c:	aa25      	add	r2, sp, #148	; 0x94
  40424e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404250:	980c      	ldr	r0, [sp, #48]	; 0x30
  404252:	f003 fdbf 	bl	407dd4 <__ssprint_r>
  404256:	2800      	cmp	r0, #0
  404258:	f47f a9d2 	bne.w	403600 <_svfprintf_r+0x1a4>
  40425c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40425e:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404260:	46c8      	mov	r8, r9
  404262:	e5f2      	b.n	403e4a <_svfprintf_r+0x9ee>
  404264:	aa25      	add	r2, sp, #148	; 0x94
  404266:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404268:	980c      	ldr	r0, [sp, #48]	; 0x30
  40426a:	f003 fdb3 	bl	407dd4 <__ssprint_r>
  40426e:	2800      	cmp	r0, #0
  404270:	f47f a9c6 	bne.w	403600 <_svfprintf_r+0x1a4>
  404274:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404276:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404278:	46c8      	mov	r8, r9
  40427a:	e5f5      	b.n	403e68 <_svfprintf_r+0xa0c>
  40427c:	464e      	mov	r6, r9
  40427e:	f7ff b9fd 	b.w	40367c <_svfprintf_r+0x220>
  404282:	aa25      	add	r2, sp, #148	; 0x94
  404284:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404286:	980c      	ldr	r0, [sp, #48]	; 0x30
  404288:	f003 fda4 	bl	407dd4 <__ssprint_r>
  40428c:	2800      	cmp	r0, #0
  40428e:	f47f a9b7 	bne.w	403600 <_svfprintf_r+0x1a4>
  404292:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404294:	46c8      	mov	r8, r9
  404296:	f7ff ba72 	b.w	40377e <_svfprintf_r+0x322>
  40429a:	9c15      	ldr	r4, [sp, #84]	; 0x54
  40429c:	4622      	mov	r2, r4
  40429e:	4620      	mov	r0, r4
  4042a0:	9c14      	ldr	r4, [sp, #80]	; 0x50
  4042a2:	4623      	mov	r3, r4
  4042a4:	4621      	mov	r1, r4
  4042a6:	f004 fc63 	bl	408b70 <__aeabi_dcmpun>
  4042aa:	2800      	cmp	r0, #0
  4042ac:	f040 8286 	bne.w	4047bc <_svfprintf_r+0x1360>
  4042b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4042b2:	3301      	adds	r3, #1
  4042b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4042b6:	f023 0320 	bic.w	r3, r3, #32
  4042ba:	930e      	str	r3, [sp, #56]	; 0x38
  4042bc:	f000 81e2 	beq.w	404684 <_svfprintf_r+0x1228>
  4042c0:	2b47      	cmp	r3, #71	; 0x47
  4042c2:	f000 811e 	beq.w	404502 <_svfprintf_r+0x10a6>
  4042c6:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  4042ca:	9307      	str	r3, [sp, #28]
  4042cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4042ce:	1e1f      	subs	r7, r3, #0
  4042d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4042d2:	9308      	str	r3, [sp, #32]
  4042d4:	bfbb      	ittet	lt
  4042d6:	463b      	movlt	r3, r7
  4042d8:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  4042dc:	2300      	movge	r3, #0
  4042de:	232d      	movlt	r3, #45	; 0x2d
  4042e0:	9310      	str	r3, [sp, #64]	; 0x40
  4042e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4042e4:	2b66      	cmp	r3, #102	; 0x66
  4042e6:	f000 81bb 	beq.w	404660 <_svfprintf_r+0x1204>
  4042ea:	2b46      	cmp	r3, #70	; 0x46
  4042ec:	f000 80df 	beq.w	4044ae <_svfprintf_r+0x1052>
  4042f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4042f2:	9a08      	ldr	r2, [sp, #32]
  4042f4:	2b45      	cmp	r3, #69	; 0x45
  4042f6:	bf0c      	ite	eq
  4042f8:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  4042fa:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  4042fc:	a823      	add	r0, sp, #140	; 0x8c
  4042fe:	a920      	add	r1, sp, #128	; 0x80
  404300:	bf08      	it	eq
  404302:	1c5d      	addeq	r5, r3, #1
  404304:	9004      	str	r0, [sp, #16]
  404306:	9103      	str	r1, [sp, #12]
  404308:	a81f      	add	r0, sp, #124	; 0x7c
  40430a:	2102      	movs	r1, #2
  40430c:	463b      	mov	r3, r7
  40430e:	9002      	str	r0, [sp, #8]
  404310:	9501      	str	r5, [sp, #4]
  404312:	9100      	str	r1, [sp, #0]
  404314:	980c      	ldr	r0, [sp, #48]	; 0x30
  404316:	f001 faa3 	bl	405860 <_dtoa_r>
  40431a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40431c:	2b67      	cmp	r3, #103	; 0x67
  40431e:	4606      	mov	r6, r0
  404320:	f040 81e0 	bne.w	4046e4 <_svfprintf_r+0x1288>
  404324:	f01b 0f01 	tst.w	fp, #1
  404328:	f000 8246 	beq.w	4047b8 <_svfprintf_r+0x135c>
  40432c:	1974      	adds	r4, r6, r5
  40432e:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404330:	9808      	ldr	r0, [sp, #32]
  404332:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404334:	4639      	mov	r1, r7
  404336:	f004 fbe9 	bl	408b0c <__aeabi_dcmpeq>
  40433a:	2800      	cmp	r0, #0
  40433c:	f040 8165 	bne.w	40460a <_svfprintf_r+0x11ae>
  404340:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404342:	42a3      	cmp	r3, r4
  404344:	d206      	bcs.n	404354 <_svfprintf_r+0xef8>
  404346:	2130      	movs	r1, #48	; 0x30
  404348:	1c5a      	adds	r2, r3, #1
  40434a:	9223      	str	r2, [sp, #140]	; 0x8c
  40434c:	7019      	strb	r1, [r3, #0]
  40434e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  404350:	429c      	cmp	r4, r3
  404352:	d8f9      	bhi.n	404348 <_svfprintf_r+0xeec>
  404354:	1b9b      	subs	r3, r3, r6
  404356:	9313      	str	r3, [sp, #76]	; 0x4c
  404358:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40435a:	2b47      	cmp	r3, #71	; 0x47
  40435c:	f000 80e9 	beq.w	404532 <_svfprintf_r+0x10d6>
  404360:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404362:	2b65      	cmp	r3, #101	; 0x65
  404364:	f340 81cd 	ble.w	404702 <_svfprintf_r+0x12a6>
  404368:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40436a:	2b66      	cmp	r3, #102	; 0x66
  40436c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40436e:	9312      	str	r3, [sp, #72]	; 0x48
  404370:	f000 819e 	beq.w	4046b0 <_svfprintf_r+0x1254>
  404374:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404376:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404378:	4619      	mov	r1, r3
  40437a:	4291      	cmp	r1, r2
  40437c:	f300 818a 	bgt.w	404694 <_svfprintf_r+0x1238>
  404380:	f01b 0f01 	tst.w	fp, #1
  404384:	f040 8213 	bne.w	4047ae <_svfprintf_r+0x1352>
  404388:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40438c:	9308      	str	r3, [sp, #32]
  40438e:	2367      	movs	r3, #103	; 0x67
  404390:	920e      	str	r2, [sp, #56]	; 0x38
  404392:	9311      	str	r3, [sp, #68]	; 0x44
  404394:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404396:	2b00      	cmp	r3, #0
  404398:	f040 80c4 	bne.w	404524 <_svfprintf_r+0x10c8>
  40439c:	930a      	str	r3, [sp, #40]	; 0x28
  40439e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4043a2:	f7ff b973 	b.w	40368c <_svfprintf_r+0x230>
  4043a6:	4635      	mov	r5, r6
  4043a8:	460c      	mov	r4, r1
  4043aa:	4646      	mov	r6, r8
  4043ac:	4690      	mov	r8, r2
  4043ae:	3301      	adds	r3, #1
  4043b0:	443c      	add	r4, r7
  4043b2:	2b07      	cmp	r3, #7
  4043b4:	9427      	str	r4, [sp, #156]	; 0x9c
  4043b6:	9326      	str	r3, [sp, #152]	; 0x98
  4043b8:	e888 00a0 	stmia.w	r8, {r5, r7}
  4043bc:	f73f aed1 	bgt.w	404162 <_svfprintf_r+0xd06>
  4043c0:	f108 0808 	add.w	r8, r8, #8
  4043c4:	e6d7      	b.n	404176 <_svfprintf_r+0xd1a>
  4043c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4043c8:	6813      	ldr	r3, [r2, #0]
  4043ca:	3204      	adds	r2, #4
  4043cc:	920f      	str	r2, [sp, #60]	; 0x3c
  4043ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4043d0:	601a      	str	r2, [r3, #0]
  4043d2:	f7ff b86a 	b.w	4034aa <_svfprintf_r+0x4e>
  4043d6:	aa25      	add	r2, sp, #148	; 0x94
  4043d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4043da:	980c      	ldr	r0, [sp, #48]	; 0x30
  4043dc:	f003 fcfa 	bl	407dd4 <__ssprint_r>
  4043e0:	2800      	cmp	r0, #0
  4043e2:	f47f a90d 	bne.w	403600 <_svfprintf_r+0x1a4>
  4043e6:	46c8      	mov	r8, r9
  4043e8:	e48d      	b.n	403d06 <_svfprintf_r+0x8aa>
  4043ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4043ec:	4a27      	ldr	r2, [pc, #156]	; (40448c <_svfprintf_r+0x1030>)
  4043ee:	f8c8 2000 	str.w	r2, [r8]
  4043f2:	3301      	adds	r3, #1
  4043f4:	3401      	adds	r4, #1
  4043f6:	2201      	movs	r2, #1
  4043f8:	2b07      	cmp	r3, #7
  4043fa:	9427      	str	r4, [sp, #156]	; 0x9c
  4043fc:	9326      	str	r3, [sp, #152]	; 0x98
  4043fe:	f8c8 2004 	str.w	r2, [r8, #4]
  404402:	dc72      	bgt.n	4044ea <_svfprintf_r+0x108e>
  404404:	f108 0808 	add.w	r8, r8, #8
  404408:	b929      	cbnz	r1, 404416 <_svfprintf_r+0xfba>
  40440a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40440c:	b91b      	cbnz	r3, 404416 <_svfprintf_r+0xfba>
  40440e:	9b07      	ldr	r3, [sp, #28]
  404410:	07d8      	lsls	r0, r3, #31
  404412:	f57f aa03 	bpl.w	40381c <_svfprintf_r+0x3c0>
  404416:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404418:	9819      	ldr	r0, [sp, #100]	; 0x64
  40441a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40441c:	f8c8 2000 	str.w	r2, [r8]
  404420:	3301      	adds	r3, #1
  404422:	4602      	mov	r2, r0
  404424:	4422      	add	r2, r4
  404426:	2b07      	cmp	r3, #7
  404428:	9227      	str	r2, [sp, #156]	; 0x9c
  40442a:	f8c8 0004 	str.w	r0, [r8, #4]
  40442e:	9326      	str	r3, [sp, #152]	; 0x98
  404430:	f300 818d 	bgt.w	40474e <_svfprintf_r+0x12f2>
  404434:	f108 0808 	add.w	r8, r8, #8
  404438:	2900      	cmp	r1, #0
  40443a:	f2c0 8165 	blt.w	404708 <_svfprintf_r+0x12ac>
  40443e:	9913      	ldr	r1, [sp, #76]	; 0x4c
  404440:	f8c8 6000 	str.w	r6, [r8]
  404444:	3301      	adds	r3, #1
  404446:	188c      	adds	r4, r1, r2
  404448:	2b07      	cmp	r3, #7
  40444a:	9427      	str	r4, [sp, #156]	; 0x9c
  40444c:	9326      	str	r3, [sp, #152]	; 0x98
  40444e:	f8c8 1004 	str.w	r1, [r8, #4]
  404452:	f77f a9e1 	ble.w	403818 <_svfprintf_r+0x3bc>
  404456:	e52c      	b.n	403eb2 <_svfprintf_r+0xa56>
  404458:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40445a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40445c:	6813      	ldr	r3, [r2, #0]
  40445e:	17cd      	asrs	r5, r1, #31
  404460:	4608      	mov	r0, r1
  404462:	3204      	adds	r2, #4
  404464:	4629      	mov	r1, r5
  404466:	920f      	str	r2, [sp, #60]	; 0x3c
  404468:	e9c3 0100 	strd	r0, r1, [r3]
  40446c:	f7ff b81d 	b.w	4034aa <_svfprintf_r+0x4e>
  404470:	aa25      	add	r2, sp, #148	; 0x94
  404472:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404474:	980c      	ldr	r0, [sp, #48]	; 0x30
  404476:	f003 fcad 	bl	407dd4 <__ssprint_r>
  40447a:	2800      	cmp	r0, #0
  40447c:	f47f a8c0 	bne.w	403600 <_svfprintf_r+0x1a4>
  404480:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404482:	46c8      	mov	r8, r9
  404484:	e458      	b.n	403d38 <_svfprintf_r+0x8dc>
  404486:	bf00      	nop
  404488:	004097c4 	.word	0x004097c4
  40448c:	004097b0 	.word	0x004097b0
  404490:	2140      	movs	r1, #64	; 0x40
  404492:	980c      	ldr	r0, [sp, #48]	; 0x30
  404494:	f7fe fad2 	bl	402a3c <_malloc_r>
  404498:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40449a:	6010      	str	r0, [r2, #0]
  40449c:	6110      	str	r0, [r2, #16]
  40449e:	2800      	cmp	r0, #0
  4044a0:	f000 81f2 	beq.w	404888 <_svfprintf_r+0x142c>
  4044a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4044a6:	2340      	movs	r3, #64	; 0x40
  4044a8:	6153      	str	r3, [r2, #20]
  4044aa:	f7fe bfee 	b.w	40348a <_svfprintf_r+0x2e>
  4044ae:	a823      	add	r0, sp, #140	; 0x8c
  4044b0:	a920      	add	r1, sp, #128	; 0x80
  4044b2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4044b4:	9004      	str	r0, [sp, #16]
  4044b6:	9103      	str	r1, [sp, #12]
  4044b8:	a81f      	add	r0, sp, #124	; 0x7c
  4044ba:	2103      	movs	r1, #3
  4044bc:	9002      	str	r0, [sp, #8]
  4044be:	9a08      	ldr	r2, [sp, #32]
  4044c0:	9401      	str	r4, [sp, #4]
  4044c2:	463b      	mov	r3, r7
  4044c4:	9100      	str	r1, [sp, #0]
  4044c6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4044c8:	f001 f9ca 	bl	405860 <_dtoa_r>
  4044cc:	4625      	mov	r5, r4
  4044ce:	4606      	mov	r6, r0
  4044d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4044d2:	2b46      	cmp	r3, #70	; 0x46
  4044d4:	eb06 0405 	add.w	r4, r6, r5
  4044d8:	f47f af29 	bne.w	40432e <_svfprintf_r+0xed2>
  4044dc:	7833      	ldrb	r3, [r6, #0]
  4044de:	2b30      	cmp	r3, #48	; 0x30
  4044e0:	f000 8178 	beq.w	4047d4 <_svfprintf_r+0x1378>
  4044e4:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  4044e6:	442c      	add	r4, r5
  4044e8:	e721      	b.n	40432e <_svfprintf_r+0xed2>
  4044ea:	aa25      	add	r2, sp, #148	; 0x94
  4044ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4044ee:	980c      	ldr	r0, [sp, #48]	; 0x30
  4044f0:	f003 fc70 	bl	407dd4 <__ssprint_r>
  4044f4:	2800      	cmp	r0, #0
  4044f6:	f47f a883 	bne.w	403600 <_svfprintf_r+0x1a4>
  4044fa:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4044fc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4044fe:	46c8      	mov	r8, r9
  404500:	e782      	b.n	404408 <_svfprintf_r+0xfac>
  404502:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404504:	2b00      	cmp	r3, #0
  404506:	bf08      	it	eq
  404508:	2301      	moveq	r3, #1
  40450a:	930a      	str	r3, [sp, #40]	; 0x28
  40450c:	e6db      	b.n	4042c6 <_svfprintf_r+0xe6a>
  40450e:	4630      	mov	r0, r6
  404510:	940a      	str	r4, [sp, #40]	; 0x28
  404512:	f7fe ff35 	bl	403380 <strlen>
  404516:	950f      	str	r5, [sp, #60]	; 0x3c
  404518:	900e      	str	r0, [sp, #56]	; 0x38
  40451a:	f8cd b01c 	str.w	fp, [sp, #28]
  40451e:	4603      	mov	r3, r0
  404520:	f7ff b9f9 	b.w	403916 <_svfprintf_r+0x4ba>
  404524:	272d      	movs	r7, #45	; 0x2d
  404526:	2300      	movs	r3, #0
  404528:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  40452c:	930a      	str	r3, [sp, #40]	; 0x28
  40452e:	f7ff b8ae 	b.w	40368e <_svfprintf_r+0x232>
  404532:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404534:	9312      	str	r3, [sp, #72]	; 0x48
  404536:	461a      	mov	r2, r3
  404538:	3303      	adds	r3, #3
  40453a:	db04      	blt.n	404546 <_svfprintf_r+0x10ea>
  40453c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40453e:	4619      	mov	r1, r3
  404540:	4291      	cmp	r1, r2
  404542:	f6bf af17 	bge.w	404374 <_svfprintf_r+0xf18>
  404546:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404548:	3b02      	subs	r3, #2
  40454a:	9311      	str	r3, [sp, #68]	; 0x44
  40454c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  404550:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  404554:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404556:	3b01      	subs	r3, #1
  404558:	2b00      	cmp	r3, #0
  40455a:	931f      	str	r3, [sp, #124]	; 0x7c
  40455c:	bfbd      	ittte	lt
  40455e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  404560:	f1c3 0301 	rsblt	r3, r3, #1
  404564:	222d      	movlt	r2, #45	; 0x2d
  404566:	222b      	movge	r2, #43	; 0x2b
  404568:	2b09      	cmp	r3, #9
  40456a:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  40456e:	f340 8116 	ble.w	40479e <_svfprintf_r+0x1342>
  404572:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  404576:	4620      	mov	r0, r4
  404578:	4dab      	ldr	r5, [pc, #684]	; (404828 <_svfprintf_r+0x13cc>)
  40457a:	e000      	b.n	40457e <_svfprintf_r+0x1122>
  40457c:	4610      	mov	r0, r2
  40457e:	fb85 1203 	smull	r1, r2, r5, r3
  404582:	17d9      	asrs	r1, r3, #31
  404584:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  404588:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  40458c:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  404590:	3230      	adds	r2, #48	; 0x30
  404592:	2909      	cmp	r1, #9
  404594:	f800 2c01 	strb.w	r2, [r0, #-1]
  404598:	460b      	mov	r3, r1
  40459a:	f100 32ff 	add.w	r2, r0, #4294967295
  40459e:	dced      	bgt.n	40457c <_svfprintf_r+0x1120>
  4045a0:	3330      	adds	r3, #48	; 0x30
  4045a2:	3802      	subs	r0, #2
  4045a4:	b2d9      	uxtb	r1, r3
  4045a6:	4284      	cmp	r4, r0
  4045a8:	f802 1c01 	strb.w	r1, [r2, #-1]
  4045ac:	f240 8165 	bls.w	40487a <_svfprintf_r+0x141e>
  4045b0:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  4045b4:	4613      	mov	r3, r2
  4045b6:	e001      	b.n	4045bc <_svfprintf_r+0x1160>
  4045b8:	f813 1b01 	ldrb.w	r1, [r3], #1
  4045bc:	f800 1b01 	strb.w	r1, [r0], #1
  4045c0:	42a3      	cmp	r3, r4
  4045c2:	d1f9      	bne.n	4045b8 <_svfprintf_r+0x115c>
  4045c4:	3301      	adds	r3, #1
  4045c6:	1a9b      	subs	r3, r3, r2
  4045c8:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  4045cc:	4413      	add	r3, r2
  4045ce:	aa21      	add	r2, sp, #132	; 0x84
  4045d0:	1a9b      	subs	r3, r3, r2
  4045d2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4045d4:	931b      	str	r3, [sp, #108]	; 0x6c
  4045d6:	2a01      	cmp	r2, #1
  4045d8:	4413      	add	r3, r2
  4045da:	930e      	str	r3, [sp, #56]	; 0x38
  4045dc:	f340 8119 	ble.w	404812 <_svfprintf_r+0x13b6>
  4045e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4045e2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4045e4:	4413      	add	r3, r2
  4045e6:	930e      	str	r3, [sp, #56]	; 0x38
  4045e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4045ec:	9308      	str	r3, [sp, #32]
  4045ee:	2300      	movs	r3, #0
  4045f0:	9312      	str	r3, [sp, #72]	; 0x48
  4045f2:	e6cf      	b.n	404394 <_svfprintf_r+0xf38>
  4045f4:	aa25      	add	r2, sp, #148	; 0x94
  4045f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4045f8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4045fa:	f003 fbeb 	bl	407dd4 <__ssprint_r>
  4045fe:	2800      	cmp	r0, #0
  404600:	f47e affe 	bne.w	403600 <_svfprintf_r+0x1a4>
  404604:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404606:	46c8      	mov	r8, r9
  404608:	e4d7      	b.n	403fba <_svfprintf_r+0xb5e>
  40460a:	4623      	mov	r3, r4
  40460c:	e6a2      	b.n	404354 <_svfprintf_r+0xef8>
  40460e:	aa25      	add	r2, sp, #148	; 0x94
  404610:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404612:	980c      	ldr	r0, [sp, #48]	; 0x30
  404614:	f003 fbde 	bl	407dd4 <__ssprint_r>
  404618:	2800      	cmp	r0, #0
  40461a:	f47e aff1 	bne.w	403600 <_svfprintf_r+0x1a4>
  40461e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  404620:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404622:	46c8      	mov	r8, r9
  404624:	e5ae      	b.n	404184 <_svfprintf_r+0xd28>
  404626:	aa25      	add	r2, sp, #148	; 0x94
  404628:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40462a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40462c:	f003 fbd2 	bl	407dd4 <__ssprint_r>
  404630:	2800      	cmp	r0, #0
  404632:	f47e afe5 	bne.w	403600 <_svfprintf_r+0x1a4>
  404636:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  404638:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40463a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40463c:	1a9a      	subs	r2, r3, r2
  40463e:	46c8      	mov	r8, r9
  404640:	e5b8      	b.n	4041b4 <_svfprintf_r+0xd58>
  404642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404644:	9612      	str	r6, [sp, #72]	; 0x48
  404646:	2b06      	cmp	r3, #6
  404648:	bf28      	it	cs
  40464a:	2306      	movcs	r3, #6
  40464c:	960a      	str	r6, [sp, #40]	; 0x28
  40464e:	4637      	mov	r7, r6
  404650:	9308      	str	r3, [sp, #32]
  404652:	950f      	str	r5, [sp, #60]	; 0x3c
  404654:	f8cd b01c 	str.w	fp, [sp, #28]
  404658:	930e      	str	r3, [sp, #56]	; 0x38
  40465a:	4e74      	ldr	r6, [pc, #464]	; (40482c <_svfprintf_r+0x13d0>)
  40465c:	f7ff b816 	b.w	40368c <_svfprintf_r+0x230>
  404660:	a823      	add	r0, sp, #140	; 0x8c
  404662:	a920      	add	r1, sp, #128	; 0x80
  404664:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  404666:	9004      	str	r0, [sp, #16]
  404668:	9103      	str	r1, [sp, #12]
  40466a:	a81f      	add	r0, sp, #124	; 0x7c
  40466c:	2103      	movs	r1, #3
  40466e:	9002      	str	r0, [sp, #8]
  404670:	9a08      	ldr	r2, [sp, #32]
  404672:	9501      	str	r5, [sp, #4]
  404674:	463b      	mov	r3, r7
  404676:	9100      	str	r1, [sp, #0]
  404678:	980c      	ldr	r0, [sp, #48]	; 0x30
  40467a:	f001 f8f1 	bl	405860 <_dtoa_r>
  40467e:	4606      	mov	r6, r0
  404680:	1944      	adds	r4, r0, r5
  404682:	e72b      	b.n	4044dc <_svfprintf_r+0x1080>
  404684:	2306      	movs	r3, #6
  404686:	930a      	str	r3, [sp, #40]	; 0x28
  404688:	e61d      	b.n	4042c6 <_svfprintf_r+0xe6a>
  40468a:	272d      	movs	r7, #45	; 0x2d
  40468c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404690:	f7ff bacd 	b.w	403c2e <_svfprintf_r+0x7d2>
  404694:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404696:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404698:	4413      	add	r3, r2
  40469a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40469c:	930e      	str	r3, [sp, #56]	; 0x38
  40469e:	2a00      	cmp	r2, #0
  4046a0:	f340 80b0 	ble.w	404804 <_svfprintf_r+0x13a8>
  4046a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4046a8:	9308      	str	r3, [sp, #32]
  4046aa:	2367      	movs	r3, #103	; 0x67
  4046ac:	9311      	str	r3, [sp, #68]	; 0x44
  4046ae:	e671      	b.n	404394 <_svfprintf_r+0xf38>
  4046b0:	2b00      	cmp	r3, #0
  4046b2:	f340 80c3 	ble.w	40483c <_svfprintf_r+0x13e0>
  4046b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4046b8:	2a00      	cmp	r2, #0
  4046ba:	f040 8099 	bne.w	4047f0 <_svfprintf_r+0x1394>
  4046be:	f01b 0f01 	tst.w	fp, #1
  4046c2:	f040 8095 	bne.w	4047f0 <_svfprintf_r+0x1394>
  4046c6:	9308      	str	r3, [sp, #32]
  4046c8:	930e      	str	r3, [sp, #56]	; 0x38
  4046ca:	e663      	b.n	404394 <_svfprintf_r+0xf38>
  4046cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4046ce:	9308      	str	r3, [sp, #32]
  4046d0:	930e      	str	r3, [sp, #56]	; 0x38
  4046d2:	900a      	str	r0, [sp, #40]	; 0x28
  4046d4:	950f      	str	r5, [sp, #60]	; 0x3c
  4046d6:	f8cd b01c 	str.w	fp, [sp, #28]
  4046da:	9012      	str	r0, [sp, #72]	; 0x48
  4046dc:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4046e0:	f7fe bfd4 	b.w	40368c <_svfprintf_r+0x230>
  4046e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4046e6:	2b47      	cmp	r3, #71	; 0x47
  4046e8:	f47f ae20 	bne.w	40432c <_svfprintf_r+0xed0>
  4046ec:	f01b 0f01 	tst.w	fp, #1
  4046f0:	f47f aeee 	bne.w	4044d0 <_svfprintf_r+0x1074>
  4046f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4046f6:	1b9b      	subs	r3, r3, r6
  4046f8:	9313      	str	r3, [sp, #76]	; 0x4c
  4046fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4046fc:	2b47      	cmp	r3, #71	; 0x47
  4046fe:	f43f af18 	beq.w	404532 <_svfprintf_r+0x10d6>
  404702:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404704:	9312      	str	r3, [sp, #72]	; 0x48
  404706:	e721      	b.n	40454c <_svfprintf_r+0x10f0>
  404708:	424f      	negs	r7, r1
  40470a:	3110      	adds	r1, #16
  40470c:	4d48      	ldr	r5, [pc, #288]	; (404830 <_svfprintf_r+0x13d4>)
  40470e:	da2f      	bge.n	404770 <_svfprintf_r+0x1314>
  404710:	2410      	movs	r4, #16
  404712:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  404716:	e004      	b.n	404722 <_svfprintf_r+0x12c6>
  404718:	f108 0808 	add.w	r8, r8, #8
  40471c:	3f10      	subs	r7, #16
  40471e:	2f10      	cmp	r7, #16
  404720:	dd26      	ble.n	404770 <_svfprintf_r+0x1314>
  404722:	3301      	adds	r3, #1
  404724:	3210      	adds	r2, #16
  404726:	2b07      	cmp	r3, #7
  404728:	9227      	str	r2, [sp, #156]	; 0x9c
  40472a:	9326      	str	r3, [sp, #152]	; 0x98
  40472c:	f8c8 5000 	str.w	r5, [r8]
  404730:	f8c8 4004 	str.w	r4, [r8, #4]
  404734:	ddf0      	ble.n	404718 <_svfprintf_r+0x12bc>
  404736:	aa25      	add	r2, sp, #148	; 0x94
  404738:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40473a:	4658      	mov	r0, fp
  40473c:	f003 fb4a 	bl	407dd4 <__ssprint_r>
  404740:	2800      	cmp	r0, #0
  404742:	f47e af5d 	bne.w	403600 <_svfprintf_r+0x1a4>
  404746:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404748:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40474a:	46c8      	mov	r8, r9
  40474c:	e7e6      	b.n	40471c <_svfprintf_r+0x12c0>
  40474e:	aa25      	add	r2, sp, #148	; 0x94
  404750:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404752:	980c      	ldr	r0, [sp, #48]	; 0x30
  404754:	f003 fb3e 	bl	407dd4 <__ssprint_r>
  404758:	2800      	cmp	r0, #0
  40475a:	f47e af51 	bne.w	403600 <_svfprintf_r+0x1a4>
  40475e:	991f      	ldr	r1, [sp, #124]	; 0x7c
  404760:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404762:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404764:	46c8      	mov	r8, r9
  404766:	e667      	b.n	404438 <_svfprintf_r+0xfdc>
  404768:	2000      	movs	r0, #0
  40476a:	900a      	str	r0, [sp, #40]	; 0x28
  40476c:	f7fe bed0 	b.w	403510 <_svfprintf_r+0xb4>
  404770:	3301      	adds	r3, #1
  404772:	443a      	add	r2, r7
  404774:	2b07      	cmp	r3, #7
  404776:	e888 00a0 	stmia.w	r8, {r5, r7}
  40477a:	9227      	str	r2, [sp, #156]	; 0x9c
  40477c:	9326      	str	r3, [sp, #152]	; 0x98
  40477e:	f108 0808 	add.w	r8, r8, #8
  404782:	f77f ae5c 	ble.w	40443e <_svfprintf_r+0xfe2>
  404786:	aa25      	add	r2, sp, #148	; 0x94
  404788:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40478a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40478c:	f003 fb22 	bl	407dd4 <__ssprint_r>
  404790:	2800      	cmp	r0, #0
  404792:	f47e af35 	bne.w	403600 <_svfprintf_r+0x1a4>
  404796:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404798:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40479a:	46c8      	mov	r8, r9
  40479c:	e64f      	b.n	40443e <_svfprintf_r+0xfe2>
  40479e:	3330      	adds	r3, #48	; 0x30
  4047a0:	2230      	movs	r2, #48	; 0x30
  4047a2:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  4047a6:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  4047aa:	ab22      	add	r3, sp, #136	; 0x88
  4047ac:	e70f      	b.n	4045ce <_svfprintf_r+0x1172>
  4047ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4047b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4047b2:	4413      	add	r3, r2
  4047b4:	930e      	str	r3, [sp, #56]	; 0x38
  4047b6:	e775      	b.n	4046a4 <_svfprintf_r+0x1248>
  4047b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4047ba:	e5cb      	b.n	404354 <_svfprintf_r+0xef8>
  4047bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4047be:	4e1d      	ldr	r6, [pc, #116]	; (404834 <_svfprintf_r+0x13d8>)
  4047c0:	2b00      	cmp	r3, #0
  4047c2:	bfb6      	itet	lt
  4047c4:	272d      	movlt	r7, #45	; 0x2d
  4047c6:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  4047ca:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  4047ce:	4b1a      	ldr	r3, [pc, #104]	; (404838 <_svfprintf_r+0x13dc>)
  4047d0:	f7ff ba2f 	b.w	403c32 <_svfprintf_r+0x7d6>
  4047d4:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4047d6:	9808      	ldr	r0, [sp, #32]
  4047d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4047da:	4639      	mov	r1, r7
  4047dc:	f004 f996 	bl	408b0c <__aeabi_dcmpeq>
  4047e0:	2800      	cmp	r0, #0
  4047e2:	f47f ae7f 	bne.w	4044e4 <_svfprintf_r+0x1088>
  4047e6:	f1c5 0501 	rsb	r5, r5, #1
  4047ea:	951f      	str	r5, [sp, #124]	; 0x7c
  4047ec:	442c      	add	r4, r5
  4047ee:	e59e      	b.n	40432e <_svfprintf_r+0xed2>
  4047f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4047f2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4047f4:	4413      	add	r3, r2
  4047f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4047f8:	441a      	add	r2, r3
  4047fa:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  4047fe:	920e      	str	r2, [sp, #56]	; 0x38
  404800:	9308      	str	r3, [sp, #32]
  404802:	e5c7      	b.n	404394 <_svfprintf_r+0xf38>
  404804:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404806:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404808:	f1c3 0301 	rsb	r3, r3, #1
  40480c:	441a      	add	r2, r3
  40480e:	4613      	mov	r3, r2
  404810:	e7d0      	b.n	4047b4 <_svfprintf_r+0x1358>
  404812:	f01b 0301 	ands.w	r3, fp, #1
  404816:	9312      	str	r3, [sp, #72]	; 0x48
  404818:	f47f aee2 	bne.w	4045e0 <_svfprintf_r+0x1184>
  40481c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40481e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404822:	9308      	str	r3, [sp, #32]
  404824:	e5b6      	b.n	404394 <_svfprintf_r+0xf38>
  404826:	bf00      	nop
  404828:	66666667 	.word	0x66666667
  40482c:	004097a8 	.word	0x004097a8
  404830:	004097c4 	.word	0x004097c4
  404834:	0040977c 	.word	0x0040977c
  404838:	00409778 	.word	0x00409778
  40483c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40483e:	b913      	cbnz	r3, 404846 <_svfprintf_r+0x13ea>
  404840:	f01b 0f01 	tst.w	fp, #1
  404844:	d002      	beq.n	40484c <_svfprintf_r+0x13f0>
  404846:	9b19      	ldr	r3, [sp, #100]	; 0x64
  404848:	3301      	adds	r3, #1
  40484a:	e7d4      	b.n	4047f6 <_svfprintf_r+0x139a>
  40484c:	2301      	movs	r3, #1
  40484e:	e73a      	b.n	4046c6 <_svfprintf_r+0x126a>
  404850:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404852:	f89a 3001 	ldrb.w	r3, [sl, #1]
  404856:	6828      	ldr	r0, [r5, #0]
  404858:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  40485c:	900a      	str	r0, [sp, #40]	; 0x28
  40485e:	4628      	mov	r0, r5
  404860:	3004      	adds	r0, #4
  404862:	46a2      	mov	sl, r4
  404864:	900f      	str	r0, [sp, #60]	; 0x3c
  404866:	f7fe be51 	b.w	40350c <_svfprintf_r+0xb0>
  40486a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40486e:	f7ff b867 	b.w	403940 <_svfprintf_r+0x4e4>
  404872:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404876:	f7ff ba15 	b.w	403ca4 <_svfprintf_r+0x848>
  40487a:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  40487e:	e6a6      	b.n	4045ce <_svfprintf_r+0x1172>
  404880:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404884:	f7ff b8eb 	b.w	403a5e <_svfprintf_r+0x602>
  404888:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40488a:	230c      	movs	r3, #12
  40488c:	6013      	str	r3, [r2, #0]
  40488e:	f04f 33ff 	mov.w	r3, #4294967295
  404892:	9309      	str	r3, [sp, #36]	; 0x24
  404894:	f7fe bebd 	b.w	403612 <_svfprintf_r+0x1b6>
  404898:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40489c:	f7ff b99a 	b.w	403bd4 <_svfprintf_r+0x778>
  4048a0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4048a4:	f7ff b976 	b.w	403b94 <_svfprintf_r+0x738>
  4048a8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4048ac:	f7ff b959 	b.w	403b62 <_svfprintf_r+0x706>
  4048b0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4048b4:	f7ff b912 	b.w	403adc <_svfprintf_r+0x680>

004048b8 <__sprint_r.part.0>:
  4048b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4048bc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4048be:	049c      	lsls	r4, r3, #18
  4048c0:	4693      	mov	fp, r2
  4048c2:	d52f      	bpl.n	404924 <__sprint_r.part.0+0x6c>
  4048c4:	6893      	ldr	r3, [r2, #8]
  4048c6:	6812      	ldr	r2, [r2, #0]
  4048c8:	b353      	cbz	r3, 404920 <__sprint_r.part.0+0x68>
  4048ca:	460e      	mov	r6, r1
  4048cc:	4607      	mov	r7, r0
  4048ce:	f102 0908 	add.w	r9, r2, #8
  4048d2:	e919 0420 	ldmdb	r9, {r5, sl}
  4048d6:	ea5f 089a 	movs.w	r8, sl, lsr #2
  4048da:	d017      	beq.n	40490c <__sprint_r.part.0+0x54>
  4048dc:	3d04      	subs	r5, #4
  4048de:	2400      	movs	r4, #0
  4048e0:	e001      	b.n	4048e6 <__sprint_r.part.0+0x2e>
  4048e2:	45a0      	cmp	r8, r4
  4048e4:	d010      	beq.n	404908 <__sprint_r.part.0+0x50>
  4048e6:	4632      	mov	r2, r6
  4048e8:	f855 1f04 	ldr.w	r1, [r5, #4]!
  4048ec:	4638      	mov	r0, r7
  4048ee:	f002 f87b 	bl	4069e8 <_fputwc_r>
  4048f2:	1c43      	adds	r3, r0, #1
  4048f4:	f104 0401 	add.w	r4, r4, #1
  4048f8:	d1f3      	bne.n	4048e2 <__sprint_r.part.0+0x2a>
  4048fa:	2300      	movs	r3, #0
  4048fc:	f8cb 3008 	str.w	r3, [fp, #8]
  404900:	f8cb 3004 	str.w	r3, [fp, #4]
  404904:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404908:	f8db 3008 	ldr.w	r3, [fp, #8]
  40490c:	f02a 0a03 	bic.w	sl, sl, #3
  404910:	eba3 030a 	sub.w	r3, r3, sl
  404914:	f8cb 3008 	str.w	r3, [fp, #8]
  404918:	f109 0908 	add.w	r9, r9, #8
  40491c:	2b00      	cmp	r3, #0
  40491e:	d1d8      	bne.n	4048d2 <__sprint_r.part.0+0x1a>
  404920:	2000      	movs	r0, #0
  404922:	e7ea      	b.n	4048fa <__sprint_r.part.0+0x42>
  404924:	f002 f9ca 	bl	406cbc <__sfvwrite_r>
  404928:	2300      	movs	r3, #0
  40492a:	f8cb 3008 	str.w	r3, [fp, #8]
  40492e:	f8cb 3004 	str.w	r3, [fp, #4]
  404932:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404936:	bf00      	nop

00404938 <_vfiprintf_r>:
  404938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40493c:	b0ad      	sub	sp, #180	; 0xb4
  40493e:	461d      	mov	r5, r3
  404940:	468b      	mov	fp, r1
  404942:	4690      	mov	r8, r2
  404944:	9307      	str	r3, [sp, #28]
  404946:	9006      	str	r0, [sp, #24]
  404948:	b118      	cbz	r0, 404952 <_vfiprintf_r+0x1a>
  40494a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40494c:	2b00      	cmp	r3, #0
  40494e:	f000 80f3 	beq.w	404b38 <_vfiprintf_r+0x200>
  404952:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404956:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40495a:	07df      	lsls	r7, r3, #31
  40495c:	b281      	uxth	r1, r0
  40495e:	d402      	bmi.n	404966 <_vfiprintf_r+0x2e>
  404960:	058e      	lsls	r6, r1, #22
  404962:	f140 80fc 	bpl.w	404b5e <_vfiprintf_r+0x226>
  404966:	048c      	lsls	r4, r1, #18
  404968:	d40a      	bmi.n	404980 <_vfiprintf_r+0x48>
  40496a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40496e:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  404972:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  404976:	f8ab 100c 	strh.w	r1, [fp, #12]
  40497a:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  40497e:	b289      	uxth	r1, r1
  404980:	0708      	lsls	r0, r1, #28
  404982:	f140 80b3 	bpl.w	404aec <_vfiprintf_r+0x1b4>
  404986:	f8db 3010 	ldr.w	r3, [fp, #16]
  40498a:	2b00      	cmp	r3, #0
  40498c:	f000 80ae 	beq.w	404aec <_vfiprintf_r+0x1b4>
  404990:	f001 031a 	and.w	r3, r1, #26
  404994:	2b0a      	cmp	r3, #10
  404996:	f000 80b5 	beq.w	404b04 <_vfiprintf_r+0x1cc>
  40499a:	2300      	movs	r3, #0
  40499c:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  4049a0:	930b      	str	r3, [sp, #44]	; 0x2c
  4049a2:	9311      	str	r3, [sp, #68]	; 0x44
  4049a4:	9310      	str	r3, [sp, #64]	; 0x40
  4049a6:	9303      	str	r3, [sp, #12]
  4049a8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  4049ac:	46ca      	mov	sl, r9
  4049ae:	f8cd b010 	str.w	fp, [sp, #16]
  4049b2:	f898 3000 	ldrb.w	r3, [r8]
  4049b6:	4644      	mov	r4, r8
  4049b8:	b1fb      	cbz	r3, 4049fa <_vfiprintf_r+0xc2>
  4049ba:	2b25      	cmp	r3, #37	; 0x25
  4049bc:	d102      	bne.n	4049c4 <_vfiprintf_r+0x8c>
  4049be:	e01c      	b.n	4049fa <_vfiprintf_r+0xc2>
  4049c0:	2b25      	cmp	r3, #37	; 0x25
  4049c2:	d003      	beq.n	4049cc <_vfiprintf_r+0x94>
  4049c4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4049c8:	2b00      	cmp	r3, #0
  4049ca:	d1f9      	bne.n	4049c0 <_vfiprintf_r+0x88>
  4049cc:	eba4 0508 	sub.w	r5, r4, r8
  4049d0:	b19d      	cbz	r5, 4049fa <_vfiprintf_r+0xc2>
  4049d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4049d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4049d6:	f8ca 8000 	str.w	r8, [sl]
  4049da:	3301      	adds	r3, #1
  4049dc:	442a      	add	r2, r5
  4049de:	2b07      	cmp	r3, #7
  4049e0:	f8ca 5004 	str.w	r5, [sl, #4]
  4049e4:	9211      	str	r2, [sp, #68]	; 0x44
  4049e6:	9310      	str	r3, [sp, #64]	; 0x40
  4049e8:	dd7a      	ble.n	404ae0 <_vfiprintf_r+0x1a8>
  4049ea:	2a00      	cmp	r2, #0
  4049ec:	f040 84b0 	bne.w	405350 <_vfiprintf_r+0xa18>
  4049f0:	9b03      	ldr	r3, [sp, #12]
  4049f2:	9210      	str	r2, [sp, #64]	; 0x40
  4049f4:	442b      	add	r3, r5
  4049f6:	46ca      	mov	sl, r9
  4049f8:	9303      	str	r3, [sp, #12]
  4049fa:	7823      	ldrb	r3, [r4, #0]
  4049fc:	2b00      	cmp	r3, #0
  4049fe:	f000 83e0 	beq.w	4051c2 <_vfiprintf_r+0x88a>
  404a02:	2000      	movs	r0, #0
  404a04:	f04f 0300 	mov.w	r3, #0
  404a08:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  404a0c:	f104 0801 	add.w	r8, r4, #1
  404a10:	7862      	ldrb	r2, [r4, #1]
  404a12:	4605      	mov	r5, r0
  404a14:	4606      	mov	r6, r0
  404a16:	4603      	mov	r3, r0
  404a18:	f04f 34ff 	mov.w	r4, #4294967295
  404a1c:	f108 0801 	add.w	r8, r8, #1
  404a20:	f1a2 0120 	sub.w	r1, r2, #32
  404a24:	2958      	cmp	r1, #88	; 0x58
  404a26:	f200 82de 	bhi.w	404fe6 <_vfiprintf_r+0x6ae>
  404a2a:	e8df f011 	tbh	[pc, r1, lsl #1]
  404a2e:	0221      	.short	0x0221
  404a30:	02dc02dc 	.word	0x02dc02dc
  404a34:	02dc0229 	.word	0x02dc0229
  404a38:	02dc02dc 	.word	0x02dc02dc
  404a3c:	02dc02dc 	.word	0x02dc02dc
  404a40:	028902dc 	.word	0x028902dc
  404a44:	02dc0295 	.word	0x02dc0295
  404a48:	02bd00a2 	.word	0x02bd00a2
  404a4c:	019f02dc 	.word	0x019f02dc
  404a50:	01a401a4 	.word	0x01a401a4
  404a54:	01a401a4 	.word	0x01a401a4
  404a58:	01a401a4 	.word	0x01a401a4
  404a5c:	01a401a4 	.word	0x01a401a4
  404a60:	02dc01a4 	.word	0x02dc01a4
  404a64:	02dc02dc 	.word	0x02dc02dc
  404a68:	02dc02dc 	.word	0x02dc02dc
  404a6c:	02dc02dc 	.word	0x02dc02dc
  404a70:	02dc02dc 	.word	0x02dc02dc
  404a74:	01b202dc 	.word	0x01b202dc
  404a78:	02dc02dc 	.word	0x02dc02dc
  404a7c:	02dc02dc 	.word	0x02dc02dc
  404a80:	02dc02dc 	.word	0x02dc02dc
  404a84:	02dc02dc 	.word	0x02dc02dc
  404a88:	02dc02dc 	.word	0x02dc02dc
  404a8c:	02dc0197 	.word	0x02dc0197
  404a90:	02dc02dc 	.word	0x02dc02dc
  404a94:	02dc02dc 	.word	0x02dc02dc
  404a98:	02dc019b 	.word	0x02dc019b
  404a9c:	025302dc 	.word	0x025302dc
  404aa0:	02dc02dc 	.word	0x02dc02dc
  404aa4:	02dc02dc 	.word	0x02dc02dc
  404aa8:	02dc02dc 	.word	0x02dc02dc
  404aac:	02dc02dc 	.word	0x02dc02dc
  404ab0:	02dc02dc 	.word	0x02dc02dc
  404ab4:	021b025a 	.word	0x021b025a
  404ab8:	02dc02dc 	.word	0x02dc02dc
  404abc:	026e02dc 	.word	0x026e02dc
  404ac0:	02dc021b 	.word	0x02dc021b
  404ac4:	027302dc 	.word	0x027302dc
  404ac8:	01f502dc 	.word	0x01f502dc
  404acc:	02090182 	.word	0x02090182
  404ad0:	02dc02d7 	.word	0x02dc02d7
  404ad4:	02dc029a 	.word	0x02dc029a
  404ad8:	02dc00a7 	.word	0x02dc00a7
  404adc:	022e02dc 	.word	0x022e02dc
  404ae0:	f10a 0a08 	add.w	sl, sl, #8
  404ae4:	9b03      	ldr	r3, [sp, #12]
  404ae6:	442b      	add	r3, r5
  404ae8:	9303      	str	r3, [sp, #12]
  404aea:	e786      	b.n	4049fa <_vfiprintf_r+0xc2>
  404aec:	4659      	mov	r1, fp
  404aee:	9806      	ldr	r0, [sp, #24]
  404af0:	f000 fdac 	bl	40564c <__swsetup_r>
  404af4:	bb18      	cbnz	r0, 404b3e <_vfiprintf_r+0x206>
  404af6:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  404afa:	f001 031a 	and.w	r3, r1, #26
  404afe:	2b0a      	cmp	r3, #10
  404b00:	f47f af4b 	bne.w	40499a <_vfiprintf_r+0x62>
  404b04:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  404b08:	2b00      	cmp	r3, #0
  404b0a:	f6ff af46 	blt.w	40499a <_vfiprintf_r+0x62>
  404b0e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404b12:	07db      	lsls	r3, r3, #31
  404b14:	d405      	bmi.n	404b22 <_vfiprintf_r+0x1ea>
  404b16:	058f      	lsls	r7, r1, #22
  404b18:	d403      	bmi.n	404b22 <_vfiprintf_r+0x1ea>
  404b1a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404b1e:	f002 fa91 	bl	407044 <__retarget_lock_release_recursive>
  404b22:	462b      	mov	r3, r5
  404b24:	4642      	mov	r2, r8
  404b26:	4659      	mov	r1, fp
  404b28:	9806      	ldr	r0, [sp, #24]
  404b2a:	f000 fd4d 	bl	4055c8 <__sbprintf>
  404b2e:	9003      	str	r0, [sp, #12]
  404b30:	9803      	ldr	r0, [sp, #12]
  404b32:	b02d      	add	sp, #180	; 0xb4
  404b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404b38:	f001 feb4 	bl	4068a4 <__sinit>
  404b3c:	e709      	b.n	404952 <_vfiprintf_r+0x1a>
  404b3e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404b42:	07d9      	lsls	r1, r3, #31
  404b44:	d404      	bmi.n	404b50 <_vfiprintf_r+0x218>
  404b46:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404b4a:	059a      	lsls	r2, r3, #22
  404b4c:	f140 84aa 	bpl.w	4054a4 <_vfiprintf_r+0xb6c>
  404b50:	f04f 33ff 	mov.w	r3, #4294967295
  404b54:	9303      	str	r3, [sp, #12]
  404b56:	9803      	ldr	r0, [sp, #12]
  404b58:	b02d      	add	sp, #180	; 0xb4
  404b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404b5e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404b62:	f002 fa6d 	bl	407040 <__retarget_lock_acquire_recursive>
  404b66:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  404b6a:	b281      	uxth	r1, r0
  404b6c:	e6fb      	b.n	404966 <_vfiprintf_r+0x2e>
  404b6e:	4276      	negs	r6, r6
  404b70:	9207      	str	r2, [sp, #28]
  404b72:	f043 0304 	orr.w	r3, r3, #4
  404b76:	f898 2000 	ldrb.w	r2, [r8]
  404b7a:	e74f      	b.n	404a1c <_vfiprintf_r+0xe4>
  404b7c:	9608      	str	r6, [sp, #32]
  404b7e:	069e      	lsls	r6, r3, #26
  404b80:	f100 8450 	bmi.w	405424 <_vfiprintf_r+0xaec>
  404b84:	9907      	ldr	r1, [sp, #28]
  404b86:	06dd      	lsls	r5, r3, #27
  404b88:	460a      	mov	r2, r1
  404b8a:	f100 83ef 	bmi.w	40536c <_vfiprintf_r+0xa34>
  404b8e:	0658      	lsls	r0, r3, #25
  404b90:	f140 83ec 	bpl.w	40536c <_vfiprintf_r+0xa34>
  404b94:	880e      	ldrh	r6, [r1, #0]
  404b96:	3104      	adds	r1, #4
  404b98:	2700      	movs	r7, #0
  404b9a:	2201      	movs	r2, #1
  404b9c:	9107      	str	r1, [sp, #28]
  404b9e:	f04f 0100 	mov.w	r1, #0
  404ba2:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  404ba6:	2500      	movs	r5, #0
  404ba8:	1c61      	adds	r1, r4, #1
  404baa:	f000 8116 	beq.w	404dda <_vfiprintf_r+0x4a2>
  404bae:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  404bb2:	9102      	str	r1, [sp, #8]
  404bb4:	ea56 0107 	orrs.w	r1, r6, r7
  404bb8:	f040 8114 	bne.w	404de4 <_vfiprintf_r+0x4ac>
  404bbc:	2c00      	cmp	r4, #0
  404bbe:	f040 835c 	bne.w	40527a <_vfiprintf_r+0x942>
  404bc2:	2a00      	cmp	r2, #0
  404bc4:	f040 83b7 	bne.w	405336 <_vfiprintf_r+0x9fe>
  404bc8:	f013 0301 	ands.w	r3, r3, #1
  404bcc:	9305      	str	r3, [sp, #20]
  404bce:	f000 8457 	beq.w	405480 <_vfiprintf_r+0xb48>
  404bd2:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  404bd6:	2330      	movs	r3, #48	; 0x30
  404bd8:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  404bdc:	9b05      	ldr	r3, [sp, #20]
  404bde:	42a3      	cmp	r3, r4
  404be0:	bfb8      	it	lt
  404be2:	4623      	movlt	r3, r4
  404be4:	9301      	str	r3, [sp, #4]
  404be6:	b10d      	cbz	r5, 404bec <_vfiprintf_r+0x2b4>
  404be8:	3301      	adds	r3, #1
  404bea:	9301      	str	r3, [sp, #4]
  404bec:	9b02      	ldr	r3, [sp, #8]
  404bee:	f013 0302 	ands.w	r3, r3, #2
  404bf2:	9309      	str	r3, [sp, #36]	; 0x24
  404bf4:	d002      	beq.n	404bfc <_vfiprintf_r+0x2c4>
  404bf6:	9b01      	ldr	r3, [sp, #4]
  404bf8:	3302      	adds	r3, #2
  404bfa:	9301      	str	r3, [sp, #4]
  404bfc:	9b02      	ldr	r3, [sp, #8]
  404bfe:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  404c02:	930a      	str	r3, [sp, #40]	; 0x28
  404c04:	f040 8217 	bne.w	405036 <_vfiprintf_r+0x6fe>
  404c08:	9b08      	ldr	r3, [sp, #32]
  404c0a:	9a01      	ldr	r2, [sp, #4]
  404c0c:	1a9d      	subs	r5, r3, r2
  404c0e:	2d00      	cmp	r5, #0
  404c10:	f340 8211 	ble.w	405036 <_vfiprintf_r+0x6fe>
  404c14:	2d10      	cmp	r5, #16
  404c16:	f340 8490 	ble.w	40553a <_vfiprintf_r+0xc02>
  404c1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404c1c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404c1e:	4ec4      	ldr	r6, [pc, #784]	; (404f30 <_vfiprintf_r+0x5f8>)
  404c20:	46d6      	mov	lr, sl
  404c22:	2710      	movs	r7, #16
  404c24:	46a2      	mov	sl, r4
  404c26:	4619      	mov	r1, r3
  404c28:	9c06      	ldr	r4, [sp, #24]
  404c2a:	e007      	b.n	404c3c <_vfiprintf_r+0x304>
  404c2c:	f101 0c02 	add.w	ip, r1, #2
  404c30:	f10e 0e08 	add.w	lr, lr, #8
  404c34:	4601      	mov	r1, r0
  404c36:	3d10      	subs	r5, #16
  404c38:	2d10      	cmp	r5, #16
  404c3a:	dd11      	ble.n	404c60 <_vfiprintf_r+0x328>
  404c3c:	1c48      	adds	r0, r1, #1
  404c3e:	3210      	adds	r2, #16
  404c40:	2807      	cmp	r0, #7
  404c42:	9211      	str	r2, [sp, #68]	; 0x44
  404c44:	e88e 00c0 	stmia.w	lr, {r6, r7}
  404c48:	9010      	str	r0, [sp, #64]	; 0x40
  404c4a:	ddef      	ble.n	404c2c <_vfiprintf_r+0x2f4>
  404c4c:	2a00      	cmp	r2, #0
  404c4e:	f040 81e4 	bne.w	40501a <_vfiprintf_r+0x6e2>
  404c52:	3d10      	subs	r5, #16
  404c54:	2d10      	cmp	r5, #16
  404c56:	4611      	mov	r1, r2
  404c58:	f04f 0c01 	mov.w	ip, #1
  404c5c:	46ce      	mov	lr, r9
  404c5e:	dced      	bgt.n	404c3c <_vfiprintf_r+0x304>
  404c60:	4654      	mov	r4, sl
  404c62:	4661      	mov	r1, ip
  404c64:	46f2      	mov	sl, lr
  404c66:	442a      	add	r2, r5
  404c68:	2907      	cmp	r1, #7
  404c6a:	9211      	str	r2, [sp, #68]	; 0x44
  404c6c:	f8ca 6000 	str.w	r6, [sl]
  404c70:	f8ca 5004 	str.w	r5, [sl, #4]
  404c74:	9110      	str	r1, [sp, #64]	; 0x40
  404c76:	f300 82ec 	bgt.w	405252 <_vfiprintf_r+0x91a>
  404c7a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404c7e:	f10a 0a08 	add.w	sl, sl, #8
  404c82:	1c48      	adds	r0, r1, #1
  404c84:	2d00      	cmp	r5, #0
  404c86:	f040 81de 	bne.w	405046 <_vfiprintf_r+0x70e>
  404c8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404c8c:	2b00      	cmp	r3, #0
  404c8e:	f000 81f8 	beq.w	405082 <_vfiprintf_r+0x74a>
  404c92:	3202      	adds	r2, #2
  404c94:	a90e      	add	r1, sp, #56	; 0x38
  404c96:	2302      	movs	r3, #2
  404c98:	2807      	cmp	r0, #7
  404c9a:	9211      	str	r2, [sp, #68]	; 0x44
  404c9c:	9010      	str	r0, [sp, #64]	; 0x40
  404c9e:	e88a 000a 	stmia.w	sl, {r1, r3}
  404ca2:	f340 81ea 	ble.w	40507a <_vfiprintf_r+0x742>
  404ca6:	2a00      	cmp	r2, #0
  404ca8:	f040 838c 	bne.w	4053c4 <_vfiprintf_r+0xa8c>
  404cac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404cae:	2b80      	cmp	r3, #128	; 0x80
  404cb0:	f04f 0001 	mov.w	r0, #1
  404cb4:	4611      	mov	r1, r2
  404cb6:	46ca      	mov	sl, r9
  404cb8:	f040 81e7 	bne.w	40508a <_vfiprintf_r+0x752>
  404cbc:	9b08      	ldr	r3, [sp, #32]
  404cbe:	9d01      	ldr	r5, [sp, #4]
  404cc0:	1b5e      	subs	r6, r3, r5
  404cc2:	2e00      	cmp	r6, #0
  404cc4:	f340 81e1 	ble.w	40508a <_vfiprintf_r+0x752>
  404cc8:	2e10      	cmp	r6, #16
  404cca:	4d9a      	ldr	r5, [pc, #616]	; (404f34 <_vfiprintf_r+0x5fc>)
  404ccc:	f340 8450 	ble.w	405570 <_vfiprintf_r+0xc38>
  404cd0:	46d4      	mov	ip, sl
  404cd2:	2710      	movs	r7, #16
  404cd4:	46a2      	mov	sl, r4
  404cd6:	9c06      	ldr	r4, [sp, #24]
  404cd8:	e007      	b.n	404cea <_vfiprintf_r+0x3b2>
  404cda:	f101 0e02 	add.w	lr, r1, #2
  404cde:	f10c 0c08 	add.w	ip, ip, #8
  404ce2:	4601      	mov	r1, r0
  404ce4:	3e10      	subs	r6, #16
  404ce6:	2e10      	cmp	r6, #16
  404ce8:	dd11      	ble.n	404d0e <_vfiprintf_r+0x3d6>
  404cea:	1c48      	adds	r0, r1, #1
  404cec:	3210      	adds	r2, #16
  404cee:	2807      	cmp	r0, #7
  404cf0:	9211      	str	r2, [sp, #68]	; 0x44
  404cf2:	e88c 00a0 	stmia.w	ip, {r5, r7}
  404cf6:	9010      	str	r0, [sp, #64]	; 0x40
  404cf8:	ddef      	ble.n	404cda <_vfiprintf_r+0x3a2>
  404cfa:	2a00      	cmp	r2, #0
  404cfc:	f040 829d 	bne.w	40523a <_vfiprintf_r+0x902>
  404d00:	3e10      	subs	r6, #16
  404d02:	2e10      	cmp	r6, #16
  404d04:	f04f 0e01 	mov.w	lr, #1
  404d08:	4611      	mov	r1, r2
  404d0a:	46cc      	mov	ip, r9
  404d0c:	dced      	bgt.n	404cea <_vfiprintf_r+0x3b2>
  404d0e:	4654      	mov	r4, sl
  404d10:	46e2      	mov	sl, ip
  404d12:	4432      	add	r2, r6
  404d14:	f1be 0f07 	cmp.w	lr, #7
  404d18:	9211      	str	r2, [sp, #68]	; 0x44
  404d1a:	e88a 0060 	stmia.w	sl, {r5, r6}
  404d1e:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  404d22:	f300 8369 	bgt.w	4053f8 <_vfiprintf_r+0xac0>
  404d26:	f10a 0a08 	add.w	sl, sl, #8
  404d2a:	f10e 0001 	add.w	r0, lr, #1
  404d2e:	4671      	mov	r1, lr
  404d30:	e1ab      	b.n	40508a <_vfiprintf_r+0x752>
  404d32:	9608      	str	r6, [sp, #32]
  404d34:	f013 0220 	ands.w	r2, r3, #32
  404d38:	f040 838c 	bne.w	405454 <_vfiprintf_r+0xb1c>
  404d3c:	f013 0110 	ands.w	r1, r3, #16
  404d40:	f040 831a 	bne.w	405378 <_vfiprintf_r+0xa40>
  404d44:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  404d48:	f000 8316 	beq.w	405378 <_vfiprintf_r+0xa40>
  404d4c:	9807      	ldr	r0, [sp, #28]
  404d4e:	460a      	mov	r2, r1
  404d50:	4601      	mov	r1, r0
  404d52:	3104      	adds	r1, #4
  404d54:	8806      	ldrh	r6, [r0, #0]
  404d56:	9107      	str	r1, [sp, #28]
  404d58:	2700      	movs	r7, #0
  404d5a:	e720      	b.n	404b9e <_vfiprintf_r+0x266>
  404d5c:	9608      	str	r6, [sp, #32]
  404d5e:	f043 0310 	orr.w	r3, r3, #16
  404d62:	e7e7      	b.n	404d34 <_vfiprintf_r+0x3fc>
  404d64:	9608      	str	r6, [sp, #32]
  404d66:	f043 0310 	orr.w	r3, r3, #16
  404d6a:	e708      	b.n	404b7e <_vfiprintf_r+0x246>
  404d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404d70:	f898 2000 	ldrb.w	r2, [r8]
  404d74:	e652      	b.n	404a1c <_vfiprintf_r+0xe4>
  404d76:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404d7a:	2600      	movs	r6, #0
  404d7c:	f818 2b01 	ldrb.w	r2, [r8], #1
  404d80:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  404d84:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  404d88:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404d8c:	2909      	cmp	r1, #9
  404d8e:	d9f5      	bls.n	404d7c <_vfiprintf_r+0x444>
  404d90:	e646      	b.n	404a20 <_vfiprintf_r+0xe8>
  404d92:	9608      	str	r6, [sp, #32]
  404d94:	2800      	cmp	r0, #0
  404d96:	f040 8408 	bne.w	4055aa <_vfiprintf_r+0xc72>
  404d9a:	f043 0310 	orr.w	r3, r3, #16
  404d9e:	069e      	lsls	r6, r3, #26
  404da0:	f100 834c 	bmi.w	40543c <_vfiprintf_r+0xb04>
  404da4:	06dd      	lsls	r5, r3, #27
  404da6:	f100 82f3 	bmi.w	405390 <_vfiprintf_r+0xa58>
  404daa:	0658      	lsls	r0, r3, #25
  404dac:	f140 82f0 	bpl.w	405390 <_vfiprintf_r+0xa58>
  404db0:	9d07      	ldr	r5, [sp, #28]
  404db2:	f9b5 6000 	ldrsh.w	r6, [r5]
  404db6:	462a      	mov	r2, r5
  404db8:	17f7      	asrs	r7, r6, #31
  404dba:	3204      	adds	r2, #4
  404dbc:	4630      	mov	r0, r6
  404dbe:	4639      	mov	r1, r7
  404dc0:	9207      	str	r2, [sp, #28]
  404dc2:	2800      	cmp	r0, #0
  404dc4:	f171 0200 	sbcs.w	r2, r1, #0
  404dc8:	f2c0 835d 	blt.w	405486 <_vfiprintf_r+0xb4e>
  404dcc:	1c61      	adds	r1, r4, #1
  404dce:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404dd2:	f04f 0201 	mov.w	r2, #1
  404dd6:	f47f aeea 	bne.w	404bae <_vfiprintf_r+0x276>
  404dda:	ea56 0107 	orrs.w	r1, r6, r7
  404dde:	f000 824d 	beq.w	40527c <_vfiprintf_r+0x944>
  404de2:	9302      	str	r3, [sp, #8]
  404de4:	2a01      	cmp	r2, #1
  404de6:	f000 828c 	beq.w	405302 <_vfiprintf_r+0x9ca>
  404dea:	2a02      	cmp	r2, #2
  404dec:	f040 825c 	bne.w	4052a8 <_vfiprintf_r+0x970>
  404df0:	980b      	ldr	r0, [sp, #44]	; 0x2c
  404df2:	46cb      	mov	fp, r9
  404df4:	0933      	lsrs	r3, r6, #4
  404df6:	f006 010f 	and.w	r1, r6, #15
  404dfa:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  404dfe:	093a      	lsrs	r2, r7, #4
  404e00:	461e      	mov	r6, r3
  404e02:	4617      	mov	r7, r2
  404e04:	5c43      	ldrb	r3, [r0, r1]
  404e06:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  404e0a:	ea56 0307 	orrs.w	r3, r6, r7
  404e0e:	d1f1      	bne.n	404df4 <_vfiprintf_r+0x4bc>
  404e10:	eba9 030b 	sub.w	r3, r9, fp
  404e14:	9305      	str	r3, [sp, #20]
  404e16:	e6e1      	b.n	404bdc <_vfiprintf_r+0x2a4>
  404e18:	2800      	cmp	r0, #0
  404e1a:	f040 83c0 	bne.w	40559e <_vfiprintf_r+0xc66>
  404e1e:	0699      	lsls	r1, r3, #26
  404e20:	f100 8367 	bmi.w	4054f2 <_vfiprintf_r+0xbba>
  404e24:	06da      	lsls	r2, r3, #27
  404e26:	f100 80f1 	bmi.w	40500c <_vfiprintf_r+0x6d4>
  404e2a:	065b      	lsls	r3, r3, #25
  404e2c:	f140 80ee 	bpl.w	40500c <_vfiprintf_r+0x6d4>
  404e30:	9a07      	ldr	r2, [sp, #28]
  404e32:	6813      	ldr	r3, [r2, #0]
  404e34:	3204      	adds	r2, #4
  404e36:	9207      	str	r2, [sp, #28]
  404e38:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  404e3c:	801a      	strh	r2, [r3, #0]
  404e3e:	e5b8      	b.n	4049b2 <_vfiprintf_r+0x7a>
  404e40:	9807      	ldr	r0, [sp, #28]
  404e42:	4a3d      	ldr	r2, [pc, #244]	; (404f38 <_vfiprintf_r+0x600>)
  404e44:	9608      	str	r6, [sp, #32]
  404e46:	920b      	str	r2, [sp, #44]	; 0x2c
  404e48:	6806      	ldr	r6, [r0, #0]
  404e4a:	2278      	movs	r2, #120	; 0x78
  404e4c:	2130      	movs	r1, #48	; 0x30
  404e4e:	3004      	adds	r0, #4
  404e50:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  404e54:	f043 0302 	orr.w	r3, r3, #2
  404e58:	9007      	str	r0, [sp, #28]
  404e5a:	2700      	movs	r7, #0
  404e5c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  404e60:	2202      	movs	r2, #2
  404e62:	e69c      	b.n	404b9e <_vfiprintf_r+0x266>
  404e64:	9608      	str	r6, [sp, #32]
  404e66:	2800      	cmp	r0, #0
  404e68:	d099      	beq.n	404d9e <_vfiprintf_r+0x466>
  404e6a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404e6e:	e796      	b.n	404d9e <_vfiprintf_r+0x466>
  404e70:	f898 2000 	ldrb.w	r2, [r8]
  404e74:	2d00      	cmp	r5, #0
  404e76:	f47f add1 	bne.w	404a1c <_vfiprintf_r+0xe4>
  404e7a:	2001      	movs	r0, #1
  404e7c:	2520      	movs	r5, #32
  404e7e:	e5cd      	b.n	404a1c <_vfiprintf_r+0xe4>
  404e80:	f043 0301 	orr.w	r3, r3, #1
  404e84:	f898 2000 	ldrb.w	r2, [r8]
  404e88:	e5c8      	b.n	404a1c <_vfiprintf_r+0xe4>
  404e8a:	9608      	str	r6, [sp, #32]
  404e8c:	2800      	cmp	r0, #0
  404e8e:	f040 8393 	bne.w	4055b8 <_vfiprintf_r+0xc80>
  404e92:	4929      	ldr	r1, [pc, #164]	; (404f38 <_vfiprintf_r+0x600>)
  404e94:	910b      	str	r1, [sp, #44]	; 0x2c
  404e96:	069f      	lsls	r7, r3, #26
  404e98:	f100 82e8 	bmi.w	40546c <_vfiprintf_r+0xb34>
  404e9c:	9807      	ldr	r0, [sp, #28]
  404e9e:	06de      	lsls	r6, r3, #27
  404ea0:	4601      	mov	r1, r0
  404ea2:	f100 8270 	bmi.w	405386 <_vfiprintf_r+0xa4e>
  404ea6:	065d      	lsls	r5, r3, #25
  404ea8:	f140 826d 	bpl.w	405386 <_vfiprintf_r+0xa4e>
  404eac:	3104      	adds	r1, #4
  404eae:	8806      	ldrh	r6, [r0, #0]
  404eb0:	9107      	str	r1, [sp, #28]
  404eb2:	2700      	movs	r7, #0
  404eb4:	07d8      	lsls	r0, r3, #31
  404eb6:	f140 8222 	bpl.w	4052fe <_vfiprintf_r+0x9c6>
  404eba:	ea56 0107 	orrs.w	r1, r6, r7
  404ebe:	f000 821e 	beq.w	4052fe <_vfiprintf_r+0x9c6>
  404ec2:	2130      	movs	r1, #48	; 0x30
  404ec4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  404ec8:	f043 0302 	orr.w	r3, r3, #2
  404ecc:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  404ed0:	2202      	movs	r2, #2
  404ed2:	e664      	b.n	404b9e <_vfiprintf_r+0x266>
  404ed4:	9608      	str	r6, [sp, #32]
  404ed6:	2800      	cmp	r0, #0
  404ed8:	f040 836b 	bne.w	4055b2 <_vfiprintf_r+0xc7a>
  404edc:	4917      	ldr	r1, [pc, #92]	; (404f3c <_vfiprintf_r+0x604>)
  404ede:	910b      	str	r1, [sp, #44]	; 0x2c
  404ee0:	e7d9      	b.n	404e96 <_vfiprintf_r+0x55e>
  404ee2:	9907      	ldr	r1, [sp, #28]
  404ee4:	9608      	str	r6, [sp, #32]
  404ee6:	680a      	ldr	r2, [r1, #0]
  404ee8:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  404eec:	f04f 0000 	mov.w	r0, #0
  404ef0:	460a      	mov	r2, r1
  404ef2:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  404ef6:	3204      	adds	r2, #4
  404ef8:	2001      	movs	r0, #1
  404efa:	9001      	str	r0, [sp, #4]
  404efc:	9207      	str	r2, [sp, #28]
  404efe:	9005      	str	r0, [sp, #20]
  404f00:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  404f04:	9302      	str	r3, [sp, #8]
  404f06:	2400      	movs	r4, #0
  404f08:	e670      	b.n	404bec <_vfiprintf_r+0x2b4>
  404f0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404f0e:	f898 2000 	ldrb.w	r2, [r8]
  404f12:	e583      	b.n	404a1c <_vfiprintf_r+0xe4>
  404f14:	f898 2000 	ldrb.w	r2, [r8]
  404f18:	2a6c      	cmp	r2, #108	; 0x6c
  404f1a:	bf03      	ittte	eq
  404f1c:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  404f20:	f043 0320 	orreq.w	r3, r3, #32
  404f24:	f108 0801 	addeq.w	r8, r8, #1
  404f28:	f043 0310 	orrne.w	r3, r3, #16
  404f2c:	e576      	b.n	404a1c <_vfiprintf_r+0xe4>
  404f2e:	bf00      	nop
  404f30:	004097d4 	.word	0x004097d4
  404f34:	004097e4 	.word	0x004097e4
  404f38:	00409794 	.word	0x00409794
  404f3c:	00409780 	.word	0x00409780
  404f40:	9907      	ldr	r1, [sp, #28]
  404f42:	680e      	ldr	r6, [r1, #0]
  404f44:	460a      	mov	r2, r1
  404f46:	2e00      	cmp	r6, #0
  404f48:	f102 0204 	add.w	r2, r2, #4
  404f4c:	f6ff ae0f 	blt.w	404b6e <_vfiprintf_r+0x236>
  404f50:	9207      	str	r2, [sp, #28]
  404f52:	f898 2000 	ldrb.w	r2, [r8]
  404f56:	e561      	b.n	404a1c <_vfiprintf_r+0xe4>
  404f58:	f898 2000 	ldrb.w	r2, [r8]
  404f5c:	2001      	movs	r0, #1
  404f5e:	252b      	movs	r5, #43	; 0x2b
  404f60:	e55c      	b.n	404a1c <_vfiprintf_r+0xe4>
  404f62:	9907      	ldr	r1, [sp, #28]
  404f64:	9608      	str	r6, [sp, #32]
  404f66:	f8d1 b000 	ldr.w	fp, [r1]
  404f6a:	f04f 0200 	mov.w	r2, #0
  404f6e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  404f72:	1d0e      	adds	r6, r1, #4
  404f74:	f1bb 0f00 	cmp.w	fp, #0
  404f78:	f000 82e5 	beq.w	405546 <_vfiprintf_r+0xc0e>
  404f7c:	1c67      	adds	r7, r4, #1
  404f7e:	f000 82c4 	beq.w	40550a <_vfiprintf_r+0xbd2>
  404f82:	4622      	mov	r2, r4
  404f84:	2100      	movs	r1, #0
  404f86:	4658      	mov	r0, fp
  404f88:	9301      	str	r3, [sp, #4]
  404f8a:	f002 f8f1 	bl	407170 <memchr>
  404f8e:	9b01      	ldr	r3, [sp, #4]
  404f90:	2800      	cmp	r0, #0
  404f92:	f000 82e5 	beq.w	405560 <_vfiprintf_r+0xc28>
  404f96:	eba0 020b 	sub.w	r2, r0, fp
  404f9a:	9205      	str	r2, [sp, #20]
  404f9c:	9607      	str	r6, [sp, #28]
  404f9e:	9302      	str	r3, [sp, #8]
  404fa0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404fa4:	2400      	movs	r4, #0
  404fa6:	e619      	b.n	404bdc <_vfiprintf_r+0x2a4>
  404fa8:	f898 2000 	ldrb.w	r2, [r8]
  404fac:	2a2a      	cmp	r2, #42	; 0x2a
  404fae:	f108 0701 	add.w	r7, r8, #1
  404fb2:	f000 82e9 	beq.w	405588 <_vfiprintf_r+0xc50>
  404fb6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404fba:	2909      	cmp	r1, #9
  404fbc:	46b8      	mov	r8, r7
  404fbe:	f04f 0400 	mov.w	r4, #0
  404fc2:	f63f ad2d 	bhi.w	404a20 <_vfiprintf_r+0xe8>
  404fc6:	f818 2b01 	ldrb.w	r2, [r8], #1
  404fca:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404fce:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  404fd2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404fd6:	2909      	cmp	r1, #9
  404fd8:	d9f5      	bls.n	404fc6 <_vfiprintf_r+0x68e>
  404fda:	e521      	b.n	404a20 <_vfiprintf_r+0xe8>
  404fdc:	f043 0320 	orr.w	r3, r3, #32
  404fe0:	f898 2000 	ldrb.w	r2, [r8]
  404fe4:	e51a      	b.n	404a1c <_vfiprintf_r+0xe4>
  404fe6:	9608      	str	r6, [sp, #32]
  404fe8:	2800      	cmp	r0, #0
  404fea:	f040 82db 	bne.w	4055a4 <_vfiprintf_r+0xc6c>
  404fee:	2a00      	cmp	r2, #0
  404ff0:	f000 80e7 	beq.w	4051c2 <_vfiprintf_r+0x88a>
  404ff4:	2101      	movs	r1, #1
  404ff6:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  404ffa:	f04f 0200 	mov.w	r2, #0
  404ffe:	9101      	str	r1, [sp, #4]
  405000:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  405004:	9105      	str	r1, [sp, #20]
  405006:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40500a:	e77b      	b.n	404f04 <_vfiprintf_r+0x5cc>
  40500c:	9a07      	ldr	r2, [sp, #28]
  40500e:	6813      	ldr	r3, [r2, #0]
  405010:	3204      	adds	r2, #4
  405012:	9207      	str	r2, [sp, #28]
  405014:	9a03      	ldr	r2, [sp, #12]
  405016:	601a      	str	r2, [r3, #0]
  405018:	e4cb      	b.n	4049b2 <_vfiprintf_r+0x7a>
  40501a:	aa0f      	add	r2, sp, #60	; 0x3c
  40501c:	9904      	ldr	r1, [sp, #16]
  40501e:	4620      	mov	r0, r4
  405020:	f7ff fc4a 	bl	4048b8 <__sprint_r.part.0>
  405024:	2800      	cmp	r0, #0
  405026:	f040 8139 	bne.w	40529c <_vfiprintf_r+0x964>
  40502a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40502c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40502e:	f101 0c01 	add.w	ip, r1, #1
  405032:	46ce      	mov	lr, r9
  405034:	e5ff      	b.n	404c36 <_vfiprintf_r+0x2fe>
  405036:	9910      	ldr	r1, [sp, #64]	; 0x40
  405038:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40503a:	1c48      	adds	r0, r1, #1
  40503c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405040:	2d00      	cmp	r5, #0
  405042:	f43f ae22 	beq.w	404c8a <_vfiprintf_r+0x352>
  405046:	3201      	adds	r2, #1
  405048:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  40504c:	2101      	movs	r1, #1
  40504e:	2807      	cmp	r0, #7
  405050:	9211      	str	r2, [sp, #68]	; 0x44
  405052:	9010      	str	r0, [sp, #64]	; 0x40
  405054:	f8ca 5000 	str.w	r5, [sl]
  405058:	f8ca 1004 	str.w	r1, [sl, #4]
  40505c:	f340 8108 	ble.w	405270 <_vfiprintf_r+0x938>
  405060:	2a00      	cmp	r2, #0
  405062:	f040 81bc 	bne.w	4053de <_vfiprintf_r+0xaa6>
  405066:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405068:	2b00      	cmp	r3, #0
  40506a:	f43f ae1f 	beq.w	404cac <_vfiprintf_r+0x374>
  40506e:	ab0e      	add	r3, sp, #56	; 0x38
  405070:	2202      	movs	r2, #2
  405072:	4608      	mov	r0, r1
  405074:	931c      	str	r3, [sp, #112]	; 0x70
  405076:	921d      	str	r2, [sp, #116]	; 0x74
  405078:	46ca      	mov	sl, r9
  40507a:	4601      	mov	r1, r0
  40507c:	f10a 0a08 	add.w	sl, sl, #8
  405080:	3001      	adds	r0, #1
  405082:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405084:	2b80      	cmp	r3, #128	; 0x80
  405086:	f43f ae19 	beq.w	404cbc <_vfiprintf_r+0x384>
  40508a:	9b05      	ldr	r3, [sp, #20]
  40508c:	1ae4      	subs	r4, r4, r3
  40508e:	2c00      	cmp	r4, #0
  405090:	dd2e      	ble.n	4050f0 <_vfiprintf_r+0x7b8>
  405092:	2c10      	cmp	r4, #16
  405094:	4db3      	ldr	r5, [pc, #716]	; (405364 <_vfiprintf_r+0xa2c>)
  405096:	dd1e      	ble.n	4050d6 <_vfiprintf_r+0x79e>
  405098:	46d6      	mov	lr, sl
  40509a:	2610      	movs	r6, #16
  40509c:	9f06      	ldr	r7, [sp, #24]
  40509e:	f8dd a010 	ldr.w	sl, [sp, #16]
  4050a2:	e006      	b.n	4050b2 <_vfiprintf_r+0x77a>
  4050a4:	1c88      	adds	r0, r1, #2
  4050a6:	f10e 0e08 	add.w	lr, lr, #8
  4050aa:	4619      	mov	r1, r3
  4050ac:	3c10      	subs	r4, #16
  4050ae:	2c10      	cmp	r4, #16
  4050b0:	dd10      	ble.n	4050d4 <_vfiprintf_r+0x79c>
  4050b2:	1c4b      	adds	r3, r1, #1
  4050b4:	3210      	adds	r2, #16
  4050b6:	2b07      	cmp	r3, #7
  4050b8:	9211      	str	r2, [sp, #68]	; 0x44
  4050ba:	e88e 0060 	stmia.w	lr, {r5, r6}
  4050be:	9310      	str	r3, [sp, #64]	; 0x40
  4050c0:	ddf0      	ble.n	4050a4 <_vfiprintf_r+0x76c>
  4050c2:	2a00      	cmp	r2, #0
  4050c4:	d165      	bne.n	405192 <_vfiprintf_r+0x85a>
  4050c6:	3c10      	subs	r4, #16
  4050c8:	2c10      	cmp	r4, #16
  4050ca:	f04f 0001 	mov.w	r0, #1
  4050ce:	4611      	mov	r1, r2
  4050d0:	46ce      	mov	lr, r9
  4050d2:	dcee      	bgt.n	4050b2 <_vfiprintf_r+0x77a>
  4050d4:	46f2      	mov	sl, lr
  4050d6:	4422      	add	r2, r4
  4050d8:	2807      	cmp	r0, #7
  4050da:	9211      	str	r2, [sp, #68]	; 0x44
  4050dc:	f8ca 5000 	str.w	r5, [sl]
  4050e0:	f8ca 4004 	str.w	r4, [sl, #4]
  4050e4:	9010      	str	r0, [sp, #64]	; 0x40
  4050e6:	f300 8085 	bgt.w	4051f4 <_vfiprintf_r+0x8bc>
  4050ea:	f10a 0a08 	add.w	sl, sl, #8
  4050ee:	3001      	adds	r0, #1
  4050f0:	9905      	ldr	r1, [sp, #20]
  4050f2:	f8ca b000 	str.w	fp, [sl]
  4050f6:	440a      	add	r2, r1
  4050f8:	2807      	cmp	r0, #7
  4050fa:	9211      	str	r2, [sp, #68]	; 0x44
  4050fc:	f8ca 1004 	str.w	r1, [sl, #4]
  405100:	9010      	str	r0, [sp, #64]	; 0x40
  405102:	f340 8082 	ble.w	40520a <_vfiprintf_r+0x8d2>
  405106:	2a00      	cmp	r2, #0
  405108:	f040 8118 	bne.w	40533c <_vfiprintf_r+0xa04>
  40510c:	9b02      	ldr	r3, [sp, #8]
  40510e:	9210      	str	r2, [sp, #64]	; 0x40
  405110:	0758      	lsls	r0, r3, #29
  405112:	d535      	bpl.n	405180 <_vfiprintf_r+0x848>
  405114:	9b08      	ldr	r3, [sp, #32]
  405116:	9901      	ldr	r1, [sp, #4]
  405118:	1a5c      	subs	r4, r3, r1
  40511a:	2c00      	cmp	r4, #0
  40511c:	f340 80e7 	ble.w	4052ee <_vfiprintf_r+0x9b6>
  405120:	46ca      	mov	sl, r9
  405122:	2c10      	cmp	r4, #16
  405124:	f340 8218 	ble.w	405558 <_vfiprintf_r+0xc20>
  405128:	9910      	ldr	r1, [sp, #64]	; 0x40
  40512a:	4e8f      	ldr	r6, [pc, #572]	; (405368 <_vfiprintf_r+0xa30>)
  40512c:	9f06      	ldr	r7, [sp, #24]
  40512e:	f8dd b010 	ldr.w	fp, [sp, #16]
  405132:	2510      	movs	r5, #16
  405134:	e006      	b.n	405144 <_vfiprintf_r+0x80c>
  405136:	1c88      	adds	r0, r1, #2
  405138:	f10a 0a08 	add.w	sl, sl, #8
  40513c:	4619      	mov	r1, r3
  40513e:	3c10      	subs	r4, #16
  405140:	2c10      	cmp	r4, #16
  405142:	dd11      	ble.n	405168 <_vfiprintf_r+0x830>
  405144:	1c4b      	adds	r3, r1, #1
  405146:	3210      	adds	r2, #16
  405148:	2b07      	cmp	r3, #7
  40514a:	9211      	str	r2, [sp, #68]	; 0x44
  40514c:	f8ca 6000 	str.w	r6, [sl]
  405150:	f8ca 5004 	str.w	r5, [sl, #4]
  405154:	9310      	str	r3, [sp, #64]	; 0x40
  405156:	ddee      	ble.n	405136 <_vfiprintf_r+0x7fe>
  405158:	bb42      	cbnz	r2, 4051ac <_vfiprintf_r+0x874>
  40515a:	3c10      	subs	r4, #16
  40515c:	2c10      	cmp	r4, #16
  40515e:	f04f 0001 	mov.w	r0, #1
  405162:	4611      	mov	r1, r2
  405164:	46ca      	mov	sl, r9
  405166:	dced      	bgt.n	405144 <_vfiprintf_r+0x80c>
  405168:	4422      	add	r2, r4
  40516a:	2807      	cmp	r0, #7
  40516c:	9211      	str	r2, [sp, #68]	; 0x44
  40516e:	f8ca 6000 	str.w	r6, [sl]
  405172:	f8ca 4004 	str.w	r4, [sl, #4]
  405176:	9010      	str	r0, [sp, #64]	; 0x40
  405178:	dd51      	ble.n	40521e <_vfiprintf_r+0x8e6>
  40517a:	2a00      	cmp	r2, #0
  40517c:	f040 819b 	bne.w	4054b6 <_vfiprintf_r+0xb7e>
  405180:	9b03      	ldr	r3, [sp, #12]
  405182:	9a08      	ldr	r2, [sp, #32]
  405184:	9901      	ldr	r1, [sp, #4]
  405186:	428a      	cmp	r2, r1
  405188:	bfac      	ite	ge
  40518a:	189b      	addge	r3, r3, r2
  40518c:	185b      	addlt	r3, r3, r1
  40518e:	9303      	str	r3, [sp, #12]
  405190:	e04e      	b.n	405230 <_vfiprintf_r+0x8f8>
  405192:	aa0f      	add	r2, sp, #60	; 0x3c
  405194:	4651      	mov	r1, sl
  405196:	4638      	mov	r0, r7
  405198:	f7ff fb8e 	bl	4048b8 <__sprint_r.part.0>
  40519c:	2800      	cmp	r0, #0
  40519e:	f040 813f 	bne.w	405420 <_vfiprintf_r+0xae8>
  4051a2:	9910      	ldr	r1, [sp, #64]	; 0x40
  4051a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4051a6:	1c48      	adds	r0, r1, #1
  4051a8:	46ce      	mov	lr, r9
  4051aa:	e77f      	b.n	4050ac <_vfiprintf_r+0x774>
  4051ac:	aa0f      	add	r2, sp, #60	; 0x3c
  4051ae:	4659      	mov	r1, fp
  4051b0:	4638      	mov	r0, r7
  4051b2:	f7ff fb81 	bl	4048b8 <__sprint_r.part.0>
  4051b6:	b960      	cbnz	r0, 4051d2 <_vfiprintf_r+0x89a>
  4051b8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4051ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4051bc:	1c48      	adds	r0, r1, #1
  4051be:	46ca      	mov	sl, r9
  4051c0:	e7bd      	b.n	40513e <_vfiprintf_r+0x806>
  4051c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4051c4:	f8dd b010 	ldr.w	fp, [sp, #16]
  4051c8:	2b00      	cmp	r3, #0
  4051ca:	f040 81d4 	bne.w	405576 <_vfiprintf_r+0xc3e>
  4051ce:	2300      	movs	r3, #0
  4051d0:	9310      	str	r3, [sp, #64]	; 0x40
  4051d2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4051d6:	f013 0f01 	tst.w	r3, #1
  4051da:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4051de:	d102      	bne.n	4051e6 <_vfiprintf_r+0x8ae>
  4051e0:	059a      	lsls	r2, r3, #22
  4051e2:	f140 80de 	bpl.w	4053a2 <_vfiprintf_r+0xa6a>
  4051e6:	065b      	lsls	r3, r3, #25
  4051e8:	f53f acb2 	bmi.w	404b50 <_vfiprintf_r+0x218>
  4051ec:	9803      	ldr	r0, [sp, #12]
  4051ee:	b02d      	add	sp, #180	; 0xb4
  4051f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4051f4:	2a00      	cmp	r2, #0
  4051f6:	f040 8106 	bne.w	405406 <_vfiprintf_r+0xace>
  4051fa:	9a05      	ldr	r2, [sp, #20]
  4051fc:	921d      	str	r2, [sp, #116]	; 0x74
  4051fe:	2301      	movs	r3, #1
  405200:	9211      	str	r2, [sp, #68]	; 0x44
  405202:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  405206:	9310      	str	r3, [sp, #64]	; 0x40
  405208:	46ca      	mov	sl, r9
  40520a:	f10a 0a08 	add.w	sl, sl, #8
  40520e:	9b02      	ldr	r3, [sp, #8]
  405210:	0759      	lsls	r1, r3, #29
  405212:	d504      	bpl.n	40521e <_vfiprintf_r+0x8e6>
  405214:	9b08      	ldr	r3, [sp, #32]
  405216:	9901      	ldr	r1, [sp, #4]
  405218:	1a5c      	subs	r4, r3, r1
  40521a:	2c00      	cmp	r4, #0
  40521c:	dc81      	bgt.n	405122 <_vfiprintf_r+0x7ea>
  40521e:	9b03      	ldr	r3, [sp, #12]
  405220:	9908      	ldr	r1, [sp, #32]
  405222:	9801      	ldr	r0, [sp, #4]
  405224:	4281      	cmp	r1, r0
  405226:	bfac      	ite	ge
  405228:	185b      	addge	r3, r3, r1
  40522a:	181b      	addlt	r3, r3, r0
  40522c:	9303      	str	r3, [sp, #12]
  40522e:	bb72      	cbnz	r2, 40528e <_vfiprintf_r+0x956>
  405230:	2300      	movs	r3, #0
  405232:	9310      	str	r3, [sp, #64]	; 0x40
  405234:	46ca      	mov	sl, r9
  405236:	f7ff bbbc 	b.w	4049b2 <_vfiprintf_r+0x7a>
  40523a:	aa0f      	add	r2, sp, #60	; 0x3c
  40523c:	9904      	ldr	r1, [sp, #16]
  40523e:	4620      	mov	r0, r4
  405240:	f7ff fb3a 	bl	4048b8 <__sprint_r.part.0>
  405244:	bb50      	cbnz	r0, 40529c <_vfiprintf_r+0x964>
  405246:	9910      	ldr	r1, [sp, #64]	; 0x40
  405248:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40524a:	f101 0e01 	add.w	lr, r1, #1
  40524e:	46cc      	mov	ip, r9
  405250:	e548      	b.n	404ce4 <_vfiprintf_r+0x3ac>
  405252:	2a00      	cmp	r2, #0
  405254:	f040 8140 	bne.w	4054d8 <_vfiprintf_r+0xba0>
  405258:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  40525c:	2900      	cmp	r1, #0
  40525e:	f000 811b 	beq.w	405498 <_vfiprintf_r+0xb60>
  405262:	2201      	movs	r2, #1
  405264:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  405268:	4610      	mov	r0, r2
  40526a:	921d      	str	r2, [sp, #116]	; 0x74
  40526c:	911c      	str	r1, [sp, #112]	; 0x70
  40526e:	46ca      	mov	sl, r9
  405270:	4601      	mov	r1, r0
  405272:	f10a 0a08 	add.w	sl, sl, #8
  405276:	3001      	adds	r0, #1
  405278:	e507      	b.n	404c8a <_vfiprintf_r+0x352>
  40527a:	9b02      	ldr	r3, [sp, #8]
  40527c:	2a01      	cmp	r2, #1
  40527e:	f000 8098 	beq.w	4053b2 <_vfiprintf_r+0xa7a>
  405282:	2a02      	cmp	r2, #2
  405284:	d10d      	bne.n	4052a2 <_vfiprintf_r+0x96a>
  405286:	9302      	str	r3, [sp, #8]
  405288:	2600      	movs	r6, #0
  40528a:	2700      	movs	r7, #0
  40528c:	e5b0      	b.n	404df0 <_vfiprintf_r+0x4b8>
  40528e:	aa0f      	add	r2, sp, #60	; 0x3c
  405290:	9904      	ldr	r1, [sp, #16]
  405292:	9806      	ldr	r0, [sp, #24]
  405294:	f7ff fb10 	bl	4048b8 <__sprint_r.part.0>
  405298:	2800      	cmp	r0, #0
  40529a:	d0c9      	beq.n	405230 <_vfiprintf_r+0x8f8>
  40529c:	f8dd b010 	ldr.w	fp, [sp, #16]
  4052a0:	e797      	b.n	4051d2 <_vfiprintf_r+0x89a>
  4052a2:	9302      	str	r3, [sp, #8]
  4052a4:	2600      	movs	r6, #0
  4052a6:	2700      	movs	r7, #0
  4052a8:	4649      	mov	r1, r9
  4052aa:	e000      	b.n	4052ae <_vfiprintf_r+0x976>
  4052ac:	4659      	mov	r1, fp
  4052ae:	08f2      	lsrs	r2, r6, #3
  4052b0:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  4052b4:	08f8      	lsrs	r0, r7, #3
  4052b6:	f006 0307 	and.w	r3, r6, #7
  4052ba:	4607      	mov	r7, r0
  4052bc:	4616      	mov	r6, r2
  4052be:	3330      	adds	r3, #48	; 0x30
  4052c0:	ea56 0207 	orrs.w	r2, r6, r7
  4052c4:	f801 3c01 	strb.w	r3, [r1, #-1]
  4052c8:	f101 3bff 	add.w	fp, r1, #4294967295
  4052cc:	d1ee      	bne.n	4052ac <_vfiprintf_r+0x974>
  4052ce:	9a02      	ldr	r2, [sp, #8]
  4052d0:	07d6      	lsls	r6, r2, #31
  4052d2:	f57f ad9d 	bpl.w	404e10 <_vfiprintf_r+0x4d8>
  4052d6:	2b30      	cmp	r3, #48	; 0x30
  4052d8:	f43f ad9a 	beq.w	404e10 <_vfiprintf_r+0x4d8>
  4052dc:	3902      	subs	r1, #2
  4052de:	2330      	movs	r3, #48	; 0x30
  4052e0:	f80b 3c01 	strb.w	r3, [fp, #-1]
  4052e4:	eba9 0301 	sub.w	r3, r9, r1
  4052e8:	9305      	str	r3, [sp, #20]
  4052ea:	468b      	mov	fp, r1
  4052ec:	e476      	b.n	404bdc <_vfiprintf_r+0x2a4>
  4052ee:	9b03      	ldr	r3, [sp, #12]
  4052f0:	9a08      	ldr	r2, [sp, #32]
  4052f2:	428a      	cmp	r2, r1
  4052f4:	bfac      	ite	ge
  4052f6:	189b      	addge	r3, r3, r2
  4052f8:	185b      	addlt	r3, r3, r1
  4052fa:	9303      	str	r3, [sp, #12]
  4052fc:	e798      	b.n	405230 <_vfiprintf_r+0x8f8>
  4052fe:	2202      	movs	r2, #2
  405300:	e44d      	b.n	404b9e <_vfiprintf_r+0x266>
  405302:	2f00      	cmp	r7, #0
  405304:	bf08      	it	eq
  405306:	2e0a      	cmpeq	r6, #10
  405308:	d352      	bcc.n	4053b0 <_vfiprintf_r+0xa78>
  40530a:	46cb      	mov	fp, r9
  40530c:	4630      	mov	r0, r6
  40530e:	4639      	mov	r1, r7
  405310:	220a      	movs	r2, #10
  405312:	2300      	movs	r3, #0
  405314:	f003 fc6a 	bl	408bec <__aeabi_uldivmod>
  405318:	3230      	adds	r2, #48	; 0x30
  40531a:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  40531e:	4630      	mov	r0, r6
  405320:	4639      	mov	r1, r7
  405322:	2300      	movs	r3, #0
  405324:	220a      	movs	r2, #10
  405326:	f003 fc61 	bl	408bec <__aeabi_uldivmod>
  40532a:	4606      	mov	r6, r0
  40532c:	460f      	mov	r7, r1
  40532e:	ea56 0307 	orrs.w	r3, r6, r7
  405332:	d1eb      	bne.n	40530c <_vfiprintf_r+0x9d4>
  405334:	e56c      	b.n	404e10 <_vfiprintf_r+0x4d8>
  405336:	9405      	str	r4, [sp, #20]
  405338:	46cb      	mov	fp, r9
  40533a:	e44f      	b.n	404bdc <_vfiprintf_r+0x2a4>
  40533c:	aa0f      	add	r2, sp, #60	; 0x3c
  40533e:	9904      	ldr	r1, [sp, #16]
  405340:	9806      	ldr	r0, [sp, #24]
  405342:	f7ff fab9 	bl	4048b8 <__sprint_r.part.0>
  405346:	2800      	cmp	r0, #0
  405348:	d1a8      	bne.n	40529c <_vfiprintf_r+0x964>
  40534a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40534c:	46ca      	mov	sl, r9
  40534e:	e75e      	b.n	40520e <_vfiprintf_r+0x8d6>
  405350:	aa0f      	add	r2, sp, #60	; 0x3c
  405352:	9904      	ldr	r1, [sp, #16]
  405354:	9806      	ldr	r0, [sp, #24]
  405356:	f7ff faaf 	bl	4048b8 <__sprint_r.part.0>
  40535a:	2800      	cmp	r0, #0
  40535c:	d19e      	bne.n	40529c <_vfiprintf_r+0x964>
  40535e:	46ca      	mov	sl, r9
  405360:	f7ff bbc0 	b.w	404ae4 <_vfiprintf_r+0x1ac>
  405364:	004097e4 	.word	0x004097e4
  405368:	004097d4 	.word	0x004097d4
  40536c:	3104      	adds	r1, #4
  40536e:	6816      	ldr	r6, [r2, #0]
  405370:	9107      	str	r1, [sp, #28]
  405372:	2201      	movs	r2, #1
  405374:	2700      	movs	r7, #0
  405376:	e412      	b.n	404b9e <_vfiprintf_r+0x266>
  405378:	9807      	ldr	r0, [sp, #28]
  40537a:	4601      	mov	r1, r0
  40537c:	3104      	adds	r1, #4
  40537e:	6806      	ldr	r6, [r0, #0]
  405380:	9107      	str	r1, [sp, #28]
  405382:	2700      	movs	r7, #0
  405384:	e40b      	b.n	404b9e <_vfiprintf_r+0x266>
  405386:	680e      	ldr	r6, [r1, #0]
  405388:	3104      	adds	r1, #4
  40538a:	9107      	str	r1, [sp, #28]
  40538c:	2700      	movs	r7, #0
  40538e:	e591      	b.n	404eb4 <_vfiprintf_r+0x57c>
  405390:	9907      	ldr	r1, [sp, #28]
  405392:	680e      	ldr	r6, [r1, #0]
  405394:	460a      	mov	r2, r1
  405396:	17f7      	asrs	r7, r6, #31
  405398:	3204      	adds	r2, #4
  40539a:	9207      	str	r2, [sp, #28]
  40539c:	4630      	mov	r0, r6
  40539e:	4639      	mov	r1, r7
  4053a0:	e50f      	b.n	404dc2 <_vfiprintf_r+0x48a>
  4053a2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4053a6:	f001 fe4d 	bl	407044 <__retarget_lock_release_recursive>
  4053aa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4053ae:	e71a      	b.n	4051e6 <_vfiprintf_r+0x8ae>
  4053b0:	9b02      	ldr	r3, [sp, #8]
  4053b2:	9302      	str	r3, [sp, #8]
  4053b4:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4053b8:	3630      	adds	r6, #48	; 0x30
  4053ba:	2301      	movs	r3, #1
  4053bc:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  4053c0:	9305      	str	r3, [sp, #20]
  4053c2:	e40b      	b.n	404bdc <_vfiprintf_r+0x2a4>
  4053c4:	aa0f      	add	r2, sp, #60	; 0x3c
  4053c6:	9904      	ldr	r1, [sp, #16]
  4053c8:	9806      	ldr	r0, [sp, #24]
  4053ca:	f7ff fa75 	bl	4048b8 <__sprint_r.part.0>
  4053ce:	2800      	cmp	r0, #0
  4053d0:	f47f af64 	bne.w	40529c <_vfiprintf_r+0x964>
  4053d4:	9910      	ldr	r1, [sp, #64]	; 0x40
  4053d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4053d8:	1c48      	adds	r0, r1, #1
  4053da:	46ca      	mov	sl, r9
  4053dc:	e651      	b.n	405082 <_vfiprintf_r+0x74a>
  4053de:	aa0f      	add	r2, sp, #60	; 0x3c
  4053e0:	9904      	ldr	r1, [sp, #16]
  4053e2:	9806      	ldr	r0, [sp, #24]
  4053e4:	f7ff fa68 	bl	4048b8 <__sprint_r.part.0>
  4053e8:	2800      	cmp	r0, #0
  4053ea:	f47f af57 	bne.w	40529c <_vfiprintf_r+0x964>
  4053ee:	9910      	ldr	r1, [sp, #64]	; 0x40
  4053f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4053f2:	1c48      	adds	r0, r1, #1
  4053f4:	46ca      	mov	sl, r9
  4053f6:	e448      	b.n	404c8a <_vfiprintf_r+0x352>
  4053f8:	2a00      	cmp	r2, #0
  4053fa:	f040 8091 	bne.w	405520 <_vfiprintf_r+0xbe8>
  4053fe:	2001      	movs	r0, #1
  405400:	4611      	mov	r1, r2
  405402:	46ca      	mov	sl, r9
  405404:	e641      	b.n	40508a <_vfiprintf_r+0x752>
  405406:	aa0f      	add	r2, sp, #60	; 0x3c
  405408:	9904      	ldr	r1, [sp, #16]
  40540a:	9806      	ldr	r0, [sp, #24]
  40540c:	f7ff fa54 	bl	4048b8 <__sprint_r.part.0>
  405410:	2800      	cmp	r0, #0
  405412:	f47f af43 	bne.w	40529c <_vfiprintf_r+0x964>
  405416:	9810      	ldr	r0, [sp, #64]	; 0x40
  405418:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40541a:	3001      	adds	r0, #1
  40541c:	46ca      	mov	sl, r9
  40541e:	e667      	b.n	4050f0 <_vfiprintf_r+0x7b8>
  405420:	46d3      	mov	fp, sl
  405422:	e6d6      	b.n	4051d2 <_vfiprintf_r+0x89a>
  405424:	9e07      	ldr	r6, [sp, #28]
  405426:	3607      	adds	r6, #7
  405428:	f026 0207 	bic.w	r2, r6, #7
  40542c:	f102 0108 	add.w	r1, r2, #8
  405430:	e9d2 6700 	ldrd	r6, r7, [r2]
  405434:	9107      	str	r1, [sp, #28]
  405436:	2201      	movs	r2, #1
  405438:	f7ff bbb1 	b.w	404b9e <_vfiprintf_r+0x266>
  40543c:	9e07      	ldr	r6, [sp, #28]
  40543e:	3607      	adds	r6, #7
  405440:	f026 0607 	bic.w	r6, r6, #7
  405444:	e9d6 0100 	ldrd	r0, r1, [r6]
  405448:	f106 0208 	add.w	r2, r6, #8
  40544c:	9207      	str	r2, [sp, #28]
  40544e:	4606      	mov	r6, r0
  405450:	460f      	mov	r7, r1
  405452:	e4b6      	b.n	404dc2 <_vfiprintf_r+0x48a>
  405454:	9e07      	ldr	r6, [sp, #28]
  405456:	3607      	adds	r6, #7
  405458:	f026 0207 	bic.w	r2, r6, #7
  40545c:	f102 0108 	add.w	r1, r2, #8
  405460:	e9d2 6700 	ldrd	r6, r7, [r2]
  405464:	9107      	str	r1, [sp, #28]
  405466:	2200      	movs	r2, #0
  405468:	f7ff bb99 	b.w	404b9e <_vfiprintf_r+0x266>
  40546c:	9e07      	ldr	r6, [sp, #28]
  40546e:	3607      	adds	r6, #7
  405470:	f026 0107 	bic.w	r1, r6, #7
  405474:	f101 0008 	add.w	r0, r1, #8
  405478:	9007      	str	r0, [sp, #28]
  40547a:	e9d1 6700 	ldrd	r6, r7, [r1]
  40547e:	e519      	b.n	404eb4 <_vfiprintf_r+0x57c>
  405480:	46cb      	mov	fp, r9
  405482:	f7ff bbab 	b.w	404bdc <_vfiprintf_r+0x2a4>
  405486:	252d      	movs	r5, #45	; 0x2d
  405488:	4276      	negs	r6, r6
  40548a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  40548e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405492:	2201      	movs	r2, #1
  405494:	f7ff bb88 	b.w	404ba8 <_vfiprintf_r+0x270>
  405498:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40549a:	b9b3      	cbnz	r3, 4054ca <_vfiprintf_r+0xb92>
  40549c:	4611      	mov	r1, r2
  40549e:	2001      	movs	r0, #1
  4054a0:	46ca      	mov	sl, r9
  4054a2:	e5f2      	b.n	40508a <_vfiprintf_r+0x752>
  4054a4:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4054a8:	f001 fdcc 	bl	407044 <__retarget_lock_release_recursive>
  4054ac:	f04f 33ff 	mov.w	r3, #4294967295
  4054b0:	9303      	str	r3, [sp, #12]
  4054b2:	f7ff bb50 	b.w	404b56 <_vfiprintf_r+0x21e>
  4054b6:	aa0f      	add	r2, sp, #60	; 0x3c
  4054b8:	9904      	ldr	r1, [sp, #16]
  4054ba:	9806      	ldr	r0, [sp, #24]
  4054bc:	f7ff f9fc 	bl	4048b8 <__sprint_r.part.0>
  4054c0:	2800      	cmp	r0, #0
  4054c2:	f47f aeeb 	bne.w	40529c <_vfiprintf_r+0x964>
  4054c6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4054c8:	e6a9      	b.n	40521e <_vfiprintf_r+0x8e6>
  4054ca:	ab0e      	add	r3, sp, #56	; 0x38
  4054cc:	2202      	movs	r2, #2
  4054ce:	931c      	str	r3, [sp, #112]	; 0x70
  4054d0:	921d      	str	r2, [sp, #116]	; 0x74
  4054d2:	2001      	movs	r0, #1
  4054d4:	46ca      	mov	sl, r9
  4054d6:	e5d0      	b.n	40507a <_vfiprintf_r+0x742>
  4054d8:	aa0f      	add	r2, sp, #60	; 0x3c
  4054da:	9904      	ldr	r1, [sp, #16]
  4054dc:	9806      	ldr	r0, [sp, #24]
  4054de:	f7ff f9eb 	bl	4048b8 <__sprint_r.part.0>
  4054e2:	2800      	cmp	r0, #0
  4054e4:	f47f aeda 	bne.w	40529c <_vfiprintf_r+0x964>
  4054e8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4054ea:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4054ec:	1c48      	adds	r0, r1, #1
  4054ee:	46ca      	mov	sl, r9
  4054f0:	e5a4      	b.n	40503c <_vfiprintf_r+0x704>
  4054f2:	9a07      	ldr	r2, [sp, #28]
  4054f4:	9903      	ldr	r1, [sp, #12]
  4054f6:	6813      	ldr	r3, [r2, #0]
  4054f8:	17cd      	asrs	r5, r1, #31
  4054fa:	4608      	mov	r0, r1
  4054fc:	3204      	adds	r2, #4
  4054fe:	4629      	mov	r1, r5
  405500:	9207      	str	r2, [sp, #28]
  405502:	e9c3 0100 	strd	r0, r1, [r3]
  405506:	f7ff ba54 	b.w	4049b2 <_vfiprintf_r+0x7a>
  40550a:	4658      	mov	r0, fp
  40550c:	9607      	str	r6, [sp, #28]
  40550e:	9302      	str	r3, [sp, #8]
  405510:	f7fd ff36 	bl	403380 <strlen>
  405514:	2400      	movs	r4, #0
  405516:	9005      	str	r0, [sp, #20]
  405518:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40551c:	f7ff bb5e 	b.w	404bdc <_vfiprintf_r+0x2a4>
  405520:	aa0f      	add	r2, sp, #60	; 0x3c
  405522:	9904      	ldr	r1, [sp, #16]
  405524:	9806      	ldr	r0, [sp, #24]
  405526:	f7ff f9c7 	bl	4048b8 <__sprint_r.part.0>
  40552a:	2800      	cmp	r0, #0
  40552c:	f47f aeb6 	bne.w	40529c <_vfiprintf_r+0x964>
  405530:	9910      	ldr	r1, [sp, #64]	; 0x40
  405532:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405534:	1c48      	adds	r0, r1, #1
  405536:	46ca      	mov	sl, r9
  405538:	e5a7      	b.n	40508a <_vfiprintf_r+0x752>
  40553a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40553c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40553e:	4e20      	ldr	r6, [pc, #128]	; (4055c0 <_vfiprintf_r+0xc88>)
  405540:	3101      	adds	r1, #1
  405542:	f7ff bb90 	b.w	404c66 <_vfiprintf_r+0x32e>
  405546:	2c06      	cmp	r4, #6
  405548:	bf28      	it	cs
  40554a:	2406      	movcs	r4, #6
  40554c:	9405      	str	r4, [sp, #20]
  40554e:	9607      	str	r6, [sp, #28]
  405550:	9401      	str	r4, [sp, #4]
  405552:	f8df b070 	ldr.w	fp, [pc, #112]	; 4055c4 <_vfiprintf_r+0xc8c>
  405556:	e4d5      	b.n	404f04 <_vfiprintf_r+0x5cc>
  405558:	9810      	ldr	r0, [sp, #64]	; 0x40
  40555a:	4e19      	ldr	r6, [pc, #100]	; (4055c0 <_vfiprintf_r+0xc88>)
  40555c:	3001      	adds	r0, #1
  40555e:	e603      	b.n	405168 <_vfiprintf_r+0x830>
  405560:	9405      	str	r4, [sp, #20]
  405562:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405566:	9607      	str	r6, [sp, #28]
  405568:	9302      	str	r3, [sp, #8]
  40556a:	4604      	mov	r4, r0
  40556c:	f7ff bb36 	b.w	404bdc <_vfiprintf_r+0x2a4>
  405570:	4686      	mov	lr, r0
  405572:	f7ff bbce 	b.w	404d12 <_vfiprintf_r+0x3da>
  405576:	9806      	ldr	r0, [sp, #24]
  405578:	aa0f      	add	r2, sp, #60	; 0x3c
  40557a:	4659      	mov	r1, fp
  40557c:	f7ff f99c 	bl	4048b8 <__sprint_r.part.0>
  405580:	2800      	cmp	r0, #0
  405582:	f43f ae24 	beq.w	4051ce <_vfiprintf_r+0x896>
  405586:	e624      	b.n	4051d2 <_vfiprintf_r+0x89a>
  405588:	9907      	ldr	r1, [sp, #28]
  40558a:	f898 2001 	ldrb.w	r2, [r8, #1]
  40558e:	680c      	ldr	r4, [r1, #0]
  405590:	3104      	adds	r1, #4
  405592:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  405596:	46b8      	mov	r8, r7
  405598:	9107      	str	r1, [sp, #28]
  40559a:	f7ff ba3f 	b.w	404a1c <_vfiprintf_r+0xe4>
  40559e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4055a2:	e43c      	b.n	404e1e <_vfiprintf_r+0x4e6>
  4055a4:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4055a8:	e521      	b.n	404fee <_vfiprintf_r+0x6b6>
  4055aa:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4055ae:	f7ff bbf4 	b.w	404d9a <_vfiprintf_r+0x462>
  4055b2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4055b6:	e491      	b.n	404edc <_vfiprintf_r+0x5a4>
  4055b8:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4055bc:	e469      	b.n	404e92 <_vfiprintf_r+0x55a>
  4055be:	bf00      	nop
  4055c0:	004097d4 	.word	0x004097d4
  4055c4:	004097a8 	.word	0x004097a8

004055c8 <__sbprintf>:
  4055c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4055cc:	460c      	mov	r4, r1
  4055ce:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  4055d2:	8989      	ldrh	r1, [r1, #12]
  4055d4:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4055d6:	89e5      	ldrh	r5, [r4, #14]
  4055d8:	9619      	str	r6, [sp, #100]	; 0x64
  4055da:	f021 0102 	bic.w	r1, r1, #2
  4055de:	4606      	mov	r6, r0
  4055e0:	69e0      	ldr	r0, [r4, #28]
  4055e2:	f8ad 100c 	strh.w	r1, [sp, #12]
  4055e6:	4617      	mov	r7, r2
  4055e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4055ec:	6a62      	ldr	r2, [r4, #36]	; 0x24
  4055ee:	f8ad 500e 	strh.w	r5, [sp, #14]
  4055f2:	4698      	mov	r8, r3
  4055f4:	ad1a      	add	r5, sp, #104	; 0x68
  4055f6:	2300      	movs	r3, #0
  4055f8:	9007      	str	r0, [sp, #28]
  4055fa:	a816      	add	r0, sp, #88	; 0x58
  4055fc:	9209      	str	r2, [sp, #36]	; 0x24
  4055fe:	9306      	str	r3, [sp, #24]
  405600:	9500      	str	r5, [sp, #0]
  405602:	9504      	str	r5, [sp, #16]
  405604:	9102      	str	r1, [sp, #8]
  405606:	9105      	str	r1, [sp, #20]
  405608:	f001 fd16 	bl	407038 <__retarget_lock_init_recursive>
  40560c:	4643      	mov	r3, r8
  40560e:	463a      	mov	r2, r7
  405610:	4669      	mov	r1, sp
  405612:	4630      	mov	r0, r6
  405614:	f7ff f990 	bl	404938 <_vfiprintf_r>
  405618:	1e05      	subs	r5, r0, #0
  40561a:	db07      	blt.n	40562c <__sbprintf+0x64>
  40561c:	4630      	mov	r0, r6
  40561e:	4669      	mov	r1, sp
  405620:	f001 f8e8 	bl	4067f4 <_fflush_r>
  405624:	2800      	cmp	r0, #0
  405626:	bf18      	it	ne
  405628:	f04f 35ff 	movne.w	r5, #4294967295
  40562c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  405630:	065b      	lsls	r3, r3, #25
  405632:	d503      	bpl.n	40563c <__sbprintf+0x74>
  405634:	89a3      	ldrh	r3, [r4, #12]
  405636:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40563a:	81a3      	strh	r3, [r4, #12]
  40563c:	9816      	ldr	r0, [sp, #88]	; 0x58
  40563e:	f001 fcfd 	bl	40703c <__retarget_lock_close_recursive>
  405642:	4628      	mov	r0, r5
  405644:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  405648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040564c <__swsetup_r>:
  40564c:	b538      	push	{r3, r4, r5, lr}
  40564e:	4b30      	ldr	r3, [pc, #192]	; (405710 <__swsetup_r+0xc4>)
  405650:	681b      	ldr	r3, [r3, #0]
  405652:	4605      	mov	r5, r0
  405654:	460c      	mov	r4, r1
  405656:	b113      	cbz	r3, 40565e <__swsetup_r+0x12>
  405658:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40565a:	2a00      	cmp	r2, #0
  40565c:	d038      	beq.n	4056d0 <__swsetup_r+0x84>
  40565e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405662:	b293      	uxth	r3, r2
  405664:	0718      	lsls	r0, r3, #28
  405666:	d50c      	bpl.n	405682 <__swsetup_r+0x36>
  405668:	6920      	ldr	r0, [r4, #16]
  40566a:	b1a8      	cbz	r0, 405698 <__swsetup_r+0x4c>
  40566c:	f013 0201 	ands.w	r2, r3, #1
  405670:	d01e      	beq.n	4056b0 <__swsetup_r+0x64>
  405672:	6963      	ldr	r3, [r4, #20]
  405674:	2200      	movs	r2, #0
  405676:	425b      	negs	r3, r3
  405678:	61a3      	str	r3, [r4, #24]
  40567a:	60a2      	str	r2, [r4, #8]
  40567c:	b1f0      	cbz	r0, 4056bc <__swsetup_r+0x70>
  40567e:	2000      	movs	r0, #0
  405680:	bd38      	pop	{r3, r4, r5, pc}
  405682:	06d9      	lsls	r1, r3, #27
  405684:	d53c      	bpl.n	405700 <__swsetup_r+0xb4>
  405686:	0758      	lsls	r0, r3, #29
  405688:	d426      	bmi.n	4056d8 <__swsetup_r+0x8c>
  40568a:	6920      	ldr	r0, [r4, #16]
  40568c:	f042 0308 	orr.w	r3, r2, #8
  405690:	81a3      	strh	r3, [r4, #12]
  405692:	b29b      	uxth	r3, r3
  405694:	2800      	cmp	r0, #0
  405696:	d1e9      	bne.n	40566c <__swsetup_r+0x20>
  405698:	f403 7220 	and.w	r2, r3, #640	; 0x280
  40569c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4056a0:	d0e4      	beq.n	40566c <__swsetup_r+0x20>
  4056a2:	4628      	mov	r0, r5
  4056a4:	4621      	mov	r1, r4
  4056a6:	f001 fcfd 	bl	4070a4 <__smakebuf_r>
  4056aa:	89a3      	ldrh	r3, [r4, #12]
  4056ac:	6920      	ldr	r0, [r4, #16]
  4056ae:	e7dd      	b.n	40566c <__swsetup_r+0x20>
  4056b0:	0799      	lsls	r1, r3, #30
  4056b2:	bf58      	it	pl
  4056b4:	6962      	ldrpl	r2, [r4, #20]
  4056b6:	60a2      	str	r2, [r4, #8]
  4056b8:	2800      	cmp	r0, #0
  4056ba:	d1e0      	bne.n	40567e <__swsetup_r+0x32>
  4056bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4056c0:	061a      	lsls	r2, r3, #24
  4056c2:	d5dd      	bpl.n	405680 <__swsetup_r+0x34>
  4056c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4056c8:	81a3      	strh	r3, [r4, #12]
  4056ca:	f04f 30ff 	mov.w	r0, #4294967295
  4056ce:	bd38      	pop	{r3, r4, r5, pc}
  4056d0:	4618      	mov	r0, r3
  4056d2:	f001 f8e7 	bl	4068a4 <__sinit>
  4056d6:	e7c2      	b.n	40565e <__swsetup_r+0x12>
  4056d8:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4056da:	b151      	cbz	r1, 4056f2 <__swsetup_r+0xa6>
  4056dc:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4056e0:	4299      	cmp	r1, r3
  4056e2:	d004      	beq.n	4056ee <__swsetup_r+0xa2>
  4056e4:	4628      	mov	r0, r5
  4056e6:	f001 fa03 	bl	406af0 <_free_r>
  4056ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4056ee:	2300      	movs	r3, #0
  4056f0:	6323      	str	r3, [r4, #48]	; 0x30
  4056f2:	2300      	movs	r3, #0
  4056f4:	6920      	ldr	r0, [r4, #16]
  4056f6:	6063      	str	r3, [r4, #4]
  4056f8:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4056fc:	6020      	str	r0, [r4, #0]
  4056fe:	e7c5      	b.n	40568c <__swsetup_r+0x40>
  405700:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  405704:	2309      	movs	r3, #9
  405706:	602b      	str	r3, [r5, #0]
  405708:	f04f 30ff 	mov.w	r0, #4294967295
  40570c:	81a2      	strh	r2, [r4, #12]
  40570e:	bd38      	pop	{r3, r4, r5, pc}
  405710:	20400014 	.word	0x20400014

00405714 <register_fini>:
  405714:	4b02      	ldr	r3, [pc, #8]	; (405720 <register_fini+0xc>)
  405716:	b113      	cbz	r3, 40571e <register_fini+0xa>
  405718:	4802      	ldr	r0, [pc, #8]	; (405724 <register_fini+0x10>)
  40571a:	f000 b805 	b.w	405728 <atexit>
  40571e:	4770      	bx	lr
  405720:	00000000 	.word	0x00000000
  405724:	00406915 	.word	0x00406915

00405728 <atexit>:
  405728:	2300      	movs	r3, #0
  40572a:	4601      	mov	r1, r0
  40572c:	461a      	mov	r2, r3
  40572e:	4618      	mov	r0, r3
  405730:	f002 bc74 	b.w	40801c <__register_exitproc>

00405734 <quorem>:
  405734:	6902      	ldr	r2, [r0, #16]
  405736:	690b      	ldr	r3, [r1, #16]
  405738:	4293      	cmp	r3, r2
  40573a:	f300 808d 	bgt.w	405858 <quorem+0x124>
  40573e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405742:	f103 38ff 	add.w	r8, r3, #4294967295
  405746:	f101 0714 	add.w	r7, r1, #20
  40574a:	f100 0b14 	add.w	fp, r0, #20
  40574e:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  405752:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  405756:	ea4f 0488 	mov.w	r4, r8, lsl #2
  40575a:	b083      	sub	sp, #12
  40575c:	3201      	adds	r2, #1
  40575e:	fbb3 f9f2 	udiv	r9, r3, r2
  405762:	eb0b 0304 	add.w	r3, fp, r4
  405766:	9400      	str	r4, [sp, #0]
  405768:	eb07 0a04 	add.w	sl, r7, r4
  40576c:	9301      	str	r3, [sp, #4]
  40576e:	f1b9 0f00 	cmp.w	r9, #0
  405772:	d039      	beq.n	4057e8 <quorem+0xb4>
  405774:	2500      	movs	r5, #0
  405776:	462e      	mov	r6, r5
  405778:	46bc      	mov	ip, r7
  40577a:	46de      	mov	lr, fp
  40577c:	f85c 4b04 	ldr.w	r4, [ip], #4
  405780:	f8de 3000 	ldr.w	r3, [lr]
  405784:	b2a2      	uxth	r2, r4
  405786:	fb09 5502 	mla	r5, r9, r2, r5
  40578a:	0c22      	lsrs	r2, r4, #16
  40578c:	0c2c      	lsrs	r4, r5, #16
  40578e:	fb09 4202 	mla	r2, r9, r2, r4
  405792:	b2ad      	uxth	r5, r5
  405794:	1b75      	subs	r5, r6, r5
  405796:	b296      	uxth	r6, r2
  405798:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  40579c:	fa15 f383 	uxtah	r3, r5, r3
  4057a0:	eb06 4623 	add.w	r6, r6, r3, asr #16
  4057a4:	b29b      	uxth	r3, r3
  4057a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  4057aa:	45e2      	cmp	sl, ip
  4057ac:	ea4f 4512 	mov.w	r5, r2, lsr #16
  4057b0:	f84e 3b04 	str.w	r3, [lr], #4
  4057b4:	ea4f 4626 	mov.w	r6, r6, asr #16
  4057b8:	d2e0      	bcs.n	40577c <quorem+0x48>
  4057ba:	9b00      	ldr	r3, [sp, #0]
  4057bc:	f85b 3003 	ldr.w	r3, [fp, r3]
  4057c0:	b993      	cbnz	r3, 4057e8 <quorem+0xb4>
  4057c2:	9c01      	ldr	r4, [sp, #4]
  4057c4:	1f23      	subs	r3, r4, #4
  4057c6:	459b      	cmp	fp, r3
  4057c8:	d20c      	bcs.n	4057e4 <quorem+0xb0>
  4057ca:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4057ce:	b94b      	cbnz	r3, 4057e4 <quorem+0xb0>
  4057d0:	f1a4 0308 	sub.w	r3, r4, #8
  4057d4:	e002      	b.n	4057dc <quorem+0xa8>
  4057d6:	681a      	ldr	r2, [r3, #0]
  4057d8:	3b04      	subs	r3, #4
  4057da:	b91a      	cbnz	r2, 4057e4 <quorem+0xb0>
  4057dc:	459b      	cmp	fp, r3
  4057de:	f108 38ff 	add.w	r8, r8, #4294967295
  4057e2:	d3f8      	bcc.n	4057d6 <quorem+0xa2>
  4057e4:	f8c0 8010 	str.w	r8, [r0, #16]
  4057e8:	4604      	mov	r4, r0
  4057ea:	f002 f80d 	bl	407808 <__mcmp>
  4057ee:	2800      	cmp	r0, #0
  4057f0:	db2e      	blt.n	405850 <quorem+0x11c>
  4057f2:	f109 0901 	add.w	r9, r9, #1
  4057f6:	465d      	mov	r5, fp
  4057f8:	2300      	movs	r3, #0
  4057fa:	f857 1b04 	ldr.w	r1, [r7], #4
  4057fe:	6828      	ldr	r0, [r5, #0]
  405800:	b28a      	uxth	r2, r1
  405802:	1a9a      	subs	r2, r3, r2
  405804:	0c0b      	lsrs	r3, r1, #16
  405806:	fa12 f280 	uxtah	r2, r2, r0
  40580a:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  40580e:	eb03 4322 	add.w	r3, r3, r2, asr #16
  405812:	b292      	uxth	r2, r2
  405814:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  405818:	45ba      	cmp	sl, r7
  40581a:	f845 2b04 	str.w	r2, [r5], #4
  40581e:	ea4f 4323 	mov.w	r3, r3, asr #16
  405822:	d2ea      	bcs.n	4057fa <quorem+0xc6>
  405824:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  405828:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  40582c:	b982      	cbnz	r2, 405850 <quorem+0x11c>
  40582e:	1f1a      	subs	r2, r3, #4
  405830:	4593      	cmp	fp, r2
  405832:	d20b      	bcs.n	40584c <quorem+0x118>
  405834:	f853 2c04 	ldr.w	r2, [r3, #-4]
  405838:	b942      	cbnz	r2, 40584c <quorem+0x118>
  40583a:	3b08      	subs	r3, #8
  40583c:	e002      	b.n	405844 <quorem+0x110>
  40583e:	681a      	ldr	r2, [r3, #0]
  405840:	3b04      	subs	r3, #4
  405842:	b91a      	cbnz	r2, 40584c <quorem+0x118>
  405844:	459b      	cmp	fp, r3
  405846:	f108 38ff 	add.w	r8, r8, #4294967295
  40584a:	d3f8      	bcc.n	40583e <quorem+0x10a>
  40584c:	f8c4 8010 	str.w	r8, [r4, #16]
  405850:	4648      	mov	r0, r9
  405852:	b003      	add	sp, #12
  405854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405858:	2000      	movs	r0, #0
  40585a:	4770      	bx	lr
  40585c:	0000      	movs	r0, r0
	...

00405860 <_dtoa_r>:
  405860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405864:	6c01      	ldr	r1, [r0, #64]	; 0x40
  405866:	b09b      	sub	sp, #108	; 0x6c
  405868:	4604      	mov	r4, r0
  40586a:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  40586c:	4692      	mov	sl, r2
  40586e:	469b      	mov	fp, r3
  405870:	b141      	cbz	r1, 405884 <_dtoa_r+0x24>
  405872:	6c42      	ldr	r2, [r0, #68]	; 0x44
  405874:	604a      	str	r2, [r1, #4]
  405876:	2301      	movs	r3, #1
  405878:	4093      	lsls	r3, r2
  40587a:	608b      	str	r3, [r1, #8]
  40587c:	f001 fdec 	bl	407458 <_Bfree>
  405880:	2300      	movs	r3, #0
  405882:	6423      	str	r3, [r4, #64]	; 0x40
  405884:	f1bb 0f00 	cmp.w	fp, #0
  405888:	465d      	mov	r5, fp
  40588a:	db35      	blt.n	4058f8 <_dtoa_r+0x98>
  40588c:	2300      	movs	r3, #0
  40588e:	6033      	str	r3, [r6, #0]
  405890:	4b9d      	ldr	r3, [pc, #628]	; (405b08 <_dtoa_r+0x2a8>)
  405892:	43ab      	bics	r3, r5
  405894:	d015      	beq.n	4058c2 <_dtoa_r+0x62>
  405896:	4650      	mov	r0, sl
  405898:	4659      	mov	r1, fp
  40589a:	2200      	movs	r2, #0
  40589c:	2300      	movs	r3, #0
  40589e:	f003 f935 	bl	408b0c <__aeabi_dcmpeq>
  4058a2:	4680      	mov	r8, r0
  4058a4:	2800      	cmp	r0, #0
  4058a6:	d02d      	beq.n	405904 <_dtoa_r+0xa4>
  4058a8:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4058aa:	2301      	movs	r3, #1
  4058ac:	6013      	str	r3, [r2, #0]
  4058ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4058b0:	2b00      	cmp	r3, #0
  4058b2:	f000 80bd 	beq.w	405a30 <_dtoa_r+0x1d0>
  4058b6:	4895      	ldr	r0, [pc, #596]	; (405b0c <_dtoa_r+0x2ac>)
  4058b8:	6018      	str	r0, [r3, #0]
  4058ba:	3801      	subs	r0, #1
  4058bc:	b01b      	add	sp, #108	; 0x6c
  4058be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4058c2:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4058c4:	f242 730f 	movw	r3, #9999	; 0x270f
  4058c8:	6013      	str	r3, [r2, #0]
  4058ca:	f1ba 0f00 	cmp.w	sl, #0
  4058ce:	d10d      	bne.n	4058ec <_dtoa_r+0x8c>
  4058d0:	f3c5 0513 	ubfx	r5, r5, #0, #20
  4058d4:	b955      	cbnz	r5, 4058ec <_dtoa_r+0x8c>
  4058d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4058d8:	488d      	ldr	r0, [pc, #564]	; (405b10 <_dtoa_r+0x2b0>)
  4058da:	2b00      	cmp	r3, #0
  4058dc:	d0ee      	beq.n	4058bc <_dtoa_r+0x5c>
  4058de:	f100 0308 	add.w	r3, r0, #8
  4058e2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  4058e4:	6013      	str	r3, [r2, #0]
  4058e6:	b01b      	add	sp, #108	; 0x6c
  4058e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4058ec:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4058ee:	4889      	ldr	r0, [pc, #548]	; (405b14 <_dtoa_r+0x2b4>)
  4058f0:	2b00      	cmp	r3, #0
  4058f2:	d0e3      	beq.n	4058bc <_dtoa_r+0x5c>
  4058f4:	1cc3      	adds	r3, r0, #3
  4058f6:	e7f4      	b.n	4058e2 <_dtoa_r+0x82>
  4058f8:	2301      	movs	r3, #1
  4058fa:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  4058fe:	6033      	str	r3, [r6, #0]
  405900:	46ab      	mov	fp, r5
  405902:	e7c5      	b.n	405890 <_dtoa_r+0x30>
  405904:	aa18      	add	r2, sp, #96	; 0x60
  405906:	ab19      	add	r3, sp, #100	; 0x64
  405908:	9201      	str	r2, [sp, #4]
  40590a:	9300      	str	r3, [sp, #0]
  40590c:	4652      	mov	r2, sl
  40590e:	465b      	mov	r3, fp
  405910:	4620      	mov	r0, r4
  405912:	f002 f819 	bl	407948 <__d2b>
  405916:	0d2b      	lsrs	r3, r5, #20
  405918:	4681      	mov	r9, r0
  40591a:	d071      	beq.n	405a00 <_dtoa_r+0x1a0>
  40591c:	f3cb 0213 	ubfx	r2, fp, #0, #20
  405920:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  405924:	9f18      	ldr	r7, [sp, #96]	; 0x60
  405926:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  40592a:	4650      	mov	r0, sl
  40592c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  405930:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  405934:	2200      	movs	r2, #0
  405936:	4b78      	ldr	r3, [pc, #480]	; (405b18 <_dtoa_r+0x2b8>)
  405938:	f002 fccc 	bl	4082d4 <__aeabi_dsub>
  40593c:	a36c      	add	r3, pc, #432	; (adr r3, 405af0 <_dtoa_r+0x290>)
  40593e:	e9d3 2300 	ldrd	r2, r3, [r3]
  405942:	f002 fe7b 	bl	40863c <__aeabi_dmul>
  405946:	a36c      	add	r3, pc, #432	; (adr r3, 405af8 <_dtoa_r+0x298>)
  405948:	e9d3 2300 	ldrd	r2, r3, [r3]
  40594c:	f002 fcc4 	bl	4082d8 <__adddf3>
  405950:	e9cd 0102 	strd	r0, r1, [sp, #8]
  405954:	4630      	mov	r0, r6
  405956:	f002 fe0b 	bl	408570 <__aeabi_i2d>
  40595a:	a369      	add	r3, pc, #420	; (adr r3, 405b00 <_dtoa_r+0x2a0>)
  40595c:	e9d3 2300 	ldrd	r2, r3, [r3]
  405960:	f002 fe6c 	bl	40863c <__aeabi_dmul>
  405964:	4602      	mov	r2, r0
  405966:	460b      	mov	r3, r1
  405968:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40596c:	f002 fcb4 	bl	4082d8 <__adddf3>
  405970:	e9cd 0104 	strd	r0, r1, [sp, #16]
  405974:	f003 f912 	bl	408b9c <__aeabi_d2iz>
  405978:	2200      	movs	r2, #0
  40597a:	9002      	str	r0, [sp, #8]
  40597c:	2300      	movs	r3, #0
  40597e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  405982:	f003 f8cd 	bl	408b20 <__aeabi_dcmplt>
  405986:	2800      	cmp	r0, #0
  405988:	f040 8173 	bne.w	405c72 <_dtoa_r+0x412>
  40598c:	9d02      	ldr	r5, [sp, #8]
  40598e:	2d16      	cmp	r5, #22
  405990:	f200 815d 	bhi.w	405c4e <_dtoa_r+0x3ee>
  405994:	4b61      	ldr	r3, [pc, #388]	; (405b1c <_dtoa_r+0x2bc>)
  405996:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  40599a:	e9d3 0100 	ldrd	r0, r1, [r3]
  40599e:	4652      	mov	r2, sl
  4059a0:	465b      	mov	r3, fp
  4059a2:	f003 f8db 	bl	408b5c <__aeabi_dcmpgt>
  4059a6:	2800      	cmp	r0, #0
  4059a8:	f000 81c5 	beq.w	405d36 <_dtoa_r+0x4d6>
  4059ac:	1e6b      	subs	r3, r5, #1
  4059ae:	9302      	str	r3, [sp, #8]
  4059b0:	2300      	movs	r3, #0
  4059b2:	930e      	str	r3, [sp, #56]	; 0x38
  4059b4:	1bbf      	subs	r7, r7, r6
  4059b6:	1e7b      	subs	r3, r7, #1
  4059b8:	9306      	str	r3, [sp, #24]
  4059ba:	f100 8154 	bmi.w	405c66 <_dtoa_r+0x406>
  4059be:	2300      	movs	r3, #0
  4059c0:	9308      	str	r3, [sp, #32]
  4059c2:	9b02      	ldr	r3, [sp, #8]
  4059c4:	2b00      	cmp	r3, #0
  4059c6:	f2c0 8145 	blt.w	405c54 <_dtoa_r+0x3f4>
  4059ca:	9a06      	ldr	r2, [sp, #24]
  4059cc:	930d      	str	r3, [sp, #52]	; 0x34
  4059ce:	4611      	mov	r1, r2
  4059d0:	4419      	add	r1, r3
  4059d2:	2300      	movs	r3, #0
  4059d4:	9106      	str	r1, [sp, #24]
  4059d6:	930c      	str	r3, [sp, #48]	; 0x30
  4059d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4059da:	2b09      	cmp	r3, #9
  4059dc:	d82a      	bhi.n	405a34 <_dtoa_r+0x1d4>
  4059de:	2b05      	cmp	r3, #5
  4059e0:	f340 865b 	ble.w	40669a <_dtoa_r+0xe3a>
  4059e4:	3b04      	subs	r3, #4
  4059e6:	9324      	str	r3, [sp, #144]	; 0x90
  4059e8:	2500      	movs	r5, #0
  4059ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4059ec:	3b02      	subs	r3, #2
  4059ee:	2b03      	cmp	r3, #3
  4059f0:	f200 8642 	bhi.w	406678 <_dtoa_r+0xe18>
  4059f4:	e8df f013 	tbh	[pc, r3, lsl #1]
  4059f8:	02c903d4 	.word	0x02c903d4
  4059fc:	046103df 	.word	0x046103df
  405a00:	9f18      	ldr	r7, [sp, #96]	; 0x60
  405a02:	9e19      	ldr	r6, [sp, #100]	; 0x64
  405a04:	443e      	add	r6, r7
  405a06:	f206 4332 	addw	r3, r6, #1074	; 0x432
  405a0a:	2b20      	cmp	r3, #32
  405a0c:	f340 818e 	ble.w	405d2c <_dtoa_r+0x4cc>
  405a10:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  405a14:	f206 4012 	addw	r0, r6, #1042	; 0x412
  405a18:	409d      	lsls	r5, r3
  405a1a:	fa2a f000 	lsr.w	r0, sl, r0
  405a1e:	4328      	orrs	r0, r5
  405a20:	f002 fd96 	bl	408550 <__aeabi_ui2d>
  405a24:	2301      	movs	r3, #1
  405a26:	3e01      	subs	r6, #1
  405a28:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  405a2c:	9314      	str	r3, [sp, #80]	; 0x50
  405a2e:	e781      	b.n	405934 <_dtoa_r+0xd4>
  405a30:	483b      	ldr	r0, [pc, #236]	; (405b20 <_dtoa_r+0x2c0>)
  405a32:	e743      	b.n	4058bc <_dtoa_r+0x5c>
  405a34:	2100      	movs	r1, #0
  405a36:	6461      	str	r1, [r4, #68]	; 0x44
  405a38:	4620      	mov	r0, r4
  405a3a:	9125      	str	r1, [sp, #148]	; 0x94
  405a3c:	f001 fce6 	bl	40740c <_Balloc>
  405a40:	f04f 33ff 	mov.w	r3, #4294967295
  405a44:	930a      	str	r3, [sp, #40]	; 0x28
  405a46:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405a48:	930f      	str	r3, [sp, #60]	; 0x3c
  405a4a:	2301      	movs	r3, #1
  405a4c:	9004      	str	r0, [sp, #16]
  405a4e:	6420      	str	r0, [r4, #64]	; 0x40
  405a50:	9224      	str	r2, [sp, #144]	; 0x90
  405a52:	930b      	str	r3, [sp, #44]	; 0x2c
  405a54:	9b19      	ldr	r3, [sp, #100]	; 0x64
  405a56:	2b00      	cmp	r3, #0
  405a58:	f2c0 80d9 	blt.w	405c0e <_dtoa_r+0x3ae>
  405a5c:	9a02      	ldr	r2, [sp, #8]
  405a5e:	2a0e      	cmp	r2, #14
  405a60:	f300 80d5 	bgt.w	405c0e <_dtoa_r+0x3ae>
  405a64:	4b2d      	ldr	r3, [pc, #180]	; (405b1c <_dtoa_r+0x2bc>)
  405a66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
  405a6e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  405a72:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405a74:	2b00      	cmp	r3, #0
  405a76:	f2c0 83ba 	blt.w	4061ee <_dtoa_r+0x98e>
  405a7a:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  405a7e:	4650      	mov	r0, sl
  405a80:	462a      	mov	r2, r5
  405a82:	4633      	mov	r3, r6
  405a84:	4659      	mov	r1, fp
  405a86:	f002 ff03 	bl	408890 <__aeabi_ddiv>
  405a8a:	f003 f887 	bl	408b9c <__aeabi_d2iz>
  405a8e:	4680      	mov	r8, r0
  405a90:	f002 fd6e 	bl	408570 <__aeabi_i2d>
  405a94:	462a      	mov	r2, r5
  405a96:	4633      	mov	r3, r6
  405a98:	f002 fdd0 	bl	40863c <__aeabi_dmul>
  405a9c:	460b      	mov	r3, r1
  405a9e:	4602      	mov	r2, r0
  405aa0:	4659      	mov	r1, fp
  405aa2:	4650      	mov	r0, sl
  405aa4:	f002 fc16 	bl	4082d4 <__aeabi_dsub>
  405aa8:	9d04      	ldr	r5, [sp, #16]
  405aaa:	f108 0330 	add.w	r3, r8, #48	; 0x30
  405aae:	702b      	strb	r3, [r5, #0]
  405ab0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405ab2:	2b01      	cmp	r3, #1
  405ab4:	4606      	mov	r6, r0
  405ab6:	460f      	mov	r7, r1
  405ab8:	f105 0501 	add.w	r5, r5, #1
  405abc:	d068      	beq.n	405b90 <_dtoa_r+0x330>
  405abe:	2200      	movs	r2, #0
  405ac0:	4b18      	ldr	r3, [pc, #96]	; (405b24 <_dtoa_r+0x2c4>)
  405ac2:	f002 fdbb 	bl	40863c <__aeabi_dmul>
  405ac6:	2200      	movs	r2, #0
  405ac8:	2300      	movs	r3, #0
  405aca:	4606      	mov	r6, r0
  405acc:	460f      	mov	r7, r1
  405ace:	f003 f81d 	bl	408b0c <__aeabi_dcmpeq>
  405ad2:	2800      	cmp	r0, #0
  405ad4:	f040 8088 	bne.w	405be8 <_dtoa_r+0x388>
  405ad8:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  405adc:	f04f 0a00 	mov.w	sl, #0
  405ae0:	f8df b040 	ldr.w	fp, [pc, #64]	; 405b24 <_dtoa_r+0x2c4>
  405ae4:	940c      	str	r4, [sp, #48]	; 0x30
  405ae6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  405aea:	e028      	b.n	405b3e <_dtoa_r+0x2de>
  405aec:	f3af 8000 	nop.w
  405af0:	636f4361 	.word	0x636f4361
  405af4:	3fd287a7 	.word	0x3fd287a7
  405af8:	8b60c8b3 	.word	0x8b60c8b3
  405afc:	3fc68a28 	.word	0x3fc68a28
  405b00:	509f79fb 	.word	0x509f79fb
  405b04:	3fd34413 	.word	0x3fd34413
  405b08:	7ff00000 	.word	0x7ff00000
  405b0c:	004097b1 	.word	0x004097b1
  405b10:	004097f4 	.word	0x004097f4
  405b14:	00409800 	.word	0x00409800
  405b18:	3ff80000 	.word	0x3ff80000
  405b1c:	00409838 	.word	0x00409838
  405b20:	004097b0 	.word	0x004097b0
  405b24:	40240000 	.word	0x40240000
  405b28:	f002 fd88 	bl	40863c <__aeabi_dmul>
  405b2c:	2200      	movs	r2, #0
  405b2e:	2300      	movs	r3, #0
  405b30:	4606      	mov	r6, r0
  405b32:	460f      	mov	r7, r1
  405b34:	f002 ffea 	bl	408b0c <__aeabi_dcmpeq>
  405b38:	2800      	cmp	r0, #0
  405b3a:	f040 83c1 	bne.w	4062c0 <_dtoa_r+0xa60>
  405b3e:	4642      	mov	r2, r8
  405b40:	464b      	mov	r3, r9
  405b42:	4630      	mov	r0, r6
  405b44:	4639      	mov	r1, r7
  405b46:	f002 fea3 	bl	408890 <__aeabi_ddiv>
  405b4a:	f003 f827 	bl	408b9c <__aeabi_d2iz>
  405b4e:	4604      	mov	r4, r0
  405b50:	f002 fd0e 	bl	408570 <__aeabi_i2d>
  405b54:	4642      	mov	r2, r8
  405b56:	464b      	mov	r3, r9
  405b58:	f002 fd70 	bl	40863c <__aeabi_dmul>
  405b5c:	4602      	mov	r2, r0
  405b5e:	460b      	mov	r3, r1
  405b60:	4630      	mov	r0, r6
  405b62:	4639      	mov	r1, r7
  405b64:	f002 fbb6 	bl	4082d4 <__aeabi_dsub>
  405b68:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  405b6c:	9e04      	ldr	r6, [sp, #16]
  405b6e:	f805 eb01 	strb.w	lr, [r5], #1
  405b72:	eba5 0e06 	sub.w	lr, r5, r6
  405b76:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  405b78:	45b6      	cmp	lr, r6
  405b7a:	e9cd 0106 	strd	r0, r1, [sp, #24]
  405b7e:	4652      	mov	r2, sl
  405b80:	465b      	mov	r3, fp
  405b82:	d1d1      	bne.n	405b28 <_dtoa_r+0x2c8>
  405b84:	46a0      	mov	r8, r4
  405b86:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  405b8a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405b8c:	4606      	mov	r6, r0
  405b8e:	460f      	mov	r7, r1
  405b90:	4632      	mov	r2, r6
  405b92:	463b      	mov	r3, r7
  405b94:	4630      	mov	r0, r6
  405b96:	4639      	mov	r1, r7
  405b98:	f002 fb9e 	bl	4082d8 <__adddf3>
  405b9c:	4606      	mov	r6, r0
  405b9e:	460f      	mov	r7, r1
  405ba0:	4602      	mov	r2, r0
  405ba2:	460b      	mov	r3, r1
  405ba4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405ba8:	f002 ffba 	bl	408b20 <__aeabi_dcmplt>
  405bac:	b948      	cbnz	r0, 405bc2 <_dtoa_r+0x362>
  405bae:	4632      	mov	r2, r6
  405bb0:	463b      	mov	r3, r7
  405bb2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405bb6:	f002 ffa9 	bl	408b0c <__aeabi_dcmpeq>
  405bba:	b1a8      	cbz	r0, 405be8 <_dtoa_r+0x388>
  405bbc:	f018 0f01 	tst.w	r8, #1
  405bc0:	d012      	beq.n	405be8 <_dtoa_r+0x388>
  405bc2:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  405bc6:	9a04      	ldr	r2, [sp, #16]
  405bc8:	1e6b      	subs	r3, r5, #1
  405bca:	e004      	b.n	405bd6 <_dtoa_r+0x376>
  405bcc:	429a      	cmp	r2, r3
  405bce:	f000 8401 	beq.w	4063d4 <_dtoa_r+0xb74>
  405bd2:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  405bd6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  405bda:	f103 0501 	add.w	r5, r3, #1
  405bde:	d0f5      	beq.n	405bcc <_dtoa_r+0x36c>
  405be0:	f108 0801 	add.w	r8, r8, #1
  405be4:	f883 8000 	strb.w	r8, [r3]
  405be8:	4649      	mov	r1, r9
  405bea:	4620      	mov	r0, r4
  405bec:	f001 fc34 	bl	407458 <_Bfree>
  405bf0:	2200      	movs	r2, #0
  405bf2:	9b02      	ldr	r3, [sp, #8]
  405bf4:	702a      	strb	r2, [r5, #0]
  405bf6:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405bf8:	3301      	adds	r3, #1
  405bfa:	6013      	str	r3, [r2, #0]
  405bfc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405bfe:	2b00      	cmp	r3, #0
  405c00:	f000 839e 	beq.w	406340 <_dtoa_r+0xae0>
  405c04:	9804      	ldr	r0, [sp, #16]
  405c06:	601d      	str	r5, [r3, #0]
  405c08:	b01b      	add	sp, #108	; 0x6c
  405c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405c0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405c10:	2a00      	cmp	r2, #0
  405c12:	d03e      	beq.n	405c92 <_dtoa_r+0x432>
  405c14:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405c16:	2a01      	cmp	r2, #1
  405c18:	f340 8311 	ble.w	40623e <_dtoa_r+0x9de>
  405c1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405c1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405c20:	1e5f      	subs	r7, r3, #1
  405c22:	42ba      	cmp	r2, r7
  405c24:	f2c0 838f 	blt.w	406346 <_dtoa_r+0xae6>
  405c28:	1bd7      	subs	r7, r2, r7
  405c2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405c2c:	2b00      	cmp	r3, #0
  405c2e:	f2c0 848b 	blt.w	406548 <_dtoa_r+0xce8>
  405c32:	9d08      	ldr	r5, [sp, #32]
  405c34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405c36:	9a08      	ldr	r2, [sp, #32]
  405c38:	441a      	add	r2, r3
  405c3a:	9208      	str	r2, [sp, #32]
  405c3c:	9a06      	ldr	r2, [sp, #24]
  405c3e:	2101      	movs	r1, #1
  405c40:	441a      	add	r2, r3
  405c42:	4620      	mov	r0, r4
  405c44:	9206      	str	r2, [sp, #24]
  405c46:	f001 fca1 	bl	40758c <__i2b>
  405c4a:	4606      	mov	r6, r0
  405c4c:	e024      	b.n	405c98 <_dtoa_r+0x438>
  405c4e:	2301      	movs	r3, #1
  405c50:	930e      	str	r3, [sp, #56]	; 0x38
  405c52:	e6af      	b.n	4059b4 <_dtoa_r+0x154>
  405c54:	9a08      	ldr	r2, [sp, #32]
  405c56:	9b02      	ldr	r3, [sp, #8]
  405c58:	1ad2      	subs	r2, r2, r3
  405c5a:	425b      	negs	r3, r3
  405c5c:	930c      	str	r3, [sp, #48]	; 0x30
  405c5e:	2300      	movs	r3, #0
  405c60:	9208      	str	r2, [sp, #32]
  405c62:	930d      	str	r3, [sp, #52]	; 0x34
  405c64:	e6b8      	b.n	4059d8 <_dtoa_r+0x178>
  405c66:	f1c7 0301 	rsb	r3, r7, #1
  405c6a:	9308      	str	r3, [sp, #32]
  405c6c:	2300      	movs	r3, #0
  405c6e:	9306      	str	r3, [sp, #24]
  405c70:	e6a7      	b.n	4059c2 <_dtoa_r+0x162>
  405c72:	9d02      	ldr	r5, [sp, #8]
  405c74:	4628      	mov	r0, r5
  405c76:	f002 fc7b 	bl	408570 <__aeabi_i2d>
  405c7a:	4602      	mov	r2, r0
  405c7c:	460b      	mov	r3, r1
  405c7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  405c82:	f002 ff43 	bl	408b0c <__aeabi_dcmpeq>
  405c86:	2800      	cmp	r0, #0
  405c88:	f47f ae80 	bne.w	40598c <_dtoa_r+0x12c>
  405c8c:	1e6b      	subs	r3, r5, #1
  405c8e:	9302      	str	r3, [sp, #8]
  405c90:	e67c      	b.n	40598c <_dtoa_r+0x12c>
  405c92:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405c94:	9d08      	ldr	r5, [sp, #32]
  405c96:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  405c98:	2d00      	cmp	r5, #0
  405c9a:	dd0c      	ble.n	405cb6 <_dtoa_r+0x456>
  405c9c:	9906      	ldr	r1, [sp, #24]
  405c9e:	2900      	cmp	r1, #0
  405ca0:	460b      	mov	r3, r1
  405ca2:	dd08      	ble.n	405cb6 <_dtoa_r+0x456>
  405ca4:	42a9      	cmp	r1, r5
  405ca6:	9a08      	ldr	r2, [sp, #32]
  405ca8:	bfa8      	it	ge
  405caa:	462b      	movge	r3, r5
  405cac:	1ad2      	subs	r2, r2, r3
  405cae:	1aed      	subs	r5, r5, r3
  405cb0:	1acb      	subs	r3, r1, r3
  405cb2:	9208      	str	r2, [sp, #32]
  405cb4:	9306      	str	r3, [sp, #24]
  405cb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405cb8:	b1d3      	cbz	r3, 405cf0 <_dtoa_r+0x490>
  405cba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405cbc:	2b00      	cmp	r3, #0
  405cbe:	f000 82b7 	beq.w	406230 <_dtoa_r+0x9d0>
  405cc2:	2f00      	cmp	r7, #0
  405cc4:	dd10      	ble.n	405ce8 <_dtoa_r+0x488>
  405cc6:	4631      	mov	r1, r6
  405cc8:	463a      	mov	r2, r7
  405cca:	4620      	mov	r0, r4
  405ccc:	f001 fcfa 	bl	4076c4 <__pow5mult>
  405cd0:	464a      	mov	r2, r9
  405cd2:	4601      	mov	r1, r0
  405cd4:	4606      	mov	r6, r0
  405cd6:	4620      	mov	r0, r4
  405cd8:	f001 fc62 	bl	4075a0 <__multiply>
  405cdc:	4649      	mov	r1, r9
  405cde:	4680      	mov	r8, r0
  405ce0:	4620      	mov	r0, r4
  405ce2:	f001 fbb9 	bl	407458 <_Bfree>
  405ce6:	46c1      	mov	r9, r8
  405ce8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405cea:	1bda      	subs	r2, r3, r7
  405cec:	f040 82a1 	bne.w	406232 <_dtoa_r+0x9d2>
  405cf0:	2101      	movs	r1, #1
  405cf2:	4620      	mov	r0, r4
  405cf4:	f001 fc4a 	bl	40758c <__i2b>
  405cf8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405cfa:	2b00      	cmp	r3, #0
  405cfc:	4680      	mov	r8, r0
  405cfe:	dd1c      	ble.n	405d3a <_dtoa_r+0x4da>
  405d00:	4601      	mov	r1, r0
  405d02:	461a      	mov	r2, r3
  405d04:	4620      	mov	r0, r4
  405d06:	f001 fcdd 	bl	4076c4 <__pow5mult>
  405d0a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405d0c:	2b01      	cmp	r3, #1
  405d0e:	4680      	mov	r8, r0
  405d10:	f340 8254 	ble.w	4061bc <_dtoa_r+0x95c>
  405d14:	2300      	movs	r3, #0
  405d16:	930c      	str	r3, [sp, #48]	; 0x30
  405d18:	f8d8 3010 	ldr.w	r3, [r8, #16]
  405d1c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  405d20:	6918      	ldr	r0, [r3, #16]
  405d22:	f001 fbe3 	bl	4074ec <__hi0bits>
  405d26:	f1c0 0020 	rsb	r0, r0, #32
  405d2a:	e010      	b.n	405d4e <_dtoa_r+0x4ee>
  405d2c:	f1c3 0520 	rsb	r5, r3, #32
  405d30:	fa0a f005 	lsl.w	r0, sl, r5
  405d34:	e674      	b.n	405a20 <_dtoa_r+0x1c0>
  405d36:	900e      	str	r0, [sp, #56]	; 0x38
  405d38:	e63c      	b.n	4059b4 <_dtoa_r+0x154>
  405d3a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405d3c:	2b01      	cmp	r3, #1
  405d3e:	f340 8287 	ble.w	406250 <_dtoa_r+0x9f0>
  405d42:	2300      	movs	r3, #0
  405d44:	930c      	str	r3, [sp, #48]	; 0x30
  405d46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405d48:	2001      	movs	r0, #1
  405d4a:	2b00      	cmp	r3, #0
  405d4c:	d1e4      	bne.n	405d18 <_dtoa_r+0x4b8>
  405d4e:	9a06      	ldr	r2, [sp, #24]
  405d50:	4410      	add	r0, r2
  405d52:	f010 001f 	ands.w	r0, r0, #31
  405d56:	f000 80a1 	beq.w	405e9c <_dtoa_r+0x63c>
  405d5a:	f1c0 0320 	rsb	r3, r0, #32
  405d5e:	2b04      	cmp	r3, #4
  405d60:	f340 849e 	ble.w	4066a0 <_dtoa_r+0xe40>
  405d64:	9b08      	ldr	r3, [sp, #32]
  405d66:	f1c0 001c 	rsb	r0, r0, #28
  405d6a:	4403      	add	r3, r0
  405d6c:	9308      	str	r3, [sp, #32]
  405d6e:	4613      	mov	r3, r2
  405d70:	4403      	add	r3, r0
  405d72:	4405      	add	r5, r0
  405d74:	9306      	str	r3, [sp, #24]
  405d76:	9b08      	ldr	r3, [sp, #32]
  405d78:	2b00      	cmp	r3, #0
  405d7a:	dd05      	ble.n	405d88 <_dtoa_r+0x528>
  405d7c:	4649      	mov	r1, r9
  405d7e:	461a      	mov	r2, r3
  405d80:	4620      	mov	r0, r4
  405d82:	f001 fcef 	bl	407764 <__lshift>
  405d86:	4681      	mov	r9, r0
  405d88:	9b06      	ldr	r3, [sp, #24]
  405d8a:	2b00      	cmp	r3, #0
  405d8c:	dd05      	ble.n	405d9a <_dtoa_r+0x53a>
  405d8e:	4641      	mov	r1, r8
  405d90:	461a      	mov	r2, r3
  405d92:	4620      	mov	r0, r4
  405d94:	f001 fce6 	bl	407764 <__lshift>
  405d98:	4680      	mov	r8, r0
  405d9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405d9c:	2b00      	cmp	r3, #0
  405d9e:	f040 8086 	bne.w	405eae <_dtoa_r+0x64e>
  405da2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405da4:	2b00      	cmp	r3, #0
  405da6:	f340 8266 	ble.w	406276 <_dtoa_r+0xa16>
  405daa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405dac:	2b00      	cmp	r3, #0
  405dae:	f000 8098 	beq.w	405ee2 <_dtoa_r+0x682>
  405db2:	2d00      	cmp	r5, #0
  405db4:	dd05      	ble.n	405dc2 <_dtoa_r+0x562>
  405db6:	4631      	mov	r1, r6
  405db8:	462a      	mov	r2, r5
  405dba:	4620      	mov	r0, r4
  405dbc:	f001 fcd2 	bl	407764 <__lshift>
  405dc0:	4606      	mov	r6, r0
  405dc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405dc4:	2b00      	cmp	r3, #0
  405dc6:	f040 8337 	bne.w	406438 <_dtoa_r+0xbd8>
  405dca:	9606      	str	r6, [sp, #24]
  405dcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405dce:	9a04      	ldr	r2, [sp, #16]
  405dd0:	f8dd b018 	ldr.w	fp, [sp, #24]
  405dd4:	3b01      	subs	r3, #1
  405dd6:	18d3      	adds	r3, r2, r3
  405dd8:	930b      	str	r3, [sp, #44]	; 0x2c
  405dda:	f00a 0301 	and.w	r3, sl, #1
  405dde:	930c      	str	r3, [sp, #48]	; 0x30
  405de0:	4617      	mov	r7, r2
  405de2:	46c2      	mov	sl, r8
  405de4:	4651      	mov	r1, sl
  405de6:	4648      	mov	r0, r9
  405de8:	f7ff fca4 	bl	405734 <quorem>
  405dec:	4631      	mov	r1, r6
  405dee:	4605      	mov	r5, r0
  405df0:	4648      	mov	r0, r9
  405df2:	f001 fd09 	bl	407808 <__mcmp>
  405df6:	465a      	mov	r2, fp
  405df8:	900a      	str	r0, [sp, #40]	; 0x28
  405dfa:	4651      	mov	r1, sl
  405dfc:	4620      	mov	r0, r4
  405dfe:	f001 fd1f 	bl	407840 <__mdiff>
  405e02:	68c2      	ldr	r2, [r0, #12]
  405e04:	4680      	mov	r8, r0
  405e06:	f105 0330 	add.w	r3, r5, #48	; 0x30
  405e0a:	2a00      	cmp	r2, #0
  405e0c:	f040 822b 	bne.w	406266 <_dtoa_r+0xa06>
  405e10:	4601      	mov	r1, r0
  405e12:	4648      	mov	r0, r9
  405e14:	9308      	str	r3, [sp, #32]
  405e16:	f001 fcf7 	bl	407808 <__mcmp>
  405e1a:	4641      	mov	r1, r8
  405e1c:	9006      	str	r0, [sp, #24]
  405e1e:	4620      	mov	r0, r4
  405e20:	f001 fb1a 	bl	407458 <_Bfree>
  405e24:	9a06      	ldr	r2, [sp, #24]
  405e26:	9b08      	ldr	r3, [sp, #32]
  405e28:	b932      	cbnz	r2, 405e38 <_dtoa_r+0x5d8>
  405e2a:	9924      	ldr	r1, [sp, #144]	; 0x90
  405e2c:	b921      	cbnz	r1, 405e38 <_dtoa_r+0x5d8>
  405e2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405e30:	2a00      	cmp	r2, #0
  405e32:	f000 83ef 	beq.w	406614 <_dtoa_r+0xdb4>
  405e36:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405e38:	990a      	ldr	r1, [sp, #40]	; 0x28
  405e3a:	2900      	cmp	r1, #0
  405e3c:	f2c0 829f 	blt.w	40637e <_dtoa_r+0xb1e>
  405e40:	d105      	bne.n	405e4e <_dtoa_r+0x5ee>
  405e42:	9924      	ldr	r1, [sp, #144]	; 0x90
  405e44:	b919      	cbnz	r1, 405e4e <_dtoa_r+0x5ee>
  405e46:	990c      	ldr	r1, [sp, #48]	; 0x30
  405e48:	2900      	cmp	r1, #0
  405e4a:	f000 8298 	beq.w	40637e <_dtoa_r+0xb1e>
  405e4e:	2a00      	cmp	r2, #0
  405e50:	f300 8306 	bgt.w	406460 <_dtoa_r+0xc00>
  405e54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405e56:	703b      	strb	r3, [r7, #0]
  405e58:	f107 0801 	add.w	r8, r7, #1
  405e5c:	4297      	cmp	r7, r2
  405e5e:	4645      	mov	r5, r8
  405e60:	f000 830c 	beq.w	40647c <_dtoa_r+0xc1c>
  405e64:	4649      	mov	r1, r9
  405e66:	2300      	movs	r3, #0
  405e68:	220a      	movs	r2, #10
  405e6a:	4620      	mov	r0, r4
  405e6c:	f001 fafe 	bl	40746c <__multadd>
  405e70:	455e      	cmp	r6, fp
  405e72:	4681      	mov	r9, r0
  405e74:	4631      	mov	r1, r6
  405e76:	f04f 0300 	mov.w	r3, #0
  405e7a:	f04f 020a 	mov.w	r2, #10
  405e7e:	4620      	mov	r0, r4
  405e80:	f000 81eb 	beq.w	40625a <_dtoa_r+0x9fa>
  405e84:	f001 faf2 	bl	40746c <__multadd>
  405e88:	4659      	mov	r1, fp
  405e8a:	4606      	mov	r6, r0
  405e8c:	2300      	movs	r3, #0
  405e8e:	220a      	movs	r2, #10
  405e90:	4620      	mov	r0, r4
  405e92:	f001 faeb 	bl	40746c <__multadd>
  405e96:	4647      	mov	r7, r8
  405e98:	4683      	mov	fp, r0
  405e9a:	e7a3      	b.n	405de4 <_dtoa_r+0x584>
  405e9c:	201c      	movs	r0, #28
  405e9e:	9b08      	ldr	r3, [sp, #32]
  405ea0:	4403      	add	r3, r0
  405ea2:	9308      	str	r3, [sp, #32]
  405ea4:	9b06      	ldr	r3, [sp, #24]
  405ea6:	4403      	add	r3, r0
  405ea8:	4405      	add	r5, r0
  405eaa:	9306      	str	r3, [sp, #24]
  405eac:	e763      	b.n	405d76 <_dtoa_r+0x516>
  405eae:	4641      	mov	r1, r8
  405eb0:	4648      	mov	r0, r9
  405eb2:	f001 fca9 	bl	407808 <__mcmp>
  405eb6:	2800      	cmp	r0, #0
  405eb8:	f6bf af73 	bge.w	405da2 <_dtoa_r+0x542>
  405ebc:	9f02      	ldr	r7, [sp, #8]
  405ebe:	4649      	mov	r1, r9
  405ec0:	2300      	movs	r3, #0
  405ec2:	220a      	movs	r2, #10
  405ec4:	4620      	mov	r0, r4
  405ec6:	3f01      	subs	r7, #1
  405ec8:	9702      	str	r7, [sp, #8]
  405eca:	f001 facf 	bl	40746c <__multadd>
  405ece:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405ed0:	4681      	mov	r9, r0
  405ed2:	2b00      	cmp	r3, #0
  405ed4:	f040 83b6 	bne.w	406644 <_dtoa_r+0xde4>
  405ed8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405eda:	2b00      	cmp	r3, #0
  405edc:	f340 83bf 	ble.w	40665e <_dtoa_r+0xdfe>
  405ee0:	930a      	str	r3, [sp, #40]	; 0x28
  405ee2:	f8dd b010 	ldr.w	fp, [sp, #16]
  405ee6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  405ee8:	465d      	mov	r5, fp
  405eea:	e002      	b.n	405ef2 <_dtoa_r+0x692>
  405eec:	f001 fabe 	bl	40746c <__multadd>
  405ef0:	4681      	mov	r9, r0
  405ef2:	4641      	mov	r1, r8
  405ef4:	4648      	mov	r0, r9
  405ef6:	f7ff fc1d 	bl	405734 <quorem>
  405efa:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  405efe:	f805 ab01 	strb.w	sl, [r5], #1
  405f02:	eba5 030b 	sub.w	r3, r5, fp
  405f06:	42bb      	cmp	r3, r7
  405f08:	f04f 020a 	mov.w	r2, #10
  405f0c:	f04f 0300 	mov.w	r3, #0
  405f10:	4649      	mov	r1, r9
  405f12:	4620      	mov	r0, r4
  405f14:	dbea      	blt.n	405eec <_dtoa_r+0x68c>
  405f16:	9b04      	ldr	r3, [sp, #16]
  405f18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405f1a:	2a01      	cmp	r2, #1
  405f1c:	bfac      	ite	ge
  405f1e:	189b      	addge	r3, r3, r2
  405f20:	3301      	addlt	r3, #1
  405f22:	461d      	mov	r5, r3
  405f24:	f04f 0b00 	mov.w	fp, #0
  405f28:	4649      	mov	r1, r9
  405f2a:	2201      	movs	r2, #1
  405f2c:	4620      	mov	r0, r4
  405f2e:	f001 fc19 	bl	407764 <__lshift>
  405f32:	4641      	mov	r1, r8
  405f34:	4681      	mov	r9, r0
  405f36:	f001 fc67 	bl	407808 <__mcmp>
  405f3a:	2800      	cmp	r0, #0
  405f3c:	f340 823d 	ble.w	4063ba <_dtoa_r+0xb5a>
  405f40:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  405f44:	9904      	ldr	r1, [sp, #16]
  405f46:	1e6b      	subs	r3, r5, #1
  405f48:	e004      	b.n	405f54 <_dtoa_r+0x6f4>
  405f4a:	428b      	cmp	r3, r1
  405f4c:	f000 81ae 	beq.w	4062ac <_dtoa_r+0xa4c>
  405f50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  405f54:	2a39      	cmp	r2, #57	; 0x39
  405f56:	f103 0501 	add.w	r5, r3, #1
  405f5a:	d0f6      	beq.n	405f4a <_dtoa_r+0x6ea>
  405f5c:	3201      	adds	r2, #1
  405f5e:	701a      	strb	r2, [r3, #0]
  405f60:	4641      	mov	r1, r8
  405f62:	4620      	mov	r0, r4
  405f64:	f001 fa78 	bl	407458 <_Bfree>
  405f68:	2e00      	cmp	r6, #0
  405f6a:	f43f ae3d 	beq.w	405be8 <_dtoa_r+0x388>
  405f6e:	f1bb 0f00 	cmp.w	fp, #0
  405f72:	d005      	beq.n	405f80 <_dtoa_r+0x720>
  405f74:	45b3      	cmp	fp, r6
  405f76:	d003      	beq.n	405f80 <_dtoa_r+0x720>
  405f78:	4659      	mov	r1, fp
  405f7a:	4620      	mov	r0, r4
  405f7c:	f001 fa6c 	bl	407458 <_Bfree>
  405f80:	4631      	mov	r1, r6
  405f82:	4620      	mov	r0, r4
  405f84:	f001 fa68 	bl	407458 <_Bfree>
  405f88:	e62e      	b.n	405be8 <_dtoa_r+0x388>
  405f8a:	2300      	movs	r3, #0
  405f8c:	930b      	str	r3, [sp, #44]	; 0x2c
  405f8e:	9b02      	ldr	r3, [sp, #8]
  405f90:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405f92:	4413      	add	r3, r2
  405f94:	930f      	str	r3, [sp, #60]	; 0x3c
  405f96:	3301      	adds	r3, #1
  405f98:	2b01      	cmp	r3, #1
  405f9a:	461f      	mov	r7, r3
  405f9c:	461e      	mov	r6, r3
  405f9e:	930a      	str	r3, [sp, #40]	; 0x28
  405fa0:	bfb8      	it	lt
  405fa2:	2701      	movlt	r7, #1
  405fa4:	2100      	movs	r1, #0
  405fa6:	2f17      	cmp	r7, #23
  405fa8:	6461      	str	r1, [r4, #68]	; 0x44
  405faa:	d90a      	bls.n	405fc2 <_dtoa_r+0x762>
  405fac:	2201      	movs	r2, #1
  405fae:	2304      	movs	r3, #4
  405fb0:	005b      	lsls	r3, r3, #1
  405fb2:	f103 0014 	add.w	r0, r3, #20
  405fb6:	4287      	cmp	r7, r0
  405fb8:	4611      	mov	r1, r2
  405fba:	f102 0201 	add.w	r2, r2, #1
  405fbe:	d2f7      	bcs.n	405fb0 <_dtoa_r+0x750>
  405fc0:	6461      	str	r1, [r4, #68]	; 0x44
  405fc2:	4620      	mov	r0, r4
  405fc4:	f001 fa22 	bl	40740c <_Balloc>
  405fc8:	2e0e      	cmp	r6, #14
  405fca:	9004      	str	r0, [sp, #16]
  405fcc:	6420      	str	r0, [r4, #64]	; 0x40
  405fce:	f63f ad41 	bhi.w	405a54 <_dtoa_r+0x1f4>
  405fd2:	2d00      	cmp	r5, #0
  405fd4:	f43f ad3e 	beq.w	405a54 <_dtoa_r+0x1f4>
  405fd8:	9902      	ldr	r1, [sp, #8]
  405fda:	2900      	cmp	r1, #0
  405fdc:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  405fe0:	f340 8202 	ble.w	4063e8 <_dtoa_r+0xb88>
  405fe4:	4bb8      	ldr	r3, [pc, #736]	; (4062c8 <_dtoa_r+0xa68>)
  405fe6:	f001 020f 	and.w	r2, r1, #15
  405fea:	110d      	asrs	r5, r1, #4
  405fec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405ff0:	06e9      	lsls	r1, r5, #27
  405ff2:	e9d3 6700 	ldrd	r6, r7, [r3]
  405ff6:	f140 81ae 	bpl.w	406356 <_dtoa_r+0xaf6>
  405ffa:	4bb4      	ldr	r3, [pc, #720]	; (4062cc <_dtoa_r+0xa6c>)
  405ffc:	4650      	mov	r0, sl
  405ffe:	4659      	mov	r1, fp
  406000:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  406004:	f002 fc44 	bl	408890 <__aeabi_ddiv>
  406008:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  40600c:	f005 050f 	and.w	r5, r5, #15
  406010:	f04f 0a03 	mov.w	sl, #3
  406014:	b18d      	cbz	r5, 40603a <_dtoa_r+0x7da>
  406016:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 4062cc <_dtoa_r+0xa6c>
  40601a:	07ea      	lsls	r2, r5, #31
  40601c:	d509      	bpl.n	406032 <_dtoa_r+0x7d2>
  40601e:	4630      	mov	r0, r6
  406020:	4639      	mov	r1, r7
  406022:	e9d8 2300 	ldrd	r2, r3, [r8]
  406026:	f002 fb09 	bl	40863c <__aeabi_dmul>
  40602a:	f10a 0a01 	add.w	sl, sl, #1
  40602e:	4606      	mov	r6, r0
  406030:	460f      	mov	r7, r1
  406032:	106d      	asrs	r5, r5, #1
  406034:	f108 0808 	add.w	r8, r8, #8
  406038:	d1ef      	bne.n	40601a <_dtoa_r+0x7ba>
  40603a:	463b      	mov	r3, r7
  40603c:	4632      	mov	r2, r6
  40603e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  406042:	f002 fc25 	bl	408890 <__aeabi_ddiv>
  406046:	4607      	mov	r7, r0
  406048:	4688      	mov	r8, r1
  40604a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40604c:	b143      	cbz	r3, 406060 <_dtoa_r+0x800>
  40604e:	2200      	movs	r2, #0
  406050:	4b9f      	ldr	r3, [pc, #636]	; (4062d0 <_dtoa_r+0xa70>)
  406052:	4638      	mov	r0, r7
  406054:	4641      	mov	r1, r8
  406056:	f002 fd63 	bl	408b20 <__aeabi_dcmplt>
  40605a:	2800      	cmp	r0, #0
  40605c:	f040 8286 	bne.w	40656c <_dtoa_r+0xd0c>
  406060:	4650      	mov	r0, sl
  406062:	f002 fa85 	bl	408570 <__aeabi_i2d>
  406066:	463a      	mov	r2, r7
  406068:	4643      	mov	r3, r8
  40606a:	f002 fae7 	bl	40863c <__aeabi_dmul>
  40606e:	4b99      	ldr	r3, [pc, #612]	; (4062d4 <_dtoa_r+0xa74>)
  406070:	2200      	movs	r2, #0
  406072:	f002 f931 	bl	4082d8 <__adddf3>
  406076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406078:	4605      	mov	r5, r0
  40607a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40607e:	2b00      	cmp	r3, #0
  406080:	f000 813e 	beq.w	406300 <_dtoa_r+0xaa0>
  406084:	9b02      	ldr	r3, [sp, #8]
  406086:	9315      	str	r3, [sp, #84]	; 0x54
  406088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40608a:	9312      	str	r3, [sp, #72]	; 0x48
  40608c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40608e:	2b00      	cmp	r3, #0
  406090:	f000 81fa 	beq.w	406488 <_dtoa_r+0xc28>
  406094:	9a12      	ldr	r2, [sp, #72]	; 0x48
  406096:	4b8c      	ldr	r3, [pc, #560]	; (4062c8 <_dtoa_r+0xa68>)
  406098:	498f      	ldr	r1, [pc, #572]	; (4062d8 <_dtoa_r+0xa78>)
  40609a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40609e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  4060a2:	2000      	movs	r0, #0
  4060a4:	f002 fbf4 	bl	408890 <__aeabi_ddiv>
  4060a8:	462a      	mov	r2, r5
  4060aa:	4633      	mov	r3, r6
  4060ac:	f002 f912 	bl	4082d4 <__aeabi_dsub>
  4060b0:	4682      	mov	sl, r0
  4060b2:	468b      	mov	fp, r1
  4060b4:	4638      	mov	r0, r7
  4060b6:	4641      	mov	r1, r8
  4060b8:	f002 fd70 	bl	408b9c <__aeabi_d2iz>
  4060bc:	4605      	mov	r5, r0
  4060be:	f002 fa57 	bl	408570 <__aeabi_i2d>
  4060c2:	4602      	mov	r2, r0
  4060c4:	460b      	mov	r3, r1
  4060c6:	4638      	mov	r0, r7
  4060c8:	4641      	mov	r1, r8
  4060ca:	f002 f903 	bl	4082d4 <__aeabi_dsub>
  4060ce:	3530      	adds	r5, #48	; 0x30
  4060d0:	fa5f f885 	uxtb.w	r8, r5
  4060d4:	9d04      	ldr	r5, [sp, #16]
  4060d6:	4606      	mov	r6, r0
  4060d8:	460f      	mov	r7, r1
  4060da:	f885 8000 	strb.w	r8, [r5]
  4060de:	4602      	mov	r2, r0
  4060e0:	460b      	mov	r3, r1
  4060e2:	4650      	mov	r0, sl
  4060e4:	4659      	mov	r1, fp
  4060e6:	3501      	adds	r5, #1
  4060e8:	f002 fd38 	bl	408b5c <__aeabi_dcmpgt>
  4060ec:	2800      	cmp	r0, #0
  4060ee:	d154      	bne.n	40619a <_dtoa_r+0x93a>
  4060f0:	4632      	mov	r2, r6
  4060f2:	463b      	mov	r3, r7
  4060f4:	2000      	movs	r0, #0
  4060f6:	4976      	ldr	r1, [pc, #472]	; (4062d0 <_dtoa_r+0xa70>)
  4060f8:	f002 f8ec 	bl	4082d4 <__aeabi_dsub>
  4060fc:	4602      	mov	r2, r0
  4060fe:	460b      	mov	r3, r1
  406100:	4650      	mov	r0, sl
  406102:	4659      	mov	r1, fp
  406104:	f002 fd2a 	bl	408b5c <__aeabi_dcmpgt>
  406108:	2800      	cmp	r0, #0
  40610a:	f040 8270 	bne.w	4065ee <_dtoa_r+0xd8e>
  40610e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  406110:	2a01      	cmp	r2, #1
  406112:	f000 8111 	beq.w	406338 <_dtoa_r+0xad8>
  406116:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406118:	9a04      	ldr	r2, [sp, #16]
  40611a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40611e:	4413      	add	r3, r2
  406120:	4699      	mov	r9, r3
  406122:	e00d      	b.n	406140 <_dtoa_r+0x8e0>
  406124:	2000      	movs	r0, #0
  406126:	496a      	ldr	r1, [pc, #424]	; (4062d0 <_dtoa_r+0xa70>)
  406128:	f002 f8d4 	bl	4082d4 <__aeabi_dsub>
  40612c:	4652      	mov	r2, sl
  40612e:	465b      	mov	r3, fp
  406130:	f002 fcf6 	bl	408b20 <__aeabi_dcmplt>
  406134:	2800      	cmp	r0, #0
  406136:	f040 8258 	bne.w	4065ea <_dtoa_r+0xd8a>
  40613a:	454d      	cmp	r5, r9
  40613c:	f000 80fa 	beq.w	406334 <_dtoa_r+0xad4>
  406140:	4650      	mov	r0, sl
  406142:	4659      	mov	r1, fp
  406144:	2200      	movs	r2, #0
  406146:	4b65      	ldr	r3, [pc, #404]	; (4062dc <_dtoa_r+0xa7c>)
  406148:	f002 fa78 	bl	40863c <__aeabi_dmul>
  40614c:	2200      	movs	r2, #0
  40614e:	4b63      	ldr	r3, [pc, #396]	; (4062dc <_dtoa_r+0xa7c>)
  406150:	4682      	mov	sl, r0
  406152:	468b      	mov	fp, r1
  406154:	4630      	mov	r0, r6
  406156:	4639      	mov	r1, r7
  406158:	f002 fa70 	bl	40863c <__aeabi_dmul>
  40615c:	460f      	mov	r7, r1
  40615e:	4606      	mov	r6, r0
  406160:	f002 fd1c 	bl	408b9c <__aeabi_d2iz>
  406164:	4680      	mov	r8, r0
  406166:	f002 fa03 	bl	408570 <__aeabi_i2d>
  40616a:	4602      	mov	r2, r0
  40616c:	460b      	mov	r3, r1
  40616e:	4630      	mov	r0, r6
  406170:	4639      	mov	r1, r7
  406172:	f002 f8af 	bl	4082d4 <__aeabi_dsub>
  406176:	f108 0830 	add.w	r8, r8, #48	; 0x30
  40617a:	fa5f f888 	uxtb.w	r8, r8
  40617e:	4652      	mov	r2, sl
  406180:	465b      	mov	r3, fp
  406182:	f805 8b01 	strb.w	r8, [r5], #1
  406186:	4606      	mov	r6, r0
  406188:	460f      	mov	r7, r1
  40618a:	f002 fcc9 	bl	408b20 <__aeabi_dcmplt>
  40618e:	4632      	mov	r2, r6
  406190:	463b      	mov	r3, r7
  406192:	2800      	cmp	r0, #0
  406194:	d0c6      	beq.n	406124 <_dtoa_r+0x8c4>
  406196:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40619a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40619c:	9302      	str	r3, [sp, #8]
  40619e:	e523      	b.n	405be8 <_dtoa_r+0x388>
  4061a0:	2300      	movs	r3, #0
  4061a2:	930b      	str	r3, [sp, #44]	; 0x2c
  4061a4:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4061a6:	2b00      	cmp	r3, #0
  4061a8:	f340 80dc 	ble.w	406364 <_dtoa_r+0xb04>
  4061ac:	461f      	mov	r7, r3
  4061ae:	461e      	mov	r6, r3
  4061b0:	930f      	str	r3, [sp, #60]	; 0x3c
  4061b2:	930a      	str	r3, [sp, #40]	; 0x28
  4061b4:	e6f6      	b.n	405fa4 <_dtoa_r+0x744>
  4061b6:	2301      	movs	r3, #1
  4061b8:	930b      	str	r3, [sp, #44]	; 0x2c
  4061ba:	e7f3      	b.n	4061a4 <_dtoa_r+0x944>
  4061bc:	f1ba 0f00 	cmp.w	sl, #0
  4061c0:	f47f ada8 	bne.w	405d14 <_dtoa_r+0x4b4>
  4061c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
  4061c8:	2b00      	cmp	r3, #0
  4061ca:	f47f adba 	bne.w	405d42 <_dtoa_r+0x4e2>
  4061ce:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  4061d2:	0d3f      	lsrs	r7, r7, #20
  4061d4:	053f      	lsls	r7, r7, #20
  4061d6:	2f00      	cmp	r7, #0
  4061d8:	f000 820d 	beq.w	4065f6 <_dtoa_r+0xd96>
  4061dc:	9b08      	ldr	r3, [sp, #32]
  4061de:	3301      	adds	r3, #1
  4061e0:	9308      	str	r3, [sp, #32]
  4061e2:	9b06      	ldr	r3, [sp, #24]
  4061e4:	3301      	adds	r3, #1
  4061e6:	9306      	str	r3, [sp, #24]
  4061e8:	2301      	movs	r3, #1
  4061ea:	930c      	str	r3, [sp, #48]	; 0x30
  4061ec:	e5ab      	b.n	405d46 <_dtoa_r+0x4e6>
  4061ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4061f0:	2b00      	cmp	r3, #0
  4061f2:	f73f ac42 	bgt.w	405a7a <_dtoa_r+0x21a>
  4061f6:	f040 8221 	bne.w	40663c <_dtoa_r+0xddc>
  4061fa:	2200      	movs	r2, #0
  4061fc:	4b38      	ldr	r3, [pc, #224]	; (4062e0 <_dtoa_r+0xa80>)
  4061fe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  406202:	f002 fa1b 	bl	40863c <__aeabi_dmul>
  406206:	4652      	mov	r2, sl
  406208:	465b      	mov	r3, fp
  40620a:	f002 fc9d 	bl	408b48 <__aeabi_dcmpge>
  40620e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  406212:	4646      	mov	r6, r8
  406214:	2800      	cmp	r0, #0
  406216:	d041      	beq.n	40629c <_dtoa_r+0xa3c>
  406218:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40621a:	9d04      	ldr	r5, [sp, #16]
  40621c:	43db      	mvns	r3, r3
  40621e:	9302      	str	r3, [sp, #8]
  406220:	4641      	mov	r1, r8
  406222:	4620      	mov	r0, r4
  406224:	f001 f918 	bl	407458 <_Bfree>
  406228:	2e00      	cmp	r6, #0
  40622a:	f43f acdd 	beq.w	405be8 <_dtoa_r+0x388>
  40622e:	e6a7      	b.n	405f80 <_dtoa_r+0x720>
  406230:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406232:	4649      	mov	r1, r9
  406234:	4620      	mov	r0, r4
  406236:	f001 fa45 	bl	4076c4 <__pow5mult>
  40623a:	4681      	mov	r9, r0
  40623c:	e558      	b.n	405cf0 <_dtoa_r+0x490>
  40623e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  406240:	2a00      	cmp	r2, #0
  406242:	f000 8187 	beq.w	406554 <_dtoa_r+0xcf4>
  406246:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40624a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40624c:	9d08      	ldr	r5, [sp, #32]
  40624e:	e4f2      	b.n	405c36 <_dtoa_r+0x3d6>
  406250:	f1ba 0f00 	cmp.w	sl, #0
  406254:	f47f ad75 	bne.w	405d42 <_dtoa_r+0x4e2>
  406258:	e7b4      	b.n	4061c4 <_dtoa_r+0x964>
  40625a:	f001 f907 	bl	40746c <__multadd>
  40625e:	4647      	mov	r7, r8
  406260:	4606      	mov	r6, r0
  406262:	4683      	mov	fp, r0
  406264:	e5be      	b.n	405de4 <_dtoa_r+0x584>
  406266:	4601      	mov	r1, r0
  406268:	4620      	mov	r0, r4
  40626a:	9306      	str	r3, [sp, #24]
  40626c:	f001 f8f4 	bl	407458 <_Bfree>
  406270:	2201      	movs	r2, #1
  406272:	9b06      	ldr	r3, [sp, #24]
  406274:	e5e0      	b.n	405e38 <_dtoa_r+0x5d8>
  406276:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406278:	2b02      	cmp	r3, #2
  40627a:	f77f ad96 	ble.w	405daa <_dtoa_r+0x54a>
  40627e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406280:	2b00      	cmp	r3, #0
  406282:	d1c9      	bne.n	406218 <_dtoa_r+0x9b8>
  406284:	4641      	mov	r1, r8
  406286:	2205      	movs	r2, #5
  406288:	4620      	mov	r0, r4
  40628a:	f001 f8ef 	bl	40746c <__multadd>
  40628e:	4601      	mov	r1, r0
  406290:	4680      	mov	r8, r0
  406292:	4648      	mov	r0, r9
  406294:	f001 fab8 	bl	407808 <__mcmp>
  406298:	2800      	cmp	r0, #0
  40629a:	ddbd      	ble.n	406218 <_dtoa_r+0x9b8>
  40629c:	9a02      	ldr	r2, [sp, #8]
  40629e:	9904      	ldr	r1, [sp, #16]
  4062a0:	2331      	movs	r3, #49	; 0x31
  4062a2:	3201      	adds	r2, #1
  4062a4:	9202      	str	r2, [sp, #8]
  4062a6:	700b      	strb	r3, [r1, #0]
  4062a8:	1c4d      	adds	r5, r1, #1
  4062aa:	e7b9      	b.n	406220 <_dtoa_r+0x9c0>
  4062ac:	9a02      	ldr	r2, [sp, #8]
  4062ae:	3201      	adds	r2, #1
  4062b0:	9202      	str	r2, [sp, #8]
  4062b2:	9a04      	ldr	r2, [sp, #16]
  4062b4:	2331      	movs	r3, #49	; 0x31
  4062b6:	7013      	strb	r3, [r2, #0]
  4062b8:	e652      	b.n	405f60 <_dtoa_r+0x700>
  4062ba:	2301      	movs	r3, #1
  4062bc:	930b      	str	r3, [sp, #44]	; 0x2c
  4062be:	e666      	b.n	405f8e <_dtoa_r+0x72e>
  4062c0:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  4062c4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4062c6:	e48f      	b.n	405be8 <_dtoa_r+0x388>
  4062c8:	00409838 	.word	0x00409838
  4062cc:	00409810 	.word	0x00409810
  4062d0:	3ff00000 	.word	0x3ff00000
  4062d4:	401c0000 	.word	0x401c0000
  4062d8:	3fe00000 	.word	0x3fe00000
  4062dc:	40240000 	.word	0x40240000
  4062e0:	40140000 	.word	0x40140000
  4062e4:	4650      	mov	r0, sl
  4062e6:	f002 f943 	bl	408570 <__aeabi_i2d>
  4062ea:	463a      	mov	r2, r7
  4062ec:	4643      	mov	r3, r8
  4062ee:	f002 f9a5 	bl	40863c <__aeabi_dmul>
  4062f2:	2200      	movs	r2, #0
  4062f4:	4bc1      	ldr	r3, [pc, #772]	; (4065fc <_dtoa_r+0xd9c>)
  4062f6:	f001 ffef 	bl	4082d8 <__adddf3>
  4062fa:	4605      	mov	r5, r0
  4062fc:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  406300:	4641      	mov	r1, r8
  406302:	2200      	movs	r2, #0
  406304:	4bbe      	ldr	r3, [pc, #760]	; (406600 <_dtoa_r+0xda0>)
  406306:	4638      	mov	r0, r7
  406308:	f001 ffe4 	bl	4082d4 <__aeabi_dsub>
  40630c:	462a      	mov	r2, r5
  40630e:	4633      	mov	r3, r6
  406310:	4682      	mov	sl, r0
  406312:	468b      	mov	fp, r1
  406314:	f002 fc22 	bl	408b5c <__aeabi_dcmpgt>
  406318:	4680      	mov	r8, r0
  40631a:	2800      	cmp	r0, #0
  40631c:	f040 8110 	bne.w	406540 <_dtoa_r+0xce0>
  406320:	462a      	mov	r2, r5
  406322:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  406326:	4650      	mov	r0, sl
  406328:	4659      	mov	r1, fp
  40632a:	f002 fbf9 	bl	408b20 <__aeabi_dcmplt>
  40632e:	b118      	cbz	r0, 406338 <_dtoa_r+0xad8>
  406330:	4646      	mov	r6, r8
  406332:	e771      	b.n	406218 <_dtoa_r+0x9b8>
  406334:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  406338:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  40633c:	f7ff bb8a 	b.w	405a54 <_dtoa_r+0x1f4>
  406340:	9804      	ldr	r0, [sp, #16]
  406342:	f7ff babb 	b.w	4058bc <_dtoa_r+0x5c>
  406346:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406348:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40634a:	970c      	str	r7, [sp, #48]	; 0x30
  40634c:	1afb      	subs	r3, r7, r3
  40634e:	441a      	add	r2, r3
  406350:	920d      	str	r2, [sp, #52]	; 0x34
  406352:	2700      	movs	r7, #0
  406354:	e469      	b.n	405c2a <_dtoa_r+0x3ca>
  406356:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  40635a:	f04f 0a02 	mov.w	sl, #2
  40635e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  406362:	e657      	b.n	406014 <_dtoa_r+0x7b4>
  406364:	2100      	movs	r1, #0
  406366:	2301      	movs	r3, #1
  406368:	6461      	str	r1, [r4, #68]	; 0x44
  40636a:	4620      	mov	r0, r4
  40636c:	9325      	str	r3, [sp, #148]	; 0x94
  40636e:	f001 f84d 	bl	40740c <_Balloc>
  406372:	9b25      	ldr	r3, [sp, #148]	; 0x94
  406374:	9004      	str	r0, [sp, #16]
  406376:	6420      	str	r0, [r4, #64]	; 0x40
  406378:	930a      	str	r3, [sp, #40]	; 0x28
  40637a:	930f      	str	r3, [sp, #60]	; 0x3c
  40637c:	e629      	b.n	405fd2 <_dtoa_r+0x772>
  40637e:	2a00      	cmp	r2, #0
  406380:	46d0      	mov	r8, sl
  406382:	f8cd b018 	str.w	fp, [sp, #24]
  406386:	469a      	mov	sl, r3
  406388:	dd11      	ble.n	4063ae <_dtoa_r+0xb4e>
  40638a:	4649      	mov	r1, r9
  40638c:	2201      	movs	r2, #1
  40638e:	4620      	mov	r0, r4
  406390:	f001 f9e8 	bl	407764 <__lshift>
  406394:	4641      	mov	r1, r8
  406396:	4681      	mov	r9, r0
  406398:	f001 fa36 	bl	407808 <__mcmp>
  40639c:	2800      	cmp	r0, #0
  40639e:	f340 8146 	ble.w	40662e <_dtoa_r+0xdce>
  4063a2:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  4063a6:	f000 8106 	beq.w	4065b6 <_dtoa_r+0xd56>
  4063aa:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  4063ae:	46b3      	mov	fp, r6
  4063b0:	f887 a000 	strb.w	sl, [r7]
  4063b4:	1c7d      	adds	r5, r7, #1
  4063b6:	9e06      	ldr	r6, [sp, #24]
  4063b8:	e5d2      	b.n	405f60 <_dtoa_r+0x700>
  4063ba:	d104      	bne.n	4063c6 <_dtoa_r+0xb66>
  4063bc:	f01a 0f01 	tst.w	sl, #1
  4063c0:	d001      	beq.n	4063c6 <_dtoa_r+0xb66>
  4063c2:	e5bd      	b.n	405f40 <_dtoa_r+0x6e0>
  4063c4:	4615      	mov	r5, r2
  4063c6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4063ca:	2b30      	cmp	r3, #48	; 0x30
  4063cc:	f105 32ff 	add.w	r2, r5, #4294967295
  4063d0:	d0f8      	beq.n	4063c4 <_dtoa_r+0xb64>
  4063d2:	e5c5      	b.n	405f60 <_dtoa_r+0x700>
  4063d4:	9904      	ldr	r1, [sp, #16]
  4063d6:	2230      	movs	r2, #48	; 0x30
  4063d8:	700a      	strb	r2, [r1, #0]
  4063da:	9a02      	ldr	r2, [sp, #8]
  4063dc:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4063e0:	3201      	adds	r2, #1
  4063e2:	9202      	str	r2, [sp, #8]
  4063e4:	f7ff bbfc 	b.w	405be0 <_dtoa_r+0x380>
  4063e8:	f000 80bb 	beq.w	406562 <_dtoa_r+0xd02>
  4063ec:	9b02      	ldr	r3, [sp, #8]
  4063ee:	425d      	negs	r5, r3
  4063f0:	4b84      	ldr	r3, [pc, #528]	; (406604 <_dtoa_r+0xda4>)
  4063f2:	f005 020f 	and.w	r2, r5, #15
  4063f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4063fa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4063fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  406402:	f002 f91b 	bl	40863c <__aeabi_dmul>
  406406:	112d      	asrs	r5, r5, #4
  406408:	4607      	mov	r7, r0
  40640a:	4688      	mov	r8, r1
  40640c:	f000 812c 	beq.w	406668 <_dtoa_r+0xe08>
  406410:	4e7d      	ldr	r6, [pc, #500]	; (406608 <_dtoa_r+0xda8>)
  406412:	f04f 0a02 	mov.w	sl, #2
  406416:	07eb      	lsls	r3, r5, #31
  406418:	d509      	bpl.n	40642e <_dtoa_r+0xbce>
  40641a:	4638      	mov	r0, r7
  40641c:	4641      	mov	r1, r8
  40641e:	e9d6 2300 	ldrd	r2, r3, [r6]
  406422:	f002 f90b 	bl	40863c <__aeabi_dmul>
  406426:	f10a 0a01 	add.w	sl, sl, #1
  40642a:	4607      	mov	r7, r0
  40642c:	4688      	mov	r8, r1
  40642e:	106d      	asrs	r5, r5, #1
  406430:	f106 0608 	add.w	r6, r6, #8
  406434:	d1ef      	bne.n	406416 <_dtoa_r+0xbb6>
  406436:	e608      	b.n	40604a <_dtoa_r+0x7ea>
  406438:	6871      	ldr	r1, [r6, #4]
  40643a:	4620      	mov	r0, r4
  40643c:	f000 ffe6 	bl	40740c <_Balloc>
  406440:	6933      	ldr	r3, [r6, #16]
  406442:	3302      	adds	r3, #2
  406444:	009a      	lsls	r2, r3, #2
  406446:	4605      	mov	r5, r0
  406448:	f106 010c 	add.w	r1, r6, #12
  40644c:	300c      	adds	r0, #12
  40644e:	f000 fedf 	bl	407210 <memcpy>
  406452:	4629      	mov	r1, r5
  406454:	2201      	movs	r2, #1
  406456:	4620      	mov	r0, r4
  406458:	f001 f984 	bl	407764 <__lshift>
  40645c:	9006      	str	r0, [sp, #24]
  40645e:	e4b5      	b.n	405dcc <_dtoa_r+0x56c>
  406460:	2b39      	cmp	r3, #57	; 0x39
  406462:	f8cd b018 	str.w	fp, [sp, #24]
  406466:	46d0      	mov	r8, sl
  406468:	f000 80a5 	beq.w	4065b6 <_dtoa_r+0xd56>
  40646c:	f103 0a01 	add.w	sl, r3, #1
  406470:	46b3      	mov	fp, r6
  406472:	f887 a000 	strb.w	sl, [r7]
  406476:	1c7d      	adds	r5, r7, #1
  406478:	9e06      	ldr	r6, [sp, #24]
  40647a:	e571      	b.n	405f60 <_dtoa_r+0x700>
  40647c:	465a      	mov	r2, fp
  40647e:	46d0      	mov	r8, sl
  406480:	46b3      	mov	fp, r6
  406482:	469a      	mov	sl, r3
  406484:	4616      	mov	r6, r2
  406486:	e54f      	b.n	405f28 <_dtoa_r+0x6c8>
  406488:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40648a:	495e      	ldr	r1, [pc, #376]	; (406604 <_dtoa_r+0xda4>)
  40648c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  406490:	462a      	mov	r2, r5
  406492:	4633      	mov	r3, r6
  406494:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  406498:	f002 f8d0 	bl	40863c <__aeabi_dmul>
  40649c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  4064a0:	4638      	mov	r0, r7
  4064a2:	4641      	mov	r1, r8
  4064a4:	f002 fb7a 	bl	408b9c <__aeabi_d2iz>
  4064a8:	4605      	mov	r5, r0
  4064aa:	f002 f861 	bl	408570 <__aeabi_i2d>
  4064ae:	460b      	mov	r3, r1
  4064b0:	4602      	mov	r2, r0
  4064b2:	4641      	mov	r1, r8
  4064b4:	4638      	mov	r0, r7
  4064b6:	f001 ff0d 	bl	4082d4 <__aeabi_dsub>
  4064ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4064bc:	460f      	mov	r7, r1
  4064be:	9904      	ldr	r1, [sp, #16]
  4064c0:	3530      	adds	r5, #48	; 0x30
  4064c2:	2b01      	cmp	r3, #1
  4064c4:	700d      	strb	r5, [r1, #0]
  4064c6:	4606      	mov	r6, r0
  4064c8:	f101 0501 	add.w	r5, r1, #1
  4064cc:	d026      	beq.n	40651c <_dtoa_r+0xcbc>
  4064ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4064d0:	9a04      	ldr	r2, [sp, #16]
  4064d2:	f8df b13c 	ldr.w	fp, [pc, #316]	; 406610 <_dtoa_r+0xdb0>
  4064d6:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  4064da:	4413      	add	r3, r2
  4064dc:	f04f 0a00 	mov.w	sl, #0
  4064e0:	4699      	mov	r9, r3
  4064e2:	4652      	mov	r2, sl
  4064e4:	465b      	mov	r3, fp
  4064e6:	4630      	mov	r0, r6
  4064e8:	4639      	mov	r1, r7
  4064ea:	f002 f8a7 	bl	40863c <__aeabi_dmul>
  4064ee:	460f      	mov	r7, r1
  4064f0:	4606      	mov	r6, r0
  4064f2:	f002 fb53 	bl	408b9c <__aeabi_d2iz>
  4064f6:	4680      	mov	r8, r0
  4064f8:	f002 f83a 	bl	408570 <__aeabi_i2d>
  4064fc:	f108 0830 	add.w	r8, r8, #48	; 0x30
  406500:	4602      	mov	r2, r0
  406502:	460b      	mov	r3, r1
  406504:	4630      	mov	r0, r6
  406506:	4639      	mov	r1, r7
  406508:	f001 fee4 	bl	4082d4 <__aeabi_dsub>
  40650c:	f805 8b01 	strb.w	r8, [r5], #1
  406510:	454d      	cmp	r5, r9
  406512:	4606      	mov	r6, r0
  406514:	460f      	mov	r7, r1
  406516:	d1e4      	bne.n	4064e2 <_dtoa_r+0xc82>
  406518:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40651c:	4b3b      	ldr	r3, [pc, #236]	; (40660c <_dtoa_r+0xdac>)
  40651e:	2200      	movs	r2, #0
  406520:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  406524:	f001 fed8 	bl	4082d8 <__adddf3>
  406528:	4632      	mov	r2, r6
  40652a:	463b      	mov	r3, r7
  40652c:	f002 faf8 	bl	408b20 <__aeabi_dcmplt>
  406530:	2800      	cmp	r0, #0
  406532:	d046      	beq.n	4065c2 <_dtoa_r+0xd62>
  406534:	9b15      	ldr	r3, [sp, #84]	; 0x54
  406536:	9302      	str	r3, [sp, #8]
  406538:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40653c:	f7ff bb43 	b.w	405bc6 <_dtoa_r+0x366>
  406540:	f04f 0800 	mov.w	r8, #0
  406544:	4646      	mov	r6, r8
  406546:	e6a9      	b.n	40629c <_dtoa_r+0xa3c>
  406548:	9b08      	ldr	r3, [sp, #32]
  40654a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40654c:	1a9d      	subs	r5, r3, r2
  40654e:	2300      	movs	r3, #0
  406550:	f7ff bb71 	b.w	405c36 <_dtoa_r+0x3d6>
  406554:	9b18      	ldr	r3, [sp, #96]	; 0x60
  406556:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  406558:	9d08      	ldr	r5, [sp, #32]
  40655a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40655e:	f7ff bb6a 	b.w	405c36 <_dtoa_r+0x3d6>
  406562:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  406566:	f04f 0a02 	mov.w	sl, #2
  40656a:	e56e      	b.n	40604a <_dtoa_r+0x7ea>
  40656c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40656e:	2b00      	cmp	r3, #0
  406570:	f43f aeb8 	beq.w	4062e4 <_dtoa_r+0xa84>
  406574:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406576:	2b00      	cmp	r3, #0
  406578:	f77f aede 	ble.w	406338 <_dtoa_r+0xad8>
  40657c:	2200      	movs	r2, #0
  40657e:	4b24      	ldr	r3, [pc, #144]	; (406610 <_dtoa_r+0xdb0>)
  406580:	4638      	mov	r0, r7
  406582:	4641      	mov	r1, r8
  406584:	f002 f85a 	bl	40863c <__aeabi_dmul>
  406588:	4607      	mov	r7, r0
  40658a:	4688      	mov	r8, r1
  40658c:	f10a 0001 	add.w	r0, sl, #1
  406590:	f001 ffee 	bl	408570 <__aeabi_i2d>
  406594:	463a      	mov	r2, r7
  406596:	4643      	mov	r3, r8
  406598:	f002 f850 	bl	40863c <__aeabi_dmul>
  40659c:	2200      	movs	r2, #0
  40659e:	4b17      	ldr	r3, [pc, #92]	; (4065fc <_dtoa_r+0xd9c>)
  4065a0:	f001 fe9a 	bl	4082d8 <__adddf3>
  4065a4:	9a02      	ldr	r2, [sp, #8]
  4065a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4065a8:	9312      	str	r3, [sp, #72]	; 0x48
  4065aa:	3a01      	subs	r2, #1
  4065ac:	4605      	mov	r5, r0
  4065ae:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4065b2:	9215      	str	r2, [sp, #84]	; 0x54
  4065b4:	e56a      	b.n	40608c <_dtoa_r+0x82c>
  4065b6:	2239      	movs	r2, #57	; 0x39
  4065b8:	46b3      	mov	fp, r6
  4065ba:	703a      	strb	r2, [r7, #0]
  4065bc:	9e06      	ldr	r6, [sp, #24]
  4065be:	1c7d      	adds	r5, r7, #1
  4065c0:	e4c0      	b.n	405f44 <_dtoa_r+0x6e4>
  4065c2:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  4065c6:	2000      	movs	r0, #0
  4065c8:	4910      	ldr	r1, [pc, #64]	; (40660c <_dtoa_r+0xdac>)
  4065ca:	f001 fe83 	bl	4082d4 <__aeabi_dsub>
  4065ce:	4632      	mov	r2, r6
  4065d0:	463b      	mov	r3, r7
  4065d2:	f002 fac3 	bl	408b5c <__aeabi_dcmpgt>
  4065d6:	b908      	cbnz	r0, 4065dc <_dtoa_r+0xd7c>
  4065d8:	e6ae      	b.n	406338 <_dtoa_r+0xad8>
  4065da:	4615      	mov	r5, r2
  4065dc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4065e0:	2b30      	cmp	r3, #48	; 0x30
  4065e2:	f105 32ff 	add.w	r2, r5, #4294967295
  4065e6:	d0f8      	beq.n	4065da <_dtoa_r+0xd7a>
  4065e8:	e5d7      	b.n	40619a <_dtoa_r+0x93a>
  4065ea:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4065ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4065f0:	9302      	str	r3, [sp, #8]
  4065f2:	f7ff bae8 	b.w	405bc6 <_dtoa_r+0x366>
  4065f6:	970c      	str	r7, [sp, #48]	; 0x30
  4065f8:	f7ff bba5 	b.w	405d46 <_dtoa_r+0x4e6>
  4065fc:	401c0000 	.word	0x401c0000
  406600:	40140000 	.word	0x40140000
  406604:	00409838 	.word	0x00409838
  406608:	00409810 	.word	0x00409810
  40660c:	3fe00000 	.word	0x3fe00000
  406610:	40240000 	.word	0x40240000
  406614:	2b39      	cmp	r3, #57	; 0x39
  406616:	f8cd b018 	str.w	fp, [sp, #24]
  40661a:	46d0      	mov	r8, sl
  40661c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  406620:	469a      	mov	sl, r3
  406622:	d0c8      	beq.n	4065b6 <_dtoa_r+0xd56>
  406624:	f1bb 0f00 	cmp.w	fp, #0
  406628:	f73f aebf 	bgt.w	4063aa <_dtoa_r+0xb4a>
  40662c:	e6bf      	b.n	4063ae <_dtoa_r+0xb4e>
  40662e:	f47f aebe 	bne.w	4063ae <_dtoa_r+0xb4e>
  406632:	f01a 0f01 	tst.w	sl, #1
  406636:	f43f aeba 	beq.w	4063ae <_dtoa_r+0xb4e>
  40663a:	e6b2      	b.n	4063a2 <_dtoa_r+0xb42>
  40663c:	f04f 0800 	mov.w	r8, #0
  406640:	4646      	mov	r6, r8
  406642:	e5e9      	b.n	406218 <_dtoa_r+0x9b8>
  406644:	4631      	mov	r1, r6
  406646:	2300      	movs	r3, #0
  406648:	220a      	movs	r2, #10
  40664a:	4620      	mov	r0, r4
  40664c:	f000 ff0e 	bl	40746c <__multadd>
  406650:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406652:	2b00      	cmp	r3, #0
  406654:	4606      	mov	r6, r0
  406656:	dd0a      	ble.n	40666e <_dtoa_r+0xe0e>
  406658:	930a      	str	r3, [sp, #40]	; 0x28
  40665a:	f7ff bbaa 	b.w	405db2 <_dtoa_r+0x552>
  40665e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406660:	2b02      	cmp	r3, #2
  406662:	dc23      	bgt.n	4066ac <_dtoa_r+0xe4c>
  406664:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406666:	e43b      	b.n	405ee0 <_dtoa_r+0x680>
  406668:	f04f 0a02 	mov.w	sl, #2
  40666c:	e4ed      	b.n	40604a <_dtoa_r+0x7ea>
  40666e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406670:	2b02      	cmp	r3, #2
  406672:	dc1b      	bgt.n	4066ac <_dtoa_r+0xe4c>
  406674:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406676:	e7ef      	b.n	406658 <_dtoa_r+0xdf8>
  406678:	2500      	movs	r5, #0
  40667a:	6465      	str	r5, [r4, #68]	; 0x44
  40667c:	4629      	mov	r1, r5
  40667e:	4620      	mov	r0, r4
  406680:	f000 fec4 	bl	40740c <_Balloc>
  406684:	f04f 33ff 	mov.w	r3, #4294967295
  406688:	930a      	str	r3, [sp, #40]	; 0x28
  40668a:	930f      	str	r3, [sp, #60]	; 0x3c
  40668c:	2301      	movs	r3, #1
  40668e:	9004      	str	r0, [sp, #16]
  406690:	9525      	str	r5, [sp, #148]	; 0x94
  406692:	6420      	str	r0, [r4, #64]	; 0x40
  406694:	930b      	str	r3, [sp, #44]	; 0x2c
  406696:	f7ff b9dd 	b.w	405a54 <_dtoa_r+0x1f4>
  40669a:	2501      	movs	r5, #1
  40669c:	f7ff b9a5 	b.w	4059ea <_dtoa_r+0x18a>
  4066a0:	f43f ab69 	beq.w	405d76 <_dtoa_r+0x516>
  4066a4:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  4066a8:	f7ff bbf9 	b.w	405e9e <_dtoa_r+0x63e>
  4066ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4066ae:	930a      	str	r3, [sp, #40]	; 0x28
  4066b0:	e5e5      	b.n	40627e <_dtoa_r+0xa1e>
  4066b2:	bf00      	nop

004066b4 <__sflush_r>:
  4066b4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  4066b8:	b29a      	uxth	r2, r3
  4066ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4066be:	460d      	mov	r5, r1
  4066c0:	0711      	lsls	r1, r2, #28
  4066c2:	4680      	mov	r8, r0
  4066c4:	d43a      	bmi.n	40673c <__sflush_r+0x88>
  4066c6:	686a      	ldr	r2, [r5, #4]
  4066c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4066cc:	2a00      	cmp	r2, #0
  4066ce:	81ab      	strh	r3, [r5, #12]
  4066d0:	dd6f      	ble.n	4067b2 <__sflush_r+0xfe>
  4066d2:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4066d4:	2c00      	cmp	r4, #0
  4066d6:	d049      	beq.n	40676c <__sflush_r+0xb8>
  4066d8:	2200      	movs	r2, #0
  4066da:	b29b      	uxth	r3, r3
  4066dc:	f8d8 6000 	ldr.w	r6, [r8]
  4066e0:	f8c8 2000 	str.w	r2, [r8]
  4066e4:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  4066e8:	d067      	beq.n	4067ba <__sflush_r+0x106>
  4066ea:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4066ec:	075f      	lsls	r7, r3, #29
  4066ee:	d505      	bpl.n	4066fc <__sflush_r+0x48>
  4066f0:	6869      	ldr	r1, [r5, #4]
  4066f2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4066f4:	1a52      	subs	r2, r2, r1
  4066f6:	b10b      	cbz	r3, 4066fc <__sflush_r+0x48>
  4066f8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4066fa:	1ad2      	subs	r2, r2, r3
  4066fc:	2300      	movs	r3, #0
  4066fe:	69e9      	ldr	r1, [r5, #28]
  406700:	4640      	mov	r0, r8
  406702:	47a0      	blx	r4
  406704:	1c44      	adds	r4, r0, #1
  406706:	d03c      	beq.n	406782 <__sflush_r+0xce>
  406708:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  40670c:	692a      	ldr	r2, [r5, #16]
  40670e:	602a      	str	r2, [r5, #0]
  406710:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  406714:	2200      	movs	r2, #0
  406716:	81ab      	strh	r3, [r5, #12]
  406718:	04db      	lsls	r3, r3, #19
  40671a:	606a      	str	r2, [r5, #4]
  40671c:	d447      	bmi.n	4067ae <__sflush_r+0xfa>
  40671e:	6b29      	ldr	r1, [r5, #48]	; 0x30
  406720:	f8c8 6000 	str.w	r6, [r8]
  406724:	b311      	cbz	r1, 40676c <__sflush_r+0xb8>
  406726:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40672a:	4299      	cmp	r1, r3
  40672c:	d002      	beq.n	406734 <__sflush_r+0x80>
  40672e:	4640      	mov	r0, r8
  406730:	f000 f9de 	bl	406af0 <_free_r>
  406734:	2000      	movs	r0, #0
  406736:	6328      	str	r0, [r5, #48]	; 0x30
  406738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40673c:	692e      	ldr	r6, [r5, #16]
  40673e:	b1ae      	cbz	r6, 40676c <__sflush_r+0xb8>
  406740:	682c      	ldr	r4, [r5, #0]
  406742:	602e      	str	r6, [r5, #0]
  406744:	0791      	lsls	r1, r2, #30
  406746:	bf0c      	ite	eq
  406748:	696b      	ldreq	r3, [r5, #20]
  40674a:	2300      	movne	r3, #0
  40674c:	1ba4      	subs	r4, r4, r6
  40674e:	60ab      	str	r3, [r5, #8]
  406750:	e00a      	b.n	406768 <__sflush_r+0xb4>
  406752:	4623      	mov	r3, r4
  406754:	4632      	mov	r2, r6
  406756:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  406758:	69e9      	ldr	r1, [r5, #28]
  40675a:	4640      	mov	r0, r8
  40675c:	47b8      	blx	r7
  40675e:	2800      	cmp	r0, #0
  406760:	eba4 0400 	sub.w	r4, r4, r0
  406764:	4406      	add	r6, r0
  406766:	dd04      	ble.n	406772 <__sflush_r+0xbe>
  406768:	2c00      	cmp	r4, #0
  40676a:	dcf2      	bgt.n	406752 <__sflush_r+0x9e>
  40676c:	2000      	movs	r0, #0
  40676e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406772:	89ab      	ldrh	r3, [r5, #12]
  406774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406778:	81ab      	strh	r3, [r5, #12]
  40677a:	f04f 30ff 	mov.w	r0, #4294967295
  40677e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406782:	f8d8 4000 	ldr.w	r4, [r8]
  406786:	2c1d      	cmp	r4, #29
  406788:	d8f3      	bhi.n	406772 <__sflush_r+0xbe>
  40678a:	4b19      	ldr	r3, [pc, #100]	; (4067f0 <__sflush_r+0x13c>)
  40678c:	40e3      	lsrs	r3, r4
  40678e:	43db      	mvns	r3, r3
  406790:	f013 0301 	ands.w	r3, r3, #1
  406794:	d1ed      	bne.n	406772 <__sflush_r+0xbe>
  406796:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40679a:	606b      	str	r3, [r5, #4]
  40679c:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  4067a0:	6929      	ldr	r1, [r5, #16]
  4067a2:	81ab      	strh	r3, [r5, #12]
  4067a4:	04da      	lsls	r2, r3, #19
  4067a6:	6029      	str	r1, [r5, #0]
  4067a8:	d5b9      	bpl.n	40671e <__sflush_r+0x6a>
  4067aa:	2c00      	cmp	r4, #0
  4067ac:	d1b7      	bne.n	40671e <__sflush_r+0x6a>
  4067ae:	6528      	str	r0, [r5, #80]	; 0x50
  4067b0:	e7b5      	b.n	40671e <__sflush_r+0x6a>
  4067b2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4067b4:	2a00      	cmp	r2, #0
  4067b6:	dc8c      	bgt.n	4066d2 <__sflush_r+0x1e>
  4067b8:	e7d8      	b.n	40676c <__sflush_r+0xb8>
  4067ba:	2301      	movs	r3, #1
  4067bc:	69e9      	ldr	r1, [r5, #28]
  4067be:	4640      	mov	r0, r8
  4067c0:	47a0      	blx	r4
  4067c2:	1c43      	adds	r3, r0, #1
  4067c4:	4602      	mov	r2, r0
  4067c6:	d002      	beq.n	4067ce <__sflush_r+0x11a>
  4067c8:	89ab      	ldrh	r3, [r5, #12]
  4067ca:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4067cc:	e78e      	b.n	4066ec <__sflush_r+0x38>
  4067ce:	f8d8 3000 	ldr.w	r3, [r8]
  4067d2:	2b00      	cmp	r3, #0
  4067d4:	d0f8      	beq.n	4067c8 <__sflush_r+0x114>
  4067d6:	2b1d      	cmp	r3, #29
  4067d8:	d001      	beq.n	4067de <__sflush_r+0x12a>
  4067da:	2b16      	cmp	r3, #22
  4067dc:	d102      	bne.n	4067e4 <__sflush_r+0x130>
  4067de:	f8c8 6000 	str.w	r6, [r8]
  4067e2:	e7c3      	b.n	40676c <__sflush_r+0xb8>
  4067e4:	89ab      	ldrh	r3, [r5, #12]
  4067e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4067ea:	81ab      	strh	r3, [r5, #12]
  4067ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4067f0:	20400001 	.word	0x20400001

004067f4 <_fflush_r>:
  4067f4:	b538      	push	{r3, r4, r5, lr}
  4067f6:	460d      	mov	r5, r1
  4067f8:	4604      	mov	r4, r0
  4067fa:	b108      	cbz	r0, 406800 <_fflush_r+0xc>
  4067fc:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4067fe:	b1bb      	cbz	r3, 406830 <_fflush_r+0x3c>
  406800:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  406804:	b188      	cbz	r0, 40682a <_fflush_r+0x36>
  406806:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  406808:	07db      	lsls	r3, r3, #31
  40680a:	d401      	bmi.n	406810 <_fflush_r+0x1c>
  40680c:	0581      	lsls	r1, r0, #22
  40680e:	d517      	bpl.n	406840 <_fflush_r+0x4c>
  406810:	4620      	mov	r0, r4
  406812:	4629      	mov	r1, r5
  406814:	f7ff ff4e 	bl	4066b4 <__sflush_r>
  406818:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40681a:	07da      	lsls	r2, r3, #31
  40681c:	4604      	mov	r4, r0
  40681e:	d402      	bmi.n	406826 <_fflush_r+0x32>
  406820:	89ab      	ldrh	r3, [r5, #12]
  406822:	059b      	lsls	r3, r3, #22
  406824:	d507      	bpl.n	406836 <_fflush_r+0x42>
  406826:	4620      	mov	r0, r4
  406828:	bd38      	pop	{r3, r4, r5, pc}
  40682a:	4604      	mov	r4, r0
  40682c:	4620      	mov	r0, r4
  40682e:	bd38      	pop	{r3, r4, r5, pc}
  406830:	f000 f838 	bl	4068a4 <__sinit>
  406834:	e7e4      	b.n	406800 <_fflush_r+0xc>
  406836:	6da8      	ldr	r0, [r5, #88]	; 0x58
  406838:	f000 fc04 	bl	407044 <__retarget_lock_release_recursive>
  40683c:	4620      	mov	r0, r4
  40683e:	bd38      	pop	{r3, r4, r5, pc}
  406840:	6da8      	ldr	r0, [r5, #88]	; 0x58
  406842:	f000 fbfd 	bl	407040 <__retarget_lock_acquire_recursive>
  406846:	e7e3      	b.n	406810 <_fflush_r+0x1c>

00406848 <_cleanup_r>:
  406848:	4901      	ldr	r1, [pc, #4]	; (406850 <_cleanup_r+0x8>)
  40684a:	f000 bbaf 	b.w	406fac <_fwalk_reent>
  40684e:	bf00      	nop
  406850:	00408165 	.word	0x00408165

00406854 <std.isra.0>:
  406854:	b510      	push	{r4, lr}
  406856:	2300      	movs	r3, #0
  406858:	4604      	mov	r4, r0
  40685a:	8181      	strh	r1, [r0, #12]
  40685c:	81c2      	strh	r2, [r0, #14]
  40685e:	6003      	str	r3, [r0, #0]
  406860:	6043      	str	r3, [r0, #4]
  406862:	6083      	str	r3, [r0, #8]
  406864:	6643      	str	r3, [r0, #100]	; 0x64
  406866:	6103      	str	r3, [r0, #16]
  406868:	6143      	str	r3, [r0, #20]
  40686a:	6183      	str	r3, [r0, #24]
  40686c:	4619      	mov	r1, r3
  40686e:	2208      	movs	r2, #8
  406870:	305c      	adds	r0, #92	; 0x5c
  406872:	f7fc fb93 	bl	402f9c <memset>
  406876:	4807      	ldr	r0, [pc, #28]	; (406894 <std.isra.0+0x40>)
  406878:	4907      	ldr	r1, [pc, #28]	; (406898 <std.isra.0+0x44>)
  40687a:	4a08      	ldr	r2, [pc, #32]	; (40689c <std.isra.0+0x48>)
  40687c:	4b08      	ldr	r3, [pc, #32]	; (4068a0 <std.isra.0+0x4c>)
  40687e:	6220      	str	r0, [r4, #32]
  406880:	61e4      	str	r4, [r4, #28]
  406882:	6261      	str	r1, [r4, #36]	; 0x24
  406884:	62a2      	str	r2, [r4, #40]	; 0x28
  406886:	62e3      	str	r3, [r4, #44]	; 0x2c
  406888:	f104 0058 	add.w	r0, r4, #88	; 0x58
  40688c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  406890:	f000 bbd2 	b.w	407038 <__retarget_lock_init_recursive>
  406894:	00407d4d 	.word	0x00407d4d
  406898:	00407d71 	.word	0x00407d71
  40689c:	00407dad 	.word	0x00407dad
  4068a0:	00407dcd 	.word	0x00407dcd

004068a4 <__sinit>:
  4068a4:	b510      	push	{r4, lr}
  4068a6:	4604      	mov	r4, r0
  4068a8:	4812      	ldr	r0, [pc, #72]	; (4068f4 <__sinit+0x50>)
  4068aa:	f000 fbc9 	bl	407040 <__retarget_lock_acquire_recursive>
  4068ae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4068b0:	b9d2      	cbnz	r2, 4068e8 <__sinit+0x44>
  4068b2:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  4068b6:	4810      	ldr	r0, [pc, #64]	; (4068f8 <__sinit+0x54>)
  4068b8:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4068bc:	2103      	movs	r1, #3
  4068be:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  4068c2:	63e0      	str	r0, [r4, #60]	; 0x3c
  4068c4:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  4068c8:	6860      	ldr	r0, [r4, #4]
  4068ca:	2104      	movs	r1, #4
  4068cc:	f7ff ffc2 	bl	406854 <std.isra.0>
  4068d0:	2201      	movs	r2, #1
  4068d2:	2109      	movs	r1, #9
  4068d4:	68a0      	ldr	r0, [r4, #8]
  4068d6:	f7ff ffbd 	bl	406854 <std.isra.0>
  4068da:	2202      	movs	r2, #2
  4068dc:	2112      	movs	r1, #18
  4068de:	68e0      	ldr	r0, [r4, #12]
  4068e0:	f7ff ffb8 	bl	406854 <std.isra.0>
  4068e4:	2301      	movs	r3, #1
  4068e6:	63a3      	str	r3, [r4, #56]	; 0x38
  4068e8:	4802      	ldr	r0, [pc, #8]	; (4068f4 <__sinit+0x50>)
  4068ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4068ee:	f000 bba9 	b.w	407044 <__retarget_lock_release_recursive>
  4068f2:	bf00      	nop
  4068f4:	20400e88 	.word	0x20400e88
  4068f8:	00406849 	.word	0x00406849

004068fc <__sfp_lock_acquire>:
  4068fc:	4801      	ldr	r0, [pc, #4]	; (406904 <__sfp_lock_acquire+0x8>)
  4068fe:	f000 bb9f 	b.w	407040 <__retarget_lock_acquire_recursive>
  406902:	bf00      	nop
  406904:	20400e9c 	.word	0x20400e9c

00406908 <__sfp_lock_release>:
  406908:	4801      	ldr	r0, [pc, #4]	; (406910 <__sfp_lock_release+0x8>)
  40690a:	f000 bb9b 	b.w	407044 <__retarget_lock_release_recursive>
  40690e:	bf00      	nop
  406910:	20400e9c 	.word	0x20400e9c

00406914 <__libc_fini_array>:
  406914:	b538      	push	{r3, r4, r5, lr}
  406916:	4c0a      	ldr	r4, [pc, #40]	; (406940 <__libc_fini_array+0x2c>)
  406918:	4d0a      	ldr	r5, [pc, #40]	; (406944 <__libc_fini_array+0x30>)
  40691a:	1b64      	subs	r4, r4, r5
  40691c:	10a4      	asrs	r4, r4, #2
  40691e:	d00a      	beq.n	406936 <__libc_fini_array+0x22>
  406920:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  406924:	3b01      	subs	r3, #1
  406926:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40692a:	3c01      	subs	r4, #1
  40692c:	f855 3904 	ldr.w	r3, [r5], #-4
  406930:	4798      	blx	r3
  406932:	2c00      	cmp	r4, #0
  406934:	d1f9      	bne.n	40692a <__libc_fini_array+0x16>
  406936:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40693a:	f003 b873 	b.w	409a24 <_fini>
  40693e:	bf00      	nop
  406940:	00409a34 	.word	0x00409a34
  406944:	00409a30 	.word	0x00409a30

00406948 <__fputwc>:
  406948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40694c:	b082      	sub	sp, #8
  40694e:	4680      	mov	r8, r0
  406950:	4689      	mov	r9, r1
  406952:	4614      	mov	r4, r2
  406954:	f000 fb54 	bl	407000 <__locale_mb_cur_max>
  406958:	2801      	cmp	r0, #1
  40695a:	d036      	beq.n	4069ca <__fputwc+0x82>
  40695c:	464a      	mov	r2, r9
  40695e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  406962:	a901      	add	r1, sp, #4
  406964:	4640      	mov	r0, r8
  406966:	f001 fb0b 	bl	407f80 <_wcrtomb_r>
  40696a:	1c42      	adds	r2, r0, #1
  40696c:	4606      	mov	r6, r0
  40696e:	d025      	beq.n	4069bc <__fputwc+0x74>
  406970:	b3a8      	cbz	r0, 4069de <__fputwc+0x96>
  406972:	f89d e004 	ldrb.w	lr, [sp, #4]
  406976:	2500      	movs	r5, #0
  406978:	f10d 0a04 	add.w	sl, sp, #4
  40697c:	e009      	b.n	406992 <__fputwc+0x4a>
  40697e:	6823      	ldr	r3, [r4, #0]
  406980:	1c5a      	adds	r2, r3, #1
  406982:	6022      	str	r2, [r4, #0]
  406984:	f883 e000 	strb.w	lr, [r3]
  406988:	3501      	adds	r5, #1
  40698a:	42b5      	cmp	r5, r6
  40698c:	d227      	bcs.n	4069de <__fputwc+0x96>
  40698e:	f815 e00a 	ldrb.w	lr, [r5, sl]
  406992:	68a3      	ldr	r3, [r4, #8]
  406994:	3b01      	subs	r3, #1
  406996:	2b00      	cmp	r3, #0
  406998:	60a3      	str	r3, [r4, #8]
  40699a:	daf0      	bge.n	40697e <__fputwc+0x36>
  40699c:	69a7      	ldr	r7, [r4, #24]
  40699e:	42bb      	cmp	r3, r7
  4069a0:	4671      	mov	r1, lr
  4069a2:	4622      	mov	r2, r4
  4069a4:	4640      	mov	r0, r8
  4069a6:	db02      	blt.n	4069ae <__fputwc+0x66>
  4069a8:	f1be 0f0a 	cmp.w	lr, #10
  4069ac:	d1e7      	bne.n	40697e <__fputwc+0x36>
  4069ae:	f001 fa8f 	bl	407ed0 <__swbuf_r>
  4069b2:	1c43      	adds	r3, r0, #1
  4069b4:	d1e8      	bne.n	406988 <__fputwc+0x40>
  4069b6:	b002      	add	sp, #8
  4069b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4069bc:	89a3      	ldrh	r3, [r4, #12]
  4069be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4069c2:	81a3      	strh	r3, [r4, #12]
  4069c4:	b002      	add	sp, #8
  4069c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4069ca:	f109 33ff 	add.w	r3, r9, #4294967295
  4069ce:	2bfe      	cmp	r3, #254	; 0xfe
  4069d0:	d8c4      	bhi.n	40695c <__fputwc+0x14>
  4069d2:	fa5f fe89 	uxtb.w	lr, r9
  4069d6:	4606      	mov	r6, r0
  4069d8:	f88d e004 	strb.w	lr, [sp, #4]
  4069dc:	e7cb      	b.n	406976 <__fputwc+0x2e>
  4069de:	4648      	mov	r0, r9
  4069e0:	b002      	add	sp, #8
  4069e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4069e6:	bf00      	nop

004069e8 <_fputwc_r>:
  4069e8:	b530      	push	{r4, r5, lr}
  4069ea:	6e53      	ldr	r3, [r2, #100]	; 0x64
  4069ec:	f013 0f01 	tst.w	r3, #1
  4069f0:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  4069f4:	4614      	mov	r4, r2
  4069f6:	b083      	sub	sp, #12
  4069f8:	4605      	mov	r5, r0
  4069fa:	b29a      	uxth	r2, r3
  4069fc:	d101      	bne.n	406a02 <_fputwc_r+0x1a>
  4069fe:	0590      	lsls	r0, r2, #22
  406a00:	d51c      	bpl.n	406a3c <_fputwc_r+0x54>
  406a02:	0490      	lsls	r0, r2, #18
  406a04:	d406      	bmi.n	406a14 <_fputwc_r+0x2c>
  406a06:	6e62      	ldr	r2, [r4, #100]	; 0x64
  406a08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  406a0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  406a10:	81a3      	strh	r3, [r4, #12]
  406a12:	6662      	str	r2, [r4, #100]	; 0x64
  406a14:	4628      	mov	r0, r5
  406a16:	4622      	mov	r2, r4
  406a18:	f7ff ff96 	bl	406948 <__fputwc>
  406a1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406a1e:	07da      	lsls	r2, r3, #31
  406a20:	4605      	mov	r5, r0
  406a22:	d402      	bmi.n	406a2a <_fputwc_r+0x42>
  406a24:	89a3      	ldrh	r3, [r4, #12]
  406a26:	059b      	lsls	r3, r3, #22
  406a28:	d502      	bpl.n	406a30 <_fputwc_r+0x48>
  406a2a:	4628      	mov	r0, r5
  406a2c:	b003      	add	sp, #12
  406a2e:	bd30      	pop	{r4, r5, pc}
  406a30:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406a32:	f000 fb07 	bl	407044 <__retarget_lock_release_recursive>
  406a36:	4628      	mov	r0, r5
  406a38:	b003      	add	sp, #12
  406a3a:	bd30      	pop	{r4, r5, pc}
  406a3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406a3e:	9101      	str	r1, [sp, #4]
  406a40:	f000 fafe 	bl	407040 <__retarget_lock_acquire_recursive>
  406a44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406a48:	9901      	ldr	r1, [sp, #4]
  406a4a:	b29a      	uxth	r2, r3
  406a4c:	e7d9      	b.n	406a02 <_fputwc_r+0x1a>
  406a4e:	bf00      	nop

00406a50 <_malloc_trim_r>:
  406a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406a52:	4f24      	ldr	r7, [pc, #144]	; (406ae4 <_malloc_trim_r+0x94>)
  406a54:	460c      	mov	r4, r1
  406a56:	4606      	mov	r6, r0
  406a58:	f7fc faee 	bl	403038 <__malloc_lock>
  406a5c:	68bb      	ldr	r3, [r7, #8]
  406a5e:	685d      	ldr	r5, [r3, #4]
  406a60:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  406a64:	310f      	adds	r1, #15
  406a66:	f025 0503 	bic.w	r5, r5, #3
  406a6a:	4429      	add	r1, r5
  406a6c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  406a70:	f021 010f 	bic.w	r1, r1, #15
  406a74:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  406a78:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  406a7c:	db07      	blt.n	406a8e <_malloc_trim_r+0x3e>
  406a7e:	2100      	movs	r1, #0
  406a80:	4630      	mov	r0, r6
  406a82:	f7fc fae5 	bl	403050 <_sbrk_r>
  406a86:	68bb      	ldr	r3, [r7, #8]
  406a88:	442b      	add	r3, r5
  406a8a:	4298      	cmp	r0, r3
  406a8c:	d004      	beq.n	406a98 <_malloc_trim_r+0x48>
  406a8e:	4630      	mov	r0, r6
  406a90:	f7fc fad8 	bl	403044 <__malloc_unlock>
  406a94:	2000      	movs	r0, #0
  406a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406a98:	4261      	negs	r1, r4
  406a9a:	4630      	mov	r0, r6
  406a9c:	f7fc fad8 	bl	403050 <_sbrk_r>
  406aa0:	3001      	adds	r0, #1
  406aa2:	d00d      	beq.n	406ac0 <_malloc_trim_r+0x70>
  406aa4:	4b10      	ldr	r3, [pc, #64]	; (406ae8 <_malloc_trim_r+0x98>)
  406aa6:	68ba      	ldr	r2, [r7, #8]
  406aa8:	6819      	ldr	r1, [r3, #0]
  406aaa:	1b2d      	subs	r5, r5, r4
  406aac:	f045 0501 	orr.w	r5, r5, #1
  406ab0:	4630      	mov	r0, r6
  406ab2:	1b09      	subs	r1, r1, r4
  406ab4:	6055      	str	r5, [r2, #4]
  406ab6:	6019      	str	r1, [r3, #0]
  406ab8:	f7fc fac4 	bl	403044 <__malloc_unlock>
  406abc:	2001      	movs	r0, #1
  406abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406ac0:	2100      	movs	r1, #0
  406ac2:	4630      	mov	r0, r6
  406ac4:	f7fc fac4 	bl	403050 <_sbrk_r>
  406ac8:	68ba      	ldr	r2, [r7, #8]
  406aca:	1a83      	subs	r3, r0, r2
  406acc:	2b0f      	cmp	r3, #15
  406ace:	ddde      	ble.n	406a8e <_malloc_trim_r+0x3e>
  406ad0:	4c06      	ldr	r4, [pc, #24]	; (406aec <_malloc_trim_r+0x9c>)
  406ad2:	4905      	ldr	r1, [pc, #20]	; (406ae8 <_malloc_trim_r+0x98>)
  406ad4:	6824      	ldr	r4, [r4, #0]
  406ad6:	f043 0301 	orr.w	r3, r3, #1
  406ada:	1b00      	subs	r0, r0, r4
  406adc:	6053      	str	r3, [r2, #4]
  406ade:	6008      	str	r0, [r1, #0]
  406ae0:	e7d5      	b.n	406a8e <_malloc_trim_r+0x3e>
  406ae2:	bf00      	nop
  406ae4:	20400440 	.word	0x20400440
  406ae8:	20400e1c 	.word	0x20400e1c
  406aec:	20400848 	.word	0x20400848

00406af0 <_free_r>:
  406af0:	2900      	cmp	r1, #0
  406af2:	d044      	beq.n	406b7e <_free_r+0x8e>
  406af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406af8:	460d      	mov	r5, r1
  406afa:	4680      	mov	r8, r0
  406afc:	f7fc fa9c 	bl	403038 <__malloc_lock>
  406b00:	f855 7c04 	ldr.w	r7, [r5, #-4]
  406b04:	4969      	ldr	r1, [pc, #420]	; (406cac <_free_r+0x1bc>)
  406b06:	f027 0301 	bic.w	r3, r7, #1
  406b0a:	f1a5 0408 	sub.w	r4, r5, #8
  406b0e:	18e2      	adds	r2, r4, r3
  406b10:	688e      	ldr	r6, [r1, #8]
  406b12:	6850      	ldr	r0, [r2, #4]
  406b14:	42b2      	cmp	r2, r6
  406b16:	f020 0003 	bic.w	r0, r0, #3
  406b1a:	d05e      	beq.n	406bda <_free_r+0xea>
  406b1c:	07fe      	lsls	r6, r7, #31
  406b1e:	6050      	str	r0, [r2, #4]
  406b20:	d40b      	bmi.n	406b3a <_free_r+0x4a>
  406b22:	f855 7c08 	ldr.w	r7, [r5, #-8]
  406b26:	1be4      	subs	r4, r4, r7
  406b28:	f101 0e08 	add.w	lr, r1, #8
  406b2c:	68a5      	ldr	r5, [r4, #8]
  406b2e:	4575      	cmp	r5, lr
  406b30:	443b      	add	r3, r7
  406b32:	d06d      	beq.n	406c10 <_free_r+0x120>
  406b34:	68e7      	ldr	r7, [r4, #12]
  406b36:	60ef      	str	r7, [r5, #12]
  406b38:	60bd      	str	r5, [r7, #8]
  406b3a:	1815      	adds	r5, r2, r0
  406b3c:	686d      	ldr	r5, [r5, #4]
  406b3e:	07ed      	lsls	r5, r5, #31
  406b40:	d53e      	bpl.n	406bc0 <_free_r+0xd0>
  406b42:	f043 0201 	orr.w	r2, r3, #1
  406b46:	6062      	str	r2, [r4, #4]
  406b48:	50e3      	str	r3, [r4, r3]
  406b4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406b4e:	d217      	bcs.n	406b80 <_free_r+0x90>
  406b50:	08db      	lsrs	r3, r3, #3
  406b52:	1c58      	adds	r0, r3, #1
  406b54:	109a      	asrs	r2, r3, #2
  406b56:	684d      	ldr	r5, [r1, #4]
  406b58:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  406b5c:	60a7      	str	r7, [r4, #8]
  406b5e:	2301      	movs	r3, #1
  406b60:	4093      	lsls	r3, r2
  406b62:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  406b66:	432b      	orrs	r3, r5
  406b68:	3a08      	subs	r2, #8
  406b6a:	60e2      	str	r2, [r4, #12]
  406b6c:	604b      	str	r3, [r1, #4]
  406b6e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  406b72:	60fc      	str	r4, [r7, #12]
  406b74:	4640      	mov	r0, r8
  406b76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406b7a:	f7fc ba63 	b.w	403044 <__malloc_unlock>
  406b7e:	4770      	bx	lr
  406b80:	0a5a      	lsrs	r2, r3, #9
  406b82:	2a04      	cmp	r2, #4
  406b84:	d852      	bhi.n	406c2c <_free_r+0x13c>
  406b86:	099a      	lsrs	r2, r3, #6
  406b88:	f102 0739 	add.w	r7, r2, #57	; 0x39
  406b8c:	00ff      	lsls	r7, r7, #3
  406b8e:	f102 0538 	add.w	r5, r2, #56	; 0x38
  406b92:	19c8      	adds	r0, r1, r7
  406b94:	59ca      	ldr	r2, [r1, r7]
  406b96:	3808      	subs	r0, #8
  406b98:	4290      	cmp	r0, r2
  406b9a:	d04f      	beq.n	406c3c <_free_r+0x14c>
  406b9c:	6851      	ldr	r1, [r2, #4]
  406b9e:	f021 0103 	bic.w	r1, r1, #3
  406ba2:	428b      	cmp	r3, r1
  406ba4:	d232      	bcs.n	406c0c <_free_r+0x11c>
  406ba6:	6892      	ldr	r2, [r2, #8]
  406ba8:	4290      	cmp	r0, r2
  406baa:	d1f7      	bne.n	406b9c <_free_r+0xac>
  406bac:	68c3      	ldr	r3, [r0, #12]
  406bae:	60a0      	str	r0, [r4, #8]
  406bb0:	60e3      	str	r3, [r4, #12]
  406bb2:	609c      	str	r4, [r3, #8]
  406bb4:	60c4      	str	r4, [r0, #12]
  406bb6:	4640      	mov	r0, r8
  406bb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406bbc:	f7fc ba42 	b.w	403044 <__malloc_unlock>
  406bc0:	6895      	ldr	r5, [r2, #8]
  406bc2:	4f3b      	ldr	r7, [pc, #236]	; (406cb0 <_free_r+0x1c0>)
  406bc4:	42bd      	cmp	r5, r7
  406bc6:	4403      	add	r3, r0
  406bc8:	d040      	beq.n	406c4c <_free_r+0x15c>
  406bca:	68d0      	ldr	r0, [r2, #12]
  406bcc:	60e8      	str	r0, [r5, #12]
  406bce:	f043 0201 	orr.w	r2, r3, #1
  406bd2:	6085      	str	r5, [r0, #8]
  406bd4:	6062      	str	r2, [r4, #4]
  406bd6:	50e3      	str	r3, [r4, r3]
  406bd8:	e7b7      	b.n	406b4a <_free_r+0x5a>
  406bda:	07ff      	lsls	r7, r7, #31
  406bdc:	4403      	add	r3, r0
  406bde:	d407      	bmi.n	406bf0 <_free_r+0x100>
  406be0:	f855 2c08 	ldr.w	r2, [r5, #-8]
  406be4:	1aa4      	subs	r4, r4, r2
  406be6:	4413      	add	r3, r2
  406be8:	68a0      	ldr	r0, [r4, #8]
  406bea:	68e2      	ldr	r2, [r4, #12]
  406bec:	60c2      	str	r2, [r0, #12]
  406bee:	6090      	str	r0, [r2, #8]
  406bf0:	4a30      	ldr	r2, [pc, #192]	; (406cb4 <_free_r+0x1c4>)
  406bf2:	6812      	ldr	r2, [r2, #0]
  406bf4:	f043 0001 	orr.w	r0, r3, #1
  406bf8:	4293      	cmp	r3, r2
  406bfa:	6060      	str	r0, [r4, #4]
  406bfc:	608c      	str	r4, [r1, #8]
  406bfe:	d3b9      	bcc.n	406b74 <_free_r+0x84>
  406c00:	4b2d      	ldr	r3, [pc, #180]	; (406cb8 <_free_r+0x1c8>)
  406c02:	4640      	mov	r0, r8
  406c04:	6819      	ldr	r1, [r3, #0]
  406c06:	f7ff ff23 	bl	406a50 <_malloc_trim_r>
  406c0a:	e7b3      	b.n	406b74 <_free_r+0x84>
  406c0c:	4610      	mov	r0, r2
  406c0e:	e7cd      	b.n	406bac <_free_r+0xbc>
  406c10:	1811      	adds	r1, r2, r0
  406c12:	6849      	ldr	r1, [r1, #4]
  406c14:	07c9      	lsls	r1, r1, #31
  406c16:	d444      	bmi.n	406ca2 <_free_r+0x1b2>
  406c18:	6891      	ldr	r1, [r2, #8]
  406c1a:	68d2      	ldr	r2, [r2, #12]
  406c1c:	60ca      	str	r2, [r1, #12]
  406c1e:	4403      	add	r3, r0
  406c20:	f043 0001 	orr.w	r0, r3, #1
  406c24:	6091      	str	r1, [r2, #8]
  406c26:	6060      	str	r0, [r4, #4]
  406c28:	50e3      	str	r3, [r4, r3]
  406c2a:	e7a3      	b.n	406b74 <_free_r+0x84>
  406c2c:	2a14      	cmp	r2, #20
  406c2e:	d816      	bhi.n	406c5e <_free_r+0x16e>
  406c30:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  406c34:	00ff      	lsls	r7, r7, #3
  406c36:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  406c3a:	e7aa      	b.n	406b92 <_free_r+0xa2>
  406c3c:	10aa      	asrs	r2, r5, #2
  406c3e:	2301      	movs	r3, #1
  406c40:	684d      	ldr	r5, [r1, #4]
  406c42:	4093      	lsls	r3, r2
  406c44:	432b      	orrs	r3, r5
  406c46:	604b      	str	r3, [r1, #4]
  406c48:	4603      	mov	r3, r0
  406c4a:	e7b0      	b.n	406bae <_free_r+0xbe>
  406c4c:	f043 0201 	orr.w	r2, r3, #1
  406c50:	614c      	str	r4, [r1, #20]
  406c52:	610c      	str	r4, [r1, #16]
  406c54:	60e5      	str	r5, [r4, #12]
  406c56:	60a5      	str	r5, [r4, #8]
  406c58:	6062      	str	r2, [r4, #4]
  406c5a:	50e3      	str	r3, [r4, r3]
  406c5c:	e78a      	b.n	406b74 <_free_r+0x84>
  406c5e:	2a54      	cmp	r2, #84	; 0x54
  406c60:	d806      	bhi.n	406c70 <_free_r+0x180>
  406c62:	0b1a      	lsrs	r2, r3, #12
  406c64:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  406c68:	00ff      	lsls	r7, r7, #3
  406c6a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  406c6e:	e790      	b.n	406b92 <_free_r+0xa2>
  406c70:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406c74:	d806      	bhi.n	406c84 <_free_r+0x194>
  406c76:	0bda      	lsrs	r2, r3, #15
  406c78:	f102 0778 	add.w	r7, r2, #120	; 0x78
  406c7c:	00ff      	lsls	r7, r7, #3
  406c7e:	f102 0577 	add.w	r5, r2, #119	; 0x77
  406c82:	e786      	b.n	406b92 <_free_r+0xa2>
  406c84:	f240 5054 	movw	r0, #1364	; 0x554
  406c88:	4282      	cmp	r2, r0
  406c8a:	d806      	bhi.n	406c9a <_free_r+0x1aa>
  406c8c:	0c9a      	lsrs	r2, r3, #18
  406c8e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  406c92:	00ff      	lsls	r7, r7, #3
  406c94:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  406c98:	e77b      	b.n	406b92 <_free_r+0xa2>
  406c9a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  406c9e:	257e      	movs	r5, #126	; 0x7e
  406ca0:	e777      	b.n	406b92 <_free_r+0xa2>
  406ca2:	f043 0101 	orr.w	r1, r3, #1
  406ca6:	6061      	str	r1, [r4, #4]
  406ca8:	6013      	str	r3, [r2, #0]
  406caa:	e763      	b.n	406b74 <_free_r+0x84>
  406cac:	20400440 	.word	0x20400440
  406cb0:	20400448 	.word	0x20400448
  406cb4:	2040084c 	.word	0x2040084c
  406cb8:	20400e4c 	.word	0x20400e4c

00406cbc <__sfvwrite_r>:
  406cbc:	6893      	ldr	r3, [r2, #8]
  406cbe:	2b00      	cmp	r3, #0
  406cc0:	d073      	beq.n	406daa <__sfvwrite_r+0xee>
  406cc2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406cc6:	898b      	ldrh	r3, [r1, #12]
  406cc8:	b083      	sub	sp, #12
  406cca:	460c      	mov	r4, r1
  406ccc:	0719      	lsls	r1, r3, #28
  406cce:	9000      	str	r0, [sp, #0]
  406cd0:	4616      	mov	r6, r2
  406cd2:	d526      	bpl.n	406d22 <__sfvwrite_r+0x66>
  406cd4:	6922      	ldr	r2, [r4, #16]
  406cd6:	b322      	cbz	r2, 406d22 <__sfvwrite_r+0x66>
  406cd8:	f013 0002 	ands.w	r0, r3, #2
  406cdc:	6835      	ldr	r5, [r6, #0]
  406cde:	d02c      	beq.n	406d3a <__sfvwrite_r+0x7e>
  406ce0:	f04f 0900 	mov.w	r9, #0
  406ce4:	4fb0      	ldr	r7, [pc, #704]	; (406fa8 <__sfvwrite_r+0x2ec>)
  406ce6:	46c8      	mov	r8, r9
  406ce8:	46b2      	mov	sl, r6
  406cea:	45b8      	cmp	r8, r7
  406cec:	4643      	mov	r3, r8
  406cee:	464a      	mov	r2, r9
  406cf0:	bf28      	it	cs
  406cf2:	463b      	movcs	r3, r7
  406cf4:	9800      	ldr	r0, [sp, #0]
  406cf6:	f1b8 0f00 	cmp.w	r8, #0
  406cfa:	d050      	beq.n	406d9e <__sfvwrite_r+0xe2>
  406cfc:	69e1      	ldr	r1, [r4, #28]
  406cfe:	6a66      	ldr	r6, [r4, #36]	; 0x24
  406d00:	47b0      	blx	r6
  406d02:	2800      	cmp	r0, #0
  406d04:	dd58      	ble.n	406db8 <__sfvwrite_r+0xfc>
  406d06:	f8da 3008 	ldr.w	r3, [sl, #8]
  406d0a:	1a1b      	subs	r3, r3, r0
  406d0c:	4481      	add	r9, r0
  406d0e:	eba8 0800 	sub.w	r8, r8, r0
  406d12:	f8ca 3008 	str.w	r3, [sl, #8]
  406d16:	2b00      	cmp	r3, #0
  406d18:	d1e7      	bne.n	406cea <__sfvwrite_r+0x2e>
  406d1a:	2000      	movs	r0, #0
  406d1c:	b003      	add	sp, #12
  406d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406d22:	4621      	mov	r1, r4
  406d24:	9800      	ldr	r0, [sp, #0]
  406d26:	f7fe fc91 	bl	40564c <__swsetup_r>
  406d2a:	2800      	cmp	r0, #0
  406d2c:	f040 8133 	bne.w	406f96 <__sfvwrite_r+0x2da>
  406d30:	89a3      	ldrh	r3, [r4, #12]
  406d32:	6835      	ldr	r5, [r6, #0]
  406d34:	f013 0002 	ands.w	r0, r3, #2
  406d38:	d1d2      	bne.n	406ce0 <__sfvwrite_r+0x24>
  406d3a:	f013 0901 	ands.w	r9, r3, #1
  406d3e:	d145      	bne.n	406dcc <__sfvwrite_r+0x110>
  406d40:	464f      	mov	r7, r9
  406d42:	9601      	str	r6, [sp, #4]
  406d44:	b337      	cbz	r7, 406d94 <__sfvwrite_r+0xd8>
  406d46:	059a      	lsls	r2, r3, #22
  406d48:	f8d4 8008 	ldr.w	r8, [r4, #8]
  406d4c:	f140 8083 	bpl.w	406e56 <__sfvwrite_r+0x19a>
  406d50:	4547      	cmp	r7, r8
  406d52:	46c3      	mov	fp, r8
  406d54:	f0c0 80ab 	bcc.w	406eae <__sfvwrite_r+0x1f2>
  406d58:	f413 6f90 	tst.w	r3, #1152	; 0x480
  406d5c:	f040 80ac 	bne.w	406eb8 <__sfvwrite_r+0x1fc>
  406d60:	6820      	ldr	r0, [r4, #0]
  406d62:	46ba      	mov	sl, r7
  406d64:	465a      	mov	r2, fp
  406d66:	4649      	mov	r1, r9
  406d68:	f000 faec 	bl	407344 <memmove>
  406d6c:	68a2      	ldr	r2, [r4, #8]
  406d6e:	6823      	ldr	r3, [r4, #0]
  406d70:	eba2 0208 	sub.w	r2, r2, r8
  406d74:	445b      	add	r3, fp
  406d76:	60a2      	str	r2, [r4, #8]
  406d78:	6023      	str	r3, [r4, #0]
  406d7a:	9a01      	ldr	r2, [sp, #4]
  406d7c:	6893      	ldr	r3, [r2, #8]
  406d7e:	eba3 030a 	sub.w	r3, r3, sl
  406d82:	44d1      	add	r9, sl
  406d84:	eba7 070a 	sub.w	r7, r7, sl
  406d88:	6093      	str	r3, [r2, #8]
  406d8a:	2b00      	cmp	r3, #0
  406d8c:	d0c5      	beq.n	406d1a <__sfvwrite_r+0x5e>
  406d8e:	89a3      	ldrh	r3, [r4, #12]
  406d90:	2f00      	cmp	r7, #0
  406d92:	d1d8      	bne.n	406d46 <__sfvwrite_r+0x8a>
  406d94:	f8d5 9000 	ldr.w	r9, [r5]
  406d98:	686f      	ldr	r7, [r5, #4]
  406d9a:	3508      	adds	r5, #8
  406d9c:	e7d2      	b.n	406d44 <__sfvwrite_r+0x88>
  406d9e:	f8d5 9000 	ldr.w	r9, [r5]
  406da2:	f8d5 8004 	ldr.w	r8, [r5, #4]
  406da6:	3508      	adds	r5, #8
  406da8:	e79f      	b.n	406cea <__sfvwrite_r+0x2e>
  406daa:	2000      	movs	r0, #0
  406dac:	4770      	bx	lr
  406dae:	4621      	mov	r1, r4
  406db0:	9800      	ldr	r0, [sp, #0]
  406db2:	f7ff fd1f 	bl	4067f4 <_fflush_r>
  406db6:	b370      	cbz	r0, 406e16 <__sfvwrite_r+0x15a>
  406db8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406dbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406dc0:	f04f 30ff 	mov.w	r0, #4294967295
  406dc4:	81a3      	strh	r3, [r4, #12]
  406dc6:	b003      	add	sp, #12
  406dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406dcc:	4681      	mov	r9, r0
  406dce:	4633      	mov	r3, r6
  406dd0:	464e      	mov	r6, r9
  406dd2:	46a8      	mov	r8, r5
  406dd4:	469a      	mov	sl, r3
  406dd6:	464d      	mov	r5, r9
  406dd8:	b34e      	cbz	r6, 406e2e <__sfvwrite_r+0x172>
  406dda:	b380      	cbz	r0, 406e3e <__sfvwrite_r+0x182>
  406ddc:	6820      	ldr	r0, [r4, #0]
  406dde:	6923      	ldr	r3, [r4, #16]
  406de0:	6962      	ldr	r2, [r4, #20]
  406de2:	45b1      	cmp	r9, r6
  406de4:	46cb      	mov	fp, r9
  406de6:	bf28      	it	cs
  406de8:	46b3      	movcs	fp, r6
  406dea:	4298      	cmp	r0, r3
  406dec:	465f      	mov	r7, fp
  406dee:	d904      	bls.n	406dfa <__sfvwrite_r+0x13e>
  406df0:	68a3      	ldr	r3, [r4, #8]
  406df2:	4413      	add	r3, r2
  406df4:	459b      	cmp	fp, r3
  406df6:	f300 80a6 	bgt.w	406f46 <__sfvwrite_r+0x28a>
  406dfa:	4593      	cmp	fp, r2
  406dfc:	db4b      	blt.n	406e96 <__sfvwrite_r+0x1da>
  406dfe:	4613      	mov	r3, r2
  406e00:	6a67      	ldr	r7, [r4, #36]	; 0x24
  406e02:	69e1      	ldr	r1, [r4, #28]
  406e04:	9800      	ldr	r0, [sp, #0]
  406e06:	462a      	mov	r2, r5
  406e08:	47b8      	blx	r7
  406e0a:	1e07      	subs	r7, r0, #0
  406e0c:	ddd4      	ble.n	406db8 <__sfvwrite_r+0xfc>
  406e0e:	ebb9 0907 	subs.w	r9, r9, r7
  406e12:	d0cc      	beq.n	406dae <__sfvwrite_r+0xf2>
  406e14:	2001      	movs	r0, #1
  406e16:	f8da 3008 	ldr.w	r3, [sl, #8]
  406e1a:	1bdb      	subs	r3, r3, r7
  406e1c:	443d      	add	r5, r7
  406e1e:	1bf6      	subs	r6, r6, r7
  406e20:	f8ca 3008 	str.w	r3, [sl, #8]
  406e24:	2b00      	cmp	r3, #0
  406e26:	f43f af78 	beq.w	406d1a <__sfvwrite_r+0x5e>
  406e2a:	2e00      	cmp	r6, #0
  406e2c:	d1d5      	bne.n	406dda <__sfvwrite_r+0x11e>
  406e2e:	f108 0308 	add.w	r3, r8, #8
  406e32:	e913 0060 	ldmdb	r3, {r5, r6}
  406e36:	4698      	mov	r8, r3
  406e38:	3308      	adds	r3, #8
  406e3a:	2e00      	cmp	r6, #0
  406e3c:	d0f9      	beq.n	406e32 <__sfvwrite_r+0x176>
  406e3e:	4632      	mov	r2, r6
  406e40:	210a      	movs	r1, #10
  406e42:	4628      	mov	r0, r5
  406e44:	f000 f994 	bl	407170 <memchr>
  406e48:	2800      	cmp	r0, #0
  406e4a:	f000 80a1 	beq.w	406f90 <__sfvwrite_r+0x2d4>
  406e4e:	3001      	adds	r0, #1
  406e50:	eba0 0905 	sub.w	r9, r0, r5
  406e54:	e7c2      	b.n	406ddc <__sfvwrite_r+0x120>
  406e56:	6820      	ldr	r0, [r4, #0]
  406e58:	6923      	ldr	r3, [r4, #16]
  406e5a:	4298      	cmp	r0, r3
  406e5c:	d802      	bhi.n	406e64 <__sfvwrite_r+0x1a8>
  406e5e:	6963      	ldr	r3, [r4, #20]
  406e60:	429f      	cmp	r7, r3
  406e62:	d25d      	bcs.n	406f20 <__sfvwrite_r+0x264>
  406e64:	45b8      	cmp	r8, r7
  406e66:	bf28      	it	cs
  406e68:	46b8      	movcs	r8, r7
  406e6a:	4642      	mov	r2, r8
  406e6c:	4649      	mov	r1, r9
  406e6e:	f000 fa69 	bl	407344 <memmove>
  406e72:	68a3      	ldr	r3, [r4, #8]
  406e74:	6822      	ldr	r2, [r4, #0]
  406e76:	eba3 0308 	sub.w	r3, r3, r8
  406e7a:	4442      	add	r2, r8
  406e7c:	60a3      	str	r3, [r4, #8]
  406e7e:	6022      	str	r2, [r4, #0]
  406e80:	b10b      	cbz	r3, 406e86 <__sfvwrite_r+0x1ca>
  406e82:	46c2      	mov	sl, r8
  406e84:	e779      	b.n	406d7a <__sfvwrite_r+0xbe>
  406e86:	4621      	mov	r1, r4
  406e88:	9800      	ldr	r0, [sp, #0]
  406e8a:	f7ff fcb3 	bl	4067f4 <_fflush_r>
  406e8e:	2800      	cmp	r0, #0
  406e90:	d192      	bne.n	406db8 <__sfvwrite_r+0xfc>
  406e92:	46c2      	mov	sl, r8
  406e94:	e771      	b.n	406d7a <__sfvwrite_r+0xbe>
  406e96:	465a      	mov	r2, fp
  406e98:	4629      	mov	r1, r5
  406e9a:	f000 fa53 	bl	407344 <memmove>
  406e9e:	68a2      	ldr	r2, [r4, #8]
  406ea0:	6823      	ldr	r3, [r4, #0]
  406ea2:	eba2 020b 	sub.w	r2, r2, fp
  406ea6:	445b      	add	r3, fp
  406ea8:	60a2      	str	r2, [r4, #8]
  406eaa:	6023      	str	r3, [r4, #0]
  406eac:	e7af      	b.n	406e0e <__sfvwrite_r+0x152>
  406eae:	6820      	ldr	r0, [r4, #0]
  406eb0:	46b8      	mov	r8, r7
  406eb2:	46ba      	mov	sl, r7
  406eb4:	46bb      	mov	fp, r7
  406eb6:	e755      	b.n	406d64 <__sfvwrite_r+0xa8>
  406eb8:	6962      	ldr	r2, [r4, #20]
  406eba:	6820      	ldr	r0, [r4, #0]
  406ebc:	6921      	ldr	r1, [r4, #16]
  406ebe:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  406ec2:	eba0 0a01 	sub.w	sl, r0, r1
  406ec6:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  406eca:	f10a 0001 	add.w	r0, sl, #1
  406ece:	ea4f 0868 	mov.w	r8, r8, asr #1
  406ed2:	4438      	add	r0, r7
  406ed4:	4540      	cmp	r0, r8
  406ed6:	4642      	mov	r2, r8
  406ed8:	bf84      	itt	hi
  406eda:	4680      	movhi	r8, r0
  406edc:	4642      	movhi	r2, r8
  406ede:	055b      	lsls	r3, r3, #21
  406ee0:	d544      	bpl.n	406f6c <__sfvwrite_r+0x2b0>
  406ee2:	4611      	mov	r1, r2
  406ee4:	9800      	ldr	r0, [sp, #0]
  406ee6:	f7fb fda9 	bl	402a3c <_malloc_r>
  406eea:	4683      	mov	fp, r0
  406eec:	2800      	cmp	r0, #0
  406eee:	d055      	beq.n	406f9c <__sfvwrite_r+0x2e0>
  406ef0:	4652      	mov	r2, sl
  406ef2:	6921      	ldr	r1, [r4, #16]
  406ef4:	f000 f98c 	bl	407210 <memcpy>
  406ef8:	89a3      	ldrh	r3, [r4, #12]
  406efa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  406efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406f02:	81a3      	strh	r3, [r4, #12]
  406f04:	eb0b 000a 	add.w	r0, fp, sl
  406f08:	eba8 030a 	sub.w	r3, r8, sl
  406f0c:	f8c4 b010 	str.w	fp, [r4, #16]
  406f10:	f8c4 8014 	str.w	r8, [r4, #20]
  406f14:	6020      	str	r0, [r4, #0]
  406f16:	60a3      	str	r3, [r4, #8]
  406f18:	46b8      	mov	r8, r7
  406f1a:	46ba      	mov	sl, r7
  406f1c:	46bb      	mov	fp, r7
  406f1e:	e721      	b.n	406d64 <__sfvwrite_r+0xa8>
  406f20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  406f24:	42b9      	cmp	r1, r7
  406f26:	bf28      	it	cs
  406f28:	4639      	movcs	r1, r7
  406f2a:	464a      	mov	r2, r9
  406f2c:	fb91 f1f3 	sdiv	r1, r1, r3
  406f30:	9800      	ldr	r0, [sp, #0]
  406f32:	6a66      	ldr	r6, [r4, #36]	; 0x24
  406f34:	fb03 f301 	mul.w	r3, r3, r1
  406f38:	69e1      	ldr	r1, [r4, #28]
  406f3a:	47b0      	blx	r6
  406f3c:	f1b0 0a00 	subs.w	sl, r0, #0
  406f40:	f73f af1b 	bgt.w	406d7a <__sfvwrite_r+0xbe>
  406f44:	e738      	b.n	406db8 <__sfvwrite_r+0xfc>
  406f46:	461a      	mov	r2, r3
  406f48:	4629      	mov	r1, r5
  406f4a:	9301      	str	r3, [sp, #4]
  406f4c:	f000 f9fa 	bl	407344 <memmove>
  406f50:	6822      	ldr	r2, [r4, #0]
  406f52:	9b01      	ldr	r3, [sp, #4]
  406f54:	9800      	ldr	r0, [sp, #0]
  406f56:	441a      	add	r2, r3
  406f58:	6022      	str	r2, [r4, #0]
  406f5a:	4621      	mov	r1, r4
  406f5c:	f7ff fc4a 	bl	4067f4 <_fflush_r>
  406f60:	9b01      	ldr	r3, [sp, #4]
  406f62:	2800      	cmp	r0, #0
  406f64:	f47f af28 	bne.w	406db8 <__sfvwrite_r+0xfc>
  406f68:	461f      	mov	r7, r3
  406f6a:	e750      	b.n	406e0e <__sfvwrite_r+0x152>
  406f6c:	9800      	ldr	r0, [sp, #0]
  406f6e:	f000 fd47 	bl	407a00 <_realloc_r>
  406f72:	4683      	mov	fp, r0
  406f74:	2800      	cmp	r0, #0
  406f76:	d1c5      	bne.n	406f04 <__sfvwrite_r+0x248>
  406f78:	9d00      	ldr	r5, [sp, #0]
  406f7a:	6921      	ldr	r1, [r4, #16]
  406f7c:	4628      	mov	r0, r5
  406f7e:	f7ff fdb7 	bl	406af0 <_free_r>
  406f82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406f86:	220c      	movs	r2, #12
  406f88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  406f8c:	602a      	str	r2, [r5, #0]
  406f8e:	e715      	b.n	406dbc <__sfvwrite_r+0x100>
  406f90:	f106 0901 	add.w	r9, r6, #1
  406f94:	e722      	b.n	406ddc <__sfvwrite_r+0x120>
  406f96:	f04f 30ff 	mov.w	r0, #4294967295
  406f9a:	e6bf      	b.n	406d1c <__sfvwrite_r+0x60>
  406f9c:	9a00      	ldr	r2, [sp, #0]
  406f9e:	230c      	movs	r3, #12
  406fa0:	6013      	str	r3, [r2, #0]
  406fa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406fa6:	e709      	b.n	406dbc <__sfvwrite_r+0x100>
  406fa8:	7ffffc00 	.word	0x7ffffc00

00406fac <_fwalk_reent>:
  406fac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406fb0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  406fb4:	d01f      	beq.n	406ff6 <_fwalk_reent+0x4a>
  406fb6:	4688      	mov	r8, r1
  406fb8:	4606      	mov	r6, r0
  406fba:	f04f 0900 	mov.w	r9, #0
  406fbe:	687d      	ldr	r5, [r7, #4]
  406fc0:	68bc      	ldr	r4, [r7, #8]
  406fc2:	3d01      	subs	r5, #1
  406fc4:	d411      	bmi.n	406fea <_fwalk_reent+0x3e>
  406fc6:	89a3      	ldrh	r3, [r4, #12]
  406fc8:	2b01      	cmp	r3, #1
  406fca:	f105 35ff 	add.w	r5, r5, #4294967295
  406fce:	d908      	bls.n	406fe2 <_fwalk_reent+0x36>
  406fd0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  406fd4:	3301      	adds	r3, #1
  406fd6:	4621      	mov	r1, r4
  406fd8:	4630      	mov	r0, r6
  406fda:	d002      	beq.n	406fe2 <_fwalk_reent+0x36>
  406fdc:	47c0      	blx	r8
  406fde:	ea49 0900 	orr.w	r9, r9, r0
  406fe2:	1c6b      	adds	r3, r5, #1
  406fe4:	f104 0468 	add.w	r4, r4, #104	; 0x68
  406fe8:	d1ed      	bne.n	406fc6 <_fwalk_reent+0x1a>
  406fea:	683f      	ldr	r7, [r7, #0]
  406fec:	2f00      	cmp	r7, #0
  406fee:	d1e6      	bne.n	406fbe <_fwalk_reent+0x12>
  406ff0:	4648      	mov	r0, r9
  406ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406ff6:	46b9      	mov	r9, r7
  406ff8:	4648      	mov	r0, r9
  406ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406ffe:	bf00      	nop

00407000 <__locale_mb_cur_max>:
  407000:	4b04      	ldr	r3, [pc, #16]	; (407014 <__locale_mb_cur_max+0x14>)
  407002:	4a05      	ldr	r2, [pc, #20]	; (407018 <__locale_mb_cur_max+0x18>)
  407004:	681b      	ldr	r3, [r3, #0]
  407006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  407008:	2b00      	cmp	r3, #0
  40700a:	bf08      	it	eq
  40700c:	4613      	moveq	r3, r2
  40700e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  407012:	4770      	bx	lr
  407014:	20400014 	.word	0x20400014
  407018:	20400854 	.word	0x20400854

0040701c <_localeconv_r>:
  40701c:	4a04      	ldr	r2, [pc, #16]	; (407030 <_localeconv_r+0x14>)
  40701e:	4b05      	ldr	r3, [pc, #20]	; (407034 <_localeconv_r+0x18>)
  407020:	6812      	ldr	r2, [r2, #0]
  407022:	6b50      	ldr	r0, [r2, #52]	; 0x34
  407024:	2800      	cmp	r0, #0
  407026:	bf08      	it	eq
  407028:	4618      	moveq	r0, r3
  40702a:	30f0      	adds	r0, #240	; 0xf0
  40702c:	4770      	bx	lr
  40702e:	bf00      	nop
  407030:	20400014 	.word	0x20400014
  407034:	20400854 	.word	0x20400854

00407038 <__retarget_lock_init_recursive>:
  407038:	4770      	bx	lr
  40703a:	bf00      	nop

0040703c <__retarget_lock_close_recursive>:
  40703c:	4770      	bx	lr
  40703e:	bf00      	nop

00407040 <__retarget_lock_acquire_recursive>:
  407040:	4770      	bx	lr
  407042:	bf00      	nop

00407044 <__retarget_lock_release_recursive>:
  407044:	4770      	bx	lr
  407046:	bf00      	nop

00407048 <__swhatbuf_r>:
  407048:	b570      	push	{r4, r5, r6, lr}
  40704a:	460c      	mov	r4, r1
  40704c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407050:	2900      	cmp	r1, #0
  407052:	b090      	sub	sp, #64	; 0x40
  407054:	4615      	mov	r5, r2
  407056:	461e      	mov	r6, r3
  407058:	db14      	blt.n	407084 <__swhatbuf_r+0x3c>
  40705a:	aa01      	add	r2, sp, #4
  40705c:	f001 f8e4 	bl	408228 <_fstat_r>
  407060:	2800      	cmp	r0, #0
  407062:	db0f      	blt.n	407084 <__swhatbuf_r+0x3c>
  407064:	9a02      	ldr	r2, [sp, #8]
  407066:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40706a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40706e:	fab2 f282 	clz	r2, r2
  407072:	0952      	lsrs	r2, r2, #5
  407074:	f44f 6380 	mov.w	r3, #1024	; 0x400
  407078:	f44f 6000 	mov.w	r0, #2048	; 0x800
  40707c:	6032      	str	r2, [r6, #0]
  40707e:	602b      	str	r3, [r5, #0]
  407080:	b010      	add	sp, #64	; 0x40
  407082:	bd70      	pop	{r4, r5, r6, pc}
  407084:	89a2      	ldrh	r2, [r4, #12]
  407086:	2300      	movs	r3, #0
  407088:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  40708c:	6033      	str	r3, [r6, #0]
  40708e:	d004      	beq.n	40709a <__swhatbuf_r+0x52>
  407090:	2240      	movs	r2, #64	; 0x40
  407092:	4618      	mov	r0, r3
  407094:	602a      	str	r2, [r5, #0]
  407096:	b010      	add	sp, #64	; 0x40
  407098:	bd70      	pop	{r4, r5, r6, pc}
  40709a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40709e:	602b      	str	r3, [r5, #0]
  4070a0:	b010      	add	sp, #64	; 0x40
  4070a2:	bd70      	pop	{r4, r5, r6, pc}

004070a4 <__smakebuf_r>:
  4070a4:	898a      	ldrh	r2, [r1, #12]
  4070a6:	0792      	lsls	r2, r2, #30
  4070a8:	460b      	mov	r3, r1
  4070aa:	d506      	bpl.n	4070ba <__smakebuf_r+0x16>
  4070ac:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4070b0:	2101      	movs	r1, #1
  4070b2:	601a      	str	r2, [r3, #0]
  4070b4:	611a      	str	r2, [r3, #16]
  4070b6:	6159      	str	r1, [r3, #20]
  4070b8:	4770      	bx	lr
  4070ba:	b5f0      	push	{r4, r5, r6, r7, lr}
  4070bc:	b083      	sub	sp, #12
  4070be:	ab01      	add	r3, sp, #4
  4070c0:	466a      	mov	r2, sp
  4070c2:	460c      	mov	r4, r1
  4070c4:	4606      	mov	r6, r0
  4070c6:	f7ff ffbf 	bl	407048 <__swhatbuf_r>
  4070ca:	9900      	ldr	r1, [sp, #0]
  4070cc:	4605      	mov	r5, r0
  4070ce:	4630      	mov	r0, r6
  4070d0:	f7fb fcb4 	bl	402a3c <_malloc_r>
  4070d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4070d8:	b1d8      	cbz	r0, 407112 <__smakebuf_r+0x6e>
  4070da:	9a01      	ldr	r2, [sp, #4]
  4070dc:	4f15      	ldr	r7, [pc, #84]	; (407134 <__smakebuf_r+0x90>)
  4070de:	9900      	ldr	r1, [sp, #0]
  4070e0:	63f7      	str	r7, [r6, #60]	; 0x3c
  4070e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4070e6:	81a3      	strh	r3, [r4, #12]
  4070e8:	6020      	str	r0, [r4, #0]
  4070ea:	6120      	str	r0, [r4, #16]
  4070ec:	6161      	str	r1, [r4, #20]
  4070ee:	b91a      	cbnz	r2, 4070f8 <__smakebuf_r+0x54>
  4070f0:	432b      	orrs	r3, r5
  4070f2:	81a3      	strh	r3, [r4, #12]
  4070f4:	b003      	add	sp, #12
  4070f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4070f8:	4630      	mov	r0, r6
  4070fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4070fe:	f001 f8a7 	bl	408250 <_isatty_r>
  407102:	b1a0      	cbz	r0, 40712e <__smakebuf_r+0x8a>
  407104:	89a3      	ldrh	r3, [r4, #12]
  407106:	f023 0303 	bic.w	r3, r3, #3
  40710a:	f043 0301 	orr.w	r3, r3, #1
  40710e:	b21b      	sxth	r3, r3
  407110:	e7ee      	b.n	4070f0 <__smakebuf_r+0x4c>
  407112:	059a      	lsls	r2, r3, #22
  407114:	d4ee      	bmi.n	4070f4 <__smakebuf_r+0x50>
  407116:	f023 0303 	bic.w	r3, r3, #3
  40711a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40711e:	f043 0302 	orr.w	r3, r3, #2
  407122:	2101      	movs	r1, #1
  407124:	81a3      	strh	r3, [r4, #12]
  407126:	6022      	str	r2, [r4, #0]
  407128:	6122      	str	r2, [r4, #16]
  40712a:	6161      	str	r1, [r4, #20]
  40712c:	e7e2      	b.n	4070f4 <__smakebuf_r+0x50>
  40712e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407132:	e7dd      	b.n	4070f0 <__smakebuf_r+0x4c>
  407134:	00406849 	.word	0x00406849

00407138 <__ascii_mbtowc>:
  407138:	b082      	sub	sp, #8
  40713a:	b149      	cbz	r1, 407150 <__ascii_mbtowc+0x18>
  40713c:	b15a      	cbz	r2, 407156 <__ascii_mbtowc+0x1e>
  40713e:	b16b      	cbz	r3, 40715c <__ascii_mbtowc+0x24>
  407140:	7813      	ldrb	r3, [r2, #0]
  407142:	600b      	str	r3, [r1, #0]
  407144:	7812      	ldrb	r2, [r2, #0]
  407146:	1c10      	adds	r0, r2, #0
  407148:	bf18      	it	ne
  40714a:	2001      	movne	r0, #1
  40714c:	b002      	add	sp, #8
  40714e:	4770      	bx	lr
  407150:	a901      	add	r1, sp, #4
  407152:	2a00      	cmp	r2, #0
  407154:	d1f3      	bne.n	40713e <__ascii_mbtowc+0x6>
  407156:	4610      	mov	r0, r2
  407158:	b002      	add	sp, #8
  40715a:	4770      	bx	lr
  40715c:	f06f 0001 	mvn.w	r0, #1
  407160:	e7f4      	b.n	40714c <__ascii_mbtowc+0x14>
  407162:	bf00      	nop
	...

00407170 <memchr>:
  407170:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  407174:	2a10      	cmp	r2, #16
  407176:	db2b      	blt.n	4071d0 <memchr+0x60>
  407178:	f010 0f07 	tst.w	r0, #7
  40717c:	d008      	beq.n	407190 <memchr+0x20>
  40717e:	f810 3b01 	ldrb.w	r3, [r0], #1
  407182:	3a01      	subs	r2, #1
  407184:	428b      	cmp	r3, r1
  407186:	d02d      	beq.n	4071e4 <memchr+0x74>
  407188:	f010 0f07 	tst.w	r0, #7
  40718c:	b342      	cbz	r2, 4071e0 <memchr+0x70>
  40718e:	d1f6      	bne.n	40717e <memchr+0xe>
  407190:	b4f0      	push	{r4, r5, r6, r7}
  407192:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  407196:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40719a:	f022 0407 	bic.w	r4, r2, #7
  40719e:	f07f 0700 	mvns.w	r7, #0
  4071a2:	2300      	movs	r3, #0
  4071a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4071a8:	3c08      	subs	r4, #8
  4071aa:	ea85 0501 	eor.w	r5, r5, r1
  4071ae:	ea86 0601 	eor.w	r6, r6, r1
  4071b2:	fa85 f547 	uadd8	r5, r5, r7
  4071b6:	faa3 f587 	sel	r5, r3, r7
  4071ba:	fa86 f647 	uadd8	r6, r6, r7
  4071be:	faa5 f687 	sel	r6, r5, r7
  4071c2:	b98e      	cbnz	r6, 4071e8 <memchr+0x78>
  4071c4:	d1ee      	bne.n	4071a4 <memchr+0x34>
  4071c6:	bcf0      	pop	{r4, r5, r6, r7}
  4071c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4071cc:	f002 0207 	and.w	r2, r2, #7
  4071d0:	b132      	cbz	r2, 4071e0 <memchr+0x70>
  4071d2:	f810 3b01 	ldrb.w	r3, [r0], #1
  4071d6:	3a01      	subs	r2, #1
  4071d8:	ea83 0301 	eor.w	r3, r3, r1
  4071dc:	b113      	cbz	r3, 4071e4 <memchr+0x74>
  4071de:	d1f8      	bne.n	4071d2 <memchr+0x62>
  4071e0:	2000      	movs	r0, #0
  4071e2:	4770      	bx	lr
  4071e4:	3801      	subs	r0, #1
  4071e6:	4770      	bx	lr
  4071e8:	2d00      	cmp	r5, #0
  4071ea:	bf06      	itte	eq
  4071ec:	4635      	moveq	r5, r6
  4071ee:	3803      	subeq	r0, #3
  4071f0:	3807      	subne	r0, #7
  4071f2:	f015 0f01 	tst.w	r5, #1
  4071f6:	d107      	bne.n	407208 <memchr+0x98>
  4071f8:	3001      	adds	r0, #1
  4071fa:	f415 7f80 	tst.w	r5, #256	; 0x100
  4071fe:	bf02      	ittt	eq
  407200:	3001      	addeq	r0, #1
  407202:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  407206:	3001      	addeq	r0, #1
  407208:	bcf0      	pop	{r4, r5, r6, r7}
  40720a:	3801      	subs	r0, #1
  40720c:	4770      	bx	lr
  40720e:	bf00      	nop

00407210 <memcpy>:
  407210:	4684      	mov	ip, r0
  407212:	ea41 0300 	orr.w	r3, r1, r0
  407216:	f013 0303 	ands.w	r3, r3, #3
  40721a:	d16d      	bne.n	4072f8 <memcpy+0xe8>
  40721c:	3a40      	subs	r2, #64	; 0x40
  40721e:	d341      	bcc.n	4072a4 <memcpy+0x94>
  407220:	f851 3b04 	ldr.w	r3, [r1], #4
  407224:	f840 3b04 	str.w	r3, [r0], #4
  407228:	f851 3b04 	ldr.w	r3, [r1], #4
  40722c:	f840 3b04 	str.w	r3, [r0], #4
  407230:	f851 3b04 	ldr.w	r3, [r1], #4
  407234:	f840 3b04 	str.w	r3, [r0], #4
  407238:	f851 3b04 	ldr.w	r3, [r1], #4
  40723c:	f840 3b04 	str.w	r3, [r0], #4
  407240:	f851 3b04 	ldr.w	r3, [r1], #4
  407244:	f840 3b04 	str.w	r3, [r0], #4
  407248:	f851 3b04 	ldr.w	r3, [r1], #4
  40724c:	f840 3b04 	str.w	r3, [r0], #4
  407250:	f851 3b04 	ldr.w	r3, [r1], #4
  407254:	f840 3b04 	str.w	r3, [r0], #4
  407258:	f851 3b04 	ldr.w	r3, [r1], #4
  40725c:	f840 3b04 	str.w	r3, [r0], #4
  407260:	f851 3b04 	ldr.w	r3, [r1], #4
  407264:	f840 3b04 	str.w	r3, [r0], #4
  407268:	f851 3b04 	ldr.w	r3, [r1], #4
  40726c:	f840 3b04 	str.w	r3, [r0], #4
  407270:	f851 3b04 	ldr.w	r3, [r1], #4
  407274:	f840 3b04 	str.w	r3, [r0], #4
  407278:	f851 3b04 	ldr.w	r3, [r1], #4
  40727c:	f840 3b04 	str.w	r3, [r0], #4
  407280:	f851 3b04 	ldr.w	r3, [r1], #4
  407284:	f840 3b04 	str.w	r3, [r0], #4
  407288:	f851 3b04 	ldr.w	r3, [r1], #4
  40728c:	f840 3b04 	str.w	r3, [r0], #4
  407290:	f851 3b04 	ldr.w	r3, [r1], #4
  407294:	f840 3b04 	str.w	r3, [r0], #4
  407298:	f851 3b04 	ldr.w	r3, [r1], #4
  40729c:	f840 3b04 	str.w	r3, [r0], #4
  4072a0:	3a40      	subs	r2, #64	; 0x40
  4072a2:	d2bd      	bcs.n	407220 <memcpy+0x10>
  4072a4:	3230      	adds	r2, #48	; 0x30
  4072a6:	d311      	bcc.n	4072cc <memcpy+0xbc>
  4072a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4072ac:	f840 3b04 	str.w	r3, [r0], #4
  4072b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4072b4:	f840 3b04 	str.w	r3, [r0], #4
  4072b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4072bc:	f840 3b04 	str.w	r3, [r0], #4
  4072c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4072c4:	f840 3b04 	str.w	r3, [r0], #4
  4072c8:	3a10      	subs	r2, #16
  4072ca:	d2ed      	bcs.n	4072a8 <memcpy+0x98>
  4072cc:	320c      	adds	r2, #12
  4072ce:	d305      	bcc.n	4072dc <memcpy+0xcc>
  4072d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4072d4:	f840 3b04 	str.w	r3, [r0], #4
  4072d8:	3a04      	subs	r2, #4
  4072da:	d2f9      	bcs.n	4072d0 <memcpy+0xc0>
  4072dc:	3204      	adds	r2, #4
  4072de:	d008      	beq.n	4072f2 <memcpy+0xe2>
  4072e0:	07d2      	lsls	r2, r2, #31
  4072e2:	bf1c      	itt	ne
  4072e4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4072e8:	f800 3b01 	strbne.w	r3, [r0], #1
  4072ec:	d301      	bcc.n	4072f2 <memcpy+0xe2>
  4072ee:	880b      	ldrh	r3, [r1, #0]
  4072f0:	8003      	strh	r3, [r0, #0]
  4072f2:	4660      	mov	r0, ip
  4072f4:	4770      	bx	lr
  4072f6:	bf00      	nop
  4072f8:	2a08      	cmp	r2, #8
  4072fa:	d313      	bcc.n	407324 <memcpy+0x114>
  4072fc:	078b      	lsls	r3, r1, #30
  4072fe:	d08d      	beq.n	40721c <memcpy+0xc>
  407300:	f010 0303 	ands.w	r3, r0, #3
  407304:	d08a      	beq.n	40721c <memcpy+0xc>
  407306:	f1c3 0304 	rsb	r3, r3, #4
  40730a:	1ad2      	subs	r2, r2, r3
  40730c:	07db      	lsls	r3, r3, #31
  40730e:	bf1c      	itt	ne
  407310:	f811 3b01 	ldrbne.w	r3, [r1], #1
  407314:	f800 3b01 	strbne.w	r3, [r0], #1
  407318:	d380      	bcc.n	40721c <memcpy+0xc>
  40731a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40731e:	f820 3b02 	strh.w	r3, [r0], #2
  407322:	e77b      	b.n	40721c <memcpy+0xc>
  407324:	3a04      	subs	r2, #4
  407326:	d3d9      	bcc.n	4072dc <memcpy+0xcc>
  407328:	3a01      	subs	r2, #1
  40732a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40732e:	f800 3b01 	strb.w	r3, [r0], #1
  407332:	d2f9      	bcs.n	407328 <memcpy+0x118>
  407334:	780b      	ldrb	r3, [r1, #0]
  407336:	7003      	strb	r3, [r0, #0]
  407338:	784b      	ldrb	r3, [r1, #1]
  40733a:	7043      	strb	r3, [r0, #1]
  40733c:	788b      	ldrb	r3, [r1, #2]
  40733e:	7083      	strb	r3, [r0, #2]
  407340:	4660      	mov	r0, ip
  407342:	4770      	bx	lr

00407344 <memmove>:
  407344:	4288      	cmp	r0, r1
  407346:	b5f0      	push	{r4, r5, r6, r7, lr}
  407348:	d90d      	bls.n	407366 <memmove+0x22>
  40734a:	188b      	adds	r3, r1, r2
  40734c:	4298      	cmp	r0, r3
  40734e:	d20a      	bcs.n	407366 <memmove+0x22>
  407350:	1884      	adds	r4, r0, r2
  407352:	2a00      	cmp	r2, #0
  407354:	d051      	beq.n	4073fa <memmove+0xb6>
  407356:	4622      	mov	r2, r4
  407358:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40735c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  407360:	4299      	cmp	r1, r3
  407362:	d1f9      	bne.n	407358 <memmove+0x14>
  407364:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407366:	2a0f      	cmp	r2, #15
  407368:	d948      	bls.n	4073fc <memmove+0xb8>
  40736a:	ea41 0300 	orr.w	r3, r1, r0
  40736e:	079b      	lsls	r3, r3, #30
  407370:	d146      	bne.n	407400 <memmove+0xbc>
  407372:	f100 0410 	add.w	r4, r0, #16
  407376:	f101 0310 	add.w	r3, r1, #16
  40737a:	4615      	mov	r5, r2
  40737c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  407380:	f844 6c10 	str.w	r6, [r4, #-16]
  407384:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  407388:	f844 6c0c 	str.w	r6, [r4, #-12]
  40738c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  407390:	f844 6c08 	str.w	r6, [r4, #-8]
  407394:	3d10      	subs	r5, #16
  407396:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40739a:	f844 6c04 	str.w	r6, [r4, #-4]
  40739e:	2d0f      	cmp	r5, #15
  4073a0:	f103 0310 	add.w	r3, r3, #16
  4073a4:	f104 0410 	add.w	r4, r4, #16
  4073a8:	d8e8      	bhi.n	40737c <memmove+0x38>
  4073aa:	f1a2 0310 	sub.w	r3, r2, #16
  4073ae:	f023 030f 	bic.w	r3, r3, #15
  4073b2:	f002 0e0f 	and.w	lr, r2, #15
  4073b6:	3310      	adds	r3, #16
  4073b8:	f1be 0f03 	cmp.w	lr, #3
  4073bc:	4419      	add	r1, r3
  4073be:	4403      	add	r3, r0
  4073c0:	d921      	bls.n	407406 <memmove+0xc2>
  4073c2:	1f1e      	subs	r6, r3, #4
  4073c4:	460d      	mov	r5, r1
  4073c6:	4674      	mov	r4, lr
  4073c8:	3c04      	subs	r4, #4
  4073ca:	f855 7b04 	ldr.w	r7, [r5], #4
  4073ce:	f846 7f04 	str.w	r7, [r6, #4]!
  4073d2:	2c03      	cmp	r4, #3
  4073d4:	d8f8      	bhi.n	4073c8 <memmove+0x84>
  4073d6:	f1ae 0404 	sub.w	r4, lr, #4
  4073da:	f024 0403 	bic.w	r4, r4, #3
  4073de:	3404      	adds	r4, #4
  4073e0:	4421      	add	r1, r4
  4073e2:	4423      	add	r3, r4
  4073e4:	f002 0203 	and.w	r2, r2, #3
  4073e8:	b162      	cbz	r2, 407404 <memmove+0xc0>
  4073ea:	3b01      	subs	r3, #1
  4073ec:	440a      	add	r2, r1
  4073ee:	f811 4b01 	ldrb.w	r4, [r1], #1
  4073f2:	f803 4f01 	strb.w	r4, [r3, #1]!
  4073f6:	428a      	cmp	r2, r1
  4073f8:	d1f9      	bne.n	4073ee <memmove+0xaa>
  4073fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4073fc:	4603      	mov	r3, r0
  4073fe:	e7f3      	b.n	4073e8 <memmove+0xa4>
  407400:	4603      	mov	r3, r0
  407402:	e7f2      	b.n	4073ea <memmove+0xa6>
  407404:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407406:	4672      	mov	r2, lr
  407408:	e7ee      	b.n	4073e8 <memmove+0xa4>
  40740a:	bf00      	nop

0040740c <_Balloc>:
  40740c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40740e:	b570      	push	{r4, r5, r6, lr}
  407410:	4605      	mov	r5, r0
  407412:	460c      	mov	r4, r1
  407414:	b14b      	cbz	r3, 40742a <_Balloc+0x1e>
  407416:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  40741a:	b180      	cbz	r0, 40743e <_Balloc+0x32>
  40741c:	6802      	ldr	r2, [r0, #0]
  40741e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  407422:	2300      	movs	r3, #0
  407424:	6103      	str	r3, [r0, #16]
  407426:	60c3      	str	r3, [r0, #12]
  407428:	bd70      	pop	{r4, r5, r6, pc}
  40742a:	2221      	movs	r2, #33	; 0x21
  40742c:	2104      	movs	r1, #4
  40742e:	f000 fe57 	bl	4080e0 <_calloc_r>
  407432:	64e8      	str	r0, [r5, #76]	; 0x4c
  407434:	4603      	mov	r3, r0
  407436:	2800      	cmp	r0, #0
  407438:	d1ed      	bne.n	407416 <_Balloc+0xa>
  40743a:	2000      	movs	r0, #0
  40743c:	bd70      	pop	{r4, r5, r6, pc}
  40743e:	2101      	movs	r1, #1
  407440:	fa01 f604 	lsl.w	r6, r1, r4
  407444:	1d72      	adds	r2, r6, #5
  407446:	4628      	mov	r0, r5
  407448:	0092      	lsls	r2, r2, #2
  40744a:	f000 fe49 	bl	4080e0 <_calloc_r>
  40744e:	2800      	cmp	r0, #0
  407450:	d0f3      	beq.n	40743a <_Balloc+0x2e>
  407452:	6044      	str	r4, [r0, #4]
  407454:	6086      	str	r6, [r0, #8]
  407456:	e7e4      	b.n	407422 <_Balloc+0x16>

00407458 <_Bfree>:
  407458:	b131      	cbz	r1, 407468 <_Bfree+0x10>
  40745a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40745c:	684a      	ldr	r2, [r1, #4]
  40745e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  407462:	6008      	str	r0, [r1, #0]
  407464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  407468:	4770      	bx	lr
  40746a:	bf00      	nop

0040746c <__multadd>:
  40746c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40746e:	690c      	ldr	r4, [r1, #16]
  407470:	b083      	sub	sp, #12
  407472:	460d      	mov	r5, r1
  407474:	4606      	mov	r6, r0
  407476:	f101 0e14 	add.w	lr, r1, #20
  40747a:	2700      	movs	r7, #0
  40747c:	f8de 0000 	ldr.w	r0, [lr]
  407480:	b281      	uxth	r1, r0
  407482:	fb02 3301 	mla	r3, r2, r1, r3
  407486:	0c01      	lsrs	r1, r0, #16
  407488:	0c18      	lsrs	r0, r3, #16
  40748a:	fb02 0101 	mla	r1, r2, r1, r0
  40748e:	b29b      	uxth	r3, r3
  407490:	3701      	adds	r7, #1
  407492:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  407496:	42bc      	cmp	r4, r7
  407498:	f84e 3b04 	str.w	r3, [lr], #4
  40749c:	ea4f 4311 	mov.w	r3, r1, lsr #16
  4074a0:	dcec      	bgt.n	40747c <__multadd+0x10>
  4074a2:	b13b      	cbz	r3, 4074b4 <__multadd+0x48>
  4074a4:	68aa      	ldr	r2, [r5, #8]
  4074a6:	4294      	cmp	r4, r2
  4074a8:	da07      	bge.n	4074ba <__multadd+0x4e>
  4074aa:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  4074ae:	3401      	adds	r4, #1
  4074b0:	6153      	str	r3, [r2, #20]
  4074b2:	612c      	str	r4, [r5, #16]
  4074b4:	4628      	mov	r0, r5
  4074b6:	b003      	add	sp, #12
  4074b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4074ba:	6869      	ldr	r1, [r5, #4]
  4074bc:	9301      	str	r3, [sp, #4]
  4074be:	3101      	adds	r1, #1
  4074c0:	4630      	mov	r0, r6
  4074c2:	f7ff ffa3 	bl	40740c <_Balloc>
  4074c6:	692a      	ldr	r2, [r5, #16]
  4074c8:	3202      	adds	r2, #2
  4074ca:	f105 010c 	add.w	r1, r5, #12
  4074ce:	4607      	mov	r7, r0
  4074d0:	0092      	lsls	r2, r2, #2
  4074d2:	300c      	adds	r0, #12
  4074d4:	f7ff fe9c 	bl	407210 <memcpy>
  4074d8:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  4074da:	6869      	ldr	r1, [r5, #4]
  4074dc:	9b01      	ldr	r3, [sp, #4]
  4074de:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  4074e2:	6028      	str	r0, [r5, #0]
  4074e4:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  4074e8:	463d      	mov	r5, r7
  4074ea:	e7de      	b.n	4074aa <__multadd+0x3e>

004074ec <__hi0bits>:
  4074ec:	0c02      	lsrs	r2, r0, #16
  4074ee:	0412      	lsls	r2, r2, #16
  4074f0:	4603      	mov	r3, r0
  4074f2:	b9b2      	cbnz	r2, 407522 <__hi0bits+0x36>
  4074f4:	0403      	lsls	r3, r0, #16
  4074f6:	2010      	movs	r0, #16
  4074f8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  4074fc:	bf04      	itt	eq
  4074fe:	021b      	lsleq	r3, r3, #8
  407500:	3008      	addeq	r0, #8
  407502:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  407506:	bf04      	itt	eq
  407508:	011b      	lsleq	r3, r3, #4
  40750a:	3004      	addeq	r0, #4
  40750c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  407510:	bf04      	itt	eq
  407512:	009b      	lsleq	r3, r3, #2
  407514:	3002      	addeq	r0, #2
  407516:	2b00      	cmp	r3, #0
  407518:	db02      	blt.n	407520 <__hi0bits+0x34>
  40751a:	005b      	lsls	r3, r3, #1
  40751c:	d403      	bmi.n	407526 <__hi0bits+0x3a>
  40751e:	2020      	movs	r0, #32
  407520:	4770      	bx	lr
  407522:	2000      	movs	r0, #0
  407524:	e7e8      	b.n	4074f8 <__hi0bits+0xc>
  407526:	3001      	adds	r0, #1
  407528:	4770      	bx	lr
  40752a:	bf00      	nop

0040752c <__lo0bits>:
  40752c:	6803      	ldr	r3, [r0, #0]
  40752e:	f013 0207 	ands.w	r2, r3, #7
  407532:	4601      	mov	r1, r0
  407534:	d007      	beq.n	407546 <__lo0bits+0x1a>
  407536:	07da      	lsls	r2, r3, #31
  407538:	d421      	bmi.n	40757e <__lo0bits+0x52>
  40753a:	0798      	lsls	r0, r3, #30
  40753c:	d421      	bmi.n	407582 <__lo0bits+0x56>
  40753e:	089b      	lsrs	r3, r3, #2
  407540:	600b      	str	r3, [r1, #0]
  407542:	2002      	movs	r0, #2
  407544:	4770      	bx	lr
  407546:	b298      	uxth	r0, r3
  407548:	b198      	cbz	r0, 407572 <__lo0bits+0x46>
  40754a:	4610      	mov	r0, r2
  40754c:	f013 0fff 	tst.w	r3, #255	; 0xff
  407550:	bf04      	itt	eq
  407552:	0a1b      	lsreq	r3, r3, #8
  407554:	3008      	addeq	r0, #8
  407556:	071a      	lsls	r2, r3, #28
  407558:	bf04      	itt	eq
  40755a:	091b      	lsreq	r3, r3, #4
  40755c:	3004      	addeq	r0, #4
  40755e:	079a      	lsls	r2, r3, #30
  407560:	bf04      	itt	eq
  407562:	089b      	lsreq	r3, r3, #2
  407564:	3002      	addeq	r0, #2
  407566:	07da      	lsls	r2, r3, #31
  407568:	d407      	bmi.n	40757a <__lo0bits+0x4e>
  40756a:	085b      	lsrs	r3, r3, #1
  40756c:	d104      	bne.n	407578 <__lo0bits+0x4c>
  40756e:	2020      	movs	r0, #32
  407570:	4770      	bx	lr
  407572:	0c1b      	lsrs	r3, r3, #16
  407574:	2010      	movs	r0, #16
  407576:	e7e9      	b.n	40754c <__lo0bits+0x20>
  407578:	3001      	adds	r0, #1
  40757a:	600b      	str	r3, [r1, #0]
  40757c:	4770      	bx	lr
  40757e:	2000      	movs	r0, #0
  407580:	4770      	bx	lr
  407582:	085b      	lsrs	r3, r3, #1
  407584:	600b      	str	r3, [r1, #0]
  407586:	2001      	movs	r0, #1
  407588:	4770      	bx	lr
  40758a:	bf00      	nop

0040758c <__i2b>:
  40758c:	b510      	push	{r4, lr}
  40758e:	460c      	mov	r4, r1
  407590:	2101      	movs	r1, #1
  407592:	f7ff ff3b 	bl	40740c <_Balloc>
  407596:	2201      	movs	r2, #1
  407598:	6144      	str	r4, [r0, #20]
  40759a:	6102      	str	r2, [r0, #16]
  40759c:	bd10      	pop	{r4, pc}
  40759e:	bf00      	nop

004075a0 <__multiply>:
  4075a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4075a4:	690c      	ldr	r4, [r1, #16]
  4075a6:	6915      	ldr	r5, [r2, #16]
  4075a8:	42ac      	cmp	r4, r5
  4075aa:	b083      	sub	sp, #12
  4075ac:	468b      	mov	fp, r1
  4075ae:	4616      	mov	r6, r2
  4075b0:	da04      	bge.n	4075bc <__multiply+0x1c>
  4075b2:	4622      	mov	r2, r4
  4075b4:	46b3      	mov	fp, r6
  4075b6:	462c      	mov	r4, r5
  4075b8:	460e      	mov	r6, r1
  4075ba:	4615      	mov	r5, r2
  4075bc:	f8db 3008 	ldr.w	r3, [fp, #8]
  4075c0:	f8db 1004 	ldr.w	r1, [fp, #4]
  4075c4:	eb04 0805 	add.w	r8, r4, r5
  4075c8:	4598      	cmp	r8, r3
  4075ca:	bfc8      	it	gt
  4075cc:	3101      	addgt	r1, #1
  4075ce:	f7ff ff1d 	bl	40740c <_Balloc>
  4075d2:	f100 0914 	add.w	r9, r0, #20
  4075d6:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  4075da:	45d1      	cmp	r9, sl
  4075dc:	9000      	str	r0, [sp, #0]
  4075de:	d205      	bcs.n	4075ec <__multiply+0x4c>
  4075e0:	464b      	mov	r3, r9
  4075e2:	2100      	movs	r1, #0
  4075e4:	f843 1b04 	str.w	r1, [r3], #4
  4075e8:	459a      	cmp	sl, r3
  4075ea:	d8fb      	bhi.n	4075e4 <__multiply+0x44>
  4075ec:	f106 0c14 	add.w	ip, r6, #20
  4075f0:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  4075f4:	f10b 0b14 	add.w	fp, fp, #20
  4075f8:	459c      	cmp	ip, r3
  4075fa:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  4075fe:	d24c      	bcs.n	40769a <__multiply+0xfa>
  407600:	f8cd a004 	str.w	sl, [sp, #4]
  407604:	469a      	mov	sl, r3
  407606:	f8dc 5000 	ldr.w	r5, [ip]
  40760a:	b2af      	uxth	r7, r5
  40760c:	b1ef      	cbz	r7, 40764a <__multiply+0xaa>
  40760e:	2100      	movs	r1, #0
  407610:	464d      	mov	r5, r9
  407612:	465e      	mov	r6, fp
  407614:	460c      	mov	r4, r1
  407616:	f856 2b04 	ldr.w	r2, [r6], #4
  40761a:	6828      	ldr	r0, [r5, #0]
  40761c:	b293      	uxth	r3, r2
  40761e:	b281      	uxth	r1, r0
  407620:	fb07 1303 	mla	r3, r7, r3, r1
  407624:	0c12      	lsrs	r2, r2, #16
  407626:	0c01      	lsrs	r1, r0, #16
  407628:	4423      	add	r3, r4
  40762a:	fb07 1102 	mla	r1, r7, r2, r1
  40762e:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  407632:	b29b      	uxth	r3, r3
  407634:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  407638:	45b6      	cmp	lr, r6
  40763a:	f845 3b04 	str.w	r3, [r5], #4
  40763e:	ea4f 4411 	mov.w	r4, r1, lsr #16
  407642:	d8e8      	bhi.n	407616 <__multiply+0x76>
  407644:	602c      	str	r4, [r5, #0]
  407646:	f8dc 5000 	ldr.w	r5, [ip]
  40764a:	0c2d      	lsrs	r5, r5, #16
  40764c:	d01d      	beq.n	40768a <__multiply+0xea>
  40764e:	f8d9 3000 	ldr.w	r3, [r9]
  407652:	4648      	mov	r0, r9
  407654:	461c      	mov	r4, r3
  407656:	4659      	mov	r1, fp
  407658:	2200      	movs	r2, #0
  40765a:	880e      	ldrh	r6, [r1, #0]
  40765c:	0c24      	lsrs	r4, r4, #16
  40765e:	fb05 4406 	mla	r4, r5, r6, r4
  407662:	4422      	add	r2, r4
  407664:	b29b      	uxth	r3, r3
  407666:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40766a:	f840 3b04 	str.w	r3, [r0], #4
  40766e:	f851 3b04 	ldr.w	r3, [r1], #4
  407672:	6804      	ldr	r4, [r0, #0]
  407674:	0c1b      	lsrs	r3, r3, #16
  407676:	b2a6      	uxth	r6, r4
  407678:	fb05 6303 	mla	r3, r5, r3, r6
  40767c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  407680:	458e      	cmp	lr, r1
  407682:	ea4f 4213 	mov.w	r2, r3, lsr #16
  407686:	d8e8      	bhi.n	40765a <__multiply+0xba>
  407688:	6003      	str	r3, [r0, #0]
  40768a:	f10c 0c04 	add.w	ip, ip, #4
  40768e:	45e2      	cmp	sl, ip
  407690:	f109 0904 	add.w	r9, r9, #4
  407694:	d8b7      	bhi.n	407606 <__multiply+0x66>
  407696:	f8dd a004 	ldr.w	sl, [sp, #4]
  40769a:	f1b8 0f00 	cmp.w	r8, #0
  40769e:	dd0b      	ble.n	4076b8 <__multiply+0x118>
  4076a0:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  4076a4:	f1aa 0a04 	sub.w	sl, sl, #4
  4076a8:	b11b      	cbz	r3, 4076b2 <__multiply+0x112>
  4076aa:	e005      	b.n	4076b8 <__multiply+0x118>
  4076ac:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  4076b0:	b913      	cbnz	r3, 4076b8 <__multiply+0x118>
  4076b2:	f1b8 0801 	subs.w	r8, r8, #1
  4076b6:	d1f9      	bne.n	4076ac <__multiply+0x10c>
  4076b8:	9800      	ldr	r0, [sp, #0]
  4076ba:	f8c0 8010 	str.w	r8, [r0, #16]
  4076be:	b003      	add	sp, #12
  4076c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004076c4 <__pow5mult>:
  4076c4:	f012 0303 	ands.w	r3, r2, #3
  4076c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4076cc:	4614      	mov	r4, r2
  4076ce:	4607      	mov	r7, r0
  4076d0:	d12e      	bne.n	407730 <__pow5mult+0x6c>
  4076d2:	460d      	mov	r5, r1
  4076d4:	10a4      	asrs	r4, r4, #2
  4076d6:	d01c      	beq.n	407712 <__pow5mult+0x4e>
  4076d8:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  4076da:	b396      	cbz	r6, 407742 <__pow5mult+0x7e>
  4076dc:	07e3      	lsls	r3, r4, #31
  4076de:	f04f 0800 	mov.w	r8, #0
  4076e2:	d406      	bmi.n	4076f2 <__pow5mult+0x2e>
  4076e4:	1064      	asrs	r4, r4, #1
  4076e6:	d014      	beq.n	407712 <__pow5mult+0x4e>
  4076e8:	6830      	ldr	r0, [r6, #0]
  4076ea:	b1a8      	cbz	r0, 407718 <__pow5mult+0x54>
  4076ec:	4606      	mov	r6, r0
  4076ee:	07e3      	lsls	r3, r4, #31
  4076f0:	d5f8      	bpl.n	4076e4 <__pow5mult+0x20>
  4076f2:	4632      	mov	r2, r6
  4076f4:	4629      	mov	r1, r5
  4076f6:	4638      	mov	r0, r7
  4076f8:	f7ff ff52 	bl	4075a0 <__multiply>
  4076fc:	b1b5      	cbz	r5, 40772c <__pow5mult+0x68>
  4076fe:	686a      	ldr	r2, [r5, #4]
  407700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  407702:	1064      	asrs	r4, r4, #1
  407704:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  407708:	6029      	str	r1, [r5, #0]
  40770a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40770e:	4605      	mov	r5, r0
  407710:	d1ea      	bne.n	4076e8 <__pow5mult+0x24>
  407712:	4628      	mov	r0, r5
  407714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407718:	4632      	mov	r2, r6
  40771a:	4631      	mov	r1, r6
  40771c:	4638      	mov	r0, r7
  40771e:	f7ff ff3f 	bl	4075a0 <__multiply>
  407722:	6030      	str	r0, [r6, #0]
  407724:	f8c0 8000 	str.w	r8, [r0]
  407728:	4606      	mov	r6, r0
  40772a:	e7e0      	b.n	4076ee <__pow5mult+0x2a>
  40772c:	4605      	mov	r5, r0
  40772e:	e7d9      	b.n	4076e4 <__pow5mult+0x20>
  407730:	1e5a      	subs	r2, r3, #1
  407732:	4d0b      	ldr	r5, [pc, #44]	; (407760 <__pow5mult+0x9c>)
  407734:	2300      	movs	r3, #0
  407736:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40773a:	f7ff fe97 	bl	40746c <__multadd>
  40773e:	4605      	mov	r5, r0
  407740:	e7c8      	b.n	4076d4 <__pow5mult+0x10>
  407742:	2101      	movs	r1, #1
  407744:	4638      	mov	r0, r7
  407746:	f7ff fe61 	bl	40740c <_Balloc>
  40774a:	f240 2171 	movw	r1, #625	; 0x271
  40774e:	2201      	movs	r2, #1
  407750:	2300      	movs	r3, #0
  407752:	6141      	str	r1, [r0, #20]
  407754:	6102      	str	r2, [r0, #16]
  407756:	4606      	mov	r6, r0
  407758:	64b8      	str	r0, [r7, #72]	; 0x48
  40775a:	6003      	str	r3, [r0, #0]
  40775c:	e7be      	b.n	4076dc <__pow5mult+0x18>
  40775e:	bf00      	nop
  407760:	00409900 	.word	0x00409900

00407764 <__lshift>:
  407764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407768:	4691      	mov	r9, r2
  40776a:	690a      	ldr	r2, [r1, #16]
  40776c:	688b      	ldr	r3, [r1, #8]
  40776e:	ea4f 1469 	mov.w	r4, r9, asr #5
  407772:	eb04 0802 	add.w	r8, r4, r2
  407776:	f108 0501 	add.w	r5, r8, #1
  40777a:	429d      	cmp	r5, r3
  40777c:	460e      	mov	r6, r1
  40777e:	4607      	mov	r7, r0
  407780:	6849      	ldr	r1, [r1, #4]
  407782:	dd04      	ble.n	40778e <__lshift+0x2a>
  407784:	005b      	lsls	r3, r3, #1
  407786:	429d      	cmp	r5, r3
  407788:	f101 0101 	add.w	r1, r1, #1
  40778c:	dcfa      	bgt.n	407784 <__lshift+0x20>
  40778e:	4638      	mov	r0, r7
  407790:	f7ff fe3c 	bl	40740c <_Balloc>
  407794:	2c00      	cmp	r4, #0
  407796:	f100 0314 	add.w	r3, r0, #20
  40779a:	dd06      	ble.n	4077aa <__lshift+0x46>
  40779c:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  4077a0:	2100      	movs	r1, #0
  4077a2:	f843 1b04 	str.w	r1, [r3], #4
  4077a6:	429a      	cmp	r2, r3
  4077a8:	d1fb      	bne.n	4077a2 <__lshift+0x3e>
  4077aa:	6934      	ldr	r4, [r6, #16]
  4077ac:	f106 0114 	add.w	r1, r6, #20
  4077b0:	f019 091f 	ands.w	r9, r9, #31
  4077b4:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  4077b8:	d01d      	beq.n	4077f6 <__lshift+0x92>
  4077ba:	f1c9 0c20 	rsb	ip, r9, #32
  4077be:	2200      	movs	r2, #0
  4077c0:	680c      	ldr	r4, [r1, #0]
  4077c2:	fa04 f409 	lsl.w	r4, r4, r9
  4077c6:	4314      	orrs	r4, r2
  4077c8:	f843 4b04 	str.w	r4, [r3], #4
  4077cc:	f851 2b04 	ldr.w	r2, [r1], #4
  4077d0:	458e      	cmp	lr, r1
  4077d2:	fa22 f20c 	lsr.w	r2, r2, ip
  4077d6:	d8f3      	bhi.n	4077c0 <__lshift+0x5c>
  4077d8:	601a      	str	r2, [r3, #0]
  4077da:	b10a      	cbz	r2, 4077e0 <__lshift+0x7c>
  4077dc:	f108 0502 	add.w	r5, r8, #2
  4077e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4077e2:	6872      	ldr	r2, [r6, #4]
  4077e4:	3d01      	subs	r5, #1
  4077e6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4077ea:	6105      	str	r5, [r0, #16]
  4077ec:	6031      	str	r1, [r6, #0]
  4077ee:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  4077f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4077f6:	3b04      	subs	r3, #4
  4077f8:	f851 2b04 	ldr.w	r2, [r1], #4
  4077fc:	f843 2f04 	str.w	r2, [r3, #4]!
  407800:	458e      	cmp	lr, r1
  407802:	d8f9      	bhi.n	4077f8 <__lshift+0x94>
  407804:	e7ec      	b.n	4077e0 <__lshift+0x7c>
  407806:	bf00      	nop

00407808 <__mcmp>:
  407808:	b430      	push	{r4, r5}
  40780a:	690b      	ldr	r3, [r1, #16]
  40780c:	4605      	mov	r5, r0
  40780e:	6900      	ldr	r0, [r0, #16]
  407810:	1ac0      	subs	r0, r0, r3
  407812:	d10f      	bne.n	407834 <__mcmp+0x2c>
  407814:	009b      	lsls	r3, r3, #2
  407816:	3514      	adds	r5, #20
  407818:	3114      	adds	r1, #20
  40781a:	4419      	add	r1, r3
  40781c:	442b      	add	r3, r5
  40781e:	e001      	b.n	407824 <__mcmp+0x1c>
  407820:	429d      	cmp	r5, r3
  407822:	d207      	bcs.n	407834 <__mcmp+0x2c>
  407824:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  407828:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40782c:	4294      	cmp	r4, r2
  40782e:	d0f7      	beq.n	407820 <__mcmp+0x18>
  407830:	d302      	bcc.n	407838 <__mcmp+0x30>
  407832:	2001      	movs	r0, #1
  407834:	bc30      	pop	{r4, r5}
  407836:	4770      	bx	lr
  407838:	f04f 30ff 	mov.w	r0, #4294967295
  40783c:	e7fa      	b.n	407834 <__mcmp+0x2c>
  40783e:	bf00      	nop

00407840 <__mdiff>:
  407840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407844:	690f      	ldr	r7, [r1, #16]
  407846:	460e      	mov	r6, r1
  407848:	6911      	ldr	r1, [r2, #16]
  40784a:	1a7f      	subs	r7, r7, r1
  40784c:	2f00      	cmp	r7, #0
  40784e:	4690      	mov	r8, r2
  407850:	d117      	bne.n	407882 <__mdiff+0x42>
  407852:	0089      	lsls	r1, r1, #2
  407854:	f106 0514 	add.w	r5, r6, #20
  407858:	f102 0e14 	add.w	lr, r2, #20
  40785c:	186b      	adds	r3, r5, r1
  40785e:	4471      	add	r1, lr
  407860:	e001      	b.n	407866 <__mdiff+0x26>
  407862:	429d      	cmp	r5, r3
  407864:	d25c      	bcs.n	407920 <__mdiff+0xe0>
  407866:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  40786a:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40786e:	42a2      	cmp	r2, r4
  407870:	d0f7      	beq.n	407862 <__mdiff+0x22>
  407872:	d25e      	bcs.n	407932 <__mdiff+0xf2>
  407874:	4633      	mov	r3, r6
  407876:	462c      	mov	r4, r5
  407878:	4646      	mov	r6, r8
  40787a:	4675      	mov	r5, lr
  40787c:	4698      	mov	r8, r3
  40787e:	2701      	movs	r7, #1
  407880:	e005      	b.n	40788e <__mdiff+0x4e>
  407882:	db58      	blt.n	407936 <__mdiff+0xf6>
  407884:	f106 0514 	add.w	r5, r6, #20
  407888:	f108 0414 	add.w	r4, r8, #20
  40788c:	2700      	movs	r7, #0
  40788e:	6871      	ldr	r1, [r6, #4]
  407890:	f7ff fdbc 	bl	40740c <_Balloc>
  407894:	f8d8 3010 	ldr.w	r3, [r8, #16]
  407898:	6936      	ldr	r6, [r6, #16]
  40789a:	60c7      	str	r7, [r0, #12]
  40789c:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  4078a0:	46a6      	mov	lr, r4
  4078a2:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  4078a6:	f100 0414 	add.w	r4, r0, #20
  4078aa:	2300      	movs	r3, #0
  4078ac:	f85e 1b04 	ldr.w	r1, [lr], #4
  4078b0:	f855 8b04 	ldr.w	r8, [r5], #4
  4078b4:	b28a      	uxth	r2, r1
  4078b6:	fa13 f388 	uxtah	r3, r3, r8
  4078ba:	0c09      	lsrs	r1, r1, #16
  4078bc:	1a9a      	subs	r2, r3, r2
  4078be:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  4078c2:	eb03 4322 	add.w	r3, r3, r2, asr #16
  4078c6:	b292      	uxth	r2, r2
  4078c8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4078cc:	45f4      	cmp	ip, lr
  4078ce:	f844 2b04 	str.w	r2, [r4], #4
  4078d2:	ea4f 4323 	mov.w	r3, r3, asr #16
  4078d6:	d8e9      	bhi.n	4078ac <__mdiff+0x6c>
  4078d8:	42af      	cmp	r7, r5
  4078da:	d917      	bls.n	40790c <__mdiff+0xcc>
  4078dc:	46a4      	mov	ip, r4
  4078de:	46ae      	mov	lr, r5
  4078e0:	f85e 2b04 	ldr.w	r2, [lr], #4
  4078e4:	fa13 f382 	uxtah	r3, r3, r2
  4078e8:	1419      	asrs	r1, r3, #16
  4078ea:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  4078ee:	b29b      	uxth	r3, r3
  4078f0:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  4078f4:	4577      	cmp	r7, lr
  4078f6:	f84c 2b04 	str.w	r2, [ip], #4
  4078fa:	ea4f 4321 	mov.w	r3, r1, asr #16
  4078fe:	d8ef      	bhi.n	4078e0 <__mdiff+0xa0>
  407900:	43ed      	mvns	r5, r5
  407902:	442f      	add	r7, r5
  407904:	f027 0703 	bic.w	r7, r7, #3
  407908:	3704      	adds	r7, #4
  40790a:	443c      	add	r4, r7
  40790c:	3c04      	subs	r4, #4
  40790e:	b922      	cbnz	r2, 40791a <__mdiff+0xda>
  407910:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  407914:	3e01      	subs	r6, #1
  407916:	2b00      	cmp	r3, #0
  407918:	d0fa      	beq.n	407910 <__mdiff+0xd0>
  40791a:	6106      	str	r6, [r0, #16]
  40791c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407920:	2100      	movs	r1, #0
  407922:	f7ff fd73 	bl	40740c <_Balloc>
  407926:	2201      	movs	r2, #1
  407928:	2300      	movs	r3, #0
  40792a:	6102      	str	r2, [r0, #16]
  40792c:	6143      	str	r3, [r0, #20]
  40792e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407932:	4674      	mov	r4, lr
  407934:	e7ab      	b.n	40788e <__mdiff+0x4e>
  407936:	4633      	mov	r3, r6
  407938:	f106 0414 	add.w	r4, r6, #20
  40793c:	f102 0514 	add.w	r5, r2, #20
  407940:	4616      	mov	r6, r2
  407942:	2701      	movs	r7, #1
  407944:	4698      	mov	r8, r3
  407946:	e7a2      	b.n	40788e <__mdiff+0x4e>

00407948 <__d2b>:
  407948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40794c:	b082      	sub	sp, #8
  40794e:	2101      	movs	r1, #1
  407950:	461c      	mov	r4, r3
  407952:	f3c3 570a 	ubfx	r7, r3, #20, #11
  407956:	4615      	mov	r5, r2
  407958:	9e08      	ldr	r6, [sp, #32]
  40795a:	f7ff fd57 	bl	40740c <_Balloc>
  40795e:	f3c4 0413 	ubfx	r4, r4, #0, #20
  407962:	4680      	mov	r8, r0
  407964:	b10f      	cbz	r7, 40796a <__d2b+0x22>
  407966:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40796a:	9401      	str	r4, [sp, #4]
  40796c:	b31d      	cbz	r5, 4079b6 <__d2b+0x6e>
  40796e:	a802      	add	r0, sp, #8
  407970:	f840 5d08 	str.w	r5, [r0, #-8]!
  407974:	f7ff fdda 	bl	40752c <__lo0bits>
  407978:	2800      	cmp	r0, #0
  40797a:	d134      	bne.n	4079e6 <__d2b+0x9e>
  40797c:	e89d 000c 	ldmia.w	sp, {r2, r3}
  407980:	f8c8 2014 	str.w	r2, [r8, #20]
  407984:	2b00      	cmp	r3, #0
  407986:	bf0c      	ite	eq
  407988:	2101      	moveq	r1, #1
  40798a:	2102      	movne	r1, #2
  40798c:	f8c8 3018 	str.w	r3, [r8, #24]
  407990:	f8c8 1010 	str.w	r1, [r8, #16]
  407994:	b9df      	cbnz	r7, 4079ce <__d2b+0x86>
  407996:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  40799a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40799e:	6030      	str	r0, [r6, #0]
  4079a0:	6918      	ldr	r0, [r3, #16]
  4079a2:	f7ff fda3 	bl	4074ec <__hi0bits>
  4079a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4079a8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  4079ac:	6018      	str	r0, [r3, #0]
  4079ae:	4640      	mov	r0, r8
  4079b0:	b002      	add	sp, #8
  4079b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4079b6:	a801      	add	r0, sp, #4
  4079b8:	f7ff fdb8 	bl	40752c <__lo0bits>
  4079bc:	9b01      	ldr	r3, [sp, #4]
  4079be:	f8c8 3014 	str.w	r3, [r8, #20]
  4079c2:	2101      	movs	r1, #1
  4079c4:	3020      	adds	r0, #32
  4079c6:	f8c8 1010 	str.w	r1, [r8, #16]
  4079ca:	2f00      	cmp	r7, #0
  4079cc:	d0e3      	beq.n	407996 <__d2b+0x4e>
  4079ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4079d0:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  4079d4:	4407      	add	r7, r0
  4079d6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  4079da:	6037      	str	r7, [r6, #0]
  4079dc:	6018      	str	r0, [r3, #0]
  4079de:	4640      	mov	r0, r8
  4079e0:	b002      	add	sp, #8
  4079e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4079e6:	e89d 000a 	ldmia.w	sp, {r1, r3}
  4079ea:	f1c0 0220 	rsb	r2, r0, #32
  4079ee:	fa03 f202 	lsl.w	r2, r3, r2
  4079f2:	430a      	orrs	r2, r1
  4079f4:	40c3      	lsrs	r3, r0
  4079f6:	9301      	str	r3, [sp, #4]
  4079f8:	f8c8 2014 	str.w	r2, [r8, #20]
  4079fc:	e7c2      	b.n	407984 <__d2b+0x3c>
  4079fe:	bf00      	nop

00407a00 <_realloc_r>:
  407a00:	2900      	cmp	r1, #0
  407a02:	f000 8095 	beq.w	407b30 <_realloc_r+0x130>
  407a06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407a0a:	460d      	mov	r5, r1
  407a0c:	4616      	mov	r6, r2
  407a0e:	b083      	sub	sp, #12
  407a10:	4680      	mov	r8, r0
  407a12:	f106 070b 	add.w	r7, r6, #11
  407a16:	f7fb fb0f 	bl	403038 <__malloc_lock>
  407a1a:	f855 ec04 	ldr.w	lr, [r5, #-4]
  407a1e:	2f16      	cmp	r7, #22
  407a20:	f02e 0403 	bic.w	r4, lr, #3
  407a24:	f1a5 0908 	sub.w	r9, r5, #8
  407a28:	d83c      	bhi.n	407aa4 <_realloc_r+0xa4>
  407a2a:	2210      	movs	r2, #16
  407a2c:	4617      	mov	r7, r2
  407a2e:	42be      	cmp	r6, r7
  407a30:	d83d      	bhi.n	407aae <_realloc_r+0xae>
  407a32:	4294      	cmp	r4, r2
  407a34:	da43      	bge.n	407abe <_realloc_r+0xbe>
  407a36:	4bc4      	ldr	r3, [pc, #784]	; (407d48 <_realloc_r+0x348>)
  407a38:	6899      	ldr	r1, [r3, #8]
  407a3a:	eb09 0004 	add.w	r0, r9, r4
  407a3e:	4288      	cmp	r0, r1
  407a40:	f000 80b4 	beq.w	407bac <_realloc_r+0x1ac>
  407a44:	6843      	ldr	r3, [r0, #4]
  407a46:	f023 0101 	bic.w	r1, r3, #1
  407a4a:	4401      	add	r1, r0
  407a4c:	6849      	ldr	r1, [r1, #4]
  407a4e:	07c9      	lsls	r1, r1, #31
  407a50:	d54c      	bpl.n	407aec <_realloc_r+0xec>
  407a52:	f01e 0f01 	tst.w	lr, #1
  407a56:	f000 809b 	beq.w	407b90 <_realloc_r+0x190>
  407a5a:	4631      	mov	r1, r6
  407a5c:	4640      	mov	r0, r8
  407a5e:	f7fa ffed 	bl	402a3c <_malloc_r>
  407a62:	4606      	mov	r6, r0
  407a64:	2800      	cmp	r0, #0
  407a66:	d03a      	beq.n	407ade <_realloc_r+0xde>
  407a68:	f855 3c04 	ldr.w	r3, [r5, #-4]
  407a6c:	f023 0301 	bic.w	r3, r3, #1
  407a70:	444b      	add	r3, r9
  407a72:	f1a0 0208 	sub.w	r2, r0, #8
  407a76:	429a      	cmp	r2, r3
  407a78:	f000 8121 	beq.w	407cbe <_realloc_r+0x2be>
  407a7c:	1f22      	subs	r2, r4, #4
  407a7e:	2a24      	cmp	r2, #36	; 0x24
  407a80:	f200 8107 	bhi.w	407c92 <_realloc_r+0x292>
  407a84:	2a13      	cmp	r2, #19
  407a86:	f200 80db 	bhi.w	407c40 <_realloc_r+0x240>
  407a8a:	4603      	mov	r3, r0
  407a8c:	462a      	mov	r2, r5
  407a8e:	6811      	ldr	r1, [r2, #0]
  407a90:	6019      	str	r1, [r3, #0]
  407a92:	6851      	ldr	r1, [r2, #4]
  407a94:	6059      	str	r1, [r3, #4]
  407a96:	6892      	ldr	r2, [r2, #8]
  407a98:	609a      	str	r2, [r3, #8]
  407a9a:	4629      	mov	r1, r5
  407a9c:	4640      	mov	r0, r8
  407a9e:	f7ff f827 	bl	406af0 <_free_r>
  407aa2:	e01c      	b.n	407ade <_realloc_r+0xde>
  407aa4:	f027 0707 	bic.w	r7, r7, #7
  407aa8:	2f00      	cmp	r7, #0
  407aaa:	463a      	mov	r2, r7
  407aac:	dabf      	bge.n	407a2e <_realloc_r+0x2e>
  407aae:	2600      	movs	r6, #0
  407ab0:	230c      	movs	r3, #12
  407ab2:	4630      	mov	r0, r6
  407ab4:	f8c8 3000 	str.w	r3, [r8]
  407ab8:	b003      	add	sp, #12
  407aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407abe:	462e      	mov	r6, r5
  407ac0:	1be3      	subs	r3, r4, r7
  407ac2:	2b0f      	cmp	r3, #15
  407ac4:	d81e      	bhi.n	407b04 <_realloc_r+0x104>
  407ac6:	f8d9 3004 	ldr.w	r3, [r9, #4]
  407aca:	f003 0301 	and.w	r3, r3, #1
  407ace:	4323      	orrs	r3, r4
  407ad0:	444c      	add	r4, r9
  407ad2:	f8c9 3004 	str.w	r3, [r9, #4]
  407ad6:	6863      	ldr	r3, [r4, #4]
  407ad8:	f043 0301 	orr.w	r3, r3, #1
  407adc:	6063      	str	r3, [r4, #4]
  407ade:	4640      	mov	r0, r8
  407ae0:	f7fb fab0 	bl	403044 <__malloc_unlock>
  407ae4:	4630      	mov	r0, r6
  407ae6:	b003      	add	sp, #12
  407ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407aec:	f023 0303 	bic.w	r3, r3, #3
  407af0:	18e1      	adds	r1, r4, r3
  407af2:	4291      	cmp	r1, r2
  407af4:	db1f      	blt.n	407b36 <_realloc_r+0x136>
  407af6:	68c3      	ldr	r3, [r0, #12]
  407af8:	6882      	ldr	r2, [r0, #8]
  407afa:	462e      	mov	r6, r5
  407afc:	60d3      	str	r3, [r2, #12]
  407afe:	460c      	mov	r4, r1
  407b00:	609a      	str	r2, [r3, #8]
  407b02:	e7dd      	b.n	407ac0 <_realloc_r+0xc0>
  407b04:	f8d9 2004 	ldr.w	r2, [r9, #4]
  407b08:	eb09 0107 	add.w	r1, r9, r7
  407b0c:	f002 0201 	and.w	r2, r2, #1
  407b10:	444c      	add	r4, r9
  407b12:	f043 0301 	orr.w	r3, r3, #1
  407b16:	4317      	orrs	r7, r2
  407b18:	f8c9 7004 	str.w	r7, [r9, #4]
  407b1c:	604b      	str	r3, [r1, #4]
  407b1e:	6863      	ldr	r3, [r4, #4]
  407b20:	f043 0301 	orr.w	r3, r3, #1
  407b24:	3108      	adds	r1, #8
  407b26:	6063      	str	r3, [r4, #4]
  407b28:	4640      	mov	r0, r8
  407b2a:	f7fe ffe1 	bl	406af0 <_free_r>
  407b2e:	e7d6      	b.n	407ade <_realloc_r+0xde>
  407b30:	4611      	mov	r1, r2
  407b32:	f7fa bf83 	b.w	402a3c <_malloc_r>
  407b36:	f01e 0f01 	tst.w	lr, #1
  407b3a:	d18e      	bne.n	407a5a <_realloc_r+0x5a>
  407b3c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  407b40:	eba9 0a01 	sub.w	sl, r9, r1
  407b44:	f8da 1004 	ldr.w	r1, [sl, #4]
  407b48:	f021 0103 	bic.w	r1, r1, #3
  407b4c:	440b      	add	r3, r1
  407b4e:	4423      	add	r3, r4
  407b50:	4293      	cmp	r3, r2
  407b52:	db25      	blt.n	407ba0 <_realloc_r+0x1a0>
  407b54:	68c2      	ldr	r2, [r0, #12]
  407b56:	6881      	ldr	r1, [r0, #8]
  407b58:	4656      	mov	r6, sl
  407b5a:	60ca      	str	r2, [r1, #12]
  407b5c:	6091      	str	r1, [r2, #8]
  407b5e:	f8da 100c 	ldr.w	r1, [sl, #12]
  407b62:	f856 0f08 	ldr.w	r0, [r6, #8]!
  407b66:	1f22      	subs	r2, r4, #4
  407b68:	2a24      	cmp	r2, #36	; 0x24
  407b6a:	60c1      	str	r1, [r0, #12]
  407b6c:	6088      	str	r0, [r1, #8]
  407b6e:	f200 8094 	bhi.w	407c9a <_realloc_r+0x29a>
  407b72:	2a13      	cmp	r2, #19
  407b74:	d96f      	bls.n	407c56 <_realloc_r+0x256>
  407b76:	6829      	ldr	r1, [r5, #0]
  407b78:	f8ca 1008 	str.w	r1, [sl, #8]
  407b7c:	6869      	ldr	r1, [r5, #4]
  407b7e:	f8ca 100c 	str.w	r1, [sl, #12]
  407b82:	2a1b      	cmp	r2, #27
  407b84:	f200 80a2 	bhi.w	407ccc <_realloc_r+0x2cc>
  407b88:	3508      	adds	r5, #8
  407b8a:	f10a 0210 	add.w	r2, sl, #16
  407b8e:	e063      	b.n	407c58 <_realloc_r+0x258>
  407b90:	f855 3c08 	ldr.w	r3, [r5, #-8]
  407b94:	eba9 0a03 	sub.w	sl, r9, r3
  407b98:	f8da 1004 	ldr.w	r1, [sl, #4]
  407b9c:	f021 0103 	bic.w	r1, r1, #3
  407ba0:	1863      	adds	r3, r4, r1
  407ba2:	4293      	cmp	r3, r2
  407ba4:	f6ff af59 	blt.w	407a5a <_realloc_r+0x5a>
  407ba8:	4656      	mov	r6, sl
  407baa:	e7d8      	b.n	407b5e <_realloc_r+0x15e>
  407bac:	6841      	ldr	r1, [r0, #4]
  407bae:	f021 0b03 	bic.w	fp, r1, #3
  407bb2:	44a3      	add	fp, r4
  407bb4:	f107 0010 	add.w	r0, r7, #16
  407bb8:	4583      	cmp	fp, r0
  407bba:	da56      	bge.n	407c6a <_realloc_r+0x26a>
  407bbc:	f01e 0f01 	tst.w	lr, #1
  407bc0:	f47f af4b 	bne.w	407a5a <_realloc_r+0x5a>
  407bc4:	f855 1c08 	ldr.w	r1, [r5, #-8]
  407bc8:	eba9 0a01 	sub.w	sl, r9, r1
  407bcc:	f8da 1004 	ldr.w	r1, [sl, #4]
  407bd0:	f021 0103 	bic.w	r1, r1, #3
  407bd4:	448b      	add	fp, r1
  407bd6:	4558      	cmp	r0, fp
  407bd8:	dce2      	bgt.n	407ba0 <_realloc_r+0x1a0>
  407bda:	4656      	mov	r6, sl
  407bdc:	f8da 100c 	ldr.w	r1, [sl, #12]
  407be0:	f856 0f08 	ldr.w	r0, [r6, #8]!
  407be4:	1f22      	subs	r2, r4, #4
  407be6:	2a24      	cmp	r2, #36	; 0x24
  407be8:	60c1      	str	r1, [r0, #12]
  407bea:	6088      	str	r0, [r1, #8]
  407bec:	f200 808f 	bhi.w	407d0e <_realloc_r+0x30e>
  407bf0:	2a13      	cmp	r2, #19
  407bf2:	f240 808a 	bls.w	407d0a <_realloc_r+0x30a>
  407bf6:	6829      	ldr	r1, [r5, #0]
  407bf8:	f8ca 1008 	str.w	r1, [sl, #8]
  407bfc:	6869      	ldr	r1, [r5, #4]
  407bfe:	f8ca 100c 	str.w	r1, [sl, #12]
  407c02:	2a1b      	cmp	r2, #27
  407c04:	f200 808a 	bhi.w	407d1c <_realloc_r+0x31c>
  407c08:	3508      	adds	r5, #8
  407c0a:	f10a 0210 	add.w	r2, sl, #16
  407c0e:	6829      	ldr	r1, [r5, #0]
  407c10:	6011      	str	r1, [r2, #0]
  407c12:	6869      	ldr	r1, [r5, #4]
  407c14:	6051      	str	r1, [r2, #4]
  407c16:	68a9      	ldr	r1, [r5, #8]
  407c18:	6091      	str	r1, [r2, #8]
  407c1a:	eb0a 0107 	add.w	r1, sl, r7
  407c1e:	ebab 0207 	sub.w	r2, fp, r7
  407c22:	f042 0201 	orr.w	r2, r2, #1
  407c26:	6099      	str	r1, [r3, #8]
  407c28:	604a      	str	r2, [r1, #4]
  407c2a:	f8da 3004 	ldr.w	r3, [sl, #4]
  407c2e:	f003 0301 	and.w	r3, r3, #1
  407c32:	431f      	orrs	r7, r3
  407c34:	4640      	mov	r0, r8
  407c36:	f8ca 7004 	str.w	r7, [sl, #4]
  407c3a:	f7fb fa03 	bl	403044 <__malloc_unlock>
  407c3e:	e751      	b.n	407ae4 <_realloc_r+0xe4>
  407c40:	682b      	ldr	r3, [r5, #0]
  407c42:	6003      	str	r3, [r0, #0]
  407c44:	686b      	ldr	r3, [r5, #4]
  407c46:	6043      	str	r3, [r0, #4]
  407c48:	2a1b      	cmp	r2, #27
  407c4a:	d82d      	bhi.n	407ca8 <_realloc_r+0x2a8>
  407c4c:	f100 0308 	add.w	r3, r0, #8
  407c50:	f105 0208 	add.w	r2, r5, #8
  407c54:	e71b      	b.n	407a8e <_realloc_r+0x8e>
  407c56:	4632      	mov	r2, r6
  407c58:	6829      	ldr	r1, [r5, #0]
  407c5a:	6011      	str	r1, [r2, #0]
  407c5c:	6869      	ldr	r1, [r5, #4]
  407c5e:	6051      	str	r1, [r2, #4]
  407c60:	68a9      	ldr	r1, [r5, #8]
  407c62:	6091      	str	r1, [r2, #8]
  407c64:	461c      	mov	r4, r3
  407c66:	46d1      	mov	r9, sl
  407c68:	e72a      	b.n	407ac0 <_realloc_r+0xc0>
  407c6a:	eb09 0107 	add.w	r1, r9, r7
  407c6e:	ebab 0b07 	sub.w	fp, fp, r7
  407c72:	f04b 0201 	orr.w	r2, fp, #1
  407c76:	6099      	str	r1, [r3, #8]
  407c78:	604a      	str	r2, [r1, #4]
  407c7a:	f855 3c04 	ldr.w	r3, [r5, #-4]
  407c7e:	f003 0301 	and.w	r3, r3, #1
  407c82:	431f      	orrs	r7, r3
  407c84:	4640      	mov	r0, r8
  407c86:	f845 7c04 	str.w	r7, [r5, #-4]
  407c8a:	f7fb f9db 	bl	403044 <__malloc_unlock>
  407c8e:	462e      	mov	r6, r5
  407c90:	e728      	b.n	407ae4 <_realloc_r+0xe4>
  407c92:	4629      	mov	r1, r5
  407c94:	f7ff fb56 	bl	407344 <memmove>
  407c98:	e6ff      	b.n	407a9a <_realloc_r+0x9a>
  407c9a:	4629      	mov	r1, r5
  407c9c:	4630      	mov	r0, r6
  407c9e:	461c      	mov	r4, r3
  407ca0:	46d1      	mov	r9, sl
  407ca2:	f7ff fb4f 	bl	407344 <memmove>
  407ca6:	e70b      	b.n	407ac0 <_realloc_r+0xc0>
  407ca8:	68ab      	ldr	r3, [r5, #8]
  407caa:	6083      	str	r3, [r0, #8]
  407cac:	68eb      	ldr	r3, [r5, #12]
  407cae:	60c3      	str	r3, [r0, #12]
  407cb0:	2a24      	cmp	r2, #36	; 0x24
  407cb2:	d017      	beq.n	407ce4 <_realloc_r+0x2e4>
  407cb4:	f100 0310 	add.w	r3, r0, #16
  407cb8:	f105 0210 	add.w	r2, r5, #16
  407cbc:	e6e7      	b.n	407a8e <_realloc_r+0x8e>
  407cbe:	f850 3c04 	ldr.w	r3, [r0, #-4]
  407cc2:	f023 0303 	bic.w	r3, r3, #3
  407cc6:	441c      	add	r4, r3
  407cc8:	462e      	mov	r6, r5
  407cca:	e6f9      	b.n	407ac0 <_realloc_r+0xc0>
  407ccc:	68a9      	ldr	r1, [r5, #8]
  407cce:	f8ca 1010 	str.w	r1, [sl, #16]
  407cd2:	68e9      	ldr	r1, [r5, #12]
  407cd4:	f8ca 1014 	str.w	r1, [sl, #20]
  407cd8:	2a24      	cmp	r2, #36	; 0x24
  407cda:	d00c      	beq.n	407cf6 <_realloc_r+0x2f6>
  407cdc:	3510      	adds	r5, #16
  407cde:	f10a 0218 	add.w	r2, sl, #24
  407ce2:	e7b9      	b.n	407c58 <_realloc_r+0x258>
  407ce4:	692b      	ldr	r3, [r5, #16]
  407ce6:	6103      	str	r3, [r0, #16]
  407ce8:	696b      	ldr	r3, [r5, #20]
  407cea:	6143      	str	r3, [r0, #20]
  407cec:	f105 0218 	add.w	r2, r5, #24
  407cf0:	f100 0318 	add.w	r3, r0, #24
  407cf4:	e6cb      	b.n	407a8e <_realloc_r+0x8e>
  407cf6:	692a      	ldr	r2, [r5, #16]
  407cf8:	f8ca 2018 	str.w	r2, [sl, #24]
  407cfc:	696a      	ldr	r2, [r5, #20]
  407cfe:	f8ca 201c 	str.w	r2, [sl, #28]
  407d02:	3518      	adds	r5, #24
  407d04:	f10a 0220 	add.w	r2, sl, #32
  407d08:	e7a6      	b.n	407c58 <_realloc_r+0x258>
  407d0a:	4632      	mov	r2, r6
  407d0c:	e77f      	b.n	407c0e <_realloc_r+0x20e>
  407d0e:	4629      	mov	r1, r5
  407d10:	4630      	mov	r0, r6
  407d12:	9301      	str	r3, [sp, #4]
  407d14:	f7ff fb16 	bl	407344 <memmove>
  407d18:	9b01      	ldr	r3, [sp, #4]
  407d1a:	e77e      	b.n	407c1a <_realloc_r+0x21a>
  407d1c:	68a9      	ldr	r1, [r5, #8]
  407d1e:	f8ca 1010 	str.w	r1, [sl, #16]
  407d22:	68e9      	ldr	r1, [r5, #12]
  407d24:	f8ca 1014 	str.w	r1, [sl, #20]
  407d28:	2a24      	cmp	r2, #36	; 0x24
  407d2a:	d003      	beq.n	407d34 <_realloc_r+0x334>
  407d2c:	3510      	adds	r5, #16
  407d2e:	f10a 0218 	add.w	r2, sl, #24
  407d32:	e76c      	b.n	407c0e <_realloc_r+0x20e>
  407d34:	692a      	ldr	r2, [r5, #16]
  407d36:	f8ca 2018 	str.w	r2, [sl, #24]
  407d3a:	696a      	ldr	r2, [r5, #20]
  407d3c:	f8ca 201c 	str.w	r2, [sl, #28]
  407d40:	3518      	adds	r5, #24
  407d42:	f10a 0220 	add.w	r2, sl, #32
  407d46:	e762      	b.n	407c0e <_realloc_r+0x20e>
  407d48:	20400440 	.word	0x20400440

00407d4c <__sread>:
  407d4c:	b510      	push	{r4, lr}
  407d4e:	460c      	mov	r4, r1
  407d50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407d54:	f000 faa4 	bl	4082a0 <_read_r>
  407d58:	2800      	cmp	r0, #0
  407d5a:	db03      	blt.n	407d64 <__sread+0x18>
  407d5c:	6d23      	ldr	r3, [r4, #80]	; 0x50
  407d5e:	4403      	add	r3, r0
  407d60:	6523      	str	r3, [r4, #80]	; 0x50
  407d62:	bd10      	pop	{r4, pc}
  407d64:	89a3      	ldrh	r3, [r4, #12]
  407d66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  407d6a:	81a3      	strh	r3, [r4, #12]
  407d6c:	bd10      	pop	{r4, pc}
  407d6e:	bf00      	nop

00407d70 <__swrite>:
  407d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407d74:	4616      	mov	r6, r2
  407d76:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  407d7a:	461f      	mov	r7, r3
  407d7c:	05d3      	lsls	r3, r2, #23
  407d7e:	460c      	mov	r4, r1
  407d80:	4605      	mov	r5, r0
  407d82:	d507      	bpl.n	407d94 <__swrite+0x24>
  407d84:	2200      	movs	r2, #0
  407d86:	2302      	movs	r3, #2
  407d88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407d8c:	f000 fa72 	bl	408274 <_lseek_r>
  407d90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407d94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  407d98:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  407d9c:	81a2      	strh	r2, [r4, #12]
  407d9e:	463b      	mov	r3, r7
  407da0:	4632      	mov	r2, r6
  407da2:	4628      	mov	r0, r5
  407da4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407da8:	f000 b922 	b.w	407ff0 <_write_r>

00407dac <__sseek>:
  407dac:	b510      	push	{r4, lr}
  407dae:	460c      	mov	r4, r1
  407db0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407db4:	f000 fa5e 	bl	408274 <_lseek_r>
  407db8:	89a3      	ldrh	r3, [r4, #12]
  407dba:	1c42      	adds	r2, r0, #1
  407dbc:	bf0e      	itee	eq
  407dbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  407dc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  407dc6:	6520      	strne	r0, [r4, #80]	; 0x50
  407dc8:	81a3      	strh	r3, [r4, #12]
  407dca:	bd10      	pop	{r4, pc}

00407dcc <__sclose>:
  407dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407dd0:	f000 b9b6 	b.w	408140 <_close_r>

00407dd4 <__ssprint_r>:
  407dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407dd8:	6893      	ldr	r3, [r2, #8]
  407dda:	b083      	sub	sp, #12
  407ddc:	4690      	mov	r8, r2
  407dde:	2b00      	cmp	r3, #0
  407de0:	d070      	beq.n	407ec4 <__ssprint_r+0xf0>
  407de2:	4682      	mov	sl, r0
  407de4:	460c      	mov	r4, r1
  407de6:	6817      	ldr	r7, [r2, #0]
  407de8:	688d      	ldr	r5, [r1, #8]
  407dea:	6808      	ldr	r0, [r1, #0]
  407dec:	e042      	b.n	407e74 <__ssprint_r+0xa0>
  407dee:	89a3      	ldrh	r3, [r4, #12]
  407df0:	f413 6f90 	tst.w	r3, #1152	; 0x480
  407df4:	d02e      	beq.n	407e54 <__ssprint_r+0x80>
  407df6:	6965      	ldr	r5, [r4, #20]
  407df8:	6921      	ldr	r1, [r4, #16]
  407dfa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  407dfe:	eba0 0b01 	sub.w	fp, r0, r1
  407e02:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  407e06:	f10b 0001 	add.w	r0, fp, #1
  407e0a:	106d      	asrs	r5, r5, #1
  407e0c:	4430      	add	r0, r6
  407e0e:	42a8      	cmp	r0, r5
  407e10:	462a      	mov	r2, r5
  407e12:	bf84      	itt	hi
  407e14:	4605      	movhi	r5, r0
  407e16:	462a      	movhi	r2, r5
  407e18:	055b      	lsls	r3, r3, #21
  407e1a:	d538      	bpl.n	407e8e <__ssprint_r+0xba>
  407e1c:	4611      	mov	r1, r2
  407e1e:	4650      	mov	r0, sl
  407e20:	f7fa fe0c 	bl	402a3c <_malloc_r>
  407e24:	2800      	cmp	r0, #0
  407e26:	d03c      	beq.n	407ea2 <__ssprint_r+0xce>
  407e28:	465a      	mov	r2, fp
  407e2a:	6921      	ldr	r1, [r4, #16]
  407e2c:	9001      	str	r0, [sp, #4]
  407e2e:	f7ff f9ef 	bl	407210 <memcpy>
  407e32:	89a2      	ldrh	r2, [r4, #12]
  407e34:	9b01      	ldr	r3, [sp, #4]
  407e36:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  407e3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  407e3e:	81a2      	strh	r2, [r4, #12]
  407e40:	eba5 020b 	sub.w	r2, r5, fp
  407e44:	eb03 000b 	add.w	r0, r3, fp
  407e48:	6165      	str	r5, [r4, #20]
  407e4a:	6123      	str	r3, [r4, #16]
  407e4c:	6020      	str	r0, [r4, #0]
  407e4e:	60a2      	str	r2, [r4, #8]
  407e50:	4635      	mov	r5, r6
  407e52:	46b3      	mov	fp, r6
  407e54:	465a      	mov	r2, fp
  407e56:	4649      	mov	r1, r9
  407e58:	f7ff fa74 	bl	407344 <memmove>
  407e5c:	f8d8 3008 	ldr.w	r3, [r8, #8]
  407e60:	68a2      	ldr	r2, [r4, #8]
  407e62:	6820      	ldr	r0, [r4, #0]
  407e64:	1b55      	subs	r5, r2, r5
  407e66:	4458      	add	r0, fp
  407e68:	1b9e      	subs	r6, r3, r6
  407e6a:	60a5      	str	r5, [r4, #8]
  407e6c:	6020      	str	r0, [r4, #0]
  407e6e:	f8c8 6008 	str.w	r6, [r8, #8]
  407e72:	b33e      	cbz	r6, 407ec4 <__ssprint_r+0xf0>
  407e74:	687e      	ldr	r6, [r7, #4]
  407e76:	463b      	mov	r3, r7
  407e78:	3708      	adds	r7, #8
  407e7a:	2e00      	cmp	r6, #0
  407e7c:	d0fa      	beq.n	407e74 <__ssprint_r+0xa0>
  407e7e:	42ae      	cmp	r6, r5
  407e80:	f8d3 9000 	ldr.w	r9, [r3]
  407e84:	46ab      	mov	fp, r5
  407e86:	d2b2      	bcs.n	407dee <__ssprint_r+0x1a>
  407e88:	4635      	mov	r5, r6
  407e8a:	46b3      	mov	fp, r6
  407e8c:	e7e2      	b.n	407e54 <__ssprint_r+0x80>
  407e8e:	4650      	mov	r0, sl
  407e90:	f7ff fdb6 	bl	407a00 <_realloc_r>
  407e94:	4603      	mov	r3, r0
  407e96:	2800      	cmp	r0, #0
  407e98:	d1d2      	bne.n	407e40 <__ssprint_r+0x6c>
  407e9a:	6921      	ldr	r1, [r4, #16]
  407e9c:	4650      	mov	r0, sl
  407e9e:	f7fe fe27 	bl	406af0 <_free_r>
  407ea2:	230c      	movs	r3, #12
  407ea4:	f8ca 3000 	str.w	r3, [sl]
  407ea8:	89a3      	ldrh	r3, [r4, #12]
  407eaa:	2200      	movs	r2, #0
  407eac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407eb0:	f04f 30ff 	mov.w	r0, #4294967295
  407eb4:	81a3      	strh	r3, [r4, #12]
  407eb6:	f8c8 2008 	str.w	r2, [r8, #8]
  407eba:	f8c8 2004 	str.w	r2, [r8, #4]
  407ebe:	b003      	add	sp, #12
  407ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407ec4:	2000      	movs	r0, #0
  407ec6:	f8c8 0004 	str.w	r0, [r8, #4]
  407eca:	b003      	add	sp, #12
  407ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00407ed0 <__swbuf_r>:
  407ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407ed2:	460d      	mov	r5, r1
  407ed4:	4614      	mov	r4, r2
  407ed6:	4606      	mov	r6, r0
  407ed8:	b110      	cbz	r0, 407ee0 <__swbuf_r+0x10>
  407eda:	6b83      	ldr	r3, [r0, #56]	; 0x38
  407edc:	2b00      	cmp	r3, #0
  407ede:	d04b      	beq.n	407f78 <__swbuf_r+0xa8>
  407ee0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407ee4:	69a3      	ldr	r3, [r4, #24]
  407ee6:	60a3      	str	r3, [r4, #8]
  407ee8:	b291      	uxth	r1, r2
  407eea:	0708      	lsls	r0, r1, #28
  407eec:	d539      	bpl.n	407f62 <__swbuf_r+0x92>
  407eee:	6923      	ldr	r3, [r4, #16]
  407ef0:	2b00      	cmp	r3, #0
  407ef2:	d036      	beq.n	407f62 <__swbuf_r+0x92>
  407ef4:	b2ed      	uxtb	r5, r5
  407ef6:	0489      	lsls	r1, r1, #18
  407ef8:	462f      	mov	r7, r5
  407efa:	d515      	bpl.n	407f28 <__swbuf_r+0x58>
  407efc:	6822      	ldr	r2, [r4, #0]
  407efe:	6961      	ldr	r1, [r4, #20]
  407f00:	1ad3      	subs	r3, r2, r3
  407f02:	428b      	cmp	r3, r1
  407f04:	da1c      	bge.n	407f40 <__swbuf_r+0x70>
  407f06:	3301      	adds	r3, #1
  407f08:	68a1      	ldr	r1, [r4, #8]
  407f0a:	1c50      	adds	r0, r2, #1
  407f0c:	3901      	subs	r1, #1
  407f0e:	60a1      	str	r1, [r4, #8]
  407f10:	6020      	str	r0, [r4, #0]
  407f12:	7015      	strb	r5, [r2, #0]
  407f14:	6962      	ldr	r2, [r4, #20]
  407f16:	429a      	cmp	r2, r3
  407f18:	d01a      	beq.n	407f50 <__swbuf_r+0x80>
  407f1a:	89a3      	ldrh	r3, [r4, #12]
  407f1c:	07db      	lsls	r3, r3, #31
  407f1e:	d501      	bpl.n	407f24 <__swbuf_r+0x54>
  407f20:	2d0a      	cmp	r5, #10
  407f22:	d015      	beq.n	407f50 <__swbuf_r+0x80>
  407f24:	4638      	mov	r0, r7
  407f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407f28:	6e61      	ldr	r1, [r4, #100]	; 0x64
  407f2a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  407f2e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  407f32:	81a2      	strh	r2, [r4, #12]
  407f34:	6822      	ldr	r2, [r4, #0]
  407f36:	6661      	str	r1, [r4, #100]	; 0x64
  407f38:	6961      	ldr	r1, [r4, #20]
  407f3a:	1ad3      	subs	r3, r2, r3
  407f3c:	428b      	cmp	r3, r1
  407f3e:	dbe2      	blt.n	407f06 <__swbuf_r+0x36>
  407f40:	4621      	mov	r1, r4
  407f42:	4630      	mov	r0, r6
  407f44:	f7fe fc56 	bl	4067f4 <_fflush_r>
  407f48:	b940      	cbnz	r0, 407f5c <__swbuf_r+0x8c>
  407f4a:	6822      	ldr	r2, [r4, #0]
  407f4c:	2301      	movs	r3, #1
  407f4e:	e7db      	b.n	407f08 <__swbuf_r+0x38>
  407f50:	4621      	mov	r1, r4
  407f52:	4630      	mov	r0, r6
  407f54:	f7fe fc4e 	bl	4067f4 <_fflush_r>
  407f58:	2800      	cmp	r0, #0
  407f5a:	d0e3      	beq.n	407f24 <__swbuf_r+0x54>
  407f5c:	f04f 37ff 	mov.w	r7, #4294967295
  407f60:	e7e0      	b.n	407f24 <__swbuf_r+0x54>
  407f62:	4621      	mov	r1, r4
  407f64:	4630      	mov	r0, r6
  407f66:	f7fd fb71 	bl	40564c <__swsetup_r>
  407f6a:	2800      	cmp	r0, #0
  407f6c:	d1f6      	bne.n	407f5c <__swbuf_r+0x8c>
  407f6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407f72:	6923      	ldr	r3, [r4, #16]
  407f74:	b291      	uxth	r1, r2
  407f76:	e7bd      	b.n	407ef4 <__swbuf_r+0x24>
  407f78:	f7fe fc94 	bl	4068a4 <__sinit>
  407f7c:	e7b0      	b.n	407ee0 <__swbuf_r+0x10>
  407f7e:	bf00      	nop

00407f80 <_wcrtomb_r>:
  407f80:	b5f0      	push	{r4, r5, r6, r7, lr}
  407f82:	4606      	mov	r6, r0
  407f84:	b085      	sub	sp, #20
  407f86:	461f      	mov	r7, r3
  407f88:	b189      	cbz	r1, 407fae <_wcrtomb_r+0x2e>
  407f8a:	4c10      	ldr	r4, [pc, #64]	; (407fcc <_wcrtomb_r+0x4c>)
  407f8c:	4d10      	ldr	r5, [pc, #64]	; (407fd0 <_wcrtomb_r+0x50>)
  407f8e:	6824      	ldr	r4, [r4, #0]
  407f90:	6b64      	ldr	r4, [r4, #52]	; 0x34
  407f92:	2c00      	cmp	r4, #0
  407f94:	bf08      	it	eq
  407f96:	462c      	moveq	r4, r5
  407f98:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  407f9c:	47a0      	blx	r4
  407f9e:	1c43      	adds	r3, r0, #1
  407fa0:	d103      	bne.n	407faa <_wcrtomb_r+0x2a>
  407fa2:	2200      	movs	r2, #0
  407fa4:	238a      	movs	r3, #138	; 0x8a
  407fa6:	603a      	str	r2, [r7, #0]
  407fa8:	6033      	str	r3, [r6, #0]
  407faa:	b005      	add	sp, #20
  407fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407fae:	460c      	mov	r4, r1
  407fb0:	4906      	ldr	r1, [pc, #24]	; (407fcc <_wcrtomb_r+0x4c>)
  407fb2:	4a07      	ldr	r2, [pc, #28]	; (407fd0 <_wcrtomb_r+0x50>)
  407fb4:	6809      	ldr	r1, [r1, #0]
  407fb6:	6b49      	ldr	r1, [r1, #52]	; 0x34
  407fb8:	2900      	cmp	r1, #0
  407fba:	bf08      	it	eq
  407fbc:	4611      	moveq	r1, r2
  407fbe:	4622      	mov	r2, r4
  407fc0:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  407fc4:	a901      	add	r1, sp, #4
  407fc6:	47a0      	blx	r4
  407fc8:	e7e9      	b.n	407f9e <_wcrtomb_r+0x1e>
  407fca:	bf00      	nop
  407fcc:	20400014 	.word	0x20400014
  407fd0:	20400854 	.word	0x20400854

00407fd4 <__ascii_wctomb>:
  407fd4:	b121      	cbz	r1, 407fe0 <__ascii_wctomb+0xc>
  407fd6:	2aff      	cmp	r2, #255	; 0xff
  407fd8:	d804      	bhi.n	407fe4 <__ascii_wctomb+0x10>
  407fda:	700a      	strb	r2, [r1, #0]
  407fdc:	2001      	movs	r0, #1
  407fde:	4770      	bx	lr
  407fe0:	4608      	mov	r0, r1
  407fe2:	4770      	bx	lr
  407fe4:	238a      	movs	r3, #138	; 0x8a
  407fe6:	6003      	str	r3, [r0, #0]
  407fe8:	f04f 30ff 	mov.w	r0, #4294967295
  407fec:	4770      	bx	lr
  407fee:	bf00      	nop

00407ff0 <_write_r>:
  407ff0:	b570      	push	{r4, r5, r6, lr}
  407ff2:	460d      	mov	r5, r1
  407ff4:	4c08      	ldr	r4, [pc, #32]	; (408018 <_write_r+0x28>)
  407ff6:	4611      	mov	r1, r2
  407ff8:	4606      	mov	r6, r0
  407ffa:	461a      	mov	r2, r3
  407ffc:	4628      	mov	r0, r5
  407ffe:	2300      	movs	r3, #0
  408000:	6023      	str	r3, [r4, #0]
  408002:	f7f8 fcaf 	bl	400964 <_write>
  408006:	1c43      	adds	r3, r0, #1
  408008:	d000      	beq.n	40800c <_write_r+0x1c>
  40800a:	bd70      	pop	{r4, r5, r6, pc}
  40800c:	6823      	ldr	r3, [r4, #0]
  40800e:	2b00      	cmp	r3, #0
  408010:	d0fb      	beq.n	40800a <_write_r+0x1a>
  408012:	6033      	str	r3, [r6, #0]
  408014:	bd70      	pop	{r4, r5, r6, pc}
  408016:	bf00      	nop
  408018:	20400ea0 	.word	0x20400ea0

0040801c <__register_exitproc>:
  40801c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  408020:	4d2c      	ldr	r5, [pc, #176]	; (4080d4 <__register_exitproc+0xb8>)
  408022:	4606      	mov	r6, r0
  408024:	6828      	ldr	r0, [r5, #0]
  408026:	4698      	mov	r8, r3
  408028:	460f      	mov	r7, r1
  40802a:	4691      	mov	r9, r2
  40802c:	f7ff f808 	bl	407040 <__retarget_lock_acquire_recursive>
  408030:	4b29      	ldr	r3, [pc, #164]	; (4080d8 <__register_exitproc+0xbc>)
  408032:	681c      	ldr	r4, [r3, #0]
  408034:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  408038:	2b00      	cmp	r3, #0
  40803a:	d03e      	beq.n	4080ba <__register_exitproc+0x9e>
  40803c:	685a      	ldr	r2, [r3, #4]
  40803e:	2a1f      	cmp	r2, #31
  408040:	dc1c      	bgt.n	40807c <__register_exitproc+0x60>
  408042:	f102 0e01 	add.w	lr, r2, #1
  408046:	b176      	cbz	r6, 408066 <__register_exitproc+0x4a>
  408048:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  40804c:	2401      	movs	r4, #1
  40804e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  408052:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  408056:	4094      	lsls	r4, r2
  408058:	4320      	orrs	r0, r4
  40805a:	2e02      	cmp	r6, #2
  40805c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  408060:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  408064:	d023      	beq.n	4080ae <__register_exitproc+0x92>
  408066:	3202      	adds	r2, #2
  408068:	f8c3 e004 	str.w	lr, [r3, #4]
  40806c:	6828      	ldr	r0, [r5, #0]
  40806e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  408072:	f7fe ffe7 	bl	407044 <__retarget_lock_release_recursive>
  408076:	2000      	movs	r0, #0
  408078:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40807c:	4b17      	ldr	r3, [pc, #92]	; (4080dc <__register_exitproc+0xc0>)
  40807e:	b30b      	cbz	r3, 4080c4 <__register_exitproc+0xa8>
  408080:	f44f 70c8 	mov.w	r0, #400	; 0x190
  408084:	f7fa fcd2 	bl	402a2c <malloc>
  408088:	4603      	mov	r3, r0
  40808a:	b1d8      	cbz	r0, 4080c4 <__register_exitproc+0xa8>
  40808c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  408090:	6002      	str	r2, [r0, #0]
  408092:	2100      	movs	r1, #0
  408094:	6041      	str	r1, [r0, #4]
  408096:	460a      	mov	r2, r1
  408098:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  40809c:	f04f 0e01 	mov.w	lr, #1
  4080a0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4080a4:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4080a8:	2e00      	cmp	r6, #0
  4080aa:	d0dc      	beq.n	408066 <__register_exitproc+0x4a>
  4080ac:	e7cc      	b.n	408048 <__register_exitproc+0x2c>
  4080ae:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4080b2:	430c      	orrs	r4, r1
  4080b4:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4080b8:	e7d5      	b.n	408066 <__register_exitproc+0x4a>
  4080ba:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4080be:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4080c2:	e7bb      	b.n	40803c <__register_exitproc+0x20>
  4080c4:	6828      	ldr	r0, [r5, #0]
  4080c6:	f7fe ffbd 	bl	407044 <__retarget_lock_release_recursive>
  4080ca:	f04f 30ff 	mov.w	r0, #4294967295
  4080ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4080d2:	bf00      	nop
  4080d4:	20400850 	.word	0x20400850
  4080d8:	0040976c 	.word	0x0040976c
  4080dc:	00402a2d 	.word	0x00402a2d

004080e0 <_calloc_r>:
  4080e0:	b510      	push	{r4, lr}
  4080e2:	fb02 f101 	mul.w	r1, r2, r1
  4080e6:	f7fa fca9 	bl	402a3c <_malloc_r>
  4080ea:	4604      	mov	r4, r0
  4080ec:	b1d8      	cbz	r0, 408126 <_calloc_r+0x46>
  4080ee:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4080f2:	f022 0203 	bic.w	r2, r2, #3
  4080f6:	3a04      	subs	r2, #4
  4080f8:	2a24      	cmp	r2, #36	; 0x24
  4080fa:	d818      	bhi.n	40812e <_calloc_r+0x4e>
  4080fc:	2a13      	cmp	r2, #19
  4080fe:	d914      	bls.n	40812a <_calloc_r+0x4a>
  408100:	2300      	movs	r3, #0
  408102:	2a1b      	cmp	r2, #27
  408104:	6003      	str	r3, [r0, #0]
  408106:	6043      	str	r3, [r0, #4]
  408108:	d916      	bls.n	408138 <_calloc_r+0x58>
  40810a:	2a24      	cmp	r2, #36	; 0x24
  40810c:	6083      	str	r3, [r0, #8]
  40810e:	60c3      	str	r3, [r0, #12]
  408110:	bf11      	iteee	ne
  408112:	f100 0210 	addne.w	r2, r0, #16
  408116:	6103      	streq	r3, [r0, #16]
  408118:	6143      	streq	r3, [r0, #20]
  40811a:	f100 0218 	addeq.w	r2, r0, #24
  40811e:	2300      	movs	r3, #0
  408120:	6013      	str	r3, [r2, #0]
  408122:	6053      	str	r3, [r2, #4]
  408124:	6093      	str	r3, [r2, #8]
  408126:	4620      	mov	r0, r4
  408128:	bd10      	pop	{r4, pc}
  40812a:	4602      	mov	r2, r0
  40812c:	e7f7      	b.n	40811e <_calloc_r+0x3e>
  40812e:	2100      	movs	r1, #0
  408130:	f7fa ff34 	bl	402f9c <memset>
  408134:	4620      	mov	r0, r4
  408136:	bd10      	pop	{r4, pc}
  408138:	f100 0208 	add.w	r2, r0, #8
  40813c:	e7ef      	b.n	40811e <_calloc_r+0x3e>
  40813e:	bf00      	nop

00408140 <_close_r>:
  408140:	b538      	push	{r3, r4, r5, lr}
  408142:	4c07      	ldr	r4, [pc, #28]	; (408160 <_close_r+0x20>)
  408144:	2300      	movs	r3, #0
  408146:	4605      	mov	r5, r0
  408148:	4608      	mov	r0, r1
  40814a:	6023      	str	r3, [r4, #0]
  40814c:	f7fa f800 	bl	402150 <_close>
  408150:	1c43      	adds	r3, r0, #1
  408152:	d000      	beq.n	408156 <_close_r+0x16>
  408154:	bd38      	pop	{r3, r4, r5, pc}
  408156:	6823      	ldr	r3, [r4, #0]
  408158:	2b00      	cmp	r3, #0
  40815a:	d0fb      	beq.n	408154 <_close_r+0x14>
  40815c:	602b      	str	r3, [r5, #0]
  40815e:	bd38      	pop	{r3, r4, r5, pc}
  408160:	20400ea0 	.word	0x20400ea0

00408164 <_fclose_r>:
  408164:	b570      	push	{r4, r5, r6, lr}
  408166:	b159      	cbz	r1, 408180 <_fclose_r+0x1c>
  408168:	4605      	mov	r5, r0
  40816a:	460c      	mov	r4, r1
  40816c:	b110      	cbz	r0, 408174 <_fclose_r+0x10>
  40816e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408170:	2b00      	cmp	r3, #0
  408172:	d03c      	beq.n	4081ee <_fclose_r+0x8a>
  408174:	6e63      	ldr	r3, [r4, #100]	; 0x64
  408176:	07d8      	lsls	r0, r3, #31
  408178:	d505      	bpl.n	408186 <_fclose_r+0x22>
  40817a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40817e:	b92b      	cbnz	r3, 40818c <_fclose_r+0x28>
  408180:	2600      	movs	r6, #0
  408182:	4630      	mov	r0, r6
  408184:	bd70      	pop	{r4, r5, r6, pc}
  408186:	89a3      	ldrh	r3, [r4, #12]
  408188:	0599      	lsls	r1, r3, #22
  40818a:	d53c      	bpl.n	408206 <_fclose_r+0xa2>
  40818c:	4621      	mov	r1, r4
  40818e:	4628      	mov	r0, r5
  408190:	f7fe fa90 	bl	4066b4 <__sflush_r>
  408194:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  408196:	4606      	mov	r6, r0
  408198:	b133      	cbz	r3, 4081a8 <_fclose_r+0x44>
  40819a:	69e1      	ldr	r1, [r4, #28]
  40819c:	4628      	mov	r0, r5
  40819e:	4798      	blx	r3
  4081a0:	2800      	cmp	r0, #0
  4081a2:	bfb8      	it	lt
  4081a4:	f04f 36ff 	movlt.w	r6, #4294967295
  4081a8:	89a3      	ldrh	r3, [r4, #12]
  4081aa:	061a      	lsls	r2, r3, #24
  4081ac:	d422      	bmi.n	4081f4 <_fclose_r+0x90>
  4081ae:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4081b0:	b141      	cbz	r1, 4081c4 <_fclose_r+0x60>
  4081b2:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4081b6:	4299      	cmp	r1, r3
  4081b8:	d002      	beq.n	4081c0 <_fclose_r+0x5c>
  4081ba:	4628      	mov	r0, r5
  4081bc:	f7fe fc98 	bl	406af0 <_free_r>
  4081c0:	2300      	movs	r3, #0
  4081c2:	6323      	str	r3, [r4, #48]	; 0x30
  4081c4:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4081c6:	b121      	cbz	r1, 4081d2 <_fclose_r+0x6e>
  4081c8:	4628      	mov	r0, r5
  4081ca:	f7fe fc91 	bl	406af0 <_free_r>
  4081ce:	2300      	movs	r3, #0
  4081d0:	6463      	str	r3, [r4, #68]	; 0x44
  4081d2:	f7fe fb93 	bl	4068fc <__sfp_lock_acquire>
  4081d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4081d8:	2200      	movs	r2, #0
  4081da:	07db      	lsls	r3, r3, #31
  4081dc:	81a2      	strh	r2, [r4, #12]
  4081de:	d50e      	bpl.n	4081fe <_fclose_r+0x9a>
  4081e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4081e2:	f7fe ff2b 	bl	40703c <__retarget_lock_close_recursive>
  4081e6:	f7fe fb8f 	bl	406908 <__sfp_lock_release>
  4081ea:	4630      	mov	r0, r6
  4081ec:	bd70      	pop	{r4, r5, r6, pc}
  4081ee:	f7fe fb59 	bl	4068a4 <__sinit>
  4081f2:	e7bf      	b.n	408174 <_fclose_r+0x10>
  4081f4:	6921      	ldr	r1, [r4, #16]
  4081f6:	4628      	mov	r0, r5
  4081f8:	f7fe fc7a 	bl	406af0 <_free_r>
  4081fc:	e7d7      	b.n	4081ae <_fclose_r+0x4a>
  4081fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408200:	f7fe ff20 	bl	407044 <__retarget_lock_release_recursive>
  408204:	e7ec      	b.n	4081e0 <_fclose_r+0x7c>
  408206:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408208:	f7fe ff1a 	bl	407040 <__retarget_lock_acquire_recursive>
  40820c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408210:	2b00      	cmp	r3, #0
  408212:	d1bb      	bne.n	40818c <_fclose_r+0x28>
  408214:	6e66      	ldr	r6, [r4, #100]	; 0x64
  408216:	f016 0601 	ands.w	r6, r6, #1
  40821a:	d1b1      	bne.n	408180 <_fclose_r+0x1c>
  40821c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40821e:	f7fe ff11 	bl	407044 <__retarget_lock_release_recursive>
  408222:	4630      	mov	r0, r6
  408224:	bd70      	pop	{r4, r5, r6, pc}
  408226:	bf00      	nop

00408228 <_fstat_r>:
  408228:	b538      	push	{r3, r4, r5, lr}
  40822a:	460b      	mov	r3, r1
  40822c:	4c07      	ldr	r4, [pc, #28]	; (40824c <_fstat_r+0x24>)
  40822e:	4605      	mov	r5, r0
  408230:	4611      	mov	r1, r2
  408232:	4618      	mov	r0, r3
  408234:	2300      	movs	r3, #0
  408236:	6023      	str	r3, [r4, #0]
  408238:	f7f9 ff8d 	bl	402156 <_fstat>
  40823c:	1c43      	adds	r3, r0, #1
  40823e:	d000      	beq.n	408242 <_fstat_r+0x1a>
  408240:	bd38      	pop	{r3, r4, r5, pc}
  408242:	6823      	ldr	r3, [r4, #0]
  408244:	2b00      	cmp	r3, #0
  408246:	d0fb      	beq.n	408240 <_fstat_r+0x18>
  408248:	602b      	str	r3, [r5, #0]
  40824a:	bd38      	pop	{r3, r4, r5, pc}
  40824c:	20400ea0 	.word	0x20400ea0

00408250 <_isatty_r>:
  408250:	b538      	push	{r3, r4, r5, lr}
  408252:	4c07      	ldr	r4, [pc, #28]	; (408270 <_isatty_r+0x20>)
  408254:	2300      	movs	r3, #0
  408256:	4605      	mov	r5, r0
  408258:	4608      	mov	r0, r1
  40825a:	6023      	str	r3, [r4, #0]
  40825c:	f7f9 ff80 	bl	402160 <_isatty>
  408260:	1c43      	adds	r3, r0, #1
  408262:	d000      	beq.n	408266 <_isatty_r+0x16>
  408264:	bd38      	pop	{r3, r4, r5, pc}
  408266:	6823      	ldr	r3, [r4, #0]
  408268:	2b00      	cmp	r3, #0
  40826a:	d0fb      	beq.n	408264 <_isatty_r+0x14>
  40826c:	602b      	str	r3, [r5, #0]
  40826e:	bd38      	pop	{r3, r4, r5, pc}
  408270:	20400ea0 	.word	0x20400ea0

00408274 <_lseek_r>:
  408274:	b570      	push	{r4, r5, r6, lr}
  408276:	460d      	mov	r5, r1
  408278:	4c08      	ldr	r4, [pc, #32]	; (40829c <_lseek_r+0x28>)
  40827a:	4611      	mov	r1, r2
  40827c:	4606      	mov	r6, r0
  40827e:	461a      	mov	r2, r3
  408280:	4628      	mov	r0, r5
  408282:	2300      	movs	r3, #0
  408284:	6023      	str	r3, [r4, #0]
  408286:	f7f9 ff6d 	bl	402164 <_lseek>
  40828a:	1c43      	adds	r3, r0, #1
  40828c:	d000      	beq.n	408290 <_lseek_r+0x1c>
  40828e:	bd70      	pop	{r4, r5, r6, pc}
  408290:	6823      	ldr	r3, [r4, #0]
  408292:	2b00      	cmp	r3, #0
  408294:	d0fb      	beq.n	40828e <_lseek_r+0x1a>
  408296:	6033      	str	r3, [r6, #0]
  408298:	bd70      	pop	{r4, r5, r6, pc}
  40829a:	bf00      	nop
  40829c:	20400ea0 	.word	0x20400ea0

004082a0 <_read_r>:
  4082a0:	b570      	push	{r4, r5, r6, lr}
  4082a2:	460d      	mov	r5, r1
  4082a4:	4c08      	ldr	r4, [pc, #32]	; (4082c8 <_read_r+0x28>)
  4082a6:	4611      	mov	r1, r2
  4082a8:	4606      	mov	r6, r0
  4082aa:	461a      	mov	r2, r3
  4082ac:	4628      	mov	r0, r5
  4082ae:	2300      	movs	r3, #0
  4082b0:	6023      	str	r3, [r4, #0]
  4082b2:	f7f8 fb39 	bl	400928 <_read>
  4082b6:	1c43      	adds	r3, r0, #1
  4082b8:	d000      	beq.n	4082bc <_read_r+0x1c>
  4082ba:	bd70      	pop	{r4, r5, r6, pc}
  4082bc:	6823      	ldr	r3, [r4, #0]
  4082be:	2b00      	cmp	r3, #0
  4082c0:	d0fb      	beq.n	4082ba <_read_r+0x1a>
  4082c2:	6033      	str	r3, [r6, #0]
  4082c4:	bd70      	pop	{r4, r5, r6, pc}
  4082c6:	bf00      	nop
  4082c8:	20400ea0 	.word	0x20400ea0

004082cc <__aeabi_drsub>:
  4082cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  4082d0:	e002      	b.n	4082d8 <__adddf3>
  4082d2:	bf00      	nop

004082d4 <__aeabi_dsub>:
  4082d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004082d8 <__adddf3>:
  4082d8:	b530      	push	{r4, r5, lr}
  4082da:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4082de:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4082e2:	ea94 0f05 	teq	r4, r5
  4082e6:	bf08      	it	eq
  4082e8:	ea90 0f02 	teqeq	r0, r2
  4082ec:	bf1f      	itttt	ne
  4082ee:	ea54 0c00 	orrsne.w	ip, r4, r0
  4082f2:	ea55 0c02 	orrsne.w	ip, r5, r2
  4082f6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4082fa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4082fe:	f000 80e2 	beq.w	4084c6 <__adddf3+0x1ee>
  408302:	ea4f 5454 	mov.w	r4, r4, lsr #21
  408306:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40830a:	bfb8      	it	lt
  40830c:	426d      	neglt	r5, r5
  40830e:	dd0c      	ble.n	40832a <__adddf3+0x52>
  408310:	442c      	add	r4, r5
  408312:	ea80 0202 	eor.w	r2, r0, r2
  408316:	ea81 0303 	eor.w	r3, r1, r3
  40831a:	ea82 0000 	eor.w	r0, r2, r0
  40831e:	ea83 0101 	eor.w	r1, r3, r1
  408322:	ea80 0202 	eor.w	r2, r0, r2
  408326:	ea81 0303 	eor.w	r3, r1, r3
  40832a:	2d36      	cmp	r5, #54	; 0x36
  40832c:	bf88      	it	hi
  40832e:	bd30      	pophi	{r4, r5, pc}
  408330:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  408334:	ea4f 3101 	mov.w	r1, r1, lsl #12
  408338:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40833c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  408340:	d002      	beq.n	408348 <__adddf3+0x70>
  408342:	4240      	negs	r0, r0
  408344:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  408348:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40834c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  408350:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  408354:	d002      	beq.n	40835c <__adddf3+0x84>
  408356:	4252      	negs	r2, r2
  408358:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40835c:	ea94 0f05 	teq	r4, r5
  408360:	f000 80a7 	beq.w	4084b2 <__adddf3+0x1da>
  408364:	f1a4 0401 	sub.w	r4, r4, #1
  408368:	f1d5 0e20 	rsbs	lr, r5, #32
  40836c:	db0d      	blt.n	40838a <__adddf3+0xb2>
  40836e:	fa02 fc0e 	lsl.w	ip, r2, lr
  408372:	fa22 f205 	lsr.w	r2, r2, r5
  408376:	1880      	adds	r0, r0, r2
  408378:	f141 0100 	adc.w	r1, r1, #0
  40837c:	fa03 f20e 	lsl.w	r2, r3, lr
  408380:	1880      	adds	r0, r0, r2
  408382:	fa43 f305 	asr.w	r3, r3, r5
  408386:	4159      	adcs	r1, r3
  408388:	e00e      	b.n	4083a8 <__adddf3+0xd0>
  40838a:	f1a5 0520 	sub.w	r5, r5, #32
  40838e:	f10e 0e20 	add.w	lr, lr, #32
  408392:	2a01      	cmp	r2, #1
  408394:	fa03 fc0e 	lsl.w	ip, r3, lr
  408398:	bf28      	it	cs
  40839a:	f04c 0c02 	orrcs.w	ip, ip, #2
  40839e:	fa43 f305 	asr.w	r3, r3, r5
  4083a2:	18c0      	adds	r0, r0, r3
  4083a4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  4083a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4083ac:	d507      	bpl.n	4083be <__adddf3+0xe6>
  4083ae:	f04f 0e00 	mov.w	lr, #0
  4083b2:	f1dc 0c00 	rsbs	ip, ip, #0
  4083b6:	eb7e 0000 	sbcs.w	r0, lr, r0
  4083ba:	eb6e 0101 	sbc.w	r1, lr, r1
  4083be:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4083c2:	d31b      	bcc.n	4083fc <__adddf3+0x124>
  4083c4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  4083c8:	d30c      	bcc.n	4083e4 <__adddf3+0x10c>
  4083ca:	0849      	lsrs	r1, r1, #1
  4083cc:	ea5f 0030 	movs.w	r0, r0, rrx
  4083d0:	ea4f 0c3c 	mov.w	ip, ip, rrx
  4083d4:	f104 0401 	add.w	r4, r4, #1
  4083d8:	ea4f 5244 	mov.w	r2, r4, lsl #21
  4083dc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  4083e0:	f080 809a 	bcs.w	408518 <__adddf3+0x240>
  4083e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4083e8:	bf08      	it	eq
  4083ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4083ee:	f150 0000 	adcs.w	r0, r0, #0
  4083f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4083f6:	ea41 0105 	orr.w	r1, r1, r5
  4083fa:	bd30      	pop	{r4, r5, pc}
  4083fc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  408400:	4140      	adcs	r0, r0
  408402:	eb41 0101 	adc.w	r1, r1, r1
  408406:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40840a:	f1a4 0401 	sub.w	r4, r4, #1
  40840e:	d1e9      	bne.n	4083e4 <__adddf3+0x10c>
  408410:	f091 0f00 	teq	r1, #0
  408414:	bf04      	itt	eq
  408416:	4601      	moveq	r1, r0
  408418:	2000      	moveq	r0, #0
  40841a:	fab1 f381 	clz	r3, r1
  40841e:	bf08      	it	eq
  408420:	3320      	addeq	r3, #32
  408422:	f1a3 030b 	sub.w	r3, r3, #11
  408426:	f1b3 0220 	subs.w	r2, r3, #32
  40842a:	da0c      	bge.n	408446 <__adddf3+0x16e>
  40842c:	320c      	adds	r2, #12
  40842e:	dd08      	ble.n	408442 <__adddf3+0x16a>
  408430:	f102 0c14 	add.w	ip, r2, #20
  408434:	f1c2 020c 	rsb	r2, r2, #12
  408438:	fa01 f00c 	lsl.w	r0, r1, ip
  40843c:	fa21 f102 	lsr.w	r1, r1, r2
  408440:	e00c      	b.n	40845c <__adddf3+0x184>
  408442:	f102 0214 	add.w	r2, r2, #20
  408446:	bfd8      	it	le
  408448:	f1c2 0c20 	rsble	ip, r2, #32
  40844c:	fa01 f102 	lsl.w	r1, r1, r2
  408450:	fa20 fc0c 	lsr.w	ip, r0, ip
  408454:	bfdc      	itt	le
  408456:	ea41 010c 	orrle.w	r1, r1, ip
  40845a:	4090      	lslle	r0, r2
  40845c:	1ae4      	subs	r4, r4, r3
  40845e:	bfa2      	ittt	ge
  408460:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  408464:	4329      	orrge	r1, r5
  408466:	bd30      	popge	{r4, r5, pc}
  408468:	ea6f 0404 	mvn.w	r4, r4
  40846c:	3c1f      	subs	r4, #31
  40846e:	da1c      	bge.n	4084aa <__adddf3+0x1d2>
  408470:	340c      	adds	r4, #12
  408472:	dc0e      	bgt.n	408492 <__adddf3+0x1ba>
  408474:	f104 0414 	add.w	r4, r4, #20
  408478:	f1c4 0220 	rsb	r2, r4, #32
  40847c:	fa20 f004 	lsr.w	r0, r0, r4
  408480:	fa01 f302 	lsl.w	r3, r1, r2
  408484:	ea40 0003 	orr.w	r0, r0, r3
  408488:	fa21 f304 	lsr.w	r3, r1, r4
  40848c:	ea45 0103 	orr.w	r1, r5, r3
  408490:	bd30      	pop	{r4, r5, pc}
  408492:	f1c4 040c 	rsb	r4, r4, #12
  408496:	f1c4 0220 	rsb	r2, r4, #32
  40849a:	fa20 f002 	lsr.w	r0, r0, r2
  40849e:	fa01 f304 	lsl.w	r3, r1, r4
  4084a2:	ea40 0003 	orr.w	r0, r0, r3
  4084a6:	4629      	mov	r1, r5
  4084a8:	bd30      	pop	{r4, r5, pc}
  4084aa:	fa21 f004 	lsr.w	r0, r1, r4
  4084ae:	4629      	mov	r1, r5
  4084b0:	bd30      	pop	{r4, r5, pc}
  4084b2:	f094 0f00 	teq	r4, #0
  4084b6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  4084ba:	bf06      	itte	eq
  4084bc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  4084c0:	3401      	addeq	r4, #1
  4084c2:	3d01      	subne	r5, #1
  4084c4:	e74e      	b.n	408364 <__adddf3+0x8c>
  4084c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4084ca:	bf18      	it	ne
  4084cc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4084d0:	d029      	beq.n	408526 <__adddf3+0x24e>
  4084d2:	ea94 0f05 	teq	r4, r5
  4084d6:	bf08      	it	eq
  4084d8:	ea90 0f02 	teqeq	r0, r2
  4084dc:	d005      	beq.n	4084ea <__adddf3+0x212>
  4084de:	ea54 0c00 	orrs.w	ip, r4, r0
  4084e2:	bf04      	itt	eq
  4084e4:	4619      	moveq	r1, r3
  4084e6:	4610      	moveq	r0, r2
  4084e8:	bd30      	pop	{r4, r5, pc}
  4084ea:	ea91 0f03 	teq	r1, r3
  4084ee:	bf1e      	ittt	ne
  4084f0:	2100      	movne	r1, #0
  4084f2:	2000      	movne	r0, #0
  4084f4:	bd30      	popne	{r4, r5, pc}
  4084f6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  4084fa:	d105      	bne.n	408508 <__adddf3+0x230>
  4084fc:	0040      	lsls	r0, r0, #1
  4084fe:	4149      	adcs	r1, r1
  408500:	bf28      	it	cs
  408502:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  408506:	bd30      	pop	{r4, r5, pc}
  408508:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40850c:	bf3c      	itt	cc
  40850e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  408512:	bd30      	popcc	{r4, r5, pc}
  408514:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  408518:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40851c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  408520:	f04f 0000 	mov.w	r0, #0
  408524:	bd30      	pop	{r4, r5, pc}
  408526:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40852a:	bf1a      	itte	ne
  40852c:	4619      	movne	r1, r3
  40852e:	4610      	movne	r0, r2
  408530:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  408534:	bf1c      	itt	ne
  408536:	460b      	movne	r3, r1
  408538:	4602      	movne	r2, r0
  40853a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40853e:	bf06      	itte	eq
  408540:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  408544:	ea91 0f03 	teqeq	r1, r3
  408548:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40854c:	bd30      	pop	{r4, r5, pc}
  40854e:	bf00      	nop

00408550 <__aeabi_ui2d>:
  408550:	f090 0f00 	teq	r0, #0
  408554:	bf04      	itt	eq
  408556:	2100      	moveq	r1, #0
  408558:	4770      	bxeq	lr
  40855a:	b530      	push	{r4, r5, lr}
  40855c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  408560:	f104 0432 	add.w	r4, r4, #50	; 0x32
  408564:	f04f 0500 	mov.w	r5, #0
  408568:	f04f 0100 	mov.w	r1, #0
  40856c:	e750      	b.n	408410 <__adddf3+0x138>
  40856e:	bf00      	nop

00408570 <__aeabi_i2d>:
  408570:	f090 0f00 	teq	r0, #0
  408574:	bf04      	itt	eq
  408576:	2100      	moveq	r1, #0
  408578:	4770      	bxeq	lr
  40857a:	b530      	push	{r4, r5, lr}
  40857c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  408580:	f104 0432 	add.w	r4, r4, #50	; 0x32
  408584:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  408588:	bf48      	it	mi
  40858a:	4240      	negmi	r0, r0
  40858c:	f04f 0100 	mov.w	r1, #0
  408590:	e73e      	b.n	408410 <__adddf3+0x138>
  408592:	bf00      	nop

00408594 <__aeabi_f2d>:
  408594:	0042      	lsls	r2, r0, #1
  408596:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40859a:	ea4f 0131 	mov.w	r1, r1, rrx
  40859e:	ea4f 7002 	mov.w	r0, r2, lsl #28
  4085a2:	bf1f      	itttt	ne
  4085a4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  4085a8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4085ac:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  4085b0:	4770      	bxne	lr
  4085b2:	f092 0f00 	teq	r2, #0
  4085b6:	bf14      	ite	ne
  4085b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4085bc:	4770      	bxeq	lr
  4085be:	b530      	push	{r4, r5, lr}
  4085c0:	f44f 7460 	mov.w	r4, #896	; 0x380
  4085c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4085c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4085cc:	e720      	b.n	408410 <__adddf3+0x138>
  4085ce:	bf00      	nop

004085d0 <__aeabi_ul2d>:
  4085d0:	ea50 0201 	orrs.w	r2, r0, r1
  4085d4:	bf08      	it	eq
  4085d6:	4770      	bxeq	lr
  4085d8:	b530      	push	{r4, r5, lr}
  4085da:	f04f 0500 	mov.w	r5, #0
  4085de:	e00a      	b.n	4085f6 <__aeabi_l2d+0x16>

004085e0 <__aeabi_l2d>:
  4085e0:	ea50 0201 	orrs.w	r2, r0, r1
  4085e4:	bf08      	it	eq
  4085e6:	4770      	bxeq	lr
  4085e8:	b530      	push	{r4, r5, lr}
  4085ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4085ee:	d502      	bpl.n	4085f6 <__aeabi_l2d+0x16>
  4085f0:	4240      	negs	r0, r0
  4085f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4085f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4085fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4085fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  408602:	f43f aedc 	beq.w	4083be <__adddf3+0xe6>
  408606:	f04f 0203 	mov.w	r2, #3
  40860a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40860e:	bf18      	it	ne
  408610:	3203      	addne	r2, #3
  408612:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  408616:	bf18      	it	ne
  408618:	3203      	addne	r2, #3
  40861a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40861e:	f1c2 0320 	rsb	r3, r2, #32
  408622:	fa00 fc03 	lsl.w	ip, r0, r3
  408626:	fa20 f002 	lsr.w	r0, r0, r2
  40862a:	fa01 fe03 	lsl.w	lr, r1, r3
  40862e:	ea40 000e 	orr.w	r0, r0, lr
  408632:	fa21 f102 	lsr.w	r1, r1, r2
  408636:	4414      	add	r4, r2
  408638:	e6c1      	b.n	4083be <__adddf3+0xe6>
  40863a:	bf00      	nop

0040863c <__aeabi_dmul>:
  40863c:	b570      	push	{r4, r5, r6, lr}
  40863e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  408642:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  408646:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40864a:	bf1d      	ittte	ne
  40864c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  408650:	ea94 0f0c 	teqne	r4, ip
  408654:	ea95 0f0c 	teqne	r5, ip
  408658:	f000 f8de 	bleq	408818 <__aeabi_dmul+0x1dc>
  40865c:	442c      	add	r4, r5
  40865e:	ea81 0603 	eor.w	r6, r1, r3
  408662:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  408666:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40866a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40866e:	bf18      	it	ne
  408670:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  408674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408678:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40867c:	d038      	beq.n	4086f0 <__aeabi_dmul+0xb4>
  40867e:	fba0 ce02 	umull	ip, lr, r0, r2
  408682:	f04f 0500 	mov.w	r5, #0
  408686:	fbe1 e502 	umlal	lr, r5, r1, r2
  40868a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40868e:	fbe0 e503 	umlal	lr, r5, r0, r3
  408692:	f04f 0600 	mov.w	r6, #0
  408696:	fbe1 5603 	umlal	r5, r6, r1, r3
  40869a:	f09c 0f00 	teq	ip, #0
  40869e:	bf18      	it	ne
  4086a0:	f04e 0e01 	orrne.w	lr, lr, #1
  4086a4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  4086a8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  4086ac:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  4086b0:	d204      	bcs.n	4086bc <__aeabi_dmul+0x80>
  4086b2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  4086b6:	416d      	adcs	r5, r5
  4086b8:	eb46 0606 	adc.w	r6, r6, r6
  4086bc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  4086c0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  4086c4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  4086c8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  4086cc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  4086d0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4086d4:	bf88      	it	hi
  4086d6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4086da:	d81e      	bhi.n	40871a <__aeabi_dmul+0xde>
  4086dc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  4086e0:	bf08      	it	eq
  4086e2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  4086e6:	f150 0000 	adcs.w	r0, r0, #0
  4086ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4086ee:	bd70      	pop	{r4, r5, r6, pc}
  4086f0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4086f4:	ea46 0101 	orr.w	r1, r6, r1
  4086f8:	ea40 0002 	orr.w	r0, r0, r2
  4086fc:	ea81 0103 	eor.w	r1, r1, r3
  408700:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  408704:	bfc2      	ittt	gt
  408706:	ebd4 050c 	rsbsgt	r5, r4, ip
  40870a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40870e:	bd70      	popgt	{r4, r5, r6, pc}
  408710:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408714:	f04f 0e00 	mov.w	lr, #0
  408718:	3c01      	subs	r4, #1
  40871a:	f300 80ab 	bgt.w	408874 <__aeabi_dmul+0x238>
  40871e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  408722:	bfde      	ittt	le
  408724:	2000      	movle	r0, #0
  408726:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40872a:	bd70      	pople	{r4, r5, r6, pc}
  40872c:	f1c4 0400 	rsb	r4, r4, #0
  408730:	3c20      	subs	r4, #32
  408732:	da35      	bge.n	4087a0 <__aeabi_dmul+0x164>
  408734:	340c      	adds	r4, #12
  408736:	dc1b      	bgt.n	408770 <__aeabi_dmul+0x134>
  408738:	f104 0414 	add.w	r4, r4, #20
  40873c:	f1c4 0520 	rsb	r5, r4, #32
  408740:	fa00 f305 	lsl.w	r3, r0, r5
  408744:	fa20 f004 	lsr.w	r0, r0, r4
  408748:	fa01 f205 	lsl.w	r2, r1, r5
  40874c:	ea40 0002 	orr.w	r0, r0, r2
  408750:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  408754:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  408758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40875c:	fa21 f604 	lsr.w	r6, r1, r4
  408760:	eb42 0106 	adc.w	r1, r2, r6
  408764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  408768:	bf08      	it	eq
  40876a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40876e:	bd70      	pop	{r4, r5, r6, pc}
  408770:	f1c4 040c 	rsb	r4, r4, #12
  408774:	f1c4 0520 	rsb	r5, r4, #32
  408778:	fa00 f304 	lsl.w	r3, r0, r4
  40877c:	fa20 f005 	lsr.w	r0, r0, r5
  408780:	fa01 f204 	lsl.w	r2, r1, r4
  408784:	ea40 0002 	orr.w	r0, r0, r2
  408788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40878c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  408790:	f141 0100 	adc.w	r1, r1, #0
  408794:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  408798:	bf08      	it	eq
  40879a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40879e:	bd70      	pop	{r4, r5, r6, pc}
  4087a0:	f1c4 0520 	rsb	r5, r4, #32
  4087a4:	fa00 f205 	lsl.w	r2, r0, r5
  4087a8:	ea4e 0e02 	orr.w	lr, lr, r2
  4087ac:	fa20 f304 	lsr.w	r3, r0, r4
  4087b0:	fa01 f205 	lsl.w	r2, r1, r5
  4087b4:	ea43 0302 	orr.w	r3, r3, r2
  4087b8:	fa21 f004 	lsr.w	r0, r1, r4
  4087bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4087c0:	fa21 f204 	lsr.w	r2, r1, r4
  4087c4:	ea20 0002 	bic.w	r0, r0, r2
  4087c8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  4087cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4087d0:	bf08      	it	eq
  4087d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4087d6:	bd70      	pop	{r4, r5, r6, pc}
  4087d8:	f094 0f00 	teq	r4, #0
  4087dc:	d10f      	bne.n	4087fe <__aeabi_dmul+0x1c2>
  4087de:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  4087e2:	0040      	lsls	r0, r0, #1
  4087e4:	eb41 0101 	adc.w	r1, r1, r1
  4087e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4087ec:	bf08      	it	eq
  4087ee:	3c01      	subeq	r4, #1
  4087f0:	d0f7      	beq.n	4087e2 <__aeabi_dmul+0x1a6>
  4087f2:	ea41 0106 	orr.w	r1, r1, r6
  4087f6:	f095 0f00 	teq	r5, #0
  4087fa:	bf18      	it	ne
  4087fc:	4770      	bxne	lr
  4087fe:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  408802:	0052      	lsls	r2, r2, #1
  408804:	eb43 0303 	adc.w	r3, r3, r3
  408808:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40880c:	bf08      	it	eq
  40880e:	3d01      	subeq	r5, #1
  408810:	d0f7      	beq.n	408802 <__aeabi_dmul+0x1c6>
  408812:	ea43 0306 	orr.w	r3, r3, r6
  408816:	4770      	bx	lr
  408818:	ea94 0f0c 	teq	r4, ip
  40881c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  408820:	bf18      	it	ne
  408822:	ea95 0f0c 	teqne	r5, ip
  408826:	d00c      	beq.n	408842 <__aeabi_dmul+0x206>
  408828:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40882c:	bf18      	it	ne
  40882e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  408832:	d1d1      	bne.n	4087d8 <__aeabi_dmul+0x19c>
  408834:	ea81 0103 	eor.w	r1, r1, r3
  408838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40883c:	f04f 0000 	mov.w	r0, #0
  408840:	bd70      	pop	{r4, r5, r6, pc}
  408842:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  408846:	bf06      	itte	eq
  408848:	4610      	moveq	r0, r2
  40884a:	4619      	moveq	r1, r3
  40884c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  408850:	d019      	beq.n	408886 <__aeabi_dmul+0x24a>
  408852:	ea94 0f0c 	teq	r4, ip
  408856:	d102      	bne.n	40885e <__aeabi_dmul+0x222>
  408858:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40885c:	d113      	bne.n	408886 <__aeabi_dmul+0x24a>
  40885e:	ea95 0f0c 	teq	r5, ip
  408862:	d105      	bne.n	408870 <__aeabi_dmul+0x234>
  408864:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  408868:	bf1c      	itt	ne
  40886a:	4610      	movne	r0, r2
  40886c:	4619      	movne	r1, r3
  40886e:	d10a      	bne.n	408886 <__aeabi_dmul+0x24a>
  408870:	ea81 0103 	eor.w	r1, r1, r3
  408874:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408878:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40887c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  408880:	f04f 0000 	mov.w	r0, #0
  408884:	bd70      	pop	{r4, r5, r6, pc}
  408886:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40888a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40888e:	bd70      	pop	{r4, r5, r6, pc}

00408890 <__aeabi_ddiv>:
  408890:	b570      	push	{r4, r5, r6, lr}
  408892:	f04f 0cff 	mov.w	ip, #255	; 0xff
  408896:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40889a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40889e:	bf1d      	ittte	ne
  4088a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4088a4:	ea94 0f0c 	teqne	r4, ip
  4088a8:	ea95 0f0c 	teqne	r5, ip
  4088ac:	f000 f8a7 	bleq	4089fe <__aeabi_ddiv+0x16e>
  4088b0:	eba4 0405 	sub.w	r4, r4, r5
  4088b4:	ea81 0e03 	eor.w	lr, r1, r3
  4088b8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4088bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4088c0:	f000 8088 	beq.w	4089d4 <__aeabi_ddiv+0x144>
  4088c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4088c8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4088cc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  4088d0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  4088d4:	ea4f 2202 	mov.w	r2, r2, lsl #8
  4088d8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  4088dc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  4088e0:	ea4f 2600 	mov.w	r6, r0, lsl #8
  4088e4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4088e8:	429d      	cmp	r5, r3
  4088ea:	bf08      	it	eq
  4088ec:	4296      	cmpeq	r6, r2
  4088ee:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4088f2:	f504 7440 	add.w	r4, r4, #768	; 0x300
  4088f6:	d202      	bcs.n	4088fe <__aeabi_ddiv+0x6e>
  4088f8:	085b      	lsrs	r3, r3, #1
  4088fa:	ea4f 0232 	mov.w	r2, r2, rrx
  4088fe:	1ab6      	subs	r6, r6, r2
  408900:	eb65 0503 	sbc.w	r5, r5, r3
  408904:	085b      	lsrs	r3, r3, #1
  408906:	ea4f 0232 	mov.w	r2, r2, rrx
  40890a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40890e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  408912:	ebb6 0e02 	subs.w	lr, r6, r2
  408916:	eb75 0e03 	sbcs.w	lr, r5, r3
  40891a:	bf22      	ittt	cs
  40891c:	1ab6      	subcs	r6, r6, r2
  40891e:	4675      	movcs	r5, lr
  408920:	ea40 000c 	orrcs.w	r0, r0, ip
  408924:	085b      	lsrs	r3, r3, #1
  408926:	ea4f 0232 	mov.w	r2, r2, rrx
  40892a:	ebb6 0e02 	subs.w	lr, r6, r2
  40892e:	eb75 0e03 	sbcs.w	lr, r5, r3
  408932:	bf22      	ittt	cs
  408934:	1ab6      	subcs	r6, r6, r2
  408936:	4675      	movcs	r5, lr
  408938:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40893c:	085b      	lsrs	r3, r3, #1
  40893e:	ea4f 0232 	mov.w	r2, r2, rrx
  408942:	ebb6 0e02 	subs.w	lr, r6, r2
  408946:	eb75 0e03 	sbcs.w	lr, r5, r3
  40894a:	bf22      	ittt	cs
  40894c:	1ab6      	subcs	r6, r6, r2
  40894e:	4675      	movcs	r5, lr
  408950:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  408954:	085b      	lsrs	r3, r3, #1
  408956:	ea4f 0232 	mov.w	r2, r2, rrx
  40895a:	ebb6 0e02 	subs.w	lr, r6, r2
  40895e:	eb75 0e03 	sbcs.w	lr, r5, r3
  408962:	bf22      	ittt	cs
  408964:	1ab6      	subcs	r6, r6, r2
  408966:	4675      	movcs	r5, lr
  408968:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40896c:	ea55 0e06 	orrs.w	lr, r5, r6
  408970:	d018      	beq.n	4089a4 <__aeabi_ddiv+0x114>
  408972:	ea4f 1505 	mov.w	r5, r5, lsl #4
  408976:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40897a:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40897e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  408982:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  408986:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40898a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40898e:	d1c0      	bne.n	408912 <__aeabi_ddiv+0x82>
  408990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408994:	d10b      	bne.n	4089ae <__aeabi_ddiv+0x11e>
  408996:	ea41 0100 	orr.w	r1, r1, r0
  40899a:	f04f 0000 	mov.w	r0, #0
  40899e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  4089a2:	e7b6      	b.n	408912 <__aeabi_ddiv+0x82>
  4089a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4089a8:	bf04      	itt	eq
  4089aa:	4301      	orreq	r1, r0
  4089ac:	2000      	moveq	r0, #0
  4089ae:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4089b2:	bf88      	it	hi
  4089b4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4089b8:	f63f aeaf 	bhi.w	40871a <__aeabi_dmul+0xde>
  4089bc:	ebb5 0c03 	subs.w	ip, r5, r3
  4089c0:	bf04      	itt	eq
  4089c2:	ebb6 0c02 	subseq.w	ip, r6, r2
  4089c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4089ca:	f150 0000 	adcs.w	r0, r0, #0
  4089ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4089d2:	bd70      	pop	{r4, r5, r6, pc}
  4089d4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4089d8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4089dc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  4089e0:	bfc2      	ittt	gt
  4089e2:	ebd4 050c 	rsbsgt	r5, r4, ip
  4089e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4089ea:	bd70      	popgt	{r4, r5, r6, pc}
  4089ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4089f0:	f04f 0e00 	mov.w	lr, #0
  4089f4:	3c01      	subs	r4, #1
  4089f6:	e690      	b.n	40871a <__aeabi_dmul+0xde>
  4089f8:	ea45 0e06 	orr.w	lr, r5, r6
  4089fc:	e68d      	b.n	40871a <__aeabi_dmul+0xde>
  4089fe:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  408a02:	ea94 0f0c 	teq	r4, ip
  408a06:	bf08      	it	eq
  408a08:	ea95 0f0c 	teqeq	r5, ip
  408a0c:	f43f af3b 	beq.w	408886 <__aeabi_dmul+0x24a>
  408a10:	ea94 0f0c 	teq	r4, ip
  408a14:	d10a      	bne.n	408a2c <__aeabi_ddiv+0x19c>
  408a16:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  408a1a:	f47f af34 	bne.w	408886 <__aeabi_dmul+0x24a>
  408a1e:	ea95 0f0c 	teq	r5, ip
  408a22:	f47f af25 	bne.w	408870 <__aeabi_dmul+0x234>
  408a26:	4610      	mov	r0, r2
  408a28:	4619      	mov	r1, r3
  408a2a:	e72c      	b.n	408886 <__aeabi_dmul+0x24a>
  408a2c:	ea95 0f0c 	teq	r5, ip
  408a30:	d106      	bne.n	408a40 <__aeabi_ddiv+0x1b0>
  408a32:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  408a36:	f43f aefd 	beq.w	408834 <__aeabi_dmul+0x1f8>
  408a3a:	4610      	mov	r0, r2
  408a3c:	4619      	mov	r1, r3
  408a3e:	e722      	b.n	408886 <__aeabi_dmul+0x24a>
  408a40:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  408a44:	bf18      	it	ne
  408a46:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  408a4a:	f47f aec5 	bne.w	4087d8 <__aeabi_dmul+0x19c>
  408a4e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  408a52:	f47f af0d 	bne.w	408870 <__aeabi_dmul+0x234>
  408a56:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  408a5a:	f47f aeeb 	bne.w	408834 <__aeabi_dmul+0x1f8>
  408a5e:	e712      	b.n	408886 <__aeabi_dmul+0x24a>

00408a60 <__gedf2>:
  408a60:	f04f 3cff 	mov.w	ip, #4294967295
  408a64:	e006      	b.n	408a74 <__cmpdf2+0x4>
  408a66:	bf00      	nop

00408a68 <__ledf2>:
  408a68:	f04f 0c01 	mov.w	ip, #1
  408a6c:	e002      	b.n	408a74 <__cmpdf2+0x4>
  408a6e:	bf00      	nop

00408a70 <__cmpdf2>:
  408a70:	f04f 0c01 	mov.w	ip, #1
  408a74:	f84d cd04 	str.w	ip, [sp, #-4]!
  408a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408a84:	bf18      	it	ne
  408a86:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  408a8a:	d01b      	beq.n	408ac4 <__cmpdf2+0x54>
  408a8c:	b001      	add	sp, #4
  408a8e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  408a92:	bf0c      	ite	eq
  408a94:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  408a98:	ea91 0f03 	teqne	r1, r3
  408a9c:	bf02      	ittt	eq
  408a9e:	ea90 0f02 	teqeq	r0, r2
  408aa2:	2000      	moveq	r0, #0
  408aa4:	4770      	bxeq	lr
  408aa6:	f110 0f00 	cmn.w	r0, #0
  408aaa:	ea91 0f03 	teq	r1, r3
  408aae:	bf58      	it	pl
  408ab0:	4299      	cmppl	r1, r3
  408ab2:	bf08      	it	eq
  408ab4:	4290      	cmpeq	r0, r2
  408ab6:	bf2c      	ite	cs
  408ab8:	17d8      	asrcs	r0, r3, #31
  408aba:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  408abe:	f040 0001 	orr.w	r0, r0, #1
  408ac2:	4770      	bx	lr
  408ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408acc:	d102      	bne.n	408ad4 <__cmpdf2+0x64>
  408ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  408ad2:	d107      	bne.n	408ae4 <__cmpdf2+0x74>
  408ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408adc:	d1d6      	bne.n	408a8c <__cmpdf2+0x1c>
  408ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  408ae2:	d0d3      	beq.n	408a8c <__cmpdf2+0x1c>
  408ae4:	f85d 0b04 	ldr.w	r0, [sp], #4
  408ae8:	4770      	bx	lr
  408aea:	bf00      	nop

00408aec <__aeabi_cdrcmple>:
  408aec:	4684      	mov	ip, r0
  408aee:	4610      	mov	r0, r2
  408af0:	4662      	mov	r2, ip
  408af2:	468c      	mov	ip, r1
  408af4:	4619      	mov	r1, r3
  408af6:	4663      	mov	r3, ip
  408af8:	e000      	b.n	408afc <__aeabi_cdcmpeq>
  408afa:	bf00      	nop

00408afc <__aeabi_cdcmpeq>:
  408afc:	b501      	push	{r0, lr}
  408afe:	f7ff ffb7 	bl	408a70 <__cmpdf2>
  408b02:	2800      	cmp	r0, #0
  408b04:	bf48      	it	mi
  408b06:	f110 0f00 	cmnmi.w	r0, #0
  408b0a:	bd01      	pop	{r0, pc}

00408b0c <__aeabi_dcmpeq>:
  408b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
  408b10:	f7ff fff4 	bl	408afc <__aeabi_cdcmpeq>
  408b14:	bf0c      	ite	eq
  408b16:	2001      	moveq	r0, #1
  408b18:	2000      	movne	r0, #0
  408b1a:	f85d fb08 	ldr.w	pc, [sp], #8
  408b1e:	bf00      	nop

00408b20 <__aeabi_dcmplt>:
  408b20:	f84d ed08 	str.w	lr, [sp, #-8]!
  408b24:	f7ff ffea 	bl	408afc <__aeabi_cdcmpeq>
  408b28:	bf34      	ite	cc
  408b2a:	2001      	movcc	r0, #1
  408b2c:	2000      	movcs	r0, #0
  408b2e:	f85d fb08 	ldr.w	pc, [sp], #8
  408b32:	bf00      	nop

00408b34 <__aeabi_dcmple>:
  408b34:	f84d ed08 	str.w	lr, [sp, #-8]!
  408b38:	f7ff ffe0 	bl	408afc <__aeabi_cdcmpeq>
  408b3c:	bf94      	ite	ls
  408b3e:	2001      	movls	r0, #1
  408b40:	2000      	movhi	r0, #0
  408b42:	f85d fb08 	ldr.w	pc, [sp], #8
  408b46:	bf00      	nop

00408b48 <__aeabi_dcmpge>:
  408b48:	f84d ed08 	str.w	lr, [sp, #-8]!
  408b4c:	f7ff ffce 	bl	408aec <__aeabi_cdrcmple>
  408b50:	bf94      	ite	ls
  408b52:	2001      	movls	r0, #1
  408b54:	2000      	movhi	r0, #0
  408b56:	f85d fb08 	ldr.w	pc, [sp], #8
  408b5a:	bf00      	nop

00408b5c <__aeabi_dcmpgt>:
  408b5c:	f84d ed08 	str.w	lr, [sp, #-8]!
  408b60:	f7ff ffc4 	bl	408aec <__aeabi_cdrcmple>
  408b64:	bf34      	ite	cc
  408b66:	2001      	movcc	r0, #1
  408b68:	2000      	movcs	r0, #0
  408b6a:	f85d fb08 	ldr.w	pc, [sp], #8
  408b6e:	bf00      	nop

00408b70 <__aeabi_dcmpun>:
  408b70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408b78:	d102      	bne.n	408b80 <__aeabi_dcmpun+0x10>
  408b7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  408b7e:	d10a      	bne.n	408b96 <__aeabi_dcmpun+0x26>
  408b80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408b88:	d102      	bne.n	408b90 <__aeabi_dcmpun+0x20>
  408b8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  408b8e:	d102      	bne.n	408b96 <__aeabi_dcmpun+0x26>
  408b90:	f04f 0000 	mov.w	r0, #0
  408b94:	4770      	bx	lr
  408b96:	f04f 0001 	mov.w	r0, #1
  408b9a:	4770      	bx	lr

00408b9c <__aeabi_d2iz>:
  408b9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  408ba0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  408ba4:	d215      	bcs.n	408bd2 <__aeabi_d2iz+0x36>
  408ba6:	d511      	bpl.n	408bcc <__aeabi_d2iz+0x30>
  408ba8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  408bac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  408bb0:	d912      	bls.n	408bd8 <__aeabi_d2iz+0x3c>
  408bb2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  408bb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  408bba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  408bbe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  408bc2:	fa23 f002 	lsr.w	r0, r3, r2
  408bc6:	bf18      	it	ne
  408bc8:	4240      	negne	r0, r0
  408bca:	4770      	bx	lr
  408bcc:	f04f 0000 	mov.w	r0, #0
  408bd0:	4770      	bx	lr
  408bd2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  408bd6:	d105      	bne.n	408be4 <__aeabi_d2iz+0x48>
  408bd8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  408bdc:	bf08      	it	eq
  408bde:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  408be2:	4770      	bx	lr
  408be4:	f04f 0000 	mov.w	r0, #0
  408be8:	4770      	bx	lr
  408bea:	bf00      	nop

00408bec <__aeabi_uldivmod>:
  408bec:	b953      	cbnz	r3, 408c04 <__aeabi_uldivmod+0x18>
  408bee:	b94a      	cbnz	r2, 408c04 <__aeabi_uldivmod+0x18>
  408bf0:	2900      	cmp	r1, #0
  408bf2:	bf08      	it	eq
  408bf4:	2800      	cmpeq	r0, #0
  408bf6:	bf1c      	itt	ne
  408bf8:	f04f 31ff 	movne.w	r1, #4294967295
  408bfc:	f04f 30ff 	movne.w	r0, #4294967295
  408c00:	f000 b97a 	b.w	408ef8 <__aeabi_idiv0>
  408c04:	f1ad 0c08 	sub.w	ip, sp, #8
  408c08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  408c0c:	f000 f806 	bl	408c1c <__udivmoddi4>
  408c10:	f8dd e004 	ldr.w	lr, [sp, #4]
  408c14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  408c18:	b004      	add	sp, #16
  408c1a:	4770      	bx	lr

00408c1c <__udivmoddi4>:
  408c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408c20:	468c      	mov	ip, r1
  408c22:	460d      	mov	r5, r1
  408c24:	4604      	mov	r4, r0
  408c26:	9e08      	ldr	r6, [sp, #32]
  408c28:	2b00      	cmp	r3, #0
  408c2a:	d151      	bne.n	408cd0 <__udivmoddi4+0xb4>
  408c2c:	428a      	cmp	r2, r1
  408c2e:	4617      	mov	r7, r2
  408c30:	d96d      	bls.n	408d0e <__udivmoddi4+0xf2>
  408c32:	fab2 fe82 	clz	lr, r2
  408c36:	f1be 0f00 	cmp.w	lr, #0
  408c3a:	d00b      	beq.n	408c54 <__udivmoddi4+0x38>
  408c3c:	f1ce 0c20 	rsb	ip, lr, #32
  408c40:	fa01 f50e 	lsl.w	r5, r1, lr
  408c44:	fa20 fc0c 	lsr.w	ip, r0, ip
  408c48:	fa02 f70e 	lsl.w	r7, r2, lr
  408c4c:	ea4c 0c05 	orr.w	ip, ip, r5
  408c50:	fa00 f40e 	lsl.w	r4, r0, lr
  408c54:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  408c58:	0c25      	lsrs	r5, r4, #16
  408c5a:	fbbc f8fa 	udiv	r8, ip, sl
  408c5e:	fa1f f987 	uxth.w	r9, r7
  408c62:	fb0a cc18 	mls	ip, sl, r8, ip
  408c66:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  408c6a:	fb08 f309 	mul.w	r3, r8, r9
  408c6e:	42ab      	cmp	r3, r5
  408c70:	d90a      	bls.n	408c88 <__udivmoddi4+0x6c>
  408c72:	19ed      	adds	r5, r5, r7
  408c74:	f108 32ff 	add.w	r2, r8, #4294967295
  408c78:	f080 8123 	bcs.w	408ec2 <__udivmoddi4+0x2a6>
  408c7c:	42ab      	cmp	r3, r5
  408c7e:	f240 8120 	bls.w	408ec2 <__udivmoddi4+0x2a6>
  408c82:	f1a8 0802 	sub.w	r8, r8, #2
  408c86:	443d      	add	r5, r7
  408c88:	1aed      	subs	r5, r5, r3
  408c8a:	b2a4      	uxth	r4, r4
  408c8c:	fbb5 f0fa 	udiv	r0, r5, sl
  408c90:	fb0a 5510 	mls	r5, sl, r0, r5
  408c94:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  408c98:	fb00 f909 	mul.w	r9, r0, r9
  408c9c:	45a1      	cmp	r9, r4
  408c9e:	d909      	bls.n	408cb4 <__udivmoddi4+0x98>
  408ca0:	19e4      	adds	r4, r4, r7
  408ca2:	f100 33ff 	add.w	r3, r0, #4294967295
  408ca6:	f080 810a 	bcs.w	408ebe <__udivmoddi4+0x2a2>
  408caa:	45a1      	cmp	r9, r4
  408cac:	f240 8107 	bls.w	408ebe <__udivmoddi4+0x2a2>
  408cb0:	3802      	subs	r0, #2
  408cb2:	443c      	add	r4, r7
  408cb4:	eba4 0409 	sub.w	r4, r4, r9
  408cb8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  408cbc:	2100      	movs	r1, #0
  408cbe:	2e00      	cmp	r6, #0
  408cc0:	d061      	beq.n	408d86 <__udivmoddi4+0x16a>
  408cc2:	fa24 f40e 	lsr.w	r4, r4, lr
  408cc6:	2300      	movs	r3, #0
  408cc8:	6034      	str	r4, [r6, #0]
  408cca:	6073      	str	r3, [r6, #4]
  408ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408cd0:	428b      	cmp	r3, r1
  408cd2:	d907      	bls.n	408ce4 <__udivmoddi4+0xc8>
  408cd4:	2e00      	cmp	r6, #0
  408cd6:	d054      	beq.n	408d82 <__udivmoddi4+0x166>
  408cd8:	2100      	movs	r1, #0
  408cda:	e886 0021 	stmia.w	r6, {r0, r5}
  408cde:	4608      	mov	r0, r1
  408ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408ce4:	fab3 f183 	clz	r1, r3
  408ce8:	2900      	cmp	r1, #0
  408cea:	f040 808e 	bne.w	408e0a <__udivmoddi4+0x1ee>
  408cee:	42ab      	cmp	r3, r5
  408cf0:	d302      	bcc.n	408cf8 <__udivmoddi4+0xdc>
  408cf2:	4282      	cmp	r2, r0
  408cf4:	f200 80fa 	bhi.w	408eec <__udivmoddi4+0x2d0>
  408cf8:	1a84      	subs	r4, r0, r2
  408cfa:	eb65 0503 	sbc.w	r5, r5, r3
  408cfe:	2001      	movs	r0, #1
  408d00:	46ac      	mov	ip, r5
  408d02:	2e00      	cmp	r6, #0
  408d04:	d03f      	beq.n	408d86 <__udivmoddi4+0x16a>
  408d06:	e886 1010 	stmia.w	r6, {r4, ip}
  408d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408d0e:	b912      	cbnz	r2, 408d16 <__udivmoddi4+0xfa>
  408d10:	2701      	movs	r7, #1
  408d12:	fbb7 f7f2 	udiv	r7, r7, r2
  408d16:	fab7 fe87 	clz	lr, r7
  408d1a:	f1be 0f00 	cmp.w	lr, #0
  408d1e:	d134      	bne.n	408d8a <__udivmoddi4+0x16e>
  408d20:	1beb      	subs	r3, r5, r7
  408d22:	0c3a      	lsrs	r2, r7, #16
  408d24:	fa1f fc87 	uxth.w	ip, r7
  408d28:	2101      	movs	r1, #1
  408d2a:	fbb3 f8f2 	udiv	r8, r3, r2
  408d2e:	0c25      	lsrs	r5, r4, #16
  408d30:	fb02 3318 	mls	r3, r2, r8, r3
  408d34:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  408d38:	fb0c f308 	mul.w	r3, ip, r8
  408d3c:	42ab      	cmp	r3, r5
  408d3e:	d907      	bls.n	408d50 <__udivmoddi4+0x134>
  408d40:	19ed      	adds	r5, r5, r7
  408d42:	f108 30ff 	add.w	r0, r8, #4294967295
  408d46:	d202      	bcs.n	408d4e <__udivmoddi4+0x132>
  408d48:	42ab      	cmp	r3, r5
  408d4a:	f200 80d1 	bhi.w	408ef0 <__udivmoddi4+0x2d4>
  408d4e:	4680      	mov	r8, r0
  408d50:	1aed      	subs	r5, r5, r3
  408d52:	b2a3      	uxth	r3, r4
  408d54:	fbb5 f0f2 	udiv	r0, r5, r2
  408d58:	fb02 5510 	mls	r5, r2, r0, r5
  408d5c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  408d60:	fb0c fc00 	mul.w	ip, ip, r0
  408d64:	45a4      	cmp	ip, r4
  408d66:	d907      	bls.n	408d78 <__udivmoddi4+0x15c>
  408d68:	19e4      	adds	r4, r4, r7
  408d6a:	f100 33ff 	add.w	r3, r0, #4294967295
  408d6e:	d202      	bcs.n	408d76 <__udivmoddi4+0x15a>
  408d70:	45a4      	cmp	ip, r4
  408d72:	f200 80b8 	bhi.w	408ee6 <__udivmoddi4+0x2ca>
  408d76:	4618      	mov	r0, r3
  408d78:	eba4 040c 	sub.w	r4, r4, ip
  408d7c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  408d80:	e79d      	b.n	408cbe <__udivmoddi4+0xa2>
  408d82:	4631      	mov	r1, r6
  408d84:	4630      	mov	r0, r6
  408d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408d8a:	f1ce 0420 	rsb	r4, lr, #32
  408d8e:	fa05 f30e 	lsl.w	r3, r5, lr
  408d92:	fa07 f70e 	lsl.w	r7, r7, lr
  408d96:	fa20 f804 	lsr.w	r8, r0, r4
  408d9a:	0c3a      	lsrs	r2, r7, #16
  408d9c:	fa25 f404 	lsr.w	r4, r5, r4
  408da0:	ea48 0803 	orr.w	r8, r8, r3
  408da4:	fbb4 f1f2 	udiv	r1, r4, r2
  408da8:	ea4f 4518 	mov.w	r5, r8, lsr #16
  408dac:	fb02 4411 	mls	r4, r2, r1, r4
  408db0:	fa1f fc87 	uxth.w	ip, r7
  408db4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  408db8:	fb01 f30c 	mul.w	r3, r1, ip
  408dbc:	42ab      	cmp	r3, r5
  408dbe:	fa00 f40e 	lsl.w	r4, r0, lr
  408dc2:	d909      	bls.n	408dd8 <__udivmoddi4+0x1bc>
  408dc4:	19ed      	adds	r5, r5, r7
  408dc6:	f101 30ff 	add.w	r0, r1, #4294967295
  408dca:	f080 808a 	bcs.w	408ee2 <__udivmoddi4+0x2c6>
  408dce:	42ab      	cmp	r3, r5
  408dd0:	f240 8087 	bls.w	408ee2 <__udivmoddi4+0x2c6>
  408dd4:	3902      	subs	r1, #2
  408dd6:	443d      	add	r5, r7
  408dd8:	1aeb      	subs	r3, r5, r3
  408dda:	fa1f f588 	uxth.w	r5, r8
  408dde:	fbb3 f0f2 	udiv	r0, r3, r2
  408de2:	fb02 3310 	mls	r3, r2, r0, r3
  408de6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  408dea:	fb00 f30c 	mul.w	r3, r0, ip
  408dee:	42ab      	cmp	r3, r5
  408df0:	d907      	bls.n	408e02 <__udivmoddi4+0x1e6>
  408df2:	19ed      	adds	r5, r5, r7
  408df4:	f100 38ff 	add.w	r8, r0, #4294967295
  408df8:	d26f      	bcs.n	408eda <__udivmoddi4+0x2be>
  408dfa:	42ab      	cmp	r3, r5
  408dfc:	d96d      	bls.n	408eda <__udivmoddi4+0x2be>
  408dfe:	3802      	subs	r0, #2
  408e00:	443d      	add	r5, r7
  408e02:	1aeb      	subs	r3, r5, r3
  408e04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  408e08:	e78f      	b.n	408d2a <__udivmoddi4+0x10e>
  408e0a:	f1c1 0720 	rsb	r7, r1, #32
  408e0e:	fa22 f807 	lsr.w	r8, r2, r7
  408e12:	408b      	lsls	r3, r1
  408e14:	fa05 f401 	lsl.w	r4, r5, r1
  408e18:	ea48 0303 	orr.w	r3, r8, r3
  408e1c:	fa20 fe07 	lsr.w	lr, r0, r7
  408e20:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  408e24:	40fd      	lsrs	r5, r7
  408e26:	ea4e 0e04 	orr.w	lr, lr, r4
  408e2a:	fbb5 f9fc 	udiv	r9, r5, ip
  408e2e:	ea4f 441e 	mov.w	r4, lr, lsr #16
  408e32:	fb0c 5519 	mls	r5, ip, r9, r5
  408e36:	fa1f f883 	uxth.w	r8, r3
  408e3a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  408e3e:	fb09 f408 	mul.w	r4, r9, r8
  408e42:	42ac      	cmp	r4, r5
  408e44:	fa02 f201 	lsl.w	r2, r2, r1
  408e48:	fa00 fa01 	lsl.w	sl, r0, r1
  408e4c:	d908      	bls.n	408e60 <__udivmoddi4+0x244>
  408e4e:	18ed      	adds	r5, r5, r3
  408e50:	f109 30ff 	add.w	r0, r9, #4294967295
  408e54:	d243      	bcs.n	408ede <__udivmoddi4+0x2c2>
  408e56:	42ac      	cmp	r4, r5
  408e58:	d941      	bls.n	408ede <__udivmoddi4+0x2c2>
  408e5a:	f1a9 0902 	sub.w	r9, r9, #2
  408e5e:	441d      	add	r5, r3
  408e60:	1b2d      	subs	r5, r5, r4
  408e62:	fa1f fe8e 	uxth.w	lr, lr
  408e66:	fbb5 f0fc 	udiv	r0, r5, ip
  408e6a:	fb0c 5510 	mls	r5, ip, r0, r5
  408e6e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  408e72:	fb00 f808 	mul.w	r8, r0, r8
  408e76:	45a0      	cmp	r8, r4
  408e78:	d907      	bls.n	408e8a <__udivmoddi4+0x26e>
  408e7a:	18e4      	adds	r4, r4, r3
  408e7c:	f100 35ff 	add.w	r5, r0, #4294967295
  408e80:	d229      	bcs.n	408ed6 <__udivmoddi4+0x2ba>
  408e82:	45a0      	cmp	r8, r4
  408e84:	d927      	bls.n	408ed6 <__udivmoddi4+0x2ba>
  408e86:	3802      	subs	r0, #2
  408e88:	441c      	add	r4, r3
  408e8a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  408e8e:	eba4 0408 	sub.w	r4, r4, r8
  408e92:	fba0 8902 	umull	r8, r9, r0, r2
  408e96:	454c      	cmp	r4, r9
  408e98:	46c6      	mov	lr, r8
  408e9a:	464d      	mov	r5, r9
  408e9c:	d315      	bcc.n	408eca <__udivmoddi4+0x2ae>
  408e9e:	d012      	beq.n	408ec6 <__udivmoddi4+0x2aa>
  408ea0:	b156      	cbz	r6, 408eb8 <__udivmoddi4+0x29c>
  408ea2:	ebba 030e 	subs.w	r3, sl, lr
  408ea6:	eb64 0405 	sbc.w	r4, r4, r5
  408eaa:	fa04 f707 	lsl.w	r7, r4, r7
  408eae:	40cb      	lsrs	r3, r1
  408eb0:	431f      	orrs	r7, r3
  408eb2:	40cc      	lsrs	r4, r1
  408eb4:	6037      	str	r7, [r6, #0]
  408eb6:	6074      	str	r4, [r6, #4]
  408eb8:	2100      	movs	r1, #0
  408eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408ebe:	4618      	mov	r0, r3
  408ec0:	e6f8      	b.n	408cb4 <__udivmoddi4+0x98>
  408ec2:	4690      	mov	r8, r2
  408ec4:	e6e0      	b.n	408c88 <__udivmoddi4+0x6c>
  408ec6:	45c2      	cmp	sl, r8
  408ec8:	d2ea      	bcs.n	408ea0 <__udivmoddi4+0x284>
  408eca:	ebb8 0e02 	subs.w	lr, r8, r2
  408ece:	eb69 0503 	sbc.w	r5, r9, r3
  408ed2:	3801      	subs	r0, #1
  408ed4:	e7e4      	b.n	408ea0 <__udivmoddi4+0x284>
  408ed6:	4628      	mov	r0, r5
  408ed8:	e7d7      	b.n	408e8a <__udivmoddi4+0x26e>
  408eda:	4640      	mov	r0, r8
  408edc:	e791      	b.n	408e02 <__udivmoddi4+0x1e6>
  408ede:	4681      	mov	r9, r0
  408ee0:	e7be      	b.n	408e60 <__udivmoddi4+0x244>
  408ee2:	4601      	mov	r1, r0
  408ee4:	e778      	b.n	408dd8 <__udivmoddi4+0x1bc>
  408ee6:	3802      	subs	r0, #2
  408ee8:	443c      	add	r4, r7
  408eea:	e745      	b.n	408d78 <__udivmoddi4+0x15c>
  408eec:	4608      	mov	r0, r1
  408eee:	e708      	b.n	408d02 <__udivmoddi4+0xe6>
  408ef0:	f1a8 0802 	sub.w	r8, r8, #2
  408ef4:	443d      	add	r5, r7
  408ef6:	e72b      	b.n	408d50 <__udivmoddi4+0x134>

00408ef8 <__aeabi_idiv0>:
  408ef8:	4770      	bx	lr
  408efa:	bf00      	nop

00408efc <p_uc_charset10x14>:
	...
  408f18:	ccff ccff 0000 0000 0000 0000 0000 0000     ................
  408f28:	00f0 00f0 0000 0000 00f0 00f0 0000 0000     ................
  408f38:	c00c c00c fcff fcff c00c c00c fcff fcff     ................
  408f48:	c00c c00c 600c 701e 303f 3033 fcff fcff     .....`.p?030....
  408f58:	3033 f033 e039 c018 0060 0cf0 3cf0 f060     303.9...`....<`.
  408f68:	c003 000f 183c 3cf0 3cc0 1800 f03c f87f     ....<..<.<..<...
  408f78:	1cc3 8cc7 cccf ecdc 7878 3030 fc00 cc00     ........xx00....
  408f88:	0000 0000 0000 0044 00ec 00f8 0070 0000     ......D.....p...
	...
  408fa0:	c00f f03f 7878 1860 0cc0 0cc0 0000 0000     ..?.xx`.........
  408fb0:	0000 0000 0cc0 0cc0 1860 7878 f03f c00f     ........`.xx?...
  408fc0:	0000 0000 600c e00e c007 8003 f83f f83f     .....`......?.?.
  408fd0:	8003 c007 e00e 600c 0003 0003 0003 0003     .......`........
  408fe0:	f03f f03f 0003 0003 0003 0003 4400 ec00     ?.?..........D..
  408ff0:	f800 7000 0000 0000 0000 0000 0000 0000     ...p............
  409000:	0003 0003 0003 0003 0003 0003 0003 0003     ................
  409010:	0003 0003 1800 3c00 3c00 1800 0000 0000     .......<.<......
	...
  409028:	0000 0c00 3c00 f000 c003 000f 003c 00f0     .....<......<...
  409038:	00c0 0000 f03f f87f fce0 ccc1 8cc3 0cc7     ....?...........
  409048:	0cce 1cfc f87f f03f 0000 0000 0c30 0c70     ......?.....0.p.
  409058:	fcff fcff 0c00 0c00 0000 0000 0c30 1c70     ............0.p.
  409068:	3ce0 7cc0 ecc0 ccc1 8cc3 0ce7 0c7e 0c3c     .<.|........~.<.
  409078:	3030 3870 1ce0 0cc0 0cc0 0cc3 0cc3 1ce3     00p8............
  409088:	f87f f03c c003 c007 c00e c01c c038 c070     ..<.........8.p.
  409098:	fcff fcff c000 c000 30fc 38fc 1ccc 0ccc     .........0.8....
  4090a8:	0ccc 0ccc 0ccc 1cce f8c7 f0c3 f03f f87f     ............?...
  4090b8:	1ce3 0cc3 0cc3 0cc3 0cc3 9ce3 f871 f030     ............q.0.
  4090c8:	00c0 00c0 00c0 00c0 fcc3 fcc7 00ce 00dc     ................
  4090d8:	00f8 00f0 f03c f87f 9ce7 0cc3 0cc3 0cc3     ....<...........
  4090e8:	0cc3 9ce7 f87f f03c 003c 007e 0ce7 0cc3     ......<.<.~.....
  4090f8:	1cc3 38c3 70c3 e0e7 c07f 803f 0000 0000     ...8.p....?.....
  409108:	0000 6018 f03c f03c 6018 0000 0000 0000     ...`<.<..`......
  409118:	0000 0000 0000 4418 ec3c f83c 7018 0000     .......D<.<..p..
  409128:	0000 0000 0000 0003 8007 c00f e01c 7038     ..............8p
  409138:	3870 1ce0 0cc0 0000 c00c c00c c00c c00c     p8..............
  409148:	c00c c00c c00c c00c c00c c00c 0000 0cc0     ................
  409158:	1ce0 3870 7038 e01c c00f 8007 0003 0000     ..p88p..........
  409168:	0030 0070 00e0 00c0 ecc1 ecc3 00c3 00e6     0.p.............
  409178:	007e 003c f030 f871 9ce3 0cc3 fcc3 fcc3     ~.<.0.q.........
  409188:	0cc0 1ce0 f87f f03f fc3f fc7f c0e0 c0c0     ......?.?.......
  409198:	c0c0 c0c0 c0c0 c0e0 fc7f fc3f fcff fcff     ..........?.....
  4091a8:	0cc3 0cc3 0cc3 0cc3 0cc3 9ce7 f87f f03c     ..............<.
  4091b8:	f03f f87f 1ce0 0cc0 0cc0 0cc0 0cc0 1ce0     ?...............
  4091c8:	3870 3030 fcff fcff 0cc0 0cc0 0cc0 0cc0     p800............
  4091d8:	0cc0 1ce0 f87f f03f fcff fcff 0cc3 0cc3     ......?.........
  4091e8:	0cc3 0cc3 0cc3 0cc3 0cc0 0cc0 fcff fcff     ................
  4091f8:	00c3 00c3 00c3 00c3 00c3 00c3 00c0 00c0     ................
  409208:	f03f f87f 1ce0 0cc0 0cc0 0cc3 0cc3 1ce3     ?...............
  409218:	f873 f033 fcff fcff 0003 0003 0003 0003     s.3.............
  409228:	0003 0003 fcff fcff 0000 0000 0cc0 0cc0     ................
  409238:	fcff fcff 0cc0 0cc0 0000 0000 3000 3800     .............0.8
  409248:	1cc0 0cc0 0cc0 1cc0 f8ff f0ff 00c0 00c0     ................
  409258:	fcff fcff 8007 8007 c00f e01c 7038 3870     ............8pp8
  409268:	1ce0 0cc0 fcff fcff 0c00 0c00 0c00 0c00     ................
  409278:	0c00 0c00 0c00 0c00 fcff fcff 0070 0038     ............p.8.
  409288:	001f 001f 0038 0070 fcff fcff fcff fcff     ....8.p.........
  409298:	001c 000e 0007 8003 c001 e000 fcff fcff     ................
  4092a8:	f03f f87f 1ce0 0cc0 0cc0 0cc0 0cc0 1ce0     ?...............
  4092b8:	f87f f03f fcff fcff 00c3 00c3 00c3 00c3     ..?.............
  4092c8:	00c3 00e7 007e 003c f03f f87f 1ce0 0cc0     ....~.<.?.......
  4092d8:	ccc0 ecc0 7cc0 38e0 fc7f ec3f fcff fcff     .....|.8..?.....
  4092e8:	00c3 80c3 80c3 c0c3 c0c3 70e7 3c7e 1c3c     ...........p~<<.
  4092f8:	183c 1c7e 0ce7 0cc3 0cc3 0cc3 0cc3 9cc3     <.~.............
  409308:	f8e1 f060 00c0 00c0 00c0 00c0 fcff fcff     ..`.............
  409318:	00c0 00c0 00c0 00c0 f0ff f8ff 1c00 0c00     ................
  409328:	0c00 0c00 0c00 1c00 f8ff f0ff c0ff e0ff     ................
  409338:	7000 3800 1c00 1c00 3800 7000 e0ff c0ff     .p.8.....8.p....
  409348:	f0ff f8ff 1c00 3c00 f800 f800 3c00 1c00     .......<.....<..
  409358:	f8ff f0ff 3cf0 7cf8 e01c c00f 8007 8007     .....<.|........
  409368:	c00f e01c 7cf8 3cf0 00fc 00fe 0007 8003     .....|.<........
  409378:	fc01 fc01 8003 0007 00fe 00fc 3cc0 7cc0     .............<.|
  409388:	ecc0 ccc1 8cc3 0cc7 0cce 0cdc 0cf8 0cf0     ................
  409398:	0000 0000 fcff fcff 0cc0 0cc0 0cc0 0000     ................
  4093a8:	0000 0000 0030 0030 000c 000c 0003 0003     ....0.0.........
  4093b8:	c000 c000 3000 3000 0000 0000 0cc0 0cc0     .....0.0........
  4093c8:	0cc0 fcff fcff 0000 0000 0000 000c 001c     ................
  4093d8:	0038 0070 00e0 00e0 0070 0038 001c 000c     8.p.....p.8.....
  4093e8:	0c00 0c00 0c00 0c00 0c00 0c00 0c00 0c00     ................
  4093f8:	0c00 0c00 0000 0000 00c0 00e0 0070 0038     ............p.8.
  409408:	0018 0000 0000 0000 3000 7806 fc0e cc0c     .........0.x....
  409418:	cc0c cc0c cc0c cc0e fc07 f803 fcff fcff     ................
  409428:	0c03 0c03 0c03 0c03 0c03 9c03 f801 f000     ................
  409438:	f003 f807 1c0e 0c0c 0c0c 0c0c 0c0c 1c0e     ................
  409448:	3807 3003 f000 f801 9c03 0c03 0c03 0c03     .8.0............
  409458:	0c03 0c03 fcff fcff f003 f807 dc0e cc0c     ................
  409468:	cc0c cc0c cc0c dc0e d807 9003 0000 0003     ................
  409478:	fc3f fc7f 00e3 00e3 0070 0030 0000 0000     ?.......p.0.....
  409488:	1803 9c07 cc0f cc0c cc0c cc0c cc0c dc0c     ................
  409498:	f80f f007 fcff fcff 0003 0003 0003 0003     ................
  4094a8:	8003 fc01 fc00 0000 0000 0000 0000 0000     ................
  4094b8:	fc1b fc1b 0000 0000 0000 0000 0000 3000     ...............0
  4094c8:	3800 1c00 0c00 0c00 1c00 f8cf f0cf 0000     .8..............
  4094d8:	0000 fcff fcff e000 e001 f003 3807 1c0e     .............8..
  4094e8:	0c0c 0000 0000 0000 0cc0 0cc0 fcff fcff     ................
  4094f8:	0c00 0c00 0000 0000 fc0f fc0f 000e 0007     ................
  409508:	c003 c003 0007 000e fc0f fc0f fc0f fc0f     ................
  409518:	0003 0007 000e 000c 000c 000e fc07 fc03     ................
  409528:	f003 f807 1c0e 0c0c 0c0c 0c0c 0c0c 1c0e     ................
  409538:	f807 f003 fc0f fc0f c00c c00c c00c c00c     ................
  409548:	c00c c00f 8007 0003 0003 8007 c00f c00c     ................
  409558:	c00c c00c c00c c00c fc0f fc0f fc0f fc0f     ................
  409568:	8003 0007 000e 000c 000c 000e 0007 0003     ................
  409578:	1803 9c07 cc0f cc0c cc0c cc0c cc0c fc0c     ................
  409588:	780e 3006 0000 000c 000c f0ff f8ff 1c0c     .x.0............
  409598:	1c0c 380c 300c 0000 f00f f80f 1c00 0c00     ...8.0..........
  4095a8:	0c00 0c00 0c00 1c00 f80f f00f c00f e00f     ................
  4095b8:	7000 3800 1c00 1c00 3800 7000 e00f c00f     .p.8.....8.p....
  4095c8:	f00f f80f 1c00 1c00 f800 f800 1c00 1c00     ................
  4095d8:	f80f f00f 0c0c 1c0e 3807 f003 e001 e001     .........8......
  4095e8:	f003 3807 1c0e 0c0c 000c 000e 0c07 9c03     ...8............
  4095f8:	f801 f001 8003 0007 000e 000c 0c0c 1c0c     ................
  409608:	3c0c 7c0c ec0c cc0d 8c0f 0c0f 0c0e 0c0c     .<.|............
  409618:	0000 0003 8007 f03f f87c 1ce0 0cc0 0cc0     ......?.|.......
  409628:	0cc0 0000 0c03 0c03 fc3f fc7f 0ce3 0cc3     ........?.......
  409638:	0cc0 0ce0 0c70 0c30 0000 0cc0 0cc0 0cc0     ....p.0.........
  409648:	1ce0 f87c f03f 8007 0003 0000 00c0 00c0     ..|.?...........
  409658:	00c0 00c0 00c0 00c0 00c0 00c0 00c0 00c0     ................
  409668:	fcff fcff fcff fcff fcff fcff fcff fcff     ................
  409678:	fcff fcff 000d 0a05 004b 0000 1932 0000     ........K...2...
  409688:	008b 0e00 0008 3280 0205 030a 2003 0f02     .......2..... ..
  409698:	0a0f 0000 0000 1818 2020 0000 0000 0a00     ........  ......
  4096a8:	0000 0202 0000 1818 0000 0003 0000 0000     ................
  4096b8:	0002 1801 1e1e 1e1e 1e1e 1e1e 1e1e 1e1e     ................
  4096c8:	1e1e 0000 0000 0000 0000 0000 0000 0000     ................
  4096d8:	0000 0000 6425 3a20 6425 6420 2065 6425     ....%d :%d de %d
  4096e8:	6d20 6e69 002e 0000 4341 4241 554f 4120      min....ACABOU A
  4096f8:	4c20 5641 4741 4d45 5320 5545 4320 524f      LAVAGEM SEU COR
  409708:	4f4e 0000 0d0a 616d 5458 756f 6863 6420     NO....maXTouch d
  409718:	7461 2061 5355 5241 2054 7274 6e61 6d73     ata USART transm
  409728:	7469 6574 0a72 000d 724e 203a 3125 2c64     itter...Nr: %1d,
  409738:	5820 253a 6434 202c 3a59 3425 2c64 5320      X:%4d, Y:%4d, S
  409748:	6174 7574 3a73 7830 3225 2078 6f63 766e     tatus:0x%2x conv
  409758:	5820 253a 6433 5920 253a 6433 0d0a 0000      X:%3d Y:%3d....
  409768:	6425 0020                                   %d .

0040976c <_global_impure_ptr>:
  40976c:	0018 2040 4e49 0046 6e69 0066 414e 004e     ..@ INF.inf.NAN.
  40977c:	616e 006e 3130 3332 3534 3736 3938 4241     nan.0123456789AB
  40978c:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  40979c:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  4097ac:	296c 0000 0030 0000                         l)..0...

004097b4 <blanks.7223>:
  4097b4:	2020 2020 2020 2020 2020 2020 2020 2020                     

004097c4 <zeroes.7224>:
  4097c4:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

004097d4 <blanks.7217>:
  4097d4:	2020 2020 2020 2020 2020 2020 2020 2020                     

004097e4 <zeroes.7218>:
  4097e4:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  4097f4:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
  409804:	0043 0000 4f50 4953 0058 0000               C...POSIX...

00409810 <__mprec_bigtens>:
  409810:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  409820:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  409830:	bf3c 7f73 4fdd 7515                         <.s..O.u

00409838 <__mprec_tens>:
  409838:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  409848:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  409858:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  409868:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  409878:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  409888:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  409898:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  4098a8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  4098b8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  4098c8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  4098d8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  4098e8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  4098f8:	9db4 79d9 7843 44ea                         ...yCx.D

00409900 <p05.6055>:
  409900:	0005 0000 0019 0000 007d 0000               ........}...

0040990c <_ctype_>:
  40990c:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  40991c:	2020 2020 2020 2020 2020 2020 2020 2020                     
  40992c:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  40993c:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  40994c:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  40995c:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  40996c:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  40997c:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  40998c:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00409a10 <_init>:
  409a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409a12:	bf00      	nop
  409a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
  409a16:	bc08      	pop	{r3}
  409a18:	469e      	mov	lr, r3
  409a1a:	4770      	bx	lr

00409a1c <__init_array_start>:
  409a1c:	00405715 	.word	0x00405715

00409a20 <__frame_dummy_init_array_entry>:
  409a20:	0040018d                                ..@.

00409a24 <_fini>:
  409a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409a26:	bf00      	nop
  409a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
  409a2a:	bc08      	pop	{r3}
  409a2c:	469e      	mov	lr, r3
  409a2e:	4770      	bx	lr

00409a30 <__fini_array_start>:
  409a30:	00400169 	.word	0x00400169

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <last_state.11268>:
20400010:	00ff 0000                                   ....

20400014 <_impure_ptr>:
20400014:	0018 2040                                   ..@ 

20400018 <impure_data>:
20400018:	0000 0000 0304 2040 036c 2040 03d4 2040     ......@ l.@ ..@ 
	...
204000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400440 <__malloc_av_>:
	...
20400448:	0440 2040 0440 2040 0448 2040 0448 2040     @.@ @.@ H.@ H.@ 
20400458:	0450 2040 0450 2040 0458 2040 0458 2040     P.@ P.@ X.@ X.@ 
20400468:	0460 2040 0460 2040 0468 2040 0468 2040     `.@ `.@ h.@ h.@ 
20400478:	0470 2040 0470 2040 0478 2040 0478 2040     p.@ p.@ x.@ x.@ 
20400488:	0480 2040 0480 2040 0488 2040 0488 2040     ..@ ..@ ..@ ..@ 
20400498:	0490 2040 0490 2040 0498 2040 0498 2040     ..@ ..@ ..@ ..@ 
204004a8:	04a0 2040 04a0 2040 04a8 2040 04a8 2040     ..@ ..@ ..@ ..@ 
204004b8:	04b0 2040 04b0 2040 04b8 2040 04b8 2040     ..@ ..@ ..@ ..@ 
204004c8:	04c0 2040 04c0 2040 04c8 2040 04c8 2040     ..@ ..@ ..@ ..@ 
204004d8:	04d0 2040 04d0 2040 04d8 2040 04d8 2040     ..@ ..@ ..@ ..@ 
204004e8:	04e0 2040 04e0 2040 04e8 2040 04e8 2040     ..@ ..@ ..@ ..@ 
204004f8:	04f0 2040 04f0 2040 04f8 2040 04f8 2040     ..@ ..@ ..@ ..@ 
20400508:	0500 2040 0500 2040 0508 2040 0508 2040     ..@ ..@ ..@ ..@ 
20400518:	0510 2040 0510 2040 0518 2040 0518 2040     ..@ ..@ ..@ ..@ 
20400528:	0520 2040 0520 2040 0528 2040 0528 2040      .@  .@ (.@ (.@ 
20400538:	0530 2040 0530 2040 0538 2040 0538 2040     0.@ 0.@ 8.@ 8.@ 
20400548:	0540 2040 0540 2040 0548 2040 0548 2040     @.@ @.@ H.@ H.@ 
20400558:	0550 2040 0550 2040 0558 2040 0558 2040     P.@ P.@ X.@ X.@ 
20400568:	0560 2040 0560 2040 0568 2040 0568 2040     `.@ `.@ h.@ h.@ 
20400578:	0570 2040 0570 2040 0578 2040 0578 2040     p.@ p.@ x.@ x.@ 
20400588:	0580 2040 0580 2040 0588 2040 0588 2040     ..@ ..@ ..@ ..@ 
20400598:	0590 2040 0590 2040 0598 2040 0598 2040     ..@ ..@ ..@ ..@ 
204005a8:	05a0 2040 05a0 2040 05a8 2040 05a8 2040     ..@ ..@ ..@ ..@ 
204005b8:	05b0 2040 05b0 2040 05b8 2040 05b8 2040     ..@ ..@ ..@ ..@ 
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 

20400848 <__malloc_sbrk_base>:
20400848:	ffff ffff                                   ....

2040084c <__malloc_trim_threshold>:
2040084c:	0000 0002                                   ....

20400850 <__atexit_recursive_mutex>:
20400850:	0e7c 2040                                   |.@ 

20400854 <__global_locale>:
20400854:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400874:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400894:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400914:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400934:	7fd5 0040 7139 0040 0000 0000 990c 0040     ..@.9q@.......@.
20400944:	96ec 0040 9790 0040 9790 0040 9790 0040     ..@...@...@...@.
20400954:	9790 0040 9790 0040 9790 0040 9790 0040     ..@...@...@...@.
20400964:	9790 0040 9790 0040 ffff ffff ffff ffff     ..@...@.........
20400974:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2040099c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
